require "../system/com.cr"
require "../foundation.cr"
require "../graphics/direct2d/common.cr"
require "../graphics/gdi.cr"
require "../globalization.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:dwrite.dll")]
{% else %}
@[Link("dwrite")]
{% end %}
lib LibWin32
  DWRITE_ALPHA_MAX = 255_u32
  FACILITY_DWRITE = 2200_u32
  DWRITE_ERR_BASE = 20480_u32
  DWRITE_E_REMOTEFONT = -2003283955_i32
  DWRITE_E_DOWNLOADCANCELLED = -2003283954_i32
  DWRITE_E_DOWNLOADFAILED = -2003283953_i32
  DWRITE_E_TOOMANYDOWNLOADS = -2003283952_i32


  enum DWRITE_FONT_AXIS_TAG : UInt32
    DWRITE_FONT_AXIS_TAG_WEIGHT = 1952999287
    DWRITE_FONT_AXIS_TAG_WIDTH = 1752458359
    DWRITE_FONT_AXIS_TAG_SLANT = 1953393779
    DWRITE_FONT_AXIS_TAG_OPTICAL_SIZE = 2054385775
    DWRITE_FONT_AXIS_TAG_ITALIC = 1818326121
  end

  enum DWRITE_MEASURING_MODE : Int32
    DWRITE_MEASURING_MODE_NATURAL = 0
    DWRITE_MEASURING_MODE_GDI_CLASSIC = 1
    DWRITE_MEASURING_MODE_GDI_NATURAL = 2
  end

  enum DWRITE_GLYPH_IMAGE_FORMATS : UInt32
    DWRITE_GLYPH_IMAGE_FORMATS_NONE = 0
    DWRITE_GLYPH_IMAGE_FORMATS_TRUETYPE = 1
    DWRITE_GLYPH_IMAGE_FORMATS_CFF = 2
    DWRITE_GLYPH_IMAGE_FORMATS_COLR = 4
    DWRITE_GLYPH_IMAGE_FORMATS_SVG = 8
    DWRITE_GLYPH_IMAGE_FORMATS_PNG = 16
    DWRITE_GLYPH_IMAGE_FORMATS_JPEG = 32
    DWRITE_GLYPH_IMAGE_FORMATS_TIFF = 64
    DWRITE_GLYPH_IMAGE_FORMATS_PREMULTIPLIED_B8G8R8A8 = 128
  end

  enum DWRITE_FONT_FILE_TYPE : Int32
    DWRITE_FONT_FILE_TYPE_UNKNOWN = 0
    DWRITE_FONT_FILE_TYPE_CFF = 1
    DWRITE_FONT_FILE_TYPE_TRUETYPE = 2
    DWRITE_FONT_FILE_TYPE_OPENTYPE_COLLECTION = 3
    DWRITE_FONT_FILE_TYPE_TYPE1_PFM = 4
    DWRITE_FONT_FILE_TYPE_TYPE1_PFB = 5
    DWRITE_FONT_FILE_TYPE_VECTOR = 6
    DWRITE_FONT_FILE_TYPE_BITMAP = 7
    DWRITE_FONT_FILE_TYPE_TRUETYPE_COLLECTION = 3
  end

  enum DWRITE_FONT_FACE_TYPE : Int32
    DWRITE_FONT_FACE_TYPE_CFF = 0
    DWRITE_FONT_FACE_TYPE_TRUETYPE = 1
    DWRITE_FONT_FACE_TYPE_OPENTYPE_COLLECTION = 2
    DWRITE_FONT_FACE_TYPE_TYPE1 = 3
    DWRITE_FONT_FACE_TYPE_VECTOR = 4
    DWRITE_FONT_FACE_TYPE_BITMAP = 5
    DWRITE_FONT_FACE_TYPE_UNKNOWN = 6
    DWRITE_FONT_FACE_TYPE_RAW_CFF = 7
    DWRITE_FONT_FACE_TYPE_TRUETYPE_COLLECTION = 2
  end

  enum DWRITE_FONT_SIMULATIONS : UInt32
    DWRITE_FONT_SIMULATIONS_NONE = 0
    DWRITE_FONT_SIMULATIONS_BOLD = 1
    DWRITE_FONT_SIMULATIONS_OBLIQUE = 2
  end

  enum DWRITE_FONT_WEIGHT : Int32
    DWRITE_FONT_WEIGHT_THIN = 100
    DWRITE_FONT_WEIGHT_EXTRA_LIGHT = 200
    DWRITE_FONT_WEIGHT_ULTRA_LIGHT = 200
    DWRITE_FONT_WEIGHT_LIGHT = 300
    DWRITE_FONT_WEIGHT_SEMI_LIGHT = 350
    DWRITE_FONT_WEIGHT_NORMAL = 400
    DWRITE_FONT_WEIGHT_REGULAR = 400
    DWRITE_FONT_WEIGHT_MEDIUM = 500
    DWRITE_FONT_WEIGHT_DEMI_BOLD = 600
    DWRITE_FONT_WEIGHT_SEMI_BOLD = 600
    DWRITE_FONT_WEIGHT_BOLD = 700
    DWRITE_FONT_WEIGHT_EXTRA_BOLD = 800
    DWRITE_FONT_WEIGHT_ULTRA_BOLD = 800
    DWRITE_FONT_WEIGHT_BLACK = 900
    DWRITE_FONT_WEIGHT_HEAVY = 900
    DWRITE_FONT_WEIGHT_EXTRA_BLACK = 950
    DWRITE_FONT_WEIGHT_ULTRA_BLACK = 950
  end

  enum DWRITE_FONT_STRETCH : Int32
    DWRITE_FONT_STRETCH_UNDEFINED = 0
    DWRITE_FONT_STRETCH_ULTRA_CONDENSED = 1
    DWRITE_FONT_STRETCH_EXTRA_CONDENSED = 2
    DWRITE_FONT_STRETCH_CONDENSED = 3
    DWRITE_FONT_STRETCH_SEMI_CONDENSED = 4
    DWRITE_FONT_STRETCH_NORMAL = 5
    DWRITE_FONT_STRETCH_MEDIUM = 5
    DWRITE_FONT_STRETCH_SEMI_EXPANDED = 6
    DWRITE_FONT_STRETCH_EXPANDED = 7
    DWRITE_FONT_STRETCH_EXTRA_EXPANDED = 8
    DWRITE_FONT_STRETCH_ULTRA_EXPANDED = 9
  end

  enum DWRITE_FONT_STYLE : Int32
    DWRITE_FONT_STYLE_NORMAL = 0
    DWRITE_FONT_STYLE_OBLIQUE = 1
    DWRITE_FONT_STYLE_ITALIC = 2
  end

  enum DWRITE_INFORMATIONAL_STRING_ID : Int32
    DWRITE_INFORMATIONAL_STRING_NONE = 0
    DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE = 1
    DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS = 2
    DWRITE_INFORMATIONAL_STRING_TRADEMARK = 3
    DWRITE_INFORMATIONAL_STRING_MANUFACTURER = 4
    DWRITE_INFORMATIONAL_STRING_DESIGNER = 5
    DWRITE_INFORMATIONAL_STRING_DESIGNER_URL = 6
    DWRITE_INFORMATIONAL_STRING_DESCRIPTION = 7
    DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL = 8
    DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION = 9
    DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL = 10
    DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES = 11
    DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES = 12
    DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_FAMILY_NAMES = 13
    DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_SUBFAMILY_NAMES = 14
    DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT = 15
    DWRITE_INFORMATIONAL_STRING_FULL_NAME = 16
    DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_NAME = 17
    DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_CID_NAME = 18
    DWRITE_INFORMATIONAL_STRING_WEIGHT_STRETCH_STYLE_FAMILY_NAME = 19
    DWRITE_INFORMATIONAL_STRING_DESIGN_SCRIPT_LANGUAGE_TAG = 20
    DWRITE_INFORMATIONAL_STRING_SUPPORTED_SCRIPT_LANGUAGE_TAG = 21
    DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES = 13
    DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES = 14
    DWRITE_INFORMATIONAL_STRING_WWS_FAMILY_NAME = 19
  end

  enum DWRITE_FACTORY_TYPE : Int32
    DWRITE_FACTORY_TYPE_SHARED = 0
    DWRITE_FACTORY_TYPE_ISOLATED = 1
  end

  enum DWRITE_PIXEL_GEOMETRY : Int32
    DWRITE_PIXEL_GEOMETRY_FLAT = 0
    DWRITE_PIXEL_GEOMETRY_RGB = 1
    DWRITE_PIXEL_GEOMETRY_BGR = 2
  end

  enum DWRITE_RENDERING_MODE : Int32
    DWRITE_RENDERING_MODE_DEFAULT = 0
    DWRITE_RENDERING_MODE_ALIASED = 1
    DWRITE_RENDERING_MODE_GDI_CLASSIC = 2
    DWRITE_RENDERING_MODE_GDI_NATURAL = 3
    DWRITE_RENDERING_MODE_NATURAL = 4
    DWRITE_RENDERING_MODE_NATURAL_SYMMETRIC = 5
    DWRITE_RENDERING_MODE_OUTLINE = 6
    DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC = 2
    DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL = 3
    DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL = 4
    DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC = 5
  end

  enum DWRITE_READING_DIRECTION : Int32
    DWRITE_READING_DIRECTION_LEFT_TO_RIGHT = 0
    DWRITE_READING_DIRECTION_RIGHT_TO_LEFT = 1
    DWRITE_READING_DIRECTION_TOP_TO_BOTTOM = 2
    DWRITE_READING_DIRECTION_BOTTOM_TO_TOP = 3
  end

  enum DWRITE_FLOW_DIRECTION : Int32
    DWRITE_FLOW_DIRECTION_TOP_TO_BOTTOM = 0
    DWRITE_FLOW_DIRECTION_BOTTOM_TO_TOP = 1
    DWRITE_FLOW_DIRECTION_LEFT_TO_RIGHT = 2
    DWRITE_FLOW_DIRECTION_RIGHT_TO_LEFT = 3
  end

  enum DWRITE_TEXT_ALIGNMENT : Int32
    DWRITE_TEXT_ALIGNMENT_LEADING = 0
    DWRITE_TEXT_ALIGNMENT_TRAILING = 1
    DWRITE_TEXT_ALIGNMENT_CENTER = 2
    DWRITE_TEXT_ALIGNMENT_JUSTIFIED = 3
  end

  enum DWRITE_PARAGRAPH_ALIGNMENT : Int32
    DWRITE_PARAGRAPH_ALIGNMENT_NEAR = 0
    DWRITE_PARAGRAPH_ALIGNMENT_FAR = 1
    DWRITE_PARAGRAPH_ALIGNMENT_CENTER = 2
  end

  enum DWRITE_WORD_WRAPPING : Int32
    DWRITE_WORD_WRAPPING_WRAP = 0
    DWRITE_WORD_WRAPPING_NO_WRAP = 1
    DWRITE_WORD_WRAPPING_EMERGENCY_BREAK = 2
    DWRITE_WORD_WRAPPING_WHOLE_WORD = 3
    DWRITE_WORD_WRAPPING_CHARACTER = 4
  end

  enum DWRITE_LINE_SPACING_METHOD : Int32
    DWRITE_LINE_SPACING_METHOD_DEFAULT = 0
    DWRITE_LINE_SPACING_METHOD_UNIFORM = 1
    DWRITE_LINE_SPACING_METHOD_PROPORTIONAL = 2
  end

  enum DWRITE_TRIMMING_GRANULARITY : Int32
    DWRITE_TRIMMING_GRANULARITY_NONE = 0
    DWRITE_TRIMMING_GRANULARITY_CHARACTER = 1
    DWRITE_TRIMMING_GRANULARITY_WORD = 2
  end

  enum DWRITE_FONT_FEATURE_TAG : UInt32
    DWRITE_FONT_FEATURE_TAG_ALTERNATIVE_FRACTIONS = 1668441697
    DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS_FROM_CAPITALS = 1668297315
    DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS_FROM_CAPITALS = 1668493923
    DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_ALTERNATES = 1953259875
    DWRITE_FONT_FEATURE_TAG_CASE_SENSITIVE_FORMS = 1702060387
    DWRITE_FONT_FEATURE_TAG_GLYPH_COMPOSITION_DECOMPOSITION = 1886217059
    DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_LIGATURES = 1734962275
    DWRITE_FONT_FEATURE_TAG_CAPITAL_SPACING = 1886613603
    DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_SWASH = 1752658787
    DWRITE_FONT_FEATURE_TAG_CURSIVE_POSITIONING = 1936880995
    DWRITE_FONT_FEATURE_TAG_DEFAULT = 1953261156
    DWRITE_FONT_FEATURE_TAG_DISCRETIONARY_LIGATURES = 1734962276
    DWRITE_FONT_FEATURE_TAG_EXPERT_FORMS = 1953527909
    DWRITE_FONT_FEATURE_TAG_FRACTIONS = 1667330662
    DWRITE_FONT_FEATURE_TAG_FULL_WIDTH = 1684633446
    DWRITE_FONT_FEATURE_TAG_HALF_FORMS = 1718378856
    DWRITE_FONT_FEATURE_TAG_HALANT_FORMS = 1852596584
    DWRITE_FONT_FEATURE_TAG_ALTERNATE_HALF_WIDTH = 1953259880
    DWRITE_FONT_FEATURE_TAG_HISTORICAL_FORMS = 1953720680
    DWRITE_FONT_FEATURE_TAG_HORIZONTAL_KANA_ALTERNATES = 1634626408
    DWRITE_FONT_FEATURE_TAG_HISTORICAL_LIGATURES = 1734962280
    DWRITE_FONT_FEATURE_TAG_HALF_WIDTH = 1684633448
    DWRITE_FONT_FEATURE_TAG_HOJO_KANJI_FORMS = 1869246312
    DWRITE_FONT_FEATURE_TAG_JIS04_FORMS = 875589738
    DWRITE_FONT_FEATURE_TAG_JIS78_FORMS = 943157354
    DWRITE_FONT_FEATURE_TAG_JIS83_FORMS = 859336810
    DWRITE_FONT_FEATURE_TAG_JIS90_FORMS = 809070698
    DWRITE_FONT_FEATURE_TAG_KERNING = 1852990827
    DWRITE_FONT_FEATURE_TAG_STANDARD_LIGATURES = 1634167148
    DWRITE_FONT_FEATURE_TAG_LINING_FIGURES = 1836412524
    DWRITE_FONT_FEATURE_TAG_LOCALIZED_FORMS = 1818455916
    DWRITE_FONT_FEATURE_TAG_MARK_POSITIONING = 1802658157
    DWRITE_FONT_FEATURE_TAG_MATHEMATICAL_GREEK = 1802659693
    DWRITE_FONT_FEATURE_TAG_MARK_TO_MARK_POSITIONING = 1802333037
    DWRITE_FONT_FEATURE_TAG_ALTERNATE_ANNOTATION_FORMS = 1953259886
    DWRITE_FONT_FEATURE_TAG_NLC_KANJI_FORMS = 1801677934
    DWRITE_FONT_FEATURE_TAG_OLD_STYLE_FIGURES = 1836412527
    DWRITE_FONT_FEATURE_TAG_ORDINALS = 1852076655
    DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_ALTERNATE_WIDTH = 1953259888
    DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS = 1885430640
    DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_FIGURES = 1836412528
    DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_WIDTHS = 1684633456
    DWRITE_FONT_FEATURE_TAG_QUARTER_WIDTHS = 1684633457
    DWRITE_FONT_FEATURE_TAG_REQUIRED_LIGATURES = 1734962290
    DWRITE_FONT_FEATURE_TAG_RUBY_NOTATION_FORMS = 2036495730
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_ALTERNATES = 1953259891
    DWRITE_FONT_FEATURE_TAG_SCIENTIFIC_INFERIORS = 1718511987
    DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS = 1885564275
    DWRITE_FONT_FEATURE_TAG_SIMPLIFIED_FORMS = 1819307379
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1 = 825258867
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_2 = 842036083
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_3 = 858813299
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_4 = 875590515
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_5 = 892367731
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_6 = 909144947
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_7 = 925922163
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_8 = 942699379
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_9 = 959476595
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_10 = 808547187
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_11 = 825324403
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_12 = 842101619
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_13 = 858878835
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_14 = 875656051
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_15 = 892433267
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_16 = 909210483
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_17 = 925987699
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_18 = 942764915
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_19 = 959542131
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_20 = 808612723
    DWRITE_FONT_FEATURE_TAG_SUBSCRIPT = 1935832435
    DWRITE_FONT_FEATURE_TAG_SUPERSCRIPT = 1936749939
    DWRITE_FONT_FEATURE_TAG_SWASH = 1752397683
    DWRITE_FONT_FEATURE_TAG_TITLING = 1819568500
    DWRITE_FONT_FEATURE_TAG_TRADITIONAL_NAME_FORMS = 1835101812
    DWRITE_FONT_FEATURE_TAG_TABULAR_FIGURES = 1836412532
    DWRITE_FONT_FEATURE_TAG_TRADITIONAL_FORMS = 1684107892
    DWRITE_FONT_FEATURE_TAG_THIRD_WIDTHS = 1684633460
    DWRITE_FONT_FEATURE_TAG_UNICASE = 1667853941
    DWRITE_FONT_FEATURE_TAG_VERTICAL_WRITING = 1953654134
    DWRITE_FONT_FEATURE_TAG_VERTICAL_ALTERNATES_AND_ROTATION = 846492278
    DWRITE_FONT_FEATURE_TAG_SLASHED_ZERO = 1869768058
  end

  enum DWRITE_SCRIPT_SHAPES : UInt32
    DWRITE_SCRIPT_SHAPES_DEFAULT = 0
    DWRITE_SCRIPT_SHAPES_NO_VISUAL = 1
  end

  enum DWRITE_BREAK_CONDITION : Int32
    DWRITE_BREAK_CONDITION_NEUTRAL = 0
    DWRITE_BREAK_CONDITION_CAN_BREAK = 1
    DWRITE_BREAK_CONDITION_MAY_NOT_BREAK = 2
    DWRITE_BREAK_CONDITION_MUST_BREAK = 3
  end

  enum DWRITE_NUMBER_SUBSTITUTION_METHOD : Int32
    DWRITE_NUMBER_SUBSTITUTION_METHOD_FROM_CULTURE = 0
    DWRITE_NUMBER_SUBSTITUTION_METHOD_CONTEXTUAL = 1
    DWRITE_NUMBER_SUBSTITUTION_METHOD_NONE = 2
    DWRITE_NUMBER_SUBSTITUTION_METHOD_NATIONAL = 3
    DWRITE_NUMBER_SUBSTITUTION_METHOD_TRADITIONAL = 4
  end

  enum DWRITE_TEXTURE_TYPE : Int32
    DWRITE_TEXTURE_ALIASED_1x1 = 0
    DWRITE_TEXTURE_CLEARTYPE_3x1 = 1
  end

  enum DWRITE_PANOSE_FAMILY : Int32
    DWRITE_PANOSE_FAMILY_ANY = 0
    DWRITE_PANOSE_FAMILY_NO_FIT = 1
    DWRITE_PANOSE_FAMILY_TEXT_DISPLAY = 2
    DWRITE_PANOSE_FAMILY_SCRIPT = 3
    DWRITE_PANOSE_FAMILY_DECORATIVE = 4
    DWRITE_PANOSE_FAMILY_SYMBOL = 5
    DWRITE_PANOSE_FAMILY_PICTORIAL = 5
  end

  enum DWRITE_PANOSE_SERIF_STYLE : Int32
    DWRITE_PANOSE_SERIF_STYLE_ANY = 0
    DWRITE_PANOSE_SERIF_STYLE_NO_FIT = 1
    DWRITE_PANOSE_SERIF_STYLE_COVE = 2
    DWRITE_PANOSE_SERIF_STYLE_OBTUSE_COVE = 3
    DWRITE_PANOSE_SERIF_STYLE_SQUARE_COVE = 4
    DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SQUARE_COVE = 5
    DWRITE_PANOSE_SERIF_STYLE_SQUARE = 6
    DWRITE_PANOSE_SERIF_STYLE_THIN = 7
    DWRITE_PANOSE_SERIF_STYLE_OVAL = 8
    DWRITE_PANOSE_SERIF_STYLE_EXAGGERATED = 9
    DWRITE_PANOSE_SERIF_STYLE_TRIANGLE = 10
    DWRITE_PANOSE_SERIF_STYLE_NORMAL_SANS = 11
    DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SANS = 12
    DWRITE_PANOSE_SERIF_STYLE_PERPENDICULAR_SANS = 13
    DWRITE_PANOSE_SERIF_STYLE_FLARED = 14
    DWRITE_PANOSE_SERIF_STYLE_ROUNDED = 15
    DWRITE_PANOSE_SERIF_STYLE_SCRIPT = 16
    DWRITE_PANOSE_SERIF_STYLE_PERP_SANS = 13
    DWRITE_PANOSE_SERIF_STYLE_BONE = 8
  end

  enum DWRITE_PANOSE_WEIGHT : Int32
    DWRITE_PANOSE_WEIGHT_ANY = 0
    DWRITE_PANOSE_WEIGHT_NO_FIT = 1
    DWRITE_PANOSE_WEIGHT_VERY_LIGHT = 2
    DWRITE_PANOSE_WEIGHT_LIGHT = 3
    DWRITE_PANOSE_WEIGHT_THIN = 4
    DWRITE_PANOSE_WEIGHT_BOOK = 5
    DWRITE_PANOSE_WEIGHT_MEDIUM = 6
    DWRITE_PANOSE_WEIGHT_DEMI = 7
    DWRITE_PANOSE_WEIGHT_BOLD = 8
    DWRITE_PANOSE_WEIGHT_HEAVY = 9
    DWRITE_PANOSE_WEIGHT_BLACK = 10
    DWRITE_PANOSE_WEIGHT_EXTRA_BLACK = 11
    DWRITE_PANOSE_WEIGHT_NORD = 11
  end

  enum DWRITE_PANOSE_PROPORTION : Int32
    DWRITE_PANOSE_PROPORTION_ANY = 0
    DWRITE_PANOSE_PROPORTION_NO_FIT = 1
    DWRITE_PANOSE_PROPORTION_OLD_STYLE = 2
    DWRITE_PANOSE_PROPORTION_MODERN = 3
    DWRITE_PANOSE_PROPORTION_EVEN_WIDTH = 4
    DWRITE_PANOSE_PROPORTION_EXPANDED = 5
    DWRITE_PANOSE_PROPORTION_CONDENSED = 6
    DWRITE_PANOSE_PROPORTION_VERY_EXPANDED = 7
    DWRITE_PANOSE_PROPORTION_VERY_CONDENSED = 8
    DWRITE_PANOSE_PROPORTION_MONOSPACED = 9
  end

  enum DWRITE_PANOSE_CONTRAST : Int32
    DWRITE_PANOSE_CONTRAST_ANY = 0
    DWRITE_PANOSE_CONTRAST_NO_FIT = 1
    DWRITE_PANOSE_CONTRAST_NONE = 2
    DWRITE_PANOSE_CONTRAST_VERY_LOW = 3
    DWRITE_PANOSE_CONTRAST_LOW = 4
    DWRITE_PANOSE_CONTRAST_MEDIUM_LOW = 5
    DWRITE_PANOSE_CONTRAST_MEDIUM = 6
    DWRITE_PANOSE_CONTRAST_MEDIUM_HIGH = 7
    DWRITE_PANOSE_CONTRAST_HIGH = 8
    DWRITE_PANOSE_CONTRAST_VERY_HIGH = 9
    DWRITE_PANOSE_CONTRAST_HORIZONTAL_LOW = 10
    DWRITE_PANOSE_CONTRAST_HORIZONTAL_MEDIUM = 11
    DWRITE_PANOSE_CONTRAST_HORIZONTAL_HIGH = 12
    DWRITE_PANOSE_CONTRAST_BROKEN = 13
  end

  enum DWRITE_PANOSE_STROKE_VARIATION : Int32
    DWRITE_PANOSE_STROKE_VARIATION_ANY = 0
    DWRITE_PANOSE_STROKE_VARIATION_NO_FIT = 1
    DWRITE_PANOSE_STROKE_VARIATION_NO_VARIATION = 2
    DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_DIAGONAL = 3
    DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_TRANSITIONAL = 4
    DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_VERTICAL = 5
    DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_HORIZONTAL = 6
    DWRITE_PANOSE_STROKE_VARIATION_RAPID_VERTICAL = 7
    DWRITE_PANOSE_STROKE_VARIATION_RAPID_HORIZONTAL = 8
    DWRITE_PANOSE_STROKE_VARIATION_INSTANT_VERTICAL = 9
    DWRITE_PANOSE_STROKE_VARIATION_INSTANT_HORIZONTAL = 10
  end

  enum DWRITE_PANOSE_ARM_STYLE : Int32
    DWRITE_PANOSE_ARM_STYLE_ANY = 0
    DWRITE_PANOSE_ARM_STYLE_NO_FIT = 1
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORIZONTAL = 2
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_WEDGE = 3
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERTICAL = 4
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_SINGLE_SERIF = 5
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_DOUBLE_SERIF = 6
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_HORIZONTAL = 7
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_WEDGE = 8
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_VERTICAL = 9
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_SINGLE_SERIF = 10
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_DOUBLE_SERIF = 11
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORZ = 2
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERT = 4
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_HORZ = 7
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_WEDGE = 8
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_VERT = 9
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_SINGLE_SERIF = 10
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_DOUBLE_SERIF = 11
  end

  enum DWRITE_PANOSE_LETTERFORM : Int32
    DWRITE_PANOSE_LETTERFORM_ANY = 0
    DWRITE_PANOSE_LETTERFORM_NO_FIT = 1
    DWRITE_PANOSE_LETTERFORM_NORMAL_CONTACT = 2
    DWRITE_PANOSE_LETTERFORM_NORMAL_WEIGHTED = 3
    DWRITE_PANOSE_LETTERFORM_NORMAL_BOXED = 4
    DWRITE_PANOSE_LETTERFORM_NORMAL_FLATTENED = 5
    DWRITE_PANOSE_LETTERFORM_NORMAL_ROUNDED = 6
    DWRITE_PANOSE_LETTERFORM_NORMAL_OFF_CENTER = 7
    DWRITE_PANOSE_LETTERFORM_NORMAL_SQUARE = 8
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_CONTACT = 9
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_WEIGHTED = 10
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_BOXED = 11
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_FLATTENED = 12
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_ROUNDED = 13
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_OFF_CENTER = 14
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_SQUARE = 15
  end

  enum DWRITE_PANOSE_MIDLINE : Int32
    DWRITE_PANOSE_MIDLINE_ANY = 0
    DWRITE_PANOSE_MIDLINE_NO_FIT = 1
    DWRITE_PANOSE_MIDLINE_STANDARD_TRIMMED = 2
    DWRITE_PANOSE_MIDLINE_STANDARD_POINTED = 3
    DWRITE_PANOSE_MIDLINE_STANDARD_SERIFED = 4
    DWRITE_PANOSE_MIDLINE_HIGH_TRIMMED = 5
    DWRITE_PANOSE_MIDLINE_HIGH_POINTED = 6
    DWRITE_PANOSE_MIDLINE_HIGH_SERIFED = 7
    DWRITE_PANOSE_MIDLINE_CONSTANT_TRIMMED = 8
    DWRITE_PANOSE_MIDLINE_CONSTANT_POINTED = 9
    DWRITE_PANOSE_MIDLINE_CONSTANT_SERIFED = 10
    DWRITE_PANOSE_MIDLINE_LOW_TRIMMED = 11
    DWRITE_PANOSE_MIDLINE_LOW_POINTED = 12
    DWRITE_PANOSE_MIDLINE_LOW_SERIFED = 13
  end

  enum DWRITE_PANOSE_XHEIGHT : Int32
    DWRITE_PANOSE_XHEIGHT_ANY = 0
    DWRITE_PANOSE_XHEIGHT_NO_FIT = 1
    DWRITE_PANOSE_XHEIGHT_CONSTANT_SMALL = 2
    DWRITE_PANOSE_XHEIGHT_CONSTANT_STANDARD = 3
    DWRITE_PANOSE_XHEIGHT_CONSTANT_LARGE = 4
    DWRITE_PANOSE_XHEIGHT_DUCKING_SMALL = 5
    DWRITE_PANOSE_XHEIGHT_DUCKING_STANDARD = 6
    DWRITE_PANOSE_XHEIGHT_DUCKING_LARGE = 7
    DWRITE_PANOSE_XHEIGHT_CONSTANT_STD = 3
    DWRITE_PANOSE_XHEIGHT_DUCKING_STD = 6
  end

  enum DWRITE_PANOSE_TOOL_KIND : Int32
    DWRITE_PANOSE_TOOL_KIND_ANY = 0
    DWRITE_PANOSE_TOOL_KIND_NO_FIT = 1
    DWRITE_PANOSE_TOOL_KIND_FLAT_NIB = 2
    DWRITE_PANOSE_TOOL_KIND_PRESSURE_POINT = 3
    DWRITE_PANOSE_TOOL_KIND_ENGRAVED = 4
    DWRITE_PANOSE_TOOL_KIND_BALL = 5
    DWRITE_PANOSE_TOOL_KIND_BRUSH = 6
    DWRITE_PANOSE_TOOL_KIND_ROUGH = 7
    DWRITE_PANOSE_TOOL_KIND_FELT_PEN_BRUSH_TIP = 8
    DWRITE_PANOSE_TOOL_KIND_WILD_BRUSH = 9
  end

  enum DWRITE_PANOSE_SPACING : Int32
    DWRITE_PANOSE_SPACING_ANY = 0
    DWRITE_PANOSE_SPACING_NO_FIT = 1
    DWRITE_PANOSE_SPACING_PROPORTIONAL_SPACED = 2
    DWRITE_PANOSE_SPACING_MONOSPACED = 3
  end

  enum DWRITE_PANOSE_ASPECT_RATIO : Int32
    DWRITE_PANOSE_ASPECT_RATIO_ANY = 0
    DWRITE_PANOSE_ASPECT_RATIO_NO_FIT = 1
    DWRITE_PANOSE_ASPECT_RATIO_VERY_CONDENSED = 2
    DWRITE_PANOSE_ASPECT_RATIO_CONDENSED = 3
    DWRITE_PANOSE_ASPECT_RATIO_NORMAL = 4
    DWRITE_PANOSE_ASPECT_RATIO_EXPANDED = 5
    DWRITE_PANOSE_ASPECT_RATIO_VERY_EXPANDED = 6
  end

  enum DWRITE_PANOSE_SCRIPT_TOPOLOGY : Int32
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_ANY = 0
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_NO_FIT = 1
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_DISCONNECTED = 2
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_TRAILING = 3
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_CONNECTED = 4
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_DISCONNECTED = 5
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_TRAILING = 6
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_CONNECTED = 7
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_DISCONNECTED = 8
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_TRAILING = 9
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_CONNECTED = 10
  end

  enum DWRITE_PANOSE_SCRIPT_FORM : Int32
    DWRITE_PANOSE_SCRIPT_FORM_ANY = 0
    DWRITE_PANOSE_SCRIPT_FORM_NO_FIT = 1
    DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_NO_WRAPPING = 2
    DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_SOME_WRAPPING = 3
    DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_MORE_WRAPPING = 4
    DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_EXTREME_WRAPPING = 5
    DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_NO_WRAPPING = 6
    DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_SOME_WRAPPING = 7
    DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_MORE_WRAPPING = 8
    DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_EXTREME_WRAPPING = 9
    DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_NO_WRAPPING = 10
    DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_SOME_WRAPPING = 11
    DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_MORE_WRAPPING = 12
    DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_EXTREME_WRAPPING = 13
  end

  enum DWRITE_PANOSE_FINIALS : Int32
    DWRITE_PANOSE_FINIALS_ANY = 0
    DWRITE_PANOSE_FINIALS_NO_FIT = 1
    DWRITE_PANOSE_FINIALS_NONE_NO_LOOPS = 2
    DWRITE_PANOSE_FINIALS_NONE_CLOSED_LOOPS = 3
    DWRITE_PANOSE_FINIALS_NONE_OPEN_LOOPS = 4
    DWRITE_PANOSE_FINIALS_SHARP_NO_LOOPS = 5
    DWRITE_PANOSE_FINIALS_SHARP_CLOSED_LOOPS = 6
    DWRITE_PANOSE_FINIALS_SHARP_OPEN_LOOPS = 7
    DWRITE_PANOSE_FINIALS_TAPERED_NO_LOOPS = 8
    DWRITE_PANOSE_FINIALS_TAPERED_CLOSED_LOOPS = 9
    DWRITE_PANOSE_FINIALS_TAPERED_OPEN_LOOPS = 10
    DWRITE_PANOSE_FINIALS_ROUND_NO_LOOPS = 11
    DWRITE_PANOSE_FINIALS_ROUND_CLOSED_LOOPS = 12
    DWRITE_PANOSE_FINIALS_ROUND_OPEN_LOOPS = 13
  end

  enum DWRITE_PANOSE_XASCENT : Int32
    DWRITE_PANOSE_XASCENT_ANY = 0
    DWRITE_PANOSE_XASCENT_NO_FIT = 1
    DWRITE_PANOSE_XASCENT_VERY_LOW = 2
    DWRITE_PANOSE_XASCENT_LOW = 3
    DWRITE_PANOSE_XASCENT_MEDIUM = 4
    DWRITE_PANOSE_XASCENT_HIGH = 5
    DWRITE_PANOSE_XASCENT_VERY_HIGH = 6
  end

  enum DWRITE_PANOSE_DECORATIVE_CLASS : Int32
    DWRITE_PANOSE_DECORATIVE_CLASS_ANY = 0
    DWRITE_PANOSE_DECORATIVE_CLASS_NO_FIT = 1
    DWRITE_PANOSE_DECORATIVE_CLASS_DERIVATIVE = 2
    DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_TOPOLOGY = 3
    DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ELEMENTS = 4
    DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ASPECT = 5
    DWRITE_PANOSE_DECORATIVE_CLASS_INITIALS = 6
    DWRITE_PANOSE_DECORATIVE_CLASS_CARTOON = 7
    DWRITE_PANOSE_DECORATIVE_CLASS_PICTURE_STEMS = 8
    DWRITE_PANOSE_DECORATIVE_CLASS_ORNAMENTED = 9
    DWRITE_PANOSE_DECORATIVE_CLASS_TEXT_AND_BACKGROUND = 10
    DWRITE_PANOSE_DECORATIVE_CLASS_COLLAGE = 11
    DWRITE_PANOSE_DECORATIVE_CLASS_MONTAGE = 12
  end

  enum DWRITE_PANOSE_ASPECT : Int32
    DWRITE_PANOSE_ASPECT_ANY = 0
    DWRITE_PANOSE_ASPECT_NO_FIT = 1
    DWRITE_PANOSE_ASPECT_SUPER_CONDENSED = 2
    DWRITE_PANOSE_ASPECT_VERY_CONDENSED = 3
    DWRITE_PANOSE_ASPECT_CONDENSED = 4
    DWRITE_PANOSE_ASPECT_NORMAL = 5
    DWRITE_PANOSE_ASPECT_EXTENDED = 6
    DWRITE_PANOSE_ASPECT_VERY_EXTENDED = 7
    DWRITE_PANOSE_ASPECT_SUPER_EXTENDED = 8
    DWRITE_PANOSE_ASPECT_MONOSPACED = 9
  end

  enum DWRITE_PANOSE_FILL : Int32
    DWRITE_PANOSE_FILL_ANY = 0
    DWRITE_PANOSE_FILL_NO_FIT = 1
    DWRITE_PANOSE_FILL_STANDARD_SOLID_FILL = 2
    DWRITE_PANOSE_FILL_NO_FILL = 3
    DWRITE_PANOSE_FILL_PATTERNED_FILL = 4
    DWRITE_PANOSE_FILL_COMPLEX_FILL = 5
    DWRITE_PANOSE_FILL_SHAPED_FILL = 6
    DWRITE_PANOSE_FILL_DRAWN_DISTRESSED = 7
  end

  enum DWRITE_PANOSE_LINING : Int32
    DWRITE_PANOSE_LINING_ANY = 0
    DWRITE_PANOSE_LINING_NO_FIT = 1
    DWRITE_PANOSE_LINING_NONE = 2
    DWRITE_PANOSE_LINING_INLINE = 3
    DWRITE_PANOSE_LINING_OUTLINE = 4
    DWRITE_PANOSE_LINING_ENGRAVED = 5
    DWRITE_PANOSE_LINING_SHADOW = 6
    DWRITE_PANOSE_LINING_RELIEF = 7
    DWRITE_PANOSE_LINING_BACKDROP = 8
  end

  enum DWRITE_PANOSE_DECORATIVE_TOPOLOGY : Int32
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ANY = 0
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_NO_FIT = 1
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_STANDARD = 2
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SQUARE = 3
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_MULTIPLE_SEGMENT = 4
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ART_DECO = 5
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UNEVEN_WEIGHTING = 6
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_ARMS = 7
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_FORMS = 8
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_LOMBARDIC_FORMS = 9
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UPPER_CASE_IN_LOWER_CASE = 10
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_IMPLIED_TOPOLOGY = 11
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_HORSESHOE_E_AND_A = 12
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_CURSIVE = 13
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_BLACKLETTER = 14
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SWASH_VARIANCE = 15
  end

  enum DWRITE_PANOSE_CHARACTER_RANGES : Int32
    DWRITE_PANOSE_CHARACTER_RANGES_ANY = 0
    DWRITE_PANOSE_CHARACTER_RANGES_NO_FIT = 1
    DWRITE_PANOSE_CHARACTER_RANGES_EXTENDED_COLLECTION = 2
    DWRITE_PANOSE_CHARACTER_RANGES_LITERALS = 3
    DWRITE_PANOSE_CHARACTER_RANGES_NO_LOWER_CASE = 4
    DWRITE_PANOSE_CHARACTER_RANGES_SMALL_CAPS = 5
  end

  enum DWRITE_PANOSE_SYMBOL_KIND : Int32
    DWRITE_PANOSE_SYMBOL_KIND_ANY = 0
    DWRITE_PANOSE_SYMBOL_KIND_NO_FIT = 1
    DWRITE_PANOSE_SYMBOL_KIND_MONTAGES = 2
    DWRITE_PANOSE_SYMBOL_KIND_PICTURES = 3
    DWRITE_PANOSE_SYMBOL_KIND_SHAPES = 4
    DWRITE_PANOSE_SYMBOL_KIND_SCIENTIFIC = 5
    DWRITE_PANOSE_SYMBOL_KIND_MUSIC = 6
    DWRITE_PANOSE_SYMBOL_KIND_EXPERT = 7
    DWRITE_PANOSE_SYMBOL_KIND_PATTERNS = 8
    DWRITE_PANOSE_SYMBOL_KIND_BOARDERS = 9
    DWRITE_PANOSE_SYMBOL_KIND_ICONS = 10
    DWRITE_PANOSE_SYMBOL_KIND_LOGOS = 11
    DWRITE_PANOSE_SYMBOL_KIND_INDUSTRY_SPECIFIC = 12
  end

  enum DWRITE_PANOSE_SYMBOL_ASPECT_RATIO : Int32
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_ANY = 0
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_FIT = 1
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_WIDTH = 2
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_EXCEPTIONALLY_WIDE = 3
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_SUPER_WIDE = 4
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_WIDE = 5
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_WIDE = 6
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NORMAL = 7
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NARROW = 8
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_NARROW = 9
  end

  enum DWRITE_OUTLINE_THRESHOLD : Int32
    DWRITE_OUTLINE_THRESHOLD_ANTIALIASED = 0
    DWRITE_OUTLINE_THRESHOLD_ALIASED = 1
  end

  enum DWRITE_BASELINE : Int32
    DWRITE_BASELINE_DEFAULT = 0
    DWRITE_BASELINE_ROMAN = 1
    DWRITE_BASELINE_CENTRAL = 2
    DWRITE_BASELINE_MATH = 3
    DWRITE_BASELINE_HANGING = 4
    DWRITE_BASELINE_IDEOGRAPHIC_BOTTOM = 5
    DWRITE_BASELINE_IDEOGRAPHIC_TOP = 6
    DWRITE_BASELINE_MINIMUM = 7
    DWRITE_BASELINE_MAXIMUM = 8
  end

  enum DWRITE_VERTICAL_GLYPH_ORIENTATION : Int32
    DWRITE_VERTICAL_GLYPH_ORIENTATION_DEFAULT = 0
    DWRITE_VERTICAL_GLYPH_ORIENTATION_STACKED = 1
  end

  enum DWRITE_GLYPH_ORIENTATION_ANGLE : Int32
    DWRITE_GLYPH_ORIENTATION_ANGLE_0_DEGREES = 0
    DWRITE_GLYPH_ORIENTATION_ANGLE_90_DEGREES = 1
    DWRITE_GLYPH_ORIENTATION_ANGLE_180_DEGREES = 2
    DWRITE_GLYPH_ORIENTATION_ANGLE_270_DEGREES = 3
  end

  enum DWRITE_TEXT_ANTIALIAS_MODE : Int32
    DWRITE_TEXT_ANTIALIAS_MODE_CLEARTYPE = 0
    DWRITE_TEXT_ANTIALIAS_MODE_GRAYSCALE = 1
  end

  enum DWRITE_OPTICAL_ALIGNMENT : Int32
    DWRITE_OPTICAL_ALIGNMENT_NONE = 0
    DWRITE_OPTICAL_ALIGNMENT_NO_SIDE_BEARINGS = 1
  end

  enum DWRITE_GRID_FIT_MODE : Int32
    DWRITE_GRID_FIT_MODE_DEFAULT = 0
    DWRITE_GRID_FIT_MODE_DISABLED = 1
    DWRITE_GRID_FIT_MODE_ENABLED = 2
  end

  enum DWRITE_FONT_PROPERTY_ID : Int32
    DWRITE_FONT_PROPERTY_ID_NONE = 0
    DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FAMILY_NAME = 1
    DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FAMILY_NAME = 2
    DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FACE_NAME = 3
    DWRITE_FONT_PROPERTY_ID_FULL_NAME = 4
    DWRITE_FONT_PROPERTY_ID_WIN32_FAMILY_NAME = 5
    DWRITE_FONT_PROPERTY_ID_POSTSCRIPT_NAME = 6
    DWRITE_FONT_PROPERTY_ID_DESIGN_SCRIPT_LANGUAGE_TAG = 7
    DWRITE_FONT_PROPERTY_ID_SUPPORTED_SCRIPT_LANGUAGE_TAG = 8
    DWRITE_FONT_PROPERTY_ID_SEMANTIC_TAG = 9
    DWRITE_FONT_PROPERTY_ID_WEIGHT = 10
    DWRITE_FONT_PROPERTY_ID_STRETCH = 11
    DWRITE_FONT_PROPERTY_ID_STYLE = 12
    DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FACE_NAME = 13
    DWRITE_FONT_PROPERTY_ID_TOTAL = 13
    DWRITE_FONT_PROPERTY_ID_TOTAL_RS3 = 14
    DWRITE_FONT_PROPERTY_ID_PREFERRED_FAMILY_NAME = 2
    DWRITE_FONT_PROPERTY_ID_FAMILY_NAME = 1
    DWRITE_FONT_PROPERTY_ID_FACE_NAME = 3
  end

  enum DWRITE_LOCALITY : Int32
    DWRITE_LOCALITY_REMOTE = 0
    DWRITE_LOCALITY_PARTIAL = 1
    DWRITE_LOCALITY_LOCAL = 2
  end

  enum DWRITE_RENDERING_MODE1 : Int32
    DWRITE_RENDERING_MODE1_DEFAULT = 0
    DWRITE_RENDERING_MODE1_ALIASED = 1
    DWRITE_RENDERING_MODE1_GDI_CLASSIC = 2
    DWRITE_RENDERING_MODE1_GDI_NATURAL = 3
    DWRITE_RENDERING_MODE1_NATURAL = 4
    DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC = 5
    DWRITE_RENDERING_MODE1_OUTLINE = 6
    DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC_DOWNSAMPLED = 7
  end

  enum DWRITE_FONT_LINE_GAP_USAGE : Int32
    DWRITE_FONT_LINE_GAP_USAGE_DEFAULT = 0
    DWRITE_FONT_LINE_GAP_USAGE_DISABLED = 1
    DWRITE_FONT_LINE_GAP_USAGE_ENABLED = 2
  end

  enum DWRITE_CONTAINER_TYPE : Int32
    DWRITE_CONTAINER_TYPE_UNKNOWN = 0
    DWRITE_CONTAINER_TYPE_WOFF = 1
    DWRITE_CONTAINER_TYPE_WOFF2 = 2
  end

  enum DWRITE_FONT_FAMILY_MODEL : Int32
    DWRITE_FONT_FAMILY_MODEL_TYPOGRAPHIC = 0
    DWRITE_FONT_FAMILY_MODEL_WEIGHT_STRETCH_STYLE = 1
  end

  enum DWRITE_AUTOMATIC_FONT_AXES : UInt32
    DWRITE_AUTOMATIC_FONT_AXES_NONE = 0
    DWRITE_AUTOMATIC_FONT_AXES_OPTICAL_SIZE = 1
  end

  enum DWRITE_FONT_AXIS_ATTRIBUTES : UInt32
    DWRITE_FONT_AXIS_ATTRIBUTES_NONE = 0
    DWRITE_FONT_AXIS_ATTRIBUTES_VARIABLE = 1
    DWRITE_FONT_AXIS_ATTRIBUTES_HIDDEN = 2
  end

  enum DWRITE_FONT_SOURCE_TYPE : Int32
    DWRITE_FONT_SOURCE_TYPE_UNKNOWN = 0
    DWRITE_FONT_SOURCE_TYPE_PER_MACHINE = 1
    DWRITE_FONT_SOURCE_TYPE_PER_USER = 2
    DWRITE_FONT_SOURCE_TYPE_APPX_PACKAGE = 3
    DWRITE_FONT_SOURCE_TYPE_REMOTE_FONT_PROVIDER = 4
  end

  union DWRITE_PANOSE
    values : UInt8[10]*
    family_kind : UInt8
    text : DWRITE_PANOSE_text_e__Struct
    script : DWRITE_PANOSE_script_e__Struct
    decorative : DWRITE_PANOSE_decorative_e__Struct
    symbol : DWRITE_PANOSE_symbol_e__Struct
  end

  struct DWRITE_COLOR_F
    r : Float32
    g : Float32
    b : Float32
    a : Float32
  end
  struct DWRITE_FONT_METRICS
    design_units_per_em : UInt16
    ascent : UInt16
    descent : UInt16
    line_gap : Int16
    cap_height : UInt16
    x_height : UInt16
    underline_position : Int16
    underline_thickness : UInt16
    strikethrough_position : Int16
    strikethrough_thickness : UInt16
  end
  struct DWRITE_GLYPH_METRICS
    left_side_bearing : Int32
    advance_width : UInt32
    right_side_bearing : Int32
    top_side_bearing : Int32
    advance_height : UInt32
    bottom_side_bearing : Int32
    vertical_origin_y : Int32
  end
  struct DWRITE_GLYPH_OFFSET
    advance_offset : Float32
    ascender_offset : Float32
  end
  struct DWRITE_MATRIX
    m11 : Float32
    m12 : Float32
    m21 : Float32
    m22 : Float32
    dx : Float32
    dy : Float32
  end
  struct DWRITE_TEXT_RANGE
    start_position : UInt32
    length : UInt32
  end
  struct DWRITE_FONT_FEATURE
    name_tag : DWRITE_FONT_FEATURE_TAG
    parameter : UInt32
  end
  struct DWRITE_TYPOGRAPHIC_FEATURES
    features : DWRITE_FONT_FEATURE*
    feature_count : UInt32
  end
  struct DWRITE_TRIMMING
    granularity : DWRITE_TRIMMING_GRANULARITY
    delimiter : UInt32
    delimiter_count : UInt32
  end
  struct DWRITE_SCRIPT_ANALYSIS
    script : UInt16
    shapes : DWRITE_SCRIPT_SHAPES
  end
  struct DWRITE_LINE_BREAKPOINT
    _bitfield : UInt8
  end
  struct DWRITE_SHAPING_TEXT_PROPERTIES
    _bitfield : UInt16
  end
  struct DWRITE_SHAPING_GLYPH_PROPERTIES
    _bitfield : UInt16
  end
  struct DWRITE_GLYPH_RUN
    font_face : IDWriteFontFace
    font_em_size : Float32
    glyph_count : UInt32
    glyph_indices : UInt16*
    glyph_advances : Float32*
    glyph_offsets : DWRITE_GLYPH_OFFSET*
    is_sideways : LibC::BOOL
    bidi_level : UInt32
  end
  struct DWRITE_GLYPH_RUN_DESCRIPTION
    locale_name : LibC::LPWSTR
    string : LibC::LPWSTR
    string_length : UInt32
    cluster_map : UInt16*
    text_position : UInt32
  end
  struct DWRITE_UNDERLINE
    width : Float32
    thickness : Float32
    offset : Float32
    run_height : Float32
    reading_direction : DWRITE_READING_DIRECTION
    flow_direction : DWRITE_FLOW_DIRECTION
    locale_name : LibC::LPWSTR
    measuring_mode : DWRITE_MEASURING_MODE
  end
  struct DWRITE_STRIKETHROUGH
    width : Float32
    thickness : Float32
    offset : Float32
    reading_direction : DWRITE_READING_DIRECTION
    flow_direction : DWRITE_FLOW_DIRECTION
    locale_name : LibC::LPWSTR
    measuring_mode : DWRITE_MEASURING_MODE
  end
  struct DWRITE_LINE_METRICS
    length : UInt32
    trailing_whitespace_length : UInt32
    newline_length : UInt32
    height : Float32
    baseline : Float32
    is_trimmed : LibC::BOOL
  end
  struct DWRITE_CLUSTER_METRICS
    width : Float32
    length : UInt16
    _bitfield : UInt16
  end
  struct DWRITE_TEXT_METRICS
    left : Float32
    top : Float32
    width : Float32
    width_including_trailing_whitespace : Float32
    height : Float32
    layout_width : Float32
    layout_height : Float32
    max_bidi_reordering_depth : UInt32
    line_count : UInt32
  end
  struct DWRITE_INLINE_OBJECT_METRICS
    width : Float32
    height : Float32
    baseline : Float32
    supports_sideways : LibC::BOOL
  end
  struct DWRITE_OVERHANG_METRICS
    left : Float32
    top : Float32
    right : Float32
    bottom : Float32
  end
  struct DWRITE_HIT_TEST_METRICS
    text_position : UInt32
    length : UInt32
    left : Float32
    top : Float32
    width : Float32
    height : Float32
    bidi_level : UInt32
    is_text : LibC::BOOL
    is_trimmed : LibC::BOOL
  end
  struct DWRITE_FONT_METRICS1
    __anonymous_base_d_write_1_l627_c38 : DWRITE_FONT_METRICS
    glyph_box_left : Int16
    glyph_box_top : Int16
    glyph_box_right : Int16
    glyph_box_bottom : Int16
    subscript_position_x : Int16
    subscript_position_y : Int16
    subscript_size_x : Int16
    subscript_size_y : Int16
    superscript_position_x : Int16
    superscript_position_y : Int16
    superscript_size_x : Int16
    superscript_size_y : Int16
    has_typographic_metrics : LibC::BOOL
  end
  struct DWRITE_CARET_METRICS
    slope_rise : Int16
    slope_run : Int16
    offset : Int16
  end
  struct DWRITE_PANOSE_decorative_e__Struct
    family_kind : UInt8
    decorative_class : UInt8
    weight : UInt8
    aspect : UInt8
    contrast : UInt8
    serif_variant : UInt8
    fill : UInt8
    lining : UInt8
    decorative_topology : UInt8
    character_range : UInt8
  end
  struct DWRITE_PANOSE_text_e__Struct
    family_kind : UInt8
    serif_style : UInt8
    weight : UInt8
    proportion : UInt8
    contrast : UInt8
    stroke_variation : UInt8
    arm_style : UInt8
    letterform : UInt8
    midline : UInt8
    x_height : UInt8
  end
  struct DWRITE_PANOSE_symbol_e__Struct
    family_kind : UInt8
    symbol_kind : UInt8
    weight : UInt8
    spacing : UInt8
    aspect_ratio_and_contrast : UInt8
    aspect_ratio94 : UInt8
    aspect_ratio119 : UInt8
    aspect_ratio157 : UInt8
    aspect_ratio163 : UInt8
    aspect_ratio211 : UInt8
  end
  struct DWRITE_PANOSE_script_e__Struct
    family_kind : UInt8
    tool_kind : UInt8
    weight : UInt8
    spacing : UInt8
    aspect_ratio : UInt8
    contrast : UInt8
    script_topology : UInt8
    script_form : UInt8
    finials : UInt8
    x_ascent : UInt8
  end
  struct DWRITE_UNICODE_RANGE
    first : UInt32
    last : UInt32
  end
  struct DWRITE_SCRIPT_PROPERTIES
    iso_script_code : UInt32
    iso_script_number : UInt32
    cluster_lookahead : UInt32
    justification_character : UInt32
    _bitfield : UInt32
  end
  struct DWRITE_JUSTIFICATION_OPPORTUNITY
    expansion_minimum : Float32
    expansion_maximum : Float32
    compression_maximum : Float32
    _bitfield : UInt32
  end
  struct DWRITE_TEXT_METRICS1
    base : DWRITE_TEXT_METRICS
    height_including_trailing_whitespace : Float32
  end
  struct DWRITE_COLOR_GLYPH_RUN
    glyph_run : DWRITE_GLYPH_RUN
    glyph_run_description : DWRITE_GLYPH_RUN_DESCRIPTION*
    baseline_origin_x : Float32
    baseline_origin_y : Float32
    run_color : DWRITE_COLOR_F
    palette_index : UInt16
  end
  struct DWRITE_FONT_PROPERTY
    property_id : DWRITE_FONT_PROPERTY_ID
    property_value : LibC::LPWSTR
    locale_name : LibC::LPWSTR
  end
  struct DWRITE_LINE_METRICS1
    base : DWRITE_LINE_METRICS
    leading_before : Float32
    leading_after : Float32
  end
  struct DWRITE_LINE_SPACING
    method : DWRITE_LINE_SPACING_METHOD
    height : Float32
    baseline : Float32
    leading_before : Float32
    font_line_gap_usage : DWRITE_FONT_LINE_GAP_USAGE
  end
  struct DWRITE_COLOR_GLYPH_RUN1
    base : DWRITE_COLOR_GLYPH_RUN
    glyph_image_format : DWRITE_GLYPH_IMAGE_FORMATS
    measuring_mode : DWRITE_MEASURING_MODE
  end
  struct DWRITE_GLYPH_IMAGE_DATA
    image_data : Void*
    image_data_size : UInt32
    unique_data_id : UInt32
    pixels_per_em : UInt32
    pixel_size : D2D_SIZE_U
    horizontal_left_origin : POINT
    horizontal_right_origin : POINT
    vertical_top_origin : POINT
    vertical_bottom_origin : POINT
  end
  struct DWRITE_FILE_FRAGMENT
    file_offset : UInt64
    fragment_size : UInt64
  end
  struct DWRITE_FONT_AXIS_VALUE
    axis_tag : DWRITE_FONT_AXIS_TAG
    value : Float32
  end
  struct DWRITE_FONT_AXIS_RANGE
    axis_tag : DWRITE_FONT_AXIS_TAG
    min_value : Float32
    max_value : Float32
  end


  struct IDWriteFontFileLoaderVTbl
    query_interface : Proc(IDWriteFontFileLoader*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontFileLoader*, UInt32)
    release : Proc(IDWriteFontFileLoader*, UInt32)
    create_stream_from_key : Proc(IDWriteFontFileLoader*, Void*, UInt32, IDWriteFontFileStream*, HRESULT)
  end

  IDWriteFontFileLoader_GUID = LibC::GUID.new("727cad4e-d6af-4c9e-8a08-d695b11caa49")
  CLSID_IDWriteFontFileLoader = "727cad4e-d6af-4c9e-8a08-d695b11caa49"
  struct IDWriteFontFileLoader
    lpVtbl : IDWriteFontFileLoaderVTbl*
  end

  struct IDWriteLocalFontFileLoaderVTbl
    query_interface : Proc(IDWriteLocalFontFileLoader*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteLocalFontFileLoader*, UInt32)
    release : Proc(IDWriteLocalFontFileLoader*, UInt32)
    create_stream_from_key : Proc(IDWriteLocalFontFileLoader*, Void*, UInt32, IDWriteFontFileStream*, HRESULT)
    get_file_path_length_from_key : Proc(IDWriteLocalFontFileLoader*, Void*, UInt32, UInt32*, HRESULT)
    get_file_path_from_key : Proc(IDWriteLocalFontFileLoader*, Void*, UInt32, Char*, UInt32, HRESULT)
    get_last_write_time_from_key : Proc(IDWriteLocalFontFileLoader*, Void*, UInt32, FILETIME*, HRESULT)
  end

  IDWriteLocalFontFileLoader_GUID = LibC::GUID.new("b2d9f3ec-c9fe-4a11-a2ec-d86208f7c0a2")
  CLSID_IDWriteLocalFontFileLoader = "b2d9f3ec-c9fe-4a11-a2ec-d86208f7c0a2"
  struct IDWriteLocalFontFileLoader
    lpVtbl : IDWriteLocalFontFileLoaderVTbl*
  end

  struct IDWriteFontFileStreamVTbl
    query_interface : Proc(IDWriteFontFileStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontFileStream*, UInt32)
    release : Proc(IDWriteFontFileStream*, UInt32)
    read_file_fragment : Proc(IDWriteFontFileStream*, Void**, UInt64, UInt64, Void**, HRESULT)
    release_file_fragment : Proc(IDWriteFontFileStream*, Void*, Void)
    get_file_size : Proc(IDWriteFontFileStream*, UInt64*, HRESULT)
    get_last_write_time : Proc(IDWriteFontFileStream*, UInt64*, HRESULT)
  end

  IDWriteFontFileStream_GUID = LibC::GUID.new("6d4865fe-0ab8-4d91-8f62-5dd6be34a3e0")
  CLSID_IDWriteFontFileStream = "6d4865fe-0ab8-4d91-8f62-5dd6be34a3e0"
  struct IDWriteFontFileStream
    lpVtbl : IDWriteFontFileStreamVTbl*
  end

  struct IDWriteFontFileVTbl
    query_interface : Proc(IDWriteFontFile*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontFile*, UInt32)
    release : Proc(IDWriteFontFile*, UInt32)
    get_reference_key : Proc(IDWriteFontFile*, Void**, UInt32*, HRESULT)
    get_loader : Proc(IDWriteFontFile*, IDWriteFontFileLoader*, HRESULT)
    analyze : Proc(IDWriteFontFile*, LibC::BOOL*, DWRITE_FONT_FILE_TYPE*, DWRITE_FONT_FACE_TYPE*, UInt32*, HRESULT)
  end

  IDWriteFontFile_GUID = LibC::GUID.new("739d886a-cef5-47dc-8769-1a8b41bebbb0")
  CLSID_IDWriteFontFile = "739d886a-cef5-47dc-8769-1a8b41bebbb0"
  struct IDWriteFontFile
    lpVtbl : IDWriteFontFileVTbl*
  end

  struct IDWriteRenderingParamsVTbl
    query_interface : Proc(IDWriteRenderingParams*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteRenderingParams*, UInt32)
    release : Proc(IDWriteRenderingParams*, UInt32)
    get_gamma : Proc(IDWriteRenderingParams*, Float32)
    get_enhanced_contrast : Proc(IDWriteRenderingParams*, Float32)
    get_clear_type_level : Proc(IDWriteRenderingParams*, Float32)
    get_pixel_geometry : Proc(IDWriteRenderingParams*, DWRITE_PIXEL_GEOMETRY)
    get_rendering_mode : Proc(IDWriteRenderingParams*, DWRITE_RENDERING_MODE)
  end

  IDWriteRenderingParams_GUID = LibC::GUID.new("2f0da53a-2add-47cd-82ee-d9ec34688e75")
  CLSID_IDWriteRenderingParams = "2f0da53a-2add-47cd-82ee-d9ec34688e75"
  struct IDWriteRenderingParams
    lpVtbl : IDWriteRenderingParamsVTbl*
  end

  struct IDWriteFontFaceVTbl
    query_interface : Proc(IDWriteFontFace*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontFace*, UInt32)
    release : Proc(IDWriteFontFace*, UInt32)
    get_type : Proc(IDWriteFontFace*, DWRITE_FONT_FACE_TYPE)
    get_files : Proc(IDWriteFontFace*, UInt32*, IDWriteFontFile*, HRESULT)
    get_index : Proc(IDWriteFontFace*, UInt32)
    get_simulations : Proc(IDWriteFontFace*, DWRITE_FONT_SIMULATIONS)
    is_symbol_font : Proc(IDWriteFontFace*, LibC::BOOL)
    get_metrics : Proc(IDWriteFontFace*, DWRITE_FONT_METRICS*, Void)
    get_glyph_count : Proc(IDWriteFontFace*, UInt16)
    get_design_glyph_metrics : Proc(IDWriteFontFace*, UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)
    get_glyph_indices : Proc(IDWriteFontFace*, UInt32*, UInt32, UInt16*, HRESULT)
    try_get_font_table : Proc(IDWriteFontFace*, UInt32, Void**, UInt32*, Void**, LibC::BOOL*, HRESULT)
    release_font_table : Proc(IDWriteFontFace*, Void*, Void)
    get_glyph_run_outline : Proc(IDWriteFontFace*, Float32, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, UInt32, LibC::BOOL, LibC::BOOL, ID2D1SimplifiedGeometrySink, HRESULT)
    get_recommended_rendering_mode : Proc(IDWriteFontFace*, Float32, Float32, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, HRESULT)
    get_gdi_compatible_metrics : Proc(IDWriteFontFace*, Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS*, HRESULT)
    get_gdi_compatible_glyph_metrics : Proc(IDWriteFontFace*, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)
  end

  IDWriteFontFace_GUID = LibC::GUID.new("5f49804d-7024-4d43-bfa9-d25984f53849")
  CLSID_IDWriteFontFace = "5f49804d-7024-4d43-bfa9-d25984f53849"
  struct IDWriteFontFace
    lpVtbl : IDWriteFontFaceVTbl*
  end

  struct IDWriteFontCollectionLoaderVTbl
    query_interface : Proc(IDWriteFontCollectionLoader*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontCollectionLoader*, UInt32)
    release : Proc(IDWriteFontCollectionLoader*, UInt32)
    create_enumerator_from_key : Proc(IDWriteFontCollectionLoader*, IDWriteFactory, Void*, UInt32, IDWriteFontFileEnumerator*, HRESULT)
  end

  IDWriteFontCollectionLoader_GUID = LibC::GUID.new("cca920e4-52f0-492b-bfa8-29c72ee0a468")
  CLSID_IDWriteFontCollectionLoader = "cca920e4-52f0-492b-bfa8-29c72ee0a468"
  struct IDWriteFontCollectionLoader
    lpVtbl : IDWriteFontCollectionLoaderVTbl*
  end

  struct IDWriteFontFileEnumeratorVTbl
    query_interface : Proc(IDWriteFontFileEnumerator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontFileEnumerator*, UInt32)
    release : Proc(IDWriteFontFileEnumerator*, UInt32)
    move_next : Proc(IDWriteFontFileEnumerator*, LibC::BOOL*, HRESULT)
    get_current_font_file : Proc(IDWriteFontFileEnumerator*, IDWriteFontFile*, HRESULT)
  end

  IDWriteFontFileEnumerator_GUID = LibC::GUID.new("72755049-5ff7-435d-8348-4be97cfa6c7c")
  CLSID_IDWriteFontFileEnumerator = "72755049-5ff7-435d-8348-4be97cfa6c7c"
  struct IDWriteFontFileEnumerator
    lpVtbl : IDWriteFontFileEnumeratorVTbl*
  end

  struct IDWriteLocalizedStringsVTbl
    query_interface : Proc(IDWriteLocalizedStrings*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteLocalizedStrings*, UInt32)
    release : Proc(IDWriteLocalizedStrings*, UInt32)
    get_count : Proc(IDWriteLocalizedStrings*, UInt32)
    find_locale_name : Proc(IDWriteLocalizedStrings*, LibC::LPWSTR, UInt32*, LibC::BOOL*, HRESULT)
    get_locale_name_length : Proc(IDWriteLocalizedStrings*, UInt32, UInt32*, HRESULT)
    get_locale_name : Proc(IDWriteLocalizedStrings*, UInt32, Char*, UInt32, HRESULT)
    get_string_length : Proc(IDWriteLocalizedStrings*, UInt32, UInt32*, HRESULT)
    get_string : Proc(IDWriteLocalizedStrings*, UInt32, Char*, UInt32, HRESULT)
  end

  IDWriteLocalizedStrings_GUID = LibC::GUID.new("08256209-099a-4b34-b86d-c22b110e7771")
  CLSID_IDWriteLocalizedStrings = "08256209-099a-4b34-b86d-c22b110e7771"
  struct IDWriteLocalizedStrings
    lpVtbl : IDWriteLocalizedStringsVTbl*
  end

  struct IDWriteFontCollectionVTbl
    query_interface : Proc(IDWriteFontCollection*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontCollection*, UInt32)
    release : Proc(IDWriteFontCollection*, UInt32)
    get_font_family_count : Proc(IDWriteFontCollection*, UInt32)
    get_font_family : Proc(IDWriteFontCollection*, UInt32, IDWriteFontFamily*, HRESULT)
    find_family_name : Proc(IDWriteFontCollection*, LibC::LPWSTR, UInt32*, LibC::BOOL*, HRESULT)
    get_font_from_font_face : Proc(IDWriteFontCollection*, IDWriteFontFace, IDWriteFont*, HRESULT)
  end

  IDWriteFontCollection_GUID = LibC::GUID.new("a84cee02-3eea-4eee-a827-87c1a02a0fcc")
  CLSID_IDWriteFontCollection = "a84cee02-3eea-4eee-a827-87c1a02a0fcc"
  struct IDWriteFontCollection
    lpVtbl : IDWriteFontCollectionVTbl*
  end

  struct IDWriteFontListVTbl
    query_interface : Proc(IDWriteFontList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontList*, UInt32)
    release : Proc(IDWriteFontList*, UInt32)
    get_font_collection : Proc(IDWriteFontList*, IDWriteFontCollection*, HRESULT)
    get_font_count : Proc(IDWriteFontList*, UInt32)
    get_font : Proc(IDWriteFontList*, UInt32, IDWriteFont*, HRESULT)
  end

  IDWriteFontList_GUID = LibC::GUID.new("1a0d8438-1d97-4ec1-aef9-a2fb86ed6acb")
  CLSID_IDWriteFontList = "1a0d8438-1d97-4ec1-aef9-a2fb86ed6acb"
  struct IDWriteFontList
    lpVtbl : IDWriteFontListVTbl*
  end

  struct IDWriteFontFamilyVTbl
    query_interface : Proc(IDWriteFontFamily*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontFamily*, UInt32)
    release : Proc(IDWriteFontFamily*, UInt32)
    get_font_collection : Proc(IDWriteFontFamily*, IDWriteFontCollection*, HRESULT)
    get_font_count : Proc(IDWriteFontFamily*, UInt32)
    get_font : Proc(IDWriteFontFamily*, UInt32, IDWriteFont*, HRESULT)
    get_family_names : Proc(IDWriteFontFamily*, IDWriteLocalizedStrings*, HRESULT)
    get_first_matching_font : Proc(IDWriteFontFamily*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFont*, HRESULT)
    get_matching_fonts : Proc(IDWriteFontFamily*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontList*, HRESULT)
  end

  IDWriteFontFamily_GUID = LibC::GUID.new("da20d8ef-812a-4c43-9802-62ec4abd7add")
  CLSID_IDWriteFontFamily = "da20d8ef-812a-4c43-9802-62ec4abd7add"
  struct IDWriteFontFamily
    lpVtbl : IDWriteFontFamilyVTbl*
  end

  struct IDWriteFontVTbl
    query_interface : Proc(IDWriteFont*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFont*, UInt32)
    release : Proc(IDWriteFont*, UInt32)
    get_font_family : Proc(IDWriteFont*, IDWriteFontFamily*, HRESULT)
    get_weight : Proc(IDWriteFont*, DWRITE_FONT_WEIGHT)
    get_stretch : Proc(IDWriteFont*, DWRITE_FONT_STRETCH)
    get_style : Proc(IDWriteFont*, DWRITE_FONT_STYLE)
    is_symbol_font : Proc(IDWriteFont*, LibC::BOOL)
    get_face_names : Proc(IDWriteFont*, IDWriteLocalizedStrings*, HRESULT)
    get_informational_strings : Proc(IDWriteFont*, DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings*, LibC::BOOL*, HRESULT)
    get_simulations : Proc(IDWriteFont*, DWRITE_FONT_SIMULATIONS)
    get_metrics : Proc(IDWriteFont*, DWRITE_FONT_METRICS*, Void)
    has_character : Proc(IDWriteFont*, UInt32, LibC::BOOL*, HRESULT)
    create_font_face : Proc(IDWriteFont*, IDWriteFontFace*, HRESULT)
  end

  IDWriteFont_GUID = LibC::GUID.new("acd16696-8c14-4f5d-877e-fe3fc1d32737")
  CLSID_IDWriteFont = "acd16696-8c14-4f5d-877e-fe3fc1d32737"
  struct IDWriteFont
    lpVtbl : IDWriteFontVTbl*
  end

  struct IDWriteTextFormatVTbl
    query_interface : Proc(IDWriteTextFormat*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteTextFormat*, UInt32)
    release : Proc(IDWriteTextFormat*, UInt32)
    set_text_alignment : Proc(IDWriteTextFormat*, DWRITE_TEXT_ALIGNMENT, HRESULT)
    set_paragraph_alignment : Proc(IDWriteTextFormat*, DWRITE_PARAGRAPH_ALIGNMENT, HRESULT)
    set_word_wrapping : Proc(IDWriteTextFormat*, DWRITE_WORD_WRAPPING, HRESULT)
    set_reading_direction : Proc(IDWriteTextFormat*, DWRITE_READING_DIRECTION, HRESULT)
    set_flow_direction : Proc(IDWriteTextFormat*, DWRITE_FLOW_DIRECTION, HRESULT)
    set_incremental_tab_stop : Proc(IDWriteTextFormat*, Float32, HRESULT)
    set_trimming : Proc(IDWriteTextFormat*, DWRITE_TRIMMING*, IDWriteInlineObject, HRESULT)
    set_line_spacing : Proc(IDWriteTextFormat*, DWRITE_LINE_SPACING_METHOD, Float32, Float32, HRESULT)
    get_text_alignment : Proc(IDWriteTextFormat*, DWRITE_TEXT_ALIGNMENT)
    get_paragraph_alignment : Proc(IDWriteTextFormat*, DWRITE_PARAGRAPH_ALIGNMENT)
    get_word_wrapping : Proc(IDWriteTextFormat*, DWRITE_WORD_WRAPPING)
    get_reading_direction : Proc(IDWriteTextFormat*, DWRITE_READING_DIRECTION)
    get_flow_direction : Proc(IDWriteTextFormat*, DWRITE_FLOW_DIRECTION)
    get_incremental_tab_stop : Proc(IDWriteTextFormat*, Float32)
    get_trimming : Proc(IDWriteTextFormat*, DWRITE_TRIMMING*, IDWriteInlineObject*, HRESULT)
    get_line_spacing : Proc(IDWriteTextFormat*, DWRITE_LINE_SPACING_METHOD*, Float32*, Float32*, HRESULT)
    get_font_collection : Proc(IDWriteTextFormat*, IDWriteFontCollection*, HRESULT)
    get_font_family_name_length : Proc(IDWriteTextFormat*, UInt32)
    get_font_family_name : Proc(IDWriteTextFormat*, Char*, UInt32, HRESULT)
    get_font_weight : Proc(IDWriteTextFormat*, DWRITE_FONT_WEIGHT)
    get_font_style : Proc(IDWriteTextFormat*, DWRITE_FONT_STYLE)
    get_font_stretch : Proc(IDWriteTextFormat*, DWRITE_FONT_STRETCH)
    get_font_size : Proc(IDWriteTextFormat*, Float32)
    get_locale_name_length : Proc(IDWriteTextFormat*, UInt32)
    get_locale_name : Proc(IDWriteTextFormat*, Char*, UInt32, HRESULT)
  end

  IDWriteTextFormat_GUID = LibC::GUID.new("9c906818-31d7-4fd3-a151-7c5e225db55a")
  CLSID_IDWriteTextFormat = "9c906818-31d7-4fd3-a151-7c5e225db55a"
  struct IDWriteTextFormat
    lpVtbl : IDWriteTextFormatVTbl*
  end

  struct IDWriteTypographyVTbl
    query_interface : Proc(IDWriteTypography*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteTypography*, UInt32)
    release : Proc(IDWriteTypography*, UInt32)
    add_font_feature : Proc(IDWriteTypography*, DWRITE_FONT_FEATURE, HRESULT)
    get_font_feature_count : Proc(IDWriteTypography*, UInt32)
    get_font_feature : Proc(IDWriteTypography*, UInt32, DWRITE_FONT_FEATURE*, HRESULT)
  end

  IDWriteTypography_GUID = LibC::GUID.new("55f1112b-1dc2-4b3c-9541-f46894ed85b6")
  CLSID_IDWriteTypography = "55f1112b-1dc2-4b3c-9541-f46894ed85b6"
  struct IDWriteTypography
    lpVtbl : IDWriteTypographyVTbl*
  end

  struct IDWriteNumberSubstitutionVTbl
    query_interface : Proc(IDWriteNumberSubstitution*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteNumberSubstitution*, UInt32)
    release : Proc(IDWriteNumberSubstitution*, UInt32)
  end

  IDWriteNumberSubstitution_GUID = LibC::GUID.new("14885cc9-bab0-4f90-b6ed-5c366a2cd03d")
  CLSID_IDWriteNumberSubstitution = "14885cc9-bab0-4f90-b6ed-5c366a2cd03d"
  struct IDWriteNumberSubstitution
    lpVtbl : IDWriteNumberSubstitutionVTbl*
  end

  struct IDWriteTextAnalysisSourceVTbl
    query_interface : Proc(IDWriteTextAnalysisSource*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteTextAnalysisSource*, UInt32)
    release : Proc(IDWriteTextAnalysisSource*, UInt32)
    get_text_at_position : Proc(IDWriteTextAnalysisSource*, UInt32, UInt16**, UInt32*, HRESULT)
    get_text_before_position : Proc(IDWriteTextAnalysisSource*, UInt32, UInt16**, UInt32*, HRESULT)
    get_paragraph_reading_direction : Proc(IDWriteTextAnalysisSource*, DWRITE_READING_DIRECTION)
    get_locale_name : Proc(IDWriteTextAnalysisSource*, UInt32, UInt32*, UInt16**, HRESULT)
    get_number_substitution : Proc(IDWriteTextAnalysisSource*, UInt32, UInt32*, IDWriteNumberSubstitution*, HRESULT)
  end

  IDWriteTextAnalysisSource_GUID = LibC::GUID.new("688e1a58-5094-47c8-adc8-fbcea60ae92b")
  CLSID_IDWriteTextAnalysisSource = "688e1a58-5094-47c8-adc8-fbcea60ae92b"
  struct IDWriteTextAnalysisSource
    lpVtbl : IDWriteTextAnalysisSourceVTbl*
  end

  struct IDWriteTextAnalysisSinkVTbl
    query_interface : Proc(IDWriteTextAnalysisSink*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteTextAnalysisSink*, UInt32)
    release : Proc(IDWriteTextAnalysisSink*, UInt32)
    set_script_analysis : Proc(IDWriteTextAnalysisSink*, UInt32, UInt32, DWRITE_SCRIPT_ANALYSIS*, HRESULT)
    set_line_breakpoints : Proc(IDWriteTextAnalysisSink*, UInt32, UInt32, DWRITE_LINE_BREAKPOINT*, HRESULT)
    set_bidi_level : Proc(IDWriteTextAnalysisSink*, UInt32, UInt32, UInt8, UInt8, HRESULT)
    set_number_substitution : Proc(IDWriteTextAnalysisSink*, UInt32, UInt32, IDWriteNumberSubstitution, HRESULT)
  end

  IDWriteTextAnalysisSink_GUID = LibC::GUID.new("5810cd44-0ca0-4701-b3fa-bec5182ae4f6")
  CLSID_IDWriteTextAnalysisSink = "5810cd44-0ca0-4701-b3fa-bec5182ae4f6"
  struct IDWriteTextAnalysisSink
    lpVtbl : IDWriteTextAnalysisSinkVTbl*
  end

  struct IDWriteTextAnalyzerVTbl
    query_interface : Proc(IDWriteTextAnalyzer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteTextAnalyzer*, UInt32)
    release : Proc(IDWriteTextAnalyzer*, UInt32)
    analyze_script : Proc(IDWriteTextAnalyzer*, IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)
    analyze_bidi : Proc(IDWriteTextAnalyzer*, IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)
    analyze_number_substitution : Proc(IDWriteTextAnalyzer*, IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)
    analyze_line_breakpoints : Proc(IDWriteTextAnalyzer*, IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)
    get_glyphs : Proc(IDWriteTextAnalyzer*, Char*, UInt32, IDWriteFontFace, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS*, LibC::LPWSTR, IDWriteNumberSubstitution, DWRITE_TYPOGRAPHIC_FEATURES**, UInt32*, UInt32, UInt32, UInt16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32*, HRESULT)
    get_glyph_placements : Proc(IDWriteTextAnalyzer*, Char*, UInt16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UInt32, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32, IDWriteFontFace, Float32, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS*, LibC::LPWSTR, DWRITE_TYPOGRAPHIC_FEATURES**, UInt32*, UInt32, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)
    get_gdi_compatible_glyph_placements : Proc(IDWriteTextAnalyzer*, Char*, UInt16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UInt32, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32, IDWriteFontFace, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS*, LibC::LPWSTR, DWRITE_TYPOGRAPHIC_FEATURES**, UInt32*, UInt32, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)
  end

  IDWriteTextAnalyzer_GUID = LibC::GUID.new("b7e6163e-7f46-43b4-84b3-e4e6249c365d")
  CLSID_IDWriteTextAnalyzer = "b7e6163e-7f46-43b4-84b3-e4e6249c365d"
  struct IDWriteTextAnalyzer
    lpVtbl : IDWriteTextAnalyzerVTbl*
  end

  struct IDWriteInlineObjectVTbl
    query_interface : Proc(IDWriteInlineObject*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteInlineObject*, UInt32)
    release : Proc(IDWriteInlineObject*, UInt32)
    draw : Proc(IDWriteInlineObject*, Void*, IDWriteTextRenderer, Float32, Float32, LibC::BOOL, LibC::BOOL, IUnknown, HRESULT)
    get_metrics : Proc(IDWriteInlineObject*, DWRITE_INLINE_OBJECT_METRICS*, HRESULT)
    get_overhang_metrics : Proc(IDWriteInlineObject*, DWRITE_OVERHANG_METRICS*, HRESULT)
    get_break_conditions : Proc(IDWriteInlineObject*, DWRITE_BREAK_CONDITION*, DWRITE_BREAK_CONDITION*, HRESULT)
  end

  IDWriteInlineObject_GUID = LibC::GUID.new("8339fde3-106f-47ab-8373-1c6295eb10b3")
  CLSID_IDWriteInlineObject = "8339fde3-106f-47ab-8373-1c6295eb10b3"
  struct IDWriteInlineObject
    lpVtbl : IDWriteInlineObjectVTbl*
  end

  struct IDWritePixelSnappingVTbl
    query_interface : Proc(IDWritePixelSnapping*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWritePixelSnapping*, UInt32)
    release : Proc(IDWritePixelSnapping*, UInt32)
    is_pixel_snapping_disabled : Proc(IDWritePixelSnapping*, Void*, LibC::BOOL*, HRESULT)
    get_current_transform : Proc(IDWritePixelSnapping*, Void*, DWRITE_MATRIX*, HRESULT)
    get_pixels_per_dip : Proc(IDWritePixelSnapping*, Void*, Float32*, HRESULT)
  end

  IDWritePixelSnapping_GUID = LibC::GUID.new("eaf3a2da-ecf4-4d24-b644-b34f6842024b")
  CLSID_IDWritePixelSnapping = "eaf3a2da-ecf4-4d24-b644-b34f6842024b"
  struct IDWritePixelSnapping
    lpVtbl : IDWritePixelSnappingVTbl*
  end

  struct IDWriteTextRendererVTbl
    query_interface : Proc(IDWriteTextRenderer*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteTextRenderer*, UInt32)
    release : Proc(IDWriteTextRenderer*, UInt32)
    is_pixel_snapping_disabled : Proc(IDWriteTextRenderer*, Void*, LibC::BOOL*, HRESULT)
    get_current_transform : Proc(IDWriteTextRenderer*, Void*, DWRITE_MATRIX*, HRESULT)
    get_pixels_per_dip : Proc(IDWriteTextRenderer*, Void*, Float32*, HRESULT)
    draw_glyph_run : Proc(IDWriteTextRenderer*, Void*, Float32, Float32, DWRITE_MEASURING_MODE, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, IUnknown, HRESULT)
    draw_underline : Proc(IDWriteTextRenderer*, Void*, Float32, Float32, DWRITE_UNDERLINE*, IUnknown, HRESULT)
    draw_strikethrough : Proc(IDWriteTextRenderer*, Void*, Float32, Float32, DWRITE_STRIKETHROUGH*, IUnknown, HRESULT)
    draw_inline_object : Proc(IDWriteTextRenderer*, Void*, Float32, Float32, IDWriteInlineObject, LibC::BOOL, LibC::BOOL, IUnknown, HRESULT)
  end

  IDWriteTextRenderer_GUID = LibC::GUID.new("ef8a8135-5cc6-45fe-8825-c5a0724eb819")
  CLSID_IDWriteTextRenderer = "ef8a8135-5cc6-45fe-8825-c5a0724eb819"
  struct IDWriteTextRenderer
    lpVtbl : IDWriteTextRendererVTbl*
  end

  struct IDWriteTextLayoutVTbl
    query_interface : Proc(IDWriteTextLayout*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteTextLayout*, UInt32)
    release : Proc(IDWriteTextLayout*, UInt32)
    set_text_alignment : Proc(IDWriteTextLayout*, DWRITE_TEXT_ALIGNMENT, HRESULT)
    set_paragraph_alignment : Proc(IDWriteTextLayout*, DWRITE_PARAGRAPH_ALIGNMENT, HRESULT)
    set_word_wrapping : Proc(IDWriteTextLayout*, DWRITE_WORD_WRAPPING, HRESULT)
    set_reading_direction : Proc(IDWriteTextLayout*, DWRITE_READING_DIRECTION, HRESULT)
    set_flow_direction : Proc(IDWriteTextLayout*, DWRITE_FLOW_DIRECTION, HRESULT)
    set_incremental_tab_stop : Proc(IDWriteTextLayout*, Float32, HRESULT)
    set_trimming : Proc(IDWriteTextLayout*, DWRITE_TRIMMING*, IDWriteInlineObject, HRESULT)
    set_line_spacing : Proc(IDWriteTextLayout*, DWRITE_LINE_SPACING_METHOD, Float32, Float32, HRESULT)
    get_text_alignment : Proc(IDWriteTextLayout*, DWRITE_TEXT_ALIGNMENT)
    get_paragraph_alignment : Proc(IDWriteTextLayout*, DWRITE_PARAGRAPH_ALIGNMENT)
    get_word_wrapping : Proc(IDWriteTextLayout*, DWRITE_WORD_WRAPPING)
    get_reading_direction : Proc(IDWriteTextLayout*, DWRITE_READING_DIRECTION)
    get_flow_direction : Proc(IDWriteTextLayout*, DWRITE_FLOW_DIRECTION)
    get_incremental_tab_stop : Proc(IDWriteTextLayout*, Float32)
    get_trimming : Proc(IDWriteTextLayout*, DWRITE_TRIMMING*, IDWriteInlineObject*, HRESULT)
    get_line_spacing : Proc(IDWriteTextLayout*, DWRITE_LINE_SPACING_METHOD*, Float32*, Float32*, HRESULT)
    get_font_collection : Proc(IDWriteTextLayout*, IDWriteFontCollection*, HRESULT)
    get_font_family_name_length : Proc(IDWriteTextLayout*, UInt32)
    get_font_family_name : Proc(IDWriteTextLayout*, Char*, UInt32, HRESULT)
    get_font_weight : Proc(IDWriteTextLayout*, DWRITE_FONT_WEIGHT)
    get_font_style : Proc(IDWriteTextLayout*, DWRITE_FONT_STYLE)
    get_font_stretch : Proc(IDWriteTextLayout*, DWRITE_FONT_STRETCH)
    get_font_size : Proc(IDWriteTextLayout*, Float32)
    get_locale_name_length : Proc(IDWriteTextLayout*, UInt32)
    get_locale_name : Proc(IDWriteTextLayout*, Char*, UInt32, HRESULT)
    set_max_width : Proc(IDWriteTextLayout*, Float32, HRESULT)
    set_max_height : Proc(IDWriteTextLayout*, Float32, HRESULT)
    set_font_collection : Proc(IDWriteTextLayout*, IDWriteFontCollection, DWRITE_TEXT_RANGE, HRESULT)
    set_font_family_name : Proc(IDWriteTextLayout*, LibC::LPWSTR, DWRITE_TEXT_RANGE, HRESULT)
    set_font_weight : Proc(IDWriteTextLayout*, DWRITE_FONT_WEIGHT, DWRITE_TEXT_RANGE, HRESULT)
    set_font_style : Proc(IDWriteTextLayout*, DWRITE_FONT_STYLE, DWRITE_TEXT_RANGE, HRESULT)
    set_font_stretch : Proc(IDWriteTextLayout*, DWRITE_FONT_STRETCH, DWRITE_TEXT_RANGE, HRESULT)
    set_font_size : Proc(IDWriteTextLayout*, Float32, DWRITE_TEXT_RANGE, HRESULT)
    set_underline : Proc(IDWriteTextLayout*, LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)
    set_strikethrough : Proc(IDWriteTextLayout*, LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)
    set_drawing_effect : Proc(IDWriteTextLayout*, IUnknown, DWRITE_TEXT_RANGE, HRESULT)
    set_inline_object : Proc(IDWriteTextLayout*, IDWriteInlineObject, DWRITE_TEXT_RANGE, HRESULT)
    set_typography : Proc(IDWriteTextLayout*, IDWriteTypography, DWRITE_TEXT_RANGE, HRESULT)
    set_locale_name : Proc(IDWriteTextLayout*, LibC::LPWSTR, DWRITE_TEXT_RANGE, HRESULT)
    get_max_width : Proc(IDWriteTextLayout*, Float32)
    get_max_height : Proc(IDWriteTextLayout*, Float32)
    get_font_collection2 : Proc(IDWriteTextLayout*, UInt32, IDWriteFontCollection*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_family_name_length2 : Proc(IDWriteTextLayout*, UInt32, UInt32*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_family_name2 : Proc(IDWriteTextLayout*, UInt32, Char*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_weight2 : Proc(IDWriteTextLayout*, UInt32, DWRITE_FONT_WEIGHT*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_style2 : Proc(IDWriteTextLayout*, UInt32, DWRITE_FONT_STYLE*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_stretch2 : Proc(IDWriteTextLayout*, UInt32, DWRITE_FONT_STRETCH*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_size2 : Proc(IDWriteTextLayout*, UInt32, Float32*, DWRITE_TEXT_RANGE*, HRESULT)
    get_underline : Proc(IDWriteTextLayout*, UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)
    get_strikethrough : Proc(IDWriteTextLayout*, UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)
    get_drawing_effect : Proc(IDWriteTextLayout*, UInt32, IUnknown*, DWRITE_TEXT_RANGE*, HRESULT)
    get_inline_object : Proc(IDWriteTextLayout*, UInt32, IDWriteInlineObject*, DWRITE_TEXT_RANGE*, HRESULT)
    get_typography : Proc(IDWriteTextLayout*, UInt32, IDWriteTypography*, DWRITE_TEXT_RANGE*, HRESULT)
    get_locale_name_length2 : Proc(IDWriteTextLayout*, UInt32, UInt32*, DWRITE_TEXT_RANGE*, HRESULT)
    get_locale_name2 : Proc(IDWriteTextLayout*, UInt32, Char*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)
    draw : Proc(IDWriteTextLayout*, Void*, IDWriteTextRenderer, Float32, Float32, HRESULT)
    get_line_metrics : Proc(IDWriteTextLayout*, DWRITE_LINE_METRICS*, UInt32, UInt32*, HRESULT)
    get_metrics : Proc(IDWriteTextLayout*, DWRITE_TEXT_METRICS*, HRESULT)
    get_overhang_metrics : Proc(IDWriteTextLayout*, DWRITE_OVERHANG_METRICS*, HRESULT)
    get_cluster_metrics : Proc(IDWriteTextLayout*, DWRITE_CLUSTER_METRICS*, UInt32, UInt32*, HRESULT)
    determine_min_width : Proc(IDWriteTextLayout*, Float32*, HRESULT)
    hit_test_point : Proc(IDWriteTextLayout*, Float32, Float32, LibC::BOOL*, LibC::BOOL*, DWRITE_HIT_TEST_METRICS*, HRESULT)
    hit_test_text_position : Proc(IDWriteTextLayout*, UInt32, LibC::BOOL, Float32*, Float32*, DWRITE_HIT_TEST_METRICS*, HRESULT)
    hit_test_text_range : Proc(IDWriteTextLayout*, UInt32, UInt32, Float32, Float32, DWRITE_HIT_TEST_METRICS*, UInt32, UInt32*, HRESULT)
  end

  IDWriteTextLayout_GUID = LibC::GUID.new("53737037-6d14-410b-9bfe-0b182bb70961")
  CLSID_IDWriteTextLayout = "53737037-6d14-410b-9bfe-0b182bb70961"
  struct IDWriteTextLayout
    lpVtbl : IDWriteTextLayoutVTbl*
  end

  struct IDWriteBitmapRenderTargetVTbl
    query_interface : Proc(IDWriteBitmapRenderTarget*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteBitmapRenderTarget*, UInt32)
    release : Proc(IDWriteBitmapRenderTarget*, UInt32)
    draw_glyph_run : Proc(IDWriteBitmapRenderTarget*, Float32, Float32, DWRITE_MEASURING_MODE, DWRITE_GLYPH_RUN*, IDWriteRenderingParams, UInt32, RECT*, HRESULT)
    get_memory_dc : Proc(IDWriteBitmapRenderTarget*, HDC)
    get_pixels_per_dip : Proc(IDWriteBitmapRenderTarget*, Float32)
    set_pixels_per_dip : Proc(IDWriteBitmapRenderTarget*, Float32, HRESULT)
    get_current_transform : Proc(IDWriteBitmapRenderTarget*, DWRITE_MATRIX*, HRESULT)
    set_current_transform : Proc(IDWriteBitmapRenderTarget*, DWRITE_MATRIX*, HRESULT)
    get_size : Proc(IDWriteBitmapRenderTarget*, SIZE*, HRESULT)
    resize : Proc(IDWriteBitmapRenderTarget*, UInt32, UInt32, HRESULT)
  end

  IDWriteBitmapRenderTarget_GUID = LibC::GUID.new("5e5a32a3-8dff-4773-9ff6-0696eab77267")
  CLSID_IDWriteBitmapRenderTarget = "5e5a32a3-8dff-4773-9ff6-0696eab77267"
  struct IDWriteBitmapRenderTarget
    lpVtbl : IDWriteBitmapRenderTargetVTbl*
  end

  struct IDWriteGdiInteropVTbl
    query_interface : Proc(IDWriteGdiInterop*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteGdiInterop*, UInt32)
    release : Proc(IDWriteGdiInterop*, UInt32)
    create_font_from_logfont : Proc(IDWriteGdiInterop*, LOGFONTW*, IDWriteFont*, HRESULT)
    convert_font_to_logfont : Proc(IDWriteGdiInterop*, IDWriteFont, LOGFONTW*, LibC::BOOL*, HRESULT)
    convert_font_face_to_logfont : Proc(IDWriteGdiInterop*, IDWriteFontFace, LOGFONTW*, HRESULT)
    create_font_face_from_hdc : Proc(IDWriteGdiInterop*, HDC, IDWriteFontFace*, HRESULT)
    create_bitmap_render_target : Proc(IDWriteGdiInterop*, HDC, UInt32, UInt32, IDWriteBitmapRenderTarget*, HRESULT)
  end

  IDWriteGdiInterop_GUID = LibC::GUID.new("1edd9491-9853-4299-898f-6432983b6f3a")
  CLSID_IDWriteGdiInterop = "1edd9491-9853-4299-898f-6432983b6f3a"
  struct IDWriteGdiInterop
    lpVtbl : IDWriteGdiInteropVTbl*
  end

  struct IDWriteGlyphRunAnalysisVTbl
    query_interface : Proc(IDWriteGlyphRunAnalysis*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteGlyphRunAnalysis*, UInt32)
    release : Proc(IDWriteGlyphRunAnalysis*, UInt32)
    get_alpha_texture_bounds : Proc(IDWriteGlyphRunAnalysis*, DWRITE_TEXTURE_TYPE, RECT*, HRESULT)
    create_alpha_texture : Proc(IDWriteGlyphRunAnalysis*, DWRITE_TEXTURE_TYPE, RECT*, UInt8*, UInt32, HRESULT)
    get_alpha_blend_params : Proc(IDWriteGlyphRunAnalysis*, IDWriteRenderingParams, Float32*, Float32*, Float32*, HRESULT)
  end

  IDWriteGlyphRunAnalysis_GUID = LibC::GUID.new("7d97dbf7-e085-42d4-81e3-6a883bded118")
  CLSID_IDWriteGlyphRunAnalysis = "7d97dbf7-e085-42d4-81e3-6a883bded118"
  struct IDWriteGlyphRunAnalysis
    lpVtbl : IDWriteGlyphRunAnalysisVTbl*
  end

  struct IDWriteFactoryVTbl
    query_interface : Proc(IDWriteFactory*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFactory*, UInt32)
    release : Proc(IDWriteFactory*, UInt32)
    get_system_font_collection : Proc(IDWriteFactory*, IDWriteFontCollection*, LibC::BOOL, HRESULT)
    create_custom_font_collection : Proc(IDWriteFactory*, IDWriteFontCollectionLoader, Void*, UInt32, IDWriteFontCollection*, HRESULT)
    register_font_collection_loader : Proc(IDWriteFactory*, IDWriteFontCollectionLoader, HRESULT)
    unregister_font_collection_loader : Proc(IDWriteFactory*, IDWriteFontCollectionLoader, HRESULT)
    create_font_file_reference : Proc(IDWriteFactory*, LibC::LPWSTR, FILETIME*, IDWriteFontFile*, HRESULT)
    create_custom_font_file_reference : Proc(IDWriteFactory*, Void*, UInt32, IDWriteFontFileLoader, IDWriteFontFile*, HRESULT)
    create_font_face : Proc(IDWriteFactory*, DWRITE_FONT_FACE_TYPE, UInt32, IDWriteFontFile*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace*, HRESULT)
    create_rendering_params : Proc(IDWriteFactory*, IDWriteRenderingParams*, HRESULT)
    create_monitor_rendering_params : Proc(IDWriteFactory*, HMONITOR, IDWriteRenderingParams*, HRESULT)
    create_custom_rendering_params : Proc(IDWriteFactory*, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams*, HRESULT)
    register_font_file_loader : Proc(IDWriteFactory*, IDWriteFontFileLoader, HRESULT)
    unregister_font_file_loader : Proc(IDWriteFactory*, IDWriteFontFileLoader, HRESULT)
    create_text_format : Proc(IDWriteFactory*, LibC::LPWSTR, IDWriteFontCollection, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, Float32, LibC::LPWSTR, IDWriteTextFormat*, HRESULT)
    create_typography : Proc(IDWriteFactory*, IDWriteTypography*, HRESULT)
    get_gdi_interop : Proc(IDWriteFactory*, IDWriteGdiInterop*, HRESULT)
    create_text_layout : Proc(IDWriteFactory*, Char*, UInt32, IDWriteTextFormat, Float32, Float32, IDWriteTextLayout*, HRESULT)
    create_gdi_compatible_text_layout : Proc(IDWriteFactory*, Char*, UInt32, IDWriteTextFormat, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, IDWriteTextLayout*, HRESULT)
    create_ellipsis_trimming_sign : Proc(IDWriteFactory*, IDWriteTextFormat, IDWriteInlineObject*, HRESULT)
    create_text_analyzer : Proc(IDWriteFactory*, IDWriteTextAnalyzer*, HRESULT)
    create_number_substitution : Proc(IDWriteFactory*, DWRITE_NUMBER_SUBSTITUTION_METHOD, LibC::LPWSTR, LibC::BOOL, IDWriteNumberSubstitution*, HRESULT)
    create_glyph_run_analysis : Proc(IDWriteFactory*, DWRITE_GLYPH_RUN*, Float32, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)
  end

  IDWriteFactory_GUID = LibC::GUID.new("b859ee5a-d838-4b5b-a2e8-1adc7d93db48")
  CLSID_IDWriteFactory = "b859ee5a-d838-4b5b-a2e8-1adc7d93db48"
  struct IDWriteFactory
    lpVtbl : IDWriteFactoryVTbl*
  end

  struct IDWriteFactory1VTbl
    query_interface : Proc(IDWriteFactory1*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFactory1*, UInt32)
    release : Proc(IDWriteFactory1*, UInt32)
    get_system_font_collection : Proc(IDWriteFactory1*, IDWriteFontCollection*, LibC::BOOL, HRESULT)
    create_custom_font_collection : Proc(IDWriteFactory1*, IDWriteFontCollectionLoader, Void*, UInt32, IDWriteFontCollection*, HRESULT)
    register_font_collection_loader : Proc(IDWriteFactory1*, IDWriteFontCollectionLoader, HRESULT)
    unregister_font_collection_loader : Proc(IDWriteFactory1*, IDWriteFontCollectionLoader, HRESULT)
    create_font_file_reference : Proc(IDWriteFactory1*, LibC::LPWSTR, FILETIME*, IDWriteFontFile*, HRESULT)
    create_custom_font_file_reference : Proc(IDWriteFactory1*, Void*, UInt32, IDWriteFontFileLoader, IDWriteFontFile*, HRESULT)
    create_font_face : Proc(IDWriteFactory1*, DWRITE_FONT_FACE_TYPE, UInt32, IDWriteFontFile*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace*, HRESULT)
    create_rendering_params : Proc(IDWriteFactory1*, IDWriteRenderingParams*, HRESULT)
    create_monitor_rendering_params : Proc(IDWriteFactory1*, HMONITOR, IDWriteRenderingParams*, HRESULT)
    create_custom_rendering_params : Proc(IDWriteFactory1*, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams*, HRESULT)
    register_font_file_loader : Proc(IDWriteFactory1*, IDWriteFontFileLoader, HRESULT)
    unregister_font_file_loader : Proc(IDWriteFactory1*, IDWriteFontFileLoader, HRESULT)
    create_text_format : Proc(IDWriteFactory1*, LibC::LPWSTR, IDWriteFontCollection, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, Float32, LibC::LPWSTR, IDWriteTextFormat*, HRESULT)
    create_typography : Proc(IDWriteFactory1*, IDWriteTypography*, HRESULT)
    get_gdi_interop : Proc(IDWriteFactory1*, IDWriteGdiInterop*, HRESULT)
    create_text_layout : Proc(IDWriteFactory1*, Char*, UInt32, IDWriteTextFormat, Float32, Float32, IDWriteTextLayout*, HRESULT)
    create_gdi_compatible_text_layout : Proc(IDWriteFactory1*, Char*, UInt32, IDWriteTextFormat, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, IDWriteTextLayout*, HRESULT)
    create_ellipsis_trimming_sign : Proc(IDWriteFactory1*, IDWriteTextFormat, IDWriteInlineObject*, HRESULT)
    create_text_analyzer : Proc(IDWriteFactory1*, IDWriteTextAnalyzer*, HRESULT)
    create_number_substitution : Proc(IDWriteFactory1*, DWRITE_NUMBER_SUBSTITUTION_METHOD, LibC::LPWSTR, LibC::BOOL, IDWriteNumberSubstitution*, HRESULT)
    create_glyph_run_analysis : Proc(IDWriteFactory1*, DWRITE_GLYPH_RUN*, Float32, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)
    get_eudc_font_collection : Proc(IDWriteFactory1*, IDWriteFontCollection*, LibC::BOOL, HRESULT)
    create_custom_rendering_params2 : Proc(IDWriteFactory1*, Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams1*, HRESULT)
  end

  IDWriteFactory1_GUID = LibC::GUID.new("30572f99-dac6-41db-a16e-0486307e606a")
  CLSID_IDWriteFactory1 = "30572f99-dac6-41db-a16e-0486307e606a"
  struct IDWriteFactory1
    lpVtbl : IDWriteFactory1VTbl*
  end

  struct IDWriteFontFace1VTbl
    query_interface : Proc(IDWriteFontFace1*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontFace1*, UInt32)
    release : Proc(IDWriteFontFace1*, UInt32)
    get_type : Proc(IDWriteFontFace1*, DWRITE_FONT_FACE_TYPE)
    get_files : Proc(IDWriteFontFace1*, UInt32*, IDWriteFontFile*, HRESULT)
    get_index : Proc(IDWriteFontFace1*, UInt32)
    get_simulations : Proc(IDWriteFontFace1*, DWRITE_FONT_SIMULATIONS)
    is_symbol_font : Proc(IDWriteFontFace1*, LibC::BOOL)
    get_metrics : Proc(IDWriteFontFace1*, DWRITE_FONT_METRICS*, Void)
    get_glyph_count : Proc(IDWriteFontFace1*, UInt16)
    get_design_glyph_metrics : Proc(IDWriteFontFace1*, UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)
    get_glyph_indices : Proc(IDWriteFontFace1*, UInt32*, UInt32, UInt16*, HRESULT)
    try_get_font_table : Proc(IDWriteFontFace1*, UInt32, Void**, UInt32*, Void**, LibC::BOOL*, HRESULT)
    release_font_table : Proc(IDWriteFontFace1*, Void*, Void)
    get_glyph_run_outline : Proc(IDWriteFontFace1*, Float32, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, UInt32, LibC::BOOL, LibC::BOOL, ID2D1SimplifiedGeometrySink, HRESULT)
    get_recommended_rendering_mode : Proc(IDWriteFontFace1*, Float32, Float32, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, HRESULT)
    get_gdi_compatible_metrics : Proc(IDWriteFontFace1*, Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS*, HRESULT)
    get_gdi_compatible_glyph_metrics : Proc(IDWriteFontFace1*, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)
    get_metrics2 : Proc(IDWriteFontFace1*, DWRITE_FONT_METRICS1*, Void)
    get_gdi_compatible_metrics2 : Proc(IDWriteFontFace1*, Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS1*, HRESULT)
    get_caret_metrics : Proc(IDWriteFontFace1*, DWRITE_CARET_METRICS*, Void)
    get_unicode_ranges : Proc(IDWriteFontFace1*, UInt32, DWRITE_UNICODE_RANGE*, UInt32*, HRESULT)
    is_monospaced_font : Proc(IDWriteFontFace1*, LibC::BOOL)
    get_design_glyph_advances : Proc(IDWriteFontFace1*, UInt32, UInt16*, Int32*, LibC::BOOL, HRESULT)
    get_gdi_compatible_glyph_advances : Proc(IDWriteFontFace1*, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, LibC::BOOL, UInt32, UInt16*, Int32*, HRESULT)
    get_kerning_pair_adjustments : Proc(IDWriteFontFace1*, UInt32, UInt16*, Int32*, HRESULT)
    has_kerning_pairs : Proc(IDWriteFontFace1*, LibC::BOOL)
    get_recommended_rendering_mode2 : Proc(IDWriteFontFace1*, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, DWRITE_RENDERING_MODE*, HRESULT)
    get_vertical_glyph_variants : Proc(IDWriteFontFace1*, UInt32, UInt16*, UInt16*, HRESULT)
    has_vertical_glyph_variants : Proc(IDWriteFontFace1*, LibC::BOOL)
  end

  IDWriteFontFace1_GUID = LibC::GUID.new("a71efdb4-9fdb-4838-ad90-cfc3be8c3daf")
  CLSID_IDWriteFontFace1 = "a71efdb4-9fdb-4838-ad90-cfc3be8c3daf"
  struct IDWriteFontFace1
    lpVtbl : IDWriteFontFace1VTbl*
  end

  struct IDWriteFont1VTbl
    query_interface : Proc(IDWriteFont1*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFont1*, UInt32)
    release : Proc(IDWriteFont1*, UInt32)
    get_font_family : Proc(IDWriteFont1*, IDWriteFontFamily*, HRESULT)
    get_weight : Proc(IDWriteFont1*, DWRITE_FONT_WEIGHT)
    get_stretch : Proc(IDWriteFont1*, DWRITE_FONT_STRETCH)
    get_style : Proc(IDWriteFont1*, DWRITE_FONT_STYLE)
    is_symbol_font : Proc(IDWriteFont1*, LibC::BOOL)
    get_face_names : Proc(IDWriteFont1*, IDWriteLocalizedStrings*, HRESULT)
    get_informational_strings : Proc(IDWriteFont1*, DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings*, LibC::BOOL*, HRESULT)
    get_simulations : Proc(IDWriteFont1*, DWRITE_FONT_SIMULATIONS)
    get_metrics : Proc(IDWriteFont1*, DWRITE_FONT_METRICS*, Void)
    has_character : Proc(IDWriteFont1*, UInt32, LibC::BOOL*, HRESULT)
    create_font_face : Proc(IDWriteFont1*, IDWriteFontFace*, HRESULT)
    get_metrics2 : Proc(IDWriteFont1*, DWRITE_FONT_METRICS1*, Void)
    get_panose : Proc(IDWriteFont1*, DWRITE_PANOSE*, Void)
    get_unicode_ranges : Proc(IDWriteFont1*, UInt32, DWRITE_UNICODE_RANGE*, UInt32*, HRESULT)
    is_monospaced_font : Proc(IDWriteFont1*, LibC::BOOL)
  end

  IDWriteFont1_GUID = LibC::GUID.new("acd16696-8c14-4f5d-877e-fe3fc1d32738")
  CLSID_IDWriteFont1 = "acd16696-8c14-4f5d-877e-fe3fc1d32738"
  struct IDWriteFont1
    lpVtbl : IDWriteFont1VTbl*
  end

  struct IDWriteRenderingParams1VTbl
    query_interface : Proc(IDWriteRenderingParams1*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteRenderingParams1*, UInt32)
    release : Proc(IDWriteRenderingParams1*, UInt32)
    get_gamma : Proc(IDWriteRenderingParams1*, Float32)
    get_enhanced_contrast : Proc(IDWriteRenderingParams1*, Float32)
    get_clear_type_level : Proc(IDWriteRenderingParams1*, Float32)
    get_pixel_geometry : Proc(IDWriteRenderingParams1*, DWRITE_PIXEL_GEOMETRY)
    get_rendering_mode : Proc(IDWriteRenderingParams1*, DWRITE_RENDERING_MODE)
    get_grayscale_enhanced_contrast : Proc(IDWriteRenderingParams1*, Float32)
  end

  IDWriteRenderingParams1_GUID = LibC::GUID.new("94413cf4-a6fc-4248-8b50-6674348fcad3")
  CLSID_IDWriteRenderingParams1 = "94413cf4-a6fc-4248-8b50-6674348fcad3"
  struct IDWriteRenderingParams1
    lpVtbl : IDWriteRenderingParams1VTbl*
  end

  struct IDWriteTextAnalyzer1VTbl
    query_interface : Proc(IDWriteTextAnalyzer1*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteTextAnalyzer1*, UInt32)
    release : Proc(IDWriteTextAnalyzer1*, UInt32)
    analyze_script : Proc(IDWriteTextAnalyzer1*, IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)
    analyze_bidi : Proc(IDWriteTextAnalyzer1*, IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)
    analyze_number_substitution : Proc(IDWriteTextAnalyzer1*, IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)
    analyze_line_breakpoints : Proc(IDWriteTextAnalyzer1*, IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)
    get_glyphs : Proc(IDWriteTextAnalyzer1*, Char*, UInt32, IDWriteFontFace, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS*, LibC::LPWSTR, IDWriteNumberSubstitution, DWRITE_TYPOGRAPHIC_FEATURES**, UInt32*, UInt32, UInt32, UInt16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32*, HRESULT)
    get_glyph_placements : Proc(IDWriteTextAnalyzer1*, Char*, UInt16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UInt32, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32, IDWriteFontFace, Float32, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS*, LibC::LPWSTR, DWRITE_TYPOGRAPHIC_FEATURES**, UInt32*, UInt32, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)
    get_gdi_compatible_glyph_placements : Proc(IDWriteTextAnalyzer1*, Char*, UInt16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UInt32, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32, IDWriteFontFace, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS*, LibC::LPWSTR, DWRITE_TYPOGRAPHIC_FEATURES**, UInt32*, UInt32, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)
    apply_character_spacing : Proc(IDWriteTextAnalyzer1*, Float32, Float32, Float32, UInt32, UInt32, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, DWRITE_SHAPING_GLYPH_PROPERTIES*, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)
    get_baseline : Proc(IDWriteTextAnalyzer1*, IDWriteFontFace, DWRITE_BASELINE, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS, LibC::LPWSTR, Int32*, LibC::BOOL*, HRESULT)
    analyze_vertical_glyph_orientation : Proc(IDWriteTextAnalyzer1*, IDWriteTextAnalysisSource1, UInt32, UInt32, IDWriteTextAnalysisSink1, HRESULT)
    get_glyph_orientation_transform : Proc(IDWriteTextAnalyzer1*, DWRITE_GLYPH_ORIENTATION_ANGLE, LibC::BOOL, DWRITE_MATRIX*, HRESULT)
    get_script_properties : Proc(IDWriteTextAnalyzer1*, DWRITE_SCRIPT_ANALYSIS, DWRITE_SCRIPT_PROPERTIES*, HRESULT)
    get_text_complexity : Proc(IDWriteTextAnalyzer1*, Char*, UInt32, IDWriteFontFace, LibC::BOOL*, UInt32*, UInt16*, HRESULT)
    get_justification_opportunities : Proc(IDWriteTextAnalyzer1*, IDWriteFontFace, Float32, DWRITE_SCRIPT_ANALYSIS, UInt32, UInt32, Char*, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, DWRITE_JUSTIFICATION_OPPORTUNITY*, HRESULT)
    justify_glyph_advances : Proc(IDWriteTextAnalyzer1*, Float32, UInt32, DWRITE_JUSTIFICATION_OPPORTUNITY*, Float32*, DWRITE_GLYPH_OFFSET*, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)
    get_justified_glyphs : Proc(IDWriteTextAnalyzer1*, IDWriteFontFace, Float32, DWRITE_SCRIPT_ANALYSIS, UInt32, UInt32, UInt32, UInt16*, UInt16*, Float32*, Float32*, DWRITE_GLYPH_OFFSET*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32*, UInt16*, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)
  end

  IDWriteTextAnalyzer1_GUID = LibC::GUID.new("80dad800-e21f-4e83-96ce-bfcce500db7c")
  CLSID_IDWriteTextAnalyzer1 = "80dad800-e21f-4e83-96ce-bfcce500db7c"
  struct IDWriteTextAnalyzer1
    lpVtbl : IDWriteTextAnalyzer1VTbl*
  end

  struct IDWriteTextAnalysisSource1VTbl
    query_interface : Proc(IDWriteTextAnalysisSource1*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteTextAnalysisSource1*, UInt32)
    release : Proc(IDWriteTextAnalysisSource1*, UInt32)
    get_text_at_position : Proc(IDWriteTextAnalysisSource1*, UInt32, UInt16**, UInt32*, HRESULT)
    get_text_before_position : Proc(IDWriteTextAnalysisSource1*, UInt32, UInt16**, UInt32*, HRESULT)
    get_paragraph_reading_direction : Proc(IDWriteTextAnalysisSource1*, DWRITE_READING_DIRECTION)
    get_locale_name : Proc(IDWriteTextAnalysisSource1*, UInt32, UInt32*, UInt16**, HRESULT)
    get_number_substitution : Proc(IDWriteTextAnalysisSource1*, UInt32, UInt32*, IDWriteNumberSubstitution*, HRESULT)
    get_vertical_glyph_orientation : Proc(IDWriteTextAnalysisSource1*, UInt32, UInt32*, DWRITE_VERTICAL_GLYPH_ORIENTATION*, UInt8*, HRESULT)
  end

  IDWriteTextAnalysisSource1_GUID = LibC::GUID.new("639cfad8-0fb4-4b21-a58a-067920120009")
  CLSID_IDWriteTextAnalysisSource1 = "639cfad8-0fb4-4b21-a58a-067920120009"
  struct IDWriteTextAnalysisSource1
    lpVtbl : IDWriteTextAnalysisSource1VTbl*
  end

  struct IDWriteTextAnalysisSink1VTbl
    query_interface : Proc(IDWriteTextAnalysisSink1*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteTextAnalysisSink1*, UInt32)
    release : Proc(IDWriteTextAnalysisSink1*, UInt32)
    set_script_analysis : Proc(IDWriteTextAnalysisSink1*, UInt32, UInt32, DWRITE_SCRIPT_ANALYSIS*, HRESULT)
    set_line_breakpoints : Proc(IDWriteTextAnalysisSink1*, UInt32, UInt32, DWRITE_LINE_BREAKPOINT*, HRESULT)
    set_bidi_level : Proc(IDWriteTextAnalysisSink1*, UInt32, UInt32, UInt8, UInt8, HRESULT)
    set_number_substitution : Proc(IDWriteTextAnalysisSink1*, UInt32, UInt32, IDWriteNumberSubstitution, HRESULT)
    set_glyph_orientation : Proc(IDWriteTextAnalysisSink1*, UInt32, UInt32, DWRITE_GLYPH_ORIENTATION_ANGLE, UInt8, LibC::BOOL, LibC::BOOL, HRESULT)
  end

  IDWriteTextAnalysisSink1_GUID = LibC::GUID.new("b0d941a0-85e7-4d8b-9fd3-5ced9934482a")
  CLSID_IDWriteTextAnalysisSink1 = "b0d941a0-85e7-4d8b-9fd3-5ced9934482a"
  struct IDWriteTextAnalysisSink1
    lpVtbl : IDWriteTextAnalysisSink1VTbl*
  end

  struct IDWriteTextLayout1VTbl
    query_interface : Proc(IDWriteTextLayout1*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteTextLayout1*, UInt32)
    release : Proc(IDWriteTextLayout1*, UInt32)
    set_text_alignment : Proc(IDWriteTextLayout1*, DWRITE_TEXT_ALIGNMENT, HRESULT)
    set_paragraph_alignment : Proc(IDWriteTextLayout1*, DWRITE_PARAGRAPH_ALIGNMENT, HRESULT)
    set_word_wrapping : Proc(IDWriteTextLayout1*, DWRITE_WORD_WRAPPING, HRESULT)
    set_reading_direction : Proc(IDWriteTextLayout1*, DWRITE_READING_DIRECTION, HRESULT)
    set_flow_direction : Proc(IDWriteTextLayout1*, DWRITE_FLOW_DIRECTION, HRESULT)
    set_incremental_tab_stop : Proc(IDWriteTextLayout1*, Float32, HRESULT)
    set_trimming : Proc(IDWriteTextLayout1*, DWRITE_TRIMMING*, IDWriteInlineObject, HRESULT)
    set_line_spacing : Proc(IDWriteTextLayout1*, DWRITE_LINE_SPACING_METHOD, Float32, Float32, HRESULT)
    get_text_alignment : Proc(IDWriteTextLayout1*, DWRITE_TEXT_ALIGNMENT)
    get_paragraph_alignment : Proc(IDWriteTextLayout1*, DWRITE_PARAGRAPH_ALIGNMENT)
    get_word_wrapping : Proc(IDWriteTextLayout1*, DWRITE_WORD_WRAPPING)
    get_reading_direction : Proc(IDWriteTextLayout1*, DWRITE_READING_DIRECTION)
    get_flow_direction : Proc(IDWriteTextLayout1*, DWRITE_FLOW_DIRECTION)
    get_incremental_tab_stop : Proc(IDWriteTextLayout1*, Float32)
    get_trimming : Proc(IDWriteTextLayout1*, DWRITE_TRIMMING*, IDWriteInlineObject*, HRESULT)
    get_line_spacing : Proc(IDWriteTextLayout1*, DWRITE_LINE_SPACING_METHOD*, Float32*, Float32*, HRESULT)
    get_font_collection : Proc(IDWriteTextLayout1*, IDWriteFontCollection*, HRESULT)
    get_font_family_name_length : Proc(IDWriteTextLayout1*, UInt32)
    get_font_family_name : Proc(IDWriteTextLayout1*, Char*, UInt32, HRESULT)
    get_font_weight : Proc(IDWriteTextLayout1*, DWRITE_FONT_WEIGHT)
    get_font_style : Proc(IDWriteTextLayout1*, DWRITE_FONT_STYLE)
    get_font_stretch : Proc(IDWriteTextLayout1*, DWRITE_FONT_STRETCH)
    get_font_size : Proc(IDWriteTextLayout1*, Float32)
    get_locale_name_length : Proc(IDWriteTextLayout1*, UInt32)
    get_locale_name : Proc(IDWriteTextLayout1*, Char*, UInt32, HRESULT)
    set_max_width : Proc(IDWriteTextLayout1*, Float32, HRESULT)
    set_max_height : Proc(IDWriteTextLayout1*, Float32, HRESULT)
    set_font_collection : Proc(IDWriteTextLayout1*, IDWriteFontCollection, DWRITE_TEXT_RANGE, HRESULT)
    set_font_family_name : Proc(IDWriteTextLayout1*, LibC::LPWSTR, DWRITE_TEXT_RANGE, HRESULT)
    set_font_weight : Proc(IDWriteTextLayout1*, DWRITE_FONT_WEIGHT, DWRITE_TEXT_RANGE, HRESULT)
    set_font_style : Proc(IDWriteTextLayout1*, DWRITE_FONT_STYLE, DWRITE_TEXT_RANGE, HRESULT)
    set_font_stretch : Proc(IDWriteTextLayout1*, DWRITE_FONT_STRETCH, DWRITE_TEXT_RANGE, HRESULT)
    set_font_size : Proc(IDWriteTextLayout1*, Float32, DWRITE_TEXT_RANGE, HRESULT)
    set_underline : Proc(IDWriteTextLayout1*, LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)
    set_strikethrough : Proc(IDWriteTextLayout1*, LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)
    set_drawing_effect : Proc(IDWriteTextLayout1*, IUnknown, DWRITE_TEXT_RANGE, HRESULT)
    set_inline_object : Proc(IDWriteTextLayout1*, IDWriteInlineObject, DWRITE_TEXT_RANGE, HRESULT)
    set_typography : Proc(IDWriteTextLayout1*, IDWriteTypography, DWRITE_TEXT_RANGE, HRESULT)
    set_locale_name : Proc(IDWriteTextLayout1*, LibC::LPWSTR, DWRITE_TEXT_RANGE, HRESULT)
    get_max_width : Proc(IDWriteTextLayout1*, Float32)
    get_max_height : Proc(IDWriteTextLayout1*, Float32)
    get_font_collection2 : Proc(IDWriteTextLayout1*, UInt32, IDWriteFontCollection*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_family_name_length2 : Proc(IDWriteTextLayout1*, UInt32, UInt32*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_family_name2 : Proc(IDWriteTextLayout1*, UInt32, Char*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_weight2 : Proc(IDWriteTextLayout1*, UInt32, DWRITE_FONT_WEIGHT*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_style2 : Proc(IDWriteTextLayout1*, UInt32, DWRITE_FONT_STYLE*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_stretch2 : Proc(IDWriteTextLayout1*, UInt32, DWRITE_FONT_STRETCH*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_size2 : Proc(IDWriteTextLayout1*, UInt32, Float32*, DWRITE_TEXT_RANGE*, HRESULT)
    get_underline : Proc(IDWriteTextLayout1*, UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)
    get_strikethrough : Proc(IDWriteTextLayout1*, UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)
    get_drawing_effect : Proc(IDWriteTextLayout1*, UInt32, IUnknown*, DWRITE_TEXT_RANGE*, HRESULT)
    get_inline_object : Proc(IDWriteTextLayout1*, UInt32, IDWriteInlineObject*, DWRITE_TEXT_RANGE*, HRESULT)
    get_typography : Proc(IDWriteTextLayout1*, UInt32, IDWriteTypography*, DWRITE_TEXT_RANGE*, HRESULT)
    get_locale_name_length2 : Proc(IDWriteTextLayout1*, UInt32, UInt32*, DWRITE_TEXT_RANGE*, HRESULT)
    get_locale_name2 : Proc(IDWriteTextLayout1*, UInt32, Char*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)
    draw : Proc(IDWriteTextLayout1*, Void*, IDWriteTextRenderer, Float32, Float32, HRESULT)
    get_line_metrics : Proc(IDWriteTextLayout1*, DWRITE_LINE_METRICS*, UInt32, UInt32*, HRESULT)
    get_metrics : Proc(IDWriteTextLayout1*, DWRITE_TEXT_METRICS*, HRESULT)
    get_overhang_metrics : Proc(IDWriteTextLayout1*, DWRITE_OVERHANG_METRICS*, HRESULT)
    get_cluster_metrics : Proc(IDWriteTextLayout1*, DWRITE_CLUSTER_METRICS*, UInt32, UInt32*, HRESULT)
    determine_min_width : Proc(IDWriteTextLayout1*, Float32*, HRESULT)
    hit_test_point : Proc(IDWriteTextLayout1*, Float32, Float32, LibC::BOOL*, LibC::BOOL*, DWRITE_HIT_TEST_METRICS*, HRESULT)
    hit_test_text_position : Proc(IDWriteTextLayout1*, UInt32, LibC::BOOL, Float32*, Float32*, DWRITE_HIT_TEST_METRICS*, HRESULT)
    hit_test_text_range : Proc(IDWriteTextLayout1*, UInt32, UInt32, Float32, Float32, DWRITE_HIT_TEST_METRICS*, UInt32, UInt32*, HRESULT)
    set_pair_kerning : Proc(IDWriteTextLayout1*, LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)
    get_pair_kerning : Proc(IDWriteTextLayout1*, UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)
    set_character_spacing : Proc(IDWriteTextLayout1*, Float32, Float32, Float32, DWRITE_TEXT_RANGE, HRESULT)
    get_character_spacing : Proc(IDWriteTextLayout1*, UInt32, Float32*, Float32*, Float32*, DWRITE_TEXT_RANGE*, HRESULT)
  end

  IDWriteTextLayout1_GUID = LibC::GUID.new("9064d822-80a7-465c-a986-df65f78b8feb")
  CLSID_IDWriteTextLayout1 = "9064d822-80a7-465c-a986-df65f78b8feb"
  struct IDWriteTextLayout1
    lpVtbl : IDWriteTextLayout1VTbl*
  end

  struct IDWriteBitmapRenderTarget1VTbl
    query_interface : Proc(IDWriteBitmapRenderTarget1*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteBitmapRenderTarget1*, UInt32)
    release : Proc(IDWriteBitmapRenderTarget1*, UInt32)
    draw_glyph_run : Proc(IDWriteBitmapRenderTarget1*, Float32, Float32, DWRITE_MEASURING_MODE, DWRITE_GLYPH_RUN*, IDWriteRenderingParams, UInt32, RECT*, HRESULT)
    get_memory_dc : Proc(IDWriteBitmapRenderTarget1*, HDC)
    get_pixels_per_dip : Proc(IDWriteBitmapRenderTarget1*, Float32)
    set_pixels_per_dip : Proc(IDWriteBitmapRenderTarget1*, Float32, HRESULT)
    get_current_transform : Proc(IDWriteBitmapRenderTarget1*, DWRITE_MATRIX*, HRESULT)
    set_current_transform : Proc(IDWriteBitmapRenderTarget1*, DWRITE_MATRIX*, HRESULT)
    get_size : Proc(IDWriteBitmapRenderTarget1*, SIZE*, HRESULT)
    resize : Proc(IDWriteBitmapRenderTarget1*, UInt32, UInt32, HRESULT)
    get_text_antialias_mode : Proc(IDWriteBitmapRenderTarget1*, DWRITE_TEXT_ANTIALIAS_MODE)
    set_text_antialias_mode : Proc(IDWriteBitmapRenderTarget1*, DWRITE_TEXT_ANTIALIAS_MODE, HRESULT)
  end

  IDWriteBitmapRenderTarget1_GUID = LibC::GUID.new("791e8298-3ef3-4230-9880-c9bdecc42064")
  CLSID_IDWriteBitmapRenderTarget1 = "791e8298-3ef3-4230-9880-c9bdecc42064"
  struct IDWriteBitmapRenderTarget1
    lpVtbl : IDWriteBitmapRenderTarget1VTbl*
  end

  struct IDWriteTextRenderer1VTbl
    query_interface : Proc(IDWriteTextRenderer1*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteTextRenderer1*, UInt32)
    release : Proc(IDWriteTextRenderer1*, UInt32)
    is_pixel_snapping_disabled : Proc(IDWriteTextRenderer1*, Void*, LibC::BOOL*, HRESULT)
    get_current_transform : Proc(IDWriteTextRenderer1*, Void*, DWRITE_MATRIX*, HRESULT)
    get_pixels_per_dip : Proc(IDWriteTextRenderer1*, Void*, Float32*, HRESULT)
    draw_glyph_run : Proc(IDWriteTextRenderer1*, Void*, Float32, Float32, DWRITE_MEASURING_MODE, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, IUnknown, HRESULT)
    draw_underline : Proc(IDWriteTextRenderer1*, Void*, Float32, Float32, DWRITE_UNDERLINE*, IUnknown, HRESULT)
    draw_strikethrough : Proc(IDWriteTextRenderer1*, Void*, Float32, Float32, DWRITE_STRIKETHROUGH*, IUnknown, HRESULT)
    draw_inline_object : Proc(IDWriteTextRenderer1*, Void*, Float32, Float32, IDWriteInlineObject, LibC::BOOL, LibC::BOOL, IUnknown, HRESULT)
    draw_glyph_run2 : Proc(IDWriteTextRenderer1*, Void*, Float32, Float32, DWRITE_GLYPH_ORIENTATION_ANGLE, DWRITE_MEASURING_MODE, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, IUnknown, HRESULT)
    draw_underline2 : Proc(IDWriteTextRenderer1*, Void*, Float32, Float32, DWRITE_GLYPH_ORIENTATION_ANGLE, DWRITE_UNDERLINE*, IUnknown, HRESULT)
    draw_strikethrough2 : Proc(IDWriteTextRenderer1*, Void*, Float32, Float32, DWRITE_GLYPH_ORIENTATION_ANGLE, DWRITE_STRIKETHROUGH*, IUnknown, HRESULT)
    draw_inline_object2 : Proc(IDWriteTextRenderer1*, Void*, Float32, Float32, DWRITE_GLYPH_ORIENTATION_ANGLE, IDWriteInlineObject, LibC::BOOL, LibC::BOOL, IUnknown, HRESULT)
  end

  IDWriteTextRenderer1_GUID = LibC::GUID.new("d3e0e934-22a0-427e-aae4-7d9574b59db1")
  CLSID_IDWriteTextRenderer1 = "d3e0e934-22a0-427e-aae4-7d9574b59db1"
  struct IDWriteTextRenderer1
    lpVtbl : IDWriteTextRenderer1VTbl*
  end

  struct IDWriteTextFormat1VTbl
    query_interface : Proc(IDWriteTextFormat1*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteTextFormat1*, UInt32)
    release : Proc(IDWriteTextFormat1*, UInt32)
    set_text_alignment : Proc(IDWriteTextFormat1*, DWRITE_TEXT_ALIGNMENT, HRESULT)
    set_paragraph_alignment : Proc(IDWriteTextFormat1*, DWRITE_PARAGRAPH_ALIGNMENT, HRESULT)
    set_word_wrapping : Proc(IDWriteTextFormat1*, DWRITE_WORD_WRAPPING, HRESULT)
    set_reading_direction : Proc(IDWriteTextFormat1*, DWRITE_READING_DIRECTION, HRESULT)
    set_flow_direction : Proc(IDWriteTextFormat1*, DWRITE_FLOW_DIRECTION, HRESULT)
    set_incremental_tab_stop : Proc(IDWriteTextFormat1*, Float32, HRESULT)
    set_trimming : Proc(IDWriteTextFormat1*, DWRITE_TRIMMING*, IDWriteInlineObject, HRESULT)
    set_line_spacing : Proc(IDWriteTextFormat1*, DWRITE_LINE_SPACING_METHOD, Float32, Float32, HRESULT)
    get_text_alignment : Proc(IDWriteTextFormat1*, DWRITE_TEXT_ALIGNMENT)
    get_paragraph_alignment : Proc(IDWriteTextFormat1*, DWRITE_PARAGRAPH_ALIGNMENT)
    get_word_wrapping : Proc(IDWriteTextFormat1*, DWRITE_WORD_WRAPPING)
    get_reading_direction : Proc(IDWriteTextFormat1*, DWRITE_READING_DIRECTION)
    get_flow_direction : Proc(IDWriteTextFormat1*, DWRITE_FLOW_DIRECTION)
    get_incremental_tab_stop : Proc(IDWriteTextFormat1*, Float32)
    get_trimming : Proc(IDWriteTextFormat1*, DWRITE_TRIMMING*, IDWriteInlineObject*, HRESULT)
    get_line_spacing : Proc(IDWriteTextFormat1*, DWRITE_LINE_SPACING_METHOD*, Float32*, Float32*, HRESULT)
    get_font_collection : Proc(IDWriteTextFormat1*, IDWriteFontCollection*, HRESULT)
    get_font_family_name_length : Proc(IDWriteTextFormat1*, UInt32)
    get_font_family_name : Proc(IDWriteTextFormat1*, Char*, UInt32, HRESULT)
    get_font_weight : Proc(IDWriteTextFormat1*, DWRITE_FONT_WEIGHT)
    get_font_style : Proc(IDWriteTextFormat1*, DWRITE_FONT_STYLE)
    get_font_stretch : Proc(IDWriteTextFormat1*, DWRITE_FONT_STRETCH)
    get_font_size : Proc(IDWriteTextFormat1*, Float32)
    get_locale_name_length : Proc(IDWriteTextFormat1*, UInt32)
    get_locale_name : Proc(IDWriteTextFormat1*, Char*, UInt32, HRESULT)
    set_vertical_glyph_orientation : Proc(IDWriteTextFormat1*, DWRITE_VERTICAL_GLYPH_ORIENTATION, HRESULT)
    get_vertical_glyph_orientation : Proc(IDWriteTextFormat1*, DWRITE_VERTICAL_GLYPH_ORIENTATION)
    set_last_line_wrapping : Proc(IDWriteTextFormat1*, LibC::BOOL, HRESULT)
    get_last_line_wrapping : Proc(IDWriteTextFormat1*, LibC::BOOL)
    set_optical_alignment : Proc(IDWriteTextFormat1*, DWRITE_OPTICAL_ALIGNMENT, HRESULT)
    get_optical_alignment : Proc(IDWriteTextFormat1*, DWRITE_OPTICAL_ALIGNMENT)
    set_font_fallback : Proc(IDWriteTextFormat1*, IDWriteFontFallback, HRESULT)
    get_font_fallback : Proc(IDWriteTextFormat1*, IDWriteFontFallback*, HRESULT)
  end

  IDWriteTextFormat1_GUID = LibC::GUID.new("5f174b49-0d8b-4cfb-8bca-f1cce9d06c67")
  CLSID_IDWriteTextFormat1 = "5f174b49-0d8b-4cfb-8bca-f1cce9d06c67"
  struct IDWriteTextFormat1
    lpVtbl : IDWriteTextFormat1VTbl*
  end

  struct IDWriteTextLayout2VTbl
    query_interface : Proc(IDWriteTextLayout2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteTextLayout2*, UInt32)
    release : Proc(IDWriteTextLayout2*, UInt32)
    set_text_alignment : Proc(IDWriteTextLayout2*, DWRITE_TEXT_ALIGNMENT, HRESULT)
    set_paragraph_alignment : Proc(IDWriteTextLayout2*, DWRITE_PARAGRAPH_ALIGNMENT, HRESULT)
    set_word_wrapping : Proc(IDWriteTextLayout2*, DWRITE_WORD_WRAPPING, HRESULT)
    set_reading_direction : Proc(IDWriteTextLayout2*, DWRITE_READING_DIRECTION, HRESULT)
    set_flow_direction : Proc(IDWriteTextLayout2*, DWRITE_FLOW_DIRECTION, HRESULT)
    set_incremental_tab_stop : Proc(IDWriteTextLayout2*, Float32, HRESULT)
    set_trimming : Proc(IDWriteTextLayout2*, DWRITE_TRIMMING*, IDWriteInlineObject, HRESULT)
    set_line_spacing : Proc(IDWriteTextLayout2*, DWRITE_LINE_SPACING_METHOD, Float32, Float32, HRESULT)
    get_text_alignment : Proc(IDWriteTextLayout2*, DWRITE_TEXT_ALIGNMENT)
    get_paragraph_alignment : Proc(IDWriteTextLayout2*, DWRITE_PARAGRAPH_ALIGNMENT)
    get_word_wrapping : Proc(IDWriteTextLayout2*, DWRITE_WORD_WRAPPING)
    get_reading_direction : Proc(IDWriteTextLayout2*, DWRITE_READING_DIRECTION)
    get_flow_direction : Proc(IDWriteTextLayout2*, DWRITE_FLOW_DIRECTION)
    get_incremental_tab_stop : Proc(IDWriteTextLayout2*, Float32)
    get_trimming : Proc(IDWriteTextLayout2*, DWRITE_TRIMMING*, IDWriteInlineObject*, HRESULT)
    get_line_spacing : Proc(IDWriteTextLayout2*, DWRITE_LINE_SPACING_METHOD*, Float32*, Float32*, HRESULT)
    get_font_collection : Proc(IDWriteTextLayout2*, IDWriteFontCollection*, HRESULT)
    get_font_family_name_length : Proc(IDWriteTextLayout2*, UInt32)
    get_font_family_name : Proc(IDWriteTextLayout2*, Char*, UInt32, HRESULT)
    get_font_weight : Proc(IDWriteTextLayout2*, DWRITE_FONT_WEIGHT)
    get_font_style : Proc(IDWriteTextLayout2*, DWRITE_FONT_STYLE)
    get_font_stretch : Proc(IDWriteTextLayout2*, DWRITE_FONT_STRETCH)
    get_font_size : Proc(IDWriteTextLayout2*, Float32)
    get_locale_name_length : Proc(IDWriteTextLayout2*, UInt32)
    get_locale_name : Proc(IDWriteTextLayout2*, Char*, UInt32, HRESULT)
    set_max_width : Proc(IDWriteTextLayout2*, Float32, HRESULT)
    set_max_height : Proc(IDWriteTextLayout2*, Float32, HRESULT)
    set_font_collection : Proc(IDWriteTextLayout2*, IDWriteFontCollection, DWRITE_TEXT_RANGE, HRESULT)
    set_font_family_name : Proc(IDWriteTextLayout2*, LibC::LPWSTR, DWRITE_TEXT_RANGE, HRESULT)
    set_font_weight : Proc(IDWriteTextLayout2*, DWRITE_FONT_WEIGHT, DWRITE_TEXT_RANGE, HRESULT)
    set_font_style : Proc(IDWriteTextLayout2*, DWRITE_FONT_STYLE, DWRITE_TEXT_RANGE, HRESULT)
    set_font_stretch : Proc(IDWriteTextLayout2*, DWRITE_FONT_STRETCH, DWRITE_TEXT_RANGE, HRESULT)
    set_font_size : Proc(IDWriteTextLayout2*, Float32, DWRITE_TEXT_RANGE, HRESULT)
    set_underline : Proc(IDWriteTextLayout2*, LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)
    set_strikethrough : Proc(IDWriteTextLayout2*, LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)
    set_drawing_effect : Proc(IDWriteTextLayout2*, IUnknown, DWRITE_TEXT_RANGE, HRESULT)
    set_inline_object : Proc(IDWriteTextLayout2*, IDWriteInlineObject, DWRITE_TEXT_RANGE, HRESULT)
    set_typography : Proc(IDWriteTextLayout2*, IDWriteTypography, DWRITE_TEXT_RANGE, HRESULT)
    set_locale_name : Proc(IDWriteTextLayout2*, LibC::LPWSTR, DWRITE_TEXT_RANGE, HRESULT)
    get_max_width : Proc(IDWriteTextLayout2*, Float32)
    get_max_height : Proc(IDWriteTextLayout2*, Float32)
    get_font_collection2 : Proc(IDWriteTextLayout2*, UInt32, IDWriteFontCollection*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_family_name_length2 : Proc(IDWriteTextLayout2*, UInt32, UInt32*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_family_name2 : Proc(IDWriteTextLayout2*, UInt32, Char*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_weight2 : Proc(IDWriteTextLayout2*, UInt32, DWRITE_FONT_WEIGHT*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_style2 : Proc(IDWriteTextLayout2*, UInt32, DWRITE_FONT_STYLE*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_stretch2 : Proc(IDWriteTextLayout2*, UInt32, DWRITE_FONT_STRETCH*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_size2 : Proc(IDWriteTextLayout2*, UInt32, Float32*, DWRITE_TEXT_RANGE*, HRESULT)
    get_underline : Proc(IDWriteTextLayout2*, UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)
    get_strikethrough : Proc(IDWriteTextLayout2*, UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)
    get_drawing_effect : Proc(IDWriteTextLayout2*, UInt32, IUnknown*, DWRITE_TEXT_RANGE*, HRESULT)
    get_inline_object : Proc(IDWriteTextLayout2*, UInt32, IDWriteInlineObject*, DWRITE_TEXT_RANGE*, HRESULT)
    get_typography : Proc(IDWriteTextLayout2*, UInt32, IDWriteTypography*, DWRITE_TEXT_RANGE*, HRESULT)
    get_locale_name_length2 : Proc(IDWriteTextLayout2*, UInt32, UInt32*, DWRITE_TEXT_RANGE*, HRESULT)
    get_locale_name2 : Proc(IDWriteTextLayout2*, UInt32, Char*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)
    draw : Proc(IDWriteTextLayout2*, Void*, IDWriteTextRenderer, Float32, Float32, HRESULT)
    get_line_metrics : Proc(IDWriteTextLayout2*, DWRITE_LINE_METRICS*, UInt32, UInt32*, HRESULT)
    get_metrics : Proc(IDWriteTextLayout2*, DWRITE_TEXT_METRICS*, HRESULT)
    get_overhang_metrics : Proc(IDWriteTextLayout2*, DWRITE_OVERHANG_METRICS*, HRESULT)
    get_cluster_metrics : Proc(IDWriteTextLayout2*, DWRITE_CLUSTER_METRICS*, UInt32, UInt32*, HRESULT)
    determine_min_width : Proc(IDWriteTextLayout2*, Float32*, HRESULT)
    hit_test_point : Proc(IDWriteTextLayout2*, Float32, Float32, LibC::BOOL*, LibC::BOOL*, DWRITE_HIT_TEST_METRICS*, HRESULT)
    hit_test_text_position : Proc(IDWriteTextLayout2*, UInt32, LibC::BOOL, Float32*, Float32*, DWRITE_HIT_TEST_METRICS*, HRESULT)
    hit_test_text_range : Proc(IDWriteTextLayout2*, UInt32, UInt32, Float32, Float32, DWRITE_HIT_TEST_METRICS*, UInt32, UInt32*, HRESULT)
    set_pair_kerning : Proc(IDWriteTextLayout2*, LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)
    get_pair_kerning : Proc(IDWriteTextLayout2*, UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)
    set_character_spacing : Proc(IDWriteTextLayout2*, Float32, Float32, Float32, DWRITE_TEXT_RANGE, HRESULT)
    get_character_spacing : Proc(IDWriteTextLayout2*, UInt32, Float32*, Float32*, Float32*, DWRITE_TEXT_RANGE*, HRESULT)
    get_metrics2 : Proc(IDWriteTextLayout2*, DWRITE_TEXT_METRICS1*, HRESULT)
    set_vertical_glyph_orientation : Proc(IDWriteTextLayout2*, DWRITE_VERTICAL_GLYPH_ORIENTATION, HRESULT)
    get_vertical_glyph_orientation : Proc(IDWriteTextLayout2*, DWRITE_VERTICAL_GLYPH_ORIENTATION)
    set_last_line_wrapping : Proc(IDWriteTextLayout2*, LibC::BOOL, HRESULT)
    get_last_line_wrapping : Proc(IDWriteTextLayout2*, LibC::BOOL)
    set_optical_alignment : Proc(IDWriteTextLayout2*, DWRITE_OPTICAL_ALIGNMENT, HRESULT)
    get_optical_alignment : Proc(IDWriteTextLayout2*, DWRITE_OPTICAL_ALIGNMENT)
    set_font_fallback : Proc(IDWriteTextLayout2*, IDWriteFontFallback, HRESULT)
    get_font_fallback : Proc(IDWriteTextLayout2*, IDWriteFontFallback*, HRESULT)
  end

  IDWriteTextLayout2_GUID = LibC::GUID.new("1093c18f-8d5e-43f0-b064-0917311b525e")
  CLSID_IDWriteTextLayout2 = "1093c18f-8d5e-43f0-b064-0917311b525e"
  struct IDWriteTextLayout2
    lpVtbl : IDWriteTextLayout2VTbl*
  end

  struct IDWriteTextAnalyzer2VTbl
    query_interface : Proc(IDWriteTextAnalyzer2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteTextAnalyzer2*, UInt32)
    release : Proc(IDWriteTextAnalyzer2*, UInt32)
    analyze_script : Proc(IDWriteTextAnalyzer2*, IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)
    analyze_bidi : Proc(IDWriteTextAnalyzer2*, IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)
    analyze_number_substitution : Proc(IDWriteTextAnalyzer2*, IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)
    analyze_line_breakpoints : Proc(IDWriteTextAnalyzer2*, IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteTextAnalysisSink, HRESULT)
    get_glyphs : Proc(IDWriteTextAnalyzer2*, Char*, UInt32, IDWriteFontFace, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS*, LibC::LPWSTR, IDWriteNumberSubstitution, DWRITE_TYPOGRAPHIC_FEATURES**, UInt32*, UInt32, UInt32, UInt16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32*, HRESULT)
    get_glyph_placements : Proc(IDWriteTextAnalyzer2*, Char*, UInt16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UInt32, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32, IDWriteFontFace, Float32, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS*, LibC::LPWSTR, DWRITE_TYPOGRAPHIC_FEATURES**, UInt32*, UInt32, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)
    get_gdi_compatible_glyph_placements : Proc(IDWriteTextAnalyzer2*, Char*, UInt16*, DWRITE_SHAPING_TEXT_PROPERTIES*, UInt32, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32, IDWriteFontFace, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS*, LibC::LPWSTR, DWRITE_TYPOGRAPHIC_FEATURES**, UInt32*, UInt32, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)
    apply_character_spacing : Proc(IDWriteTextAnalyzer2*, Float32, Float32, Float32, UInt32, UInt32, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, DWRITE_SHAPING_GLYPH_PROPERTIES*, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)
    get_baseline : Proc(IDWriteTextAnalyzer2*, IDWriteFontFace, DWRITE_BASELINE, LibC::BOOL, LibC::BOOL, DWRITE_SCRIPT_ANALYSIS, LibC::LPWSTR, Int32*, LibC::BOOL*, HRESULT)
    analyze_vertical_glyph_orientation : Proc(IDWriteTextAnalyzer2*, IDWriteTextAnalysisSource1, UInt32, UInt32, IDWriteTextAnalysisSink1, HRESULT)
    get_glyph_orientation_transform : Proc(IDWriteTextAnalyzer2*, DWRITE_GLYPH_ORIENTATION_ANGLE, LibC::BOOL, DWRITE_MATRIX*, HRESULT)
    get_script_properties : Proc(IDWriteTextAnalyzer2*, DWRITE_SCRIPT_ANALYSIS, DWRITE_SCRIPT_PROPERTIES*, HRESULT)
    get_text_complexity : Proc(IDWriteTextAnalyzer2*, Char*, UInt32, IDWriteFontFace, LibC::BOOL*, UInt32*, UInt16*, HRESULT)
    get_justification_opportunities : Proc(IDWriteTextAnalyzer2*, IDWriteFontFace, Float32, DWRITE_SCRIPT_ANALYSIS, UInt32, UInt32, Char*, UInt16*, DWRITE_SHAPING_GLYPH_PROPERTIES*, DWRITE_JUSTIFICATION_OPPORTUNITY*, HRESULT)
    justify_glyph_advances : Proc(IDWriteTextAnalyzer2*, Float32, UInt32, DWRITE_JUSTIFICATION_OPPORTUNITY*, Float32*, DWRITE_GLYPH_OFFSET*, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)
    get_justified_glyphs : Proc(IDWriteTextAnalyzer2*, IDWriteFontFace, Float32, DWRITE_SCRIPT_ANALYSIS, UInt32, UInt32, UInt32, UInt16*, UInt16*, Float32*, Float32*, DWRITE_GLYPH_OFFSET*, DWRITE_SHAPING_GLYPH_PROPERTIES*, UInt32*, UInt16*, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, HRESULT)
    get_glyph_orientation_transform2 : Proc(IDWriteTextAnalyzer2*, DWRITE_GLYPH_ORIENTATION_ANGLE, LibC::BOOL, Float32, Float32, DWRITE_MATRIX*, HRESULT)
    get_typographic_features : Proc(IDWriteTextAnalyzer2*, IDWriteFontFace, DWRITE_SCRIPT_ANALYSIS, LibC::LPWSTR, UInt32, UInt32*, DWRITE_FONT_FEATURE_TAG*, HRESULT)
    check_typographic_feature : Proc(IDWriteTextAnalyzer2*, IDWriteFontFace, DWRITE_SCRIPT_ANALYSIS, LibC::LPWSTR, DWRITE_FONT_FEATURE_TAG, UInt32, UInt16*, UInt8*, HRESULT)
  end

  IDWriteTextAnalyzer2_GUID = LibC::GUID.new("553a9ff3-5693-4df7-b52b-74806f7f2eb9")
  CLSID_IDWriteTextAnalyzer2 = "553a9ff3-5693-4df7-b52b-74806f7f2eb9"
  struct IDWriteTextAnalyzer2
    lpVtbl : IDWriteTextAnalyzer2VTbl*
  end

  struct IDWriteFontFallbackVTbl
    query_interface : Proc(IDWriteFontFallback*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontFallback*, UInt32)
    release : Proc(IDWriteFontFallback*, UInt32)
    map_characters : Proc(IDWriteFontFallback*, IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteFontCollection, LibC::LPWSTR, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, UInt32*, IDWriteFont*, Float32*, HRESULT)
  end

  IDWriteFontFallback_GUID = LibC::GUID.new("efa008f9-f7a1-48bf-b05c-f224713cc0ff")
  CLSID_IDWriteFontFallback = "efa008f9-f7a1-48bf-b05c-f224713cc0ff"
  struct IDWriteFontFallback
    lpVtbl : IDWriteFontFallbackVTbl*
  end

  struct IDWriteFontFallbackBuilderVTbl
    query_interface : Proc(IDWriteFontFallbackBuilder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontFallbackBuilder*, UInt32)
    release : Proc(IDWriteFontFallbackBuilder*, UInt32)
    add_mapping : Proc(IDWriteFontFallbackBuilder*, DWRITE_UNICODE_RANGE*, UInt32, UInt16**, UInt32, IDWriteFontCollection, LibC::LPWSTR, LibC::LPWSTR, Float32, HRESULT)
    add_mappings : Proc(IDWriteFontFallbackBuilder*, IDWriteFontFallback, HRESULT)
    create_font_fallback : Proc(IDWriteFontFallbackBuilder*, IDWriteFontFallback*, HRESULT)
  end

  IDWriteFontFallbackBuilder_GUID = LibC::GUID.new("fd882d06-8aba-4fb8-b849-8be8b73e14de")
  CLSID_IDWriteFontFallbackBuilder = "fd882d06-8aba-4fb8-b849-8be8b73e14de"
  struct IDWriteFontFallbackBuilder
    lpVtbl : IDWriteFontFallbackBuilderVTbl*
  end

  struct IDWriteFont2VTbl
    query_interface : Proc(IDWriteFont2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFont2*, UInt32)
    release : Proc(IDWriteFont2*, UInt32)
    get_font_family : Proc(IDWriteFont2*, IDWriteFontFamily*, HRESULT)
    get_weight : Proc(IDWriteFont2*, DWRITE_FONT_WEIGHT)
    get_stretch : Proc(IDWriteFont2*, DWRITE_FONT_STRETCH)
    get_style : Proc(IDWriteFont2*, DWRITE_FONT_STYLE)
    is_symbol_font : Proc(IDWriteFont2*, LibC::BOOL)
    get_face_names : Proc(IDWriteFont2*, IDWriteLocalizedStrings*, HRESULT)
    get_informational_strings : Proc(IDWriteFont2*, DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings*, LibC::BOOL*, HRESULT)
    get_simulations : Proc(IDWriteFont2*, DWRITE_FONT_SIMULATIONS)
    get_metrics : Proc(IDWriteFont2*, DWRITE_FONT_METRICS*, Void)
    has_character : Proc(IDWriteFont2*, UInt32, LibC::BOOL*, HRESULT)
    create_font_face : Proc(IDWriteFont2*, IDWriteFontFace*, HRESULT)
    get_metrics2 : Proc(IDWriteFont2*, DWRITE_FONT_METRICS1*, Void)
    get_panose : Proc(IDWriteFont2*, DWRITE_PANOSE*, Void)
    get_unicode_ranges : Proc(IDWriteFont2*, UInt32, DWRITE_UNICODE_RANGE*, UInt32*, HRESULT)
    is_monospaced_font : Proc(IDWriteFont2*, LibC::BOOL)
    is_color_font : Proc(IDWriteFont2*, LibC::BOOL)
  end

  IDWriteFont2_GUID = LibC::GUID.new("29748ed6-8c9c-4a6a-be0b-d912e8538944")
  CLSID_IDWriteFont2 = "29748ed6-8c9c-4a6a-be0b-d912e8538944"
  struct IDWriteFont2
    lpVtbl : IDWriteFont2VTbl*
  end

  struct IDWriteFontFace2VTbl
    query_interface : Proc(IDWriteFontFace2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontFace2*, UInt32)
    release : Proc(IDWriteFontFace2*, UInt32)
    get_type : Proc(IDWriteFontFace2*, DWRITE_FONT_FACE_TYPE)
    get_files : Proc(IDWriteFontFace2*, UInt32*, IDWriteFontFile*, HRESULT)
    get_index : Proc(IDWriteFontFace2*, UInt32)
    get_simulations : Proc(IDWriteFontFace2*, DWRITE_FONT_SIMULATIONS)
    is_symbol_font : Proc(IDWriteFontFace2*, LibC::BOOL)
    get_metrics : Proc(IDWriteFontFace2*, DWRITE_FONT_METRICS*, Void)
    get_glyph_count : Proc(IDWriteFontFace2*, UInt16)
    get_design_glyph_metrics : Proc(IDWriteFontFace2*, UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)
    get_glyph_indices : Proc(IDWriteFontFace2*, UInt32*, UInt32, UInt16*, HRESULT)
    try_get_font_table : Proc(IDWriteFontFace2*, UInt32, Void**, UInt32*, Void**, LibC::BOOL*, HRESULT)
    release_font_table : Proc(IDWriteFontFace2*, Void*, Void)
    get_glyph_run_outline : Proc(IDWriteFontFace2*, Float32, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, UInt32, LibC::BOOL, LibC::BOOL, ID2D1SimplifiedGeometrySink, HRESULT)
    get_recommended_rendering_mode : Proc(IDWriteFontFace2*, Float32, Float32, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, HRESULT)
    get_gdi_compatible_metrics : Proc(IDWriteFontFace2*, Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS*, HRESULT)
    get_gdi_compatible_glyph_metrics : Proc(IDWriteFontFace2*, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)
    get_metrics2 : Proc(IDWriteFontFace2*, DWRITE_FONT_METRICS1*, Void)
    get_gdi_compatible_metrics2 : Proc(IDWriteFontFace2*, Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS1*, HRESULT)
    get_caret_metrics : Proc(IDWriteFontFace2*, DWRITE_CARET_METRICS*, Void)
    get_unicode_ranges : Proc(IDWriteFontFace2*, UInt32, DWRITE_UNICODE_RANGE*, UInt32*, HRESULT)
    is_monospaced_font : Proc(IDWriteFontFace2*, LibC::BOOL)
    get_design_glyph_advances : Proc(IDWriteFontFace2*, UInt32, UInt16*, Int32*, LibC::BOOL, HRESULT)
    get_gdi_compatible_glyph_advances : Proc(IDWriteFontFace2*, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, LibC::BOOL, UInt32, UInt16*, Int32*, HRESULT)
    get_kerning_pair_adjustments : Proc(IDWriteFontFace2*, UInt32, UInt16*, Int32*, HRESULT)
    has_kerning_pairs : Proc(IDWriteFontFace2*, LibC::BOOL)
    get_recommended_rendering_mode2 : Proc(IDWriteFontFace2*, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, DWRITE_RENDERING_MODE*, HRESULT)
    get_vertical_glyph_variants : Proc(IDWriteFontFace2*, UInt32, UInt16*, UInt16*, HRESULT)
    has_vertical_glyph_variants : Proc(IDWriteFontFace2*, LibC::BOOL)
    is_color_font : Proc(IDWriteFontFace2*, LibC::BOOL)
    get_color_palette_count : Proc(IDWriteFontFace2*, UInt32)
    get_palette_entry_count : Proc(IDWriteFontFace2*, UInt32)
    get_palette_entries : Proc(IDWriteFontFace2*, UInt32, UInt32, UInt32, DWRITE_COLOR_F*, HRESULT)
    get_recommended_rendering_mode3 : Proc(IDWriteFontFace2*, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, DWRITE_GRID_FIT_MODE*, HRESULT)
  end

  IDWriteFontFace2_GUID = LibC::GUID.new("d8b768ff-64bc-4e66-982b-ec8e87f693f7")
  CLSID_IDWriteFontFace2 = "d8b768ff-64bc-4e66-982b-ec8e87f693f7"
  struct IDWriteFontFace2
    lpVtbl : IDWriteFontFace2VTbl*
  end

  struct IDWriteColorGlyphRunEnumeratorVTbl
    query_interface : Proc(IDWriteColorGlyphRunEnumerator*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteColorGlyphRunEnumerator*, UInt32)
    release : Proc(IDWriteColorGlyphRunEnumerator*, UInt32)
    move_next : Proc(IDWriteColorGlyphRunEnumerator*, LibC::BOOL*, HRESULT)
    get_current_run : Proc(IDWriteColorGlyphRunEnumerator*, DWRITE_COLOR_GLYPH_RUN**, HRESULT)
  end

  IDWriteColorGlyphRunEnumerator_GUID = LibC::GUID.new("d31fbe17-f157-41a2-8d24-cb779e0560e8")
  CLSID_IDWriteColorGlyphRunEnumerator = "d31fbe17-f157-41a2-8d24-cb779e0560e8"
  struct IDWriteColorGlyphRunEnumerator
    lpVtbl : IDWriteColorGlyphRunEnumeratorVTbl*
  end

  struct IDWriteRenderingParams2VTbl
    query_interface : Proc(IDWriteRenderingParams2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteRenderingParams2*, UInt32)
    release : Proc(IDWriteRenderingParams2*, UInt32)
    get_gamma : Proc(IDWriteRenderingParams2*, Float32)
    get_enhanced_contrast : Proc(IDWriteRenderingParams2*, Float32)
    get_clear_type_level : Proc(IDWriteRenderingParams2*, Float32)
    get_pixel_geometry : Proc(IDWriteRenderingParams2*, DWRITE_PIXEL_GEOMETRY)
    get_rendering_mode : Proc(IDWriteRenderingParams2*, DWRITE_RENDERING_MODE)
    get_grayscale_enhanced_contrast : Proc(IDWriteRenderingParams2*, Float32)
    get_grid_fit_mode : Proc(IDWriteRenderingParams2*, DWRITE_GRID_FIT_MODE)
  end

  IDWriteRenderingParams2_GUID = LibC::GUID.new("f9d711c3-9777-40ae-87e8-3e5af9bf0948")
  CLSID_IDWriteRenderingParams2 = "f9d711c3-9777-40ae-87e8-3e5af9bf0948"
  struct IDWriteRenderingParams2
    lpVtbl : IDWriteRenderingParams2VTbl*
  end

  struct IDWriteFactory2VTbl
    query_interface : Proc(IDWriteFactory2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFactory2*, UInt32)
    release : Proc(IDWriteFactory2*, UInt32)
    get_system_font_collection : Proc(IDWriteFactory2*, IDWriteFontCollection*, LibC::BOOL, HRESULT)
    create_custom_font_collection : Proc(IDWriteFactory2*, IDWriteFontCollectionLoader, Void*, UInt32, IDWriteFontCollection*, HRESULT)
    register_font_collection_loader : Proc(IDWriteFactory2*, IDWriteFontCollectionLoader, HRESULT)
    unregister_font_collection_loader : Proc(IDWriteFactory2*, IDWriteFontCollectionLoader, HRESULT)
    create_font_file_reference : Proc(IDWriteFactory2*, LibC::LPWSTR, FILETIME*, IDWriteFontFile*, HRESULT)
    create_custom_font_file_reference : Proc(IDWriteFactory2*, Void*, UInt32, IDWriteFontFileLoader, IDWriteFontFile*, HRESULT)
    create_font_face : Proc(IDWriteFactory2*, DWRITE_FONT_FACE_TYPE, UInt32, IDWriteFontFile*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace*, HRESULT)
    create_rendering_params : Proc(IDWriteFactory2*, IDWriteRenderingParams*, HRESULT)
    create_monitor_rendering_params : Proc(IDWriteFactory2*, HMONITOR, IDWriteRenderingParams*, HRESULT)
    create_custom_rendering_params : Proc(IDWriteFactory2*, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams*, HRESULT)
    register_font_file_loader : Proc(IDWriteFactory2*, IDWriteFontFileLoader, HRESULT)
    unregister_font_file_loader : Proc(IDWriteFactory2*, IDWriteFontFileLoader, HRESULT)
    create_text_format : Proc(IDWriteFactory2*, LibC::LPWSTR, IDWriteFontCollection, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, Float32, LibC::LPWSTR, IDWriteTextFormat*, HRESULT)
    create_typography : Proc(IDWriteFactory2*, IDWriteTypography*, HRESULT)
    get_gdi_interop : Proc(IDWriteFactory2*, IDWriteGdiInterop*, HRESULT)
    create_text_layout : Proc(IDWriteFactory2*, Char*, UInt32, IDWriteTextFormat, Float32, Float32, IDWriteTextLayout*, HRESULT)
    create_gdi_compatible_text_layout : Proc(IDWriteFactory2*, Char*, UInt32, IDWriteTextFormat, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, IDWriteTextLayout*, HRESULT)
    create_ellipsis_trimming_sign : Proc(IDWriteFactory2*, IDWriteTextFormat, IDWriteInlineObject*, HRESULT)
    create_text_analyzer : Proc(IDWriteFactory2*, IDWriteTextAnalyzer*, HRESULT)
    create_number_substitution : Proc(IDWriteFactory2*, DWRITE_NUMBER_SUBSTITUTION_METHOD, LibC::LPWSTR, LibC::BOOL, IDWriteNumberSubstitution*, HRESULT)
    create_glyph_run_analysis : Proc(IDWriteFactory2*, DWRITE_GLYPH_RUN*, Float32, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)
    get_eudc_font_collection : Proc(IDWriteFactory2*, IDWriteFontCollection*, LibC::BOOL, HRESULT)
    create_custom_rendering_params2 : Proc(IDWriteFactory2*, Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams1*, HRESULT)
    get_system_font_fallback : Proc(IDWriteFactory2*, IDWriteFontFallback*, HRESULT)
    create_font_fallback_builder : Proc(IDWriteFactory2*, IDWriteFontFallbackBuilder*, HRESULT)
    translate_color_glyph_run : Proc(IDWriteFactory2*, Float32, Float32, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_MEASURING_MODE, DWRITE_MATRIX*, UInt32, IDWriteColorGlyphRunEnumerator*, HRESULT)
    create_custom_rendering_params3 : Proc(IDWriteFactory2*, Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams2*, HRESULT)
    create_glyph_run_analysis2 : Proc(IDWriteFactory2*, DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)
  end

  IDWriteFactory2_GUID = LibC::GUID.new("0439fc60-ca44-4994-8dee-3a9af7b732ec")
  CLSID_IDWriteFactory2 = "0439fc60-ca44-4994-8dee-3a9af7b732ec"
  struct IDWriteFactory2
    lpVtbl : IDWriteFactory2VTbl*
  end

  struct IDWriteRenderingParams3VTbl
    query_interface : Proc(IDWriteRenderingParams3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteRenderingParams3*, UInt32)
    release : Proc(IDWriteRenderingParams3*, UInt32)
    get_gamma : Proc(IDWriteRenderingParams3*, Float32)
    get_enhanced_contrast : Proc(IDWriteRenderingParams3*, Float32)
    get_clear_type_level : Proc(IDWriteRenderingParams3*, Float32)
    get_pixel_geometry : Proc(IDWriteRenderingParams3*, DWRITE_PIXEL_GEOMETRY)
    get_rendering_mode : Proc(IDWriteRenderingParams3*, DWRITE_RENDERING_MODE)
    get_grayscale_enhanced_contrast : Proc(IDWriteRenderingParams3*, Float32)
    get_grid_fit_mode : Proc(IDWriteRenderingParams3*, DWRITE_GRID_FIT_MODE)
    get_rendering_mode1 : Proc(IDWriteRenderingParams3*, DWRITE_RENDERING_MODE1)
  end

  IDWriteRenderingParams3_GUID = LibC::GUID.new("b7924baa-391b-412a-8c5c-e44cc2d867dc")
  CLSID_IDWriteRenderingParams3 = "b7924baa-391b-412a-8c5c-e44cc2d867dc"
  struct IDWriteRenderingParams3
    lpVtbl : IDWriteRenderingParams3VTbl*
  end

  struct IDWriteFactory3VTbl
    query_interface : Proc(IDWriteFactory3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFactory3*, UInt32)
    release : Proc(IDWriteFactory3*, UInt32)
    get_system_font_collection : Proc(IDWriteFactory3*, IDWriteFontCollection*, LibC::BOOL, HRESULT)
    create_custom_font_collection : Proc(IDWriteFactory3*, IDWriteFontCollectionLoader, Void*, UInt32, IDWriteFontCollection*, HRESULT)
    register_font_collection_loader : Proc(IDWriteFactory3*, IDWriteFontCollectionLoader, HRESULT)
    unregister_font_collection_loader : Proc(IDWriteFactory3*, IDWriteFontCollectionLoader, HRESULT)
    create_font_file_reference : Proc(IDWriteFactory3*, LibC::LPWSTR, FILETIME*, IDWriteFontFile*, HRESULT)
    create_custom_font_file_reference : Proc(IDWriteFactory3*, Void*, UInt32, IDWriteFontFileLoader, IDWriteFontFile*, HRESULT)
    create_font_face : Proc(IDWriteFactory3*, DWRITE_FONT_FACE_TYPE, UInt32, IDWriteFontFile*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace*, HRESULT)
    create_rendering_params : Proc(IDWriteFactory3*, IDWriteRenderingParams*, HRESULT)
    create_monitor_rendering_params : Proc(IDWriteFactory3*, HMONITOR, IDWriteRenderingParams*, HRESULT)
    create_custom_rendering_params : Proc(IDWriteFactory3*, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams*, HRESULT)
    register_font_file_loader : Proc(IDWriteFactory3*, IDWriteFontFileLoader, HRESULT)
    unregister_font_file_loader : Proc(IDWriteFactory3*, IDWriteFontFileLoader, HRESULT)
    create_text_format : Proc(IDWriteFactory3*, LibC::LPWSTR, IDWriteFontCollection, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, Float32, LibC::LPWSTR, IDWriteTextFormat*, HRESULT)
    create_typography : Proc(IDWriteFactory3*, IDWriteTypography*, HRESULT)
    get_gdi_interop : Proc(IDWriteFactory3*, IDWriteGdiInterop*, HRESULT)
    create_text_layout : Proc(IDWriteFactory3*, Char*, UInt32, IDWriteTextFormat, Float32, Float32, IDWriteTextLayout*, HRESULT)
    create_gdi_compatible_text_layout : Proc(IDWriteFactory3*, Char*, UInt32, IDWriteTextFormat, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, IDWriteTextLayout*, HRESULT)
    create_ellipsis_trimming_sign : Proc(IDWriteFactory3*, IDWriteTextFormat, IDWriteInlineObject*, HRESULT)
    create_text_analyzer : Proc(IDWriteFactory3*, IDWriteTextAnalyzer*, HRESULT)
    create_number_substitution : Proc(IDWriteFactory3*, DWRITE_NUMBER_SUBSTITUTION_METHOD, LibC::LPWSTR, LibC::BOOL, IDWriteNumberSubstitution*, HRESULT)
    create_glyph_run_analysis : Proc(IDWriteFactory3*, DWRITE_GLYPH_RUN*, Float32, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)
    get_eudc_font_collection : Proc(IDWriteFactory3*, IDWriteFontCollection*, LibC::BOOL, HRESULT)
    create_custom_rendering_params2 : Proc(IDWriteFactory3*, Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams1*, HRESULT)
    get_system_font_fallback : Proc(IDWriteFactory3*, IDWriteFontFallback*, HRESULT)
    create_font_fallback_builder : Proc(IDWriteFactory3*, IDWriteFontFallbackBuilder*, HRESULT)
    translate_color_glyph_run : Proc(IDWriteFactory3*, Float32, Float32, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_MEASURING_MODE, DWRITE_MATRIX*, UInt32, IDWriteColorGlyphRunEnumerator*, HRESULT)
    create_custom_rendering_params3 : Proc(IDWriteFactory3*, Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams2*, HRESULT)
    create_glyph_run_analysis2 : Proc(IDWriteFactory3*, DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)
    create_glyph_run_analysis3 : Proc(IDWriteFactory3*, DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE1, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)
    create_custom_rendering_params4 : Proc(IDWriteFactory3*, Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE1, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams3*, HRESULT)
    create_font_face_reference : Proc(IDWriteFactory3*, IDWriteFontFile, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference*, HRESULT)
    create_font_face_reference2 : Proc(IDWriteFactory3*, LibC::LPWSTR, FILETIME*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference*, HRESULT)
    get_system_font_set : Proc(IDWriteFactory3*, IDWriteFontSet*, HRESULT)
    create_font_set_builder : Proc(IDWriteFactory3*, IDWriteFontSetBuilder*, HRESULT)
    create_font_collection_from_font_set : Proc(IDWriteFactory3*, IDWriteFontSet, IDWriteFontCollection1*, HRESULT)
    get_system_font_collection2 : Proc(IDWriteFactory3*, LibC::BOOL, IDWriteFontCollection1*, LibC::BOOL, HRESULT)
    get_font_download_queue : Proc(IDWriteFactory3*, IDWriteFontDownloadQueue*, HRESULT)
  end

  IDWriteFactory3_GUID = LibC::GUID.new("9a1b41c3-d3bb-466a-87fc-fe67556a3b65")
  CLSID_IDWriteFactory3 = "9a1b41c3-d3bb-466a-87fc-fe67556a3b65"
  struct IDWriteFactory3
    lpVtbl : IDWriteFactory3VTbl*
  end

  struct IDWriteFontSetVTbl
    query_interface : Proc(IDWriteFontSet*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontSet*, UInt32)
    release : Proc(IDWriteFontSet*, UInt32)
    get_font_count : Proc(IDWriteFontSet*, UInt32)
    get_font_face_reference : Proc(IDWriteFontSet*, UInt32, IDWriteFontFaceReference*, HRESULT)
    find_font_face_reference : Proc(IDWriteFontSet*, IDWriteFontFaceReference, UInt32*, LibC::BOOL*, HRESULT)
    find_font_face : Proc(IDWriteFontSet*, IDWriteFontFace, UInt32*, LibC::BOOL*, HRESULT)
    get_property_values : Proc(IDWriteFontSet*, DWRITE_FONT_PROPERTY_ID, IDWriteStringList*, HRESULT)
    get_property_values2 : Proc(IDWriteFontSet*, DWRITE_FONT_PROPERTY_ID, LibC::LPWSTR, IDWriteStringList*, HRESULT)
    get_property_values3 : Proc(IDWriteFontSet*, UInt32, DWRITE_FONT_PROPERTY_ID, LibC::BOOL*, IDWriteLocalizedStrings*, HRESULT)
    get_property_occurrence_count : Proc(IDWriteFontSet*, DWRITE_FONT_PROPERTY*, UInt32*, HRESULT)
    get_matching_fonts : Proc(IDWriteFontSet*, LibC::LPWSTR, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontSet*, HRESULT)
    get_matching_fonts2 : Proc(IDWriteFontSet*, DWRITE_FONT_PROPERTY*, UInt32, IDWriteFontSet*, HRESULT)
  end

  IDWriteFontSet_GUID = LibC::GUID.new("53585141-d9f8-4095-8321-d73cf6bd116b")
  CLSID_IDWriteFontSet = "53585141-d9f8-4095-8321-d73cf6bd116b"
  struct IDWriteFontSet
    lpVtbl : IDWriteFontSetVTbl*
  end

  struct IDWriteFontSetBuilderVTbl
    query_interface : Proc(IDWriteFontSetBuilder*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontSetBuilder*, UInt32)
    release : Proc(IDWriteFontSetBuilder*, UInt32)
    add_font_face_reference : Proc(IDWriteFontSetBuilder*, IDWriteFontFaceReference, DWRITE_FONT_PROPERTY*, UInt32, HRESULT)
    add_font_face_reference2 : Proc(IDWriteFontSetBuilder*, IDWriteFontFaceReference, HRESULT)
    add_font_set : Proc(IDWriteFontSetBuilder*, IDWriteFontSet, HRESULT)
    create_font_set : Proc(IDWriteFontSetBuilder*, IDWriteFontSet*, HRESULT)
  end

  IDWriteFontSetBuilder_GUID = LibC::GUID.new("2f642afe-9c68-4f40-b8be-457401afcb3d")
  CLSID_IDWriteFontSetBuilder = "2f642afe-9c68-4f40-b8be-457401afcb3d"
  struct IDWriteFontSetBuilder
    lpVtbl : IDWriteFontSetBuilderVTbl*
  end

  struct IDWriteFontCollection1VTbl
    query_interface : Proc(IDWriteFontCollection1*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontCollection1*, UInt32)
    release : Proc(IDWriteFontCollection1*, UInt32)
    get_font_family_count : Proc(IDWriteFontCollection1*, UInt32)
    get_font_family : Proc(IDWriteFontCollection1*, UInt32, IDWriteFontFamily*, HRESULT)
    find_family_name : Proc(IDWriteFontCollection1*, LibC::LPWSTR, UInt32*, LibC::BOOL*, HRESULT)
    get_font_from_font_face : Proc(IDWriteFontCollection1*, IDWriteFontFace, IDWriteFont*, HRESULT)
    get_font_set : Proc(IDWriteFontCollection1*, IDWriteFontSet*, HRESULT)
    get_font_family2 : Proc(IDWriteFontCollection1*, UInt32, IDWriteFontFamily1*, HRESULT)
  end

  IDWriteFontCollection1_GUID = LibC::GUID.new("53585141-d9f8-4095-8321-d73cf6bd116c")
  CLSID_IDWriteFontCollection1 = "53585141-d9f8-4095-8321-d73cf6bd116c"
  struct IDWriteFontCollection1
    lpVtbl : IDWriteFontCollection1VTbl*
  end

  struct IDWriteFontFamily1VTbl
    query_interface : Proc(IDWriteFontFamily1*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontFamily1*, UInt32)
    release : Proc(IDWriteFontFamily1*, UInt32)
    get_font_collection : Proc(IDWriteFontFamily1*, IDWriteFontCollection*, HRESULT)
    get_font_count : Proc(IDWriteFontFamily1*, UInt32)
    get_font : Proc(IDWriteFontFamily1*, UInt32, IDWriteFont*, HRESULT)
    get_family_names : Proc(IDWriteFontFamily1*, IDWriteLocalizedStrings*, HRESULT)
    get_first_matching_font : Proc(IDWriteFontFamily1*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFont*, HRESULT)
    get_matching_fonts : Proc(IDWriteFontFamily1*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontList*, HRESULT)
    get_font_locality : Proc(IDWriteFontFamily1*, UInt32, DWRITE_LOCALITY)
    get_font2 : Proc(IDWriteFontFamily1*, UInt32, IDWriteFont3*, HRESULT)
    get_font_face_reference : Proc(IDWriteFontFamily1*, UInt32, IDWriteFontFaceReference*, HRESULT)
  end

  IDWriteFontFamily1_GUID = LibC::GUID.new("da20d8ef-812a-4c43-9802-62ec4abd7adf")
  CLSID_IDWriteFontFamily1 = "da20d8ef-812a-4c43-9802-62ec4abd7adf"
  struct IDWriteFontFamily1
    lpVtbl : IDWriteFontFamily1VTbl*
  end

  struct IDWriteFontList1VTbl
    query_interface : Proc(IDWriteFontList1*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontList1*, UInt32)
    release : Proc(IDWriteFontList1*, UInt32)
    get_font_collection : Proc(IDWriteFontList1*, IDWriteFontCollection*, HRESULT)
    get_font_count : Proc(IDWriteFontList1*, UInt32)
    get_font : Proc(IDWriteFontList1*, UInt32, IDWriteFont*, HRESULT)
    get_font_locality : Proc(IDWriteFontList1*, UInt32, DWRITE_LOCALITY)
    get_font2 : Proc(IDWriteFontList1*, UInt32, IDWriteFont3*, HRESULT)
    get_font_face_reference : Proc(IDWriteFontList1*, UInt32, IDWriteFontFaceReference*, HRESULT)
  end

  IDWriteFontList1_GUID = LibC::GUID.new("da20d8ef-812a-4c43-9802-62ec4abd7ade")
  CLSID_IDWriteFontList1 = "da20d8ef-812a-4c43-9802-62ec4abd7ade"
  struct IDWriteFontList1
    lpVtbl : IDWriteFontList1VTbl*
  end

  struct IDWriteFontFaceReferenceVTbl
    query_interface : Proc(IDWriteFontFaceReference*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontFaceReference*, UInt32)
    release : Proc(IDWriteFontFaceReference*, UInt32)
    create_font_face : Proc(IDWriteFontFaceReference*, IDWriteFontFace3*, HRESULT)
    create_font_face_with_simulations : Proc(IDWriteFontFaceReference*, DWRITE_FONT_SIMULATIONS, IDWriteFontFace3*, HRESULT)
    equals : Proc(IDWriteFontFaceReference*, IDWriteFontFaceReference, LibC::BOOL)
    get_font_face_index : Proc(IDWriteFontFaceReference*, UInt32)
    get_simulations : Proc(IDWriteFontFaceReference*, DWRITE_FONT_SIMULATIONS)
    get_font_file : Proc(IDWriteFontFaceReference*, IDWriteFontFile*, HRESULT)
    get_local_file_size : Proc(IDWriteFontFaceReference*, UInt64)
    get_file_size : Proc(IDWriteFontFaceReference*, UInt64)
    get_file_time : Proc(IDWriteFontFaceReference*, FILETIME*, HRESULT)
    get_locality : Proc(IDWriteFontFaceReference*, DWRITE_LOCALITY)
    enqueue_font_download_request : Proc(IDWriteFontFaceReference*, HRESULT)
    enqueue_character_download_request : Proc(IDWriteFontFaceReference*, Char*, UInt32, HRESULT)
    enqueue_glyph_download_request : Proc(IDWriteFontFaceReference*, UInt16*, UInt32, HRESULT)
    enqueue_file_fragment_download_request : Proc(IDWriteFontFaceReference*, UInt64, UInt64, HRESULT)
  end

  IDWriteFontFaceReference_GUID = LibC::GUID.new("5e7fa7ca-dde3-424c-89f0-9fcd6fed58cd")
  CLSID_IDWriteFontFaceReference = "5e7fa7ca-dde3-424c-89f0-9fcd6fed58cd"
  struct IDWriteFontFaceReference
    lpVtbl : IDWriteFontFaceReferenceVTbl*
  end

  struct IDWriteFont3VTbl
    query_interface : Proc(IDWriteFont3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFont3*, UInt32)
    release : Proc(IDWriteFont3*, UInt32)
    get_font_family : Proc(IDWriteFont3*, IDWriteFontFamily*, HRESULT)
    get_weight : Proc(IDWriteFont3*, DWRITE_FONT_WEIGHT)
    get_stretch : Proc(IDWriteFont3*, DWRITE_FONT_STRETCH)
    get_style : Proc(IDWriteFont3*, DWRITE_FONT_STYLE)
    is_symbol_font : Proc(IDWriteFont3*, LibC::BOOL)
    get_face_names : Proc(IDWriteFont3*, IDWriteLocalizedStrings*, HRESULT)
    get_informational_strings : Proc(IDWriteFont3*, DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings*, LibC::BOOL*, HRESULT)
    get_simulations : Proc(IDWriteFont3*, DWRITE_FONT_SIMULATIONS)
    get_metrics : Proc(IDWriteFont3*, DWRITE_FONT_METRICS*, Void)
    has_character : Proc(IDWriteFont3*, UInt32, LibC::BOOL*, HRESULT)
    create_font_face : Proc(IDWriteFont3*, IDWriteFontFace*, HRESULT)
    get_metrics2 : Proc(IDWriteFont3*, DWRITE_FONT_METRICS1*, Void)
    get_panose : Proc(IDWriteFont3*, DWRITE_PANOSE*, Void)
    get_unicode_ranges : Proc(IDWriteFont3*, UInt32, DWRITE_UNICODE_RANGE*, UInt32*, HRESULT)
    is_monospaced_font : Proc(IDWriteFont3*, LibC::BOOL)
    is_color_font : Proc(IDWriteFont3*, LibC::BOOL)
    create_font_face2 : Proc(IDWriteFont3*, IDWriteFontFace3*, HRESULT)
    equals : Proc(IDWriteFont3*, IDWriteFont, LibC::BOOL)
    get_font_face_reference : Proc(IDWriteFont3*, IDWriteFontFaceReference*, HRESULT)
    has_character2 : Proc(IDWriteFont3*, UInt32, LibC::BOOL)
    get_locality : Proc(IDWriteFont3*, DWRITE_LOCALITY)
  end

  IDWriteFont3_GUID = LibC::GUID.new("29748ed6-8c9c-4a6a-be0b-d912e8538944")
  CLSID_IDWriteFont3 = "29748ed6-8c9c-4a6a-be0b-d912e8538944"
  struct IDWriteFont3
    lpVtbl : IDWriteFont3VTbl*
  end

  struct IDWriteFontFace3VTbl
    query_interface : Proc(IDWriteFontFace3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontFace3*, UInt32)
    release : Proc(IDWriteFontFace3*, UInt32)
    get_type : Proc(IDWriteFontFace3*, DWRITE_FONT_FACE_TYPE)
    get_files : Proc(IDWriteFontFace3*, UInt32*, IDWriteFontFile*, HRESULT)
    get_index : Proc(IDWriteFontFace3*, UInt32)
    get_simulations : Proc(IDWriteFontFace3*, DWRITE_FONT_SIMULATIONS)
    is_symbol_font : Proc(IDWriteFontFace3*, LibC::BOOL)
    get_metrics : Proc(IDWriteFontFace3*, DWRITE_FONT_METRICS*, Void)
    get_glyph_count : Proc(IDWriteFontFace3*, UInt16)
    get_design_glyph_metrics : Proc(IDWriteFontFace3*, UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)
    get_glyph_indices : Proc(IDWriteFontFace3*, UInt32*, UInt32, UInt16*, HRESULT)
    try_get_font_table : Proc(IDWriteFontFace3*, UInt32, Void**, UInt32*, Void**, LibC::BOOL*, HRESULT)
    release_font_table : Proc(IDWriteFontFace3*, Void*, Void)
    get_glyph_run_outline : Proc(IDWriteFontFace3*, Float32, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, UInt32, LibC::BOOL, LibC::BOOL, ID2D1SimplifiedGeometrySink, HRESULT)
    get_recommended_rendering_mode : Proc(IDWriteFontFace3*, Float32, Float32, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, HRESULT)
    get_gdi_compatible_metrics : Proc(IDWriteFontFace3*, Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS*, HRESULT)
    get_gdi_compatible_glyph_metrics : Proc(IDWriteFontFace3*, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)
    get_metrics2 : Proc(IDWriteFontFace3*, DWRITE_FONT_METRICS1*, Void)
    get_gdi_compatible_metrics2 : Proc(IDWriteFontFace3*, Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS1*, HRESULT)
    get_caret_metrics : Proc(IDWriteFontFace3*, DWRITE_CARET_METRICS*, Void)
    get_unicode_ranges : Proc(IDWriteFontFace3*, UInt32, DWRITE_UNICODE_RANGE*, UInt32*, HRESULT)
    is_monospaced_font : Proc(IDWriteFontFace3*, LibC::BOOL)
    get_design_glyph_advances : Proc(IDWriteFontFace3*, UInt32, UInt16*, Int32*, LibC::BOOL, HRESULT)
    get_gdi_compatible_glyph_advances : Proc(IDWriteFontFace3*, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, LibC::BOOL, UInt32, UInt16*, Int32*, HRESULT)
    get_kerning_pair_adjustments : Proc(IDWriteFontFace3*, UInt32, UInt16*, Int32*, HRESULT)
    has_kerning_pairs : Proc(IDWriteFontFace3*, LibC::BOOL)
    get_recommended_rendering_mode2 : Proc(IDWriteFontFace3*, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, DWRITE_RENDERING_MODE*, HRESULT)
    get_vertical_glyph_variants : Proc(IDWriteFontFace3*, UInt32, UInt16*, UInt16*, HRESULT)
    has_vertical_glyph_variants : Proc(IDWriteFontFace3*, LibC::BOOL)
    is_color_font : Proc(IDWriteFontFace3*, LibC::BOOL)
    get_color_palette_count : Proc(IDWriteFontFace3*, UInt32)
    get_palette_entry_count : Proc(IDWriteFontFace3*, UInt32)
    get_palette_entries : Proc(IDWriteFontFace3*, UInt32, UInt32, UInt32, DWRITE_COLOR_F*, HRESULT)
    get_recommended_rendering_mode3 : Proc(IDWriteFontFace3*, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, DWRITE_GRID_FIT_MODE*, HRESULT)
    get_font_face_reference : Proc(IDWriteFontFace3*, IDWriteFontFaceReference*, HRESULT)
    get_panose : Proc(IDWriteFontFace3*, DWRITE_PANOSE*, Void)
    get_weight : Proc(IDWriteFontFace3*, DWRITE_FONT_WEIGHT)
    get_stretch : Proc(IDWriteFontFace3*, DWRITE_FONT_STRETCH)
    get_style : Proc(IDWriteFontFace3*, DWRITE_FONT_STYLE)
    get_family_names : Proc(IDWriteFontFace3*, IDWriteLocalizedStrings*, HRESULT)
    get_face_names : Proc(IDWriteFontFace3*, IDWriteLocalizedStrings*, HRESULT)
    get_informational_strings : Proc(IDWriteFontFace3*, DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings*, LibC::BOOL*, HRESULT)
    has_character : Proc(IDWriteFontFace3*, UInt32, LibC::BOOL)
    get_recommended_rendering_mode4 : Proc(IDWriteFontFace3*, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE1*, DWRITE_GRID_FIT_MODE*, HRESULT)
    is_character_local : Proc(IDWriteFontFace3*, UInt32, LibC::BOOL)
    is_glyph_local : Proc(IDWriteFontFace3*, UInt16, LibC::BOOL)
    are_characters_local : Proc(IDWriteFontFace3*, Char*, UInt32, LibC::BOOL, LibC::BOOL*, HRESULT)
    are_glyphs_local : Proc(IDWriteFontFace3*, UInt16*, UInt32, LibC::BOOL, LibC::BOOL*, HRESULT)
  end

  IDWriteFontFace3_GUID = LibC::GUID.new("d37d7598-09be-4222-a236-2081341cc1f2")
  CLSID_IDWriteFontFace3 = "d37d7598-09be-4222-a236-2081341cc1f2"
  struct IDWriteFontFace3
    lpVtbl : IDWriteFontFace3VTbl*
  end

  struct IDWriteStringListVTbl
    query_interface : Proc(IDWriteStringList*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteStringList*, UInt32)
    release : Proc(IDWriteStringList*, UInt32)
    get_count : Proc(IDWriteStringList*, UInt32)
    get_locale_name_length : Proc(IDWriteStringList*, UInt32, UInt32*, HRESULT)
    get_locale_name : Proc(IDWriteStringList*, UInt32, Char*, UInt32, HRESULT)
    get_string_length : Proc(IDWriteStringList*, UInt32, UInt32*, HRESULT)
    get_string : Proc(IDWriteStringList*, UInt32, Char*, UInt32, HRESULT)
  end

  IDWriteStringList_GUID = LibC::GUID.new("cfee3140-1157-47ca-8b85-31bfcf3f2d0e")
  CLSID_IDWriteStringList = "cfee3140-1157-47ca-8b85-31bfcf3f2d0e"
  struct IDWriteStringList
    lpVtbl : IDWriteStringListVTbl*
  end

  struct IDWriteFontDownloadListenerVTbl
    query_interface : Proc(IDWriteFontDownloadListener*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontDownloadListener*, UInt32)
    release : Proc(IDWriteFontDownloadListener*, UInt32)
    download_completed : Proc(IDWriteFontDownloadListener*, IDWriteFontDownloadQueue, IUnknown, HRESULT, Void)
  end

  IDWriteFontDownloadListener_GUID = LibC::GUID.new("b06fe5b9-43ec-4393-881b-dbe4dc72fda7")
  CLSID_IDWriteFontDownloadListener = "b06fe5b9-43ec-4393-881b-dbe4dc72fda7"
  struct IDWriteFontDownloadListener
    lpVtbl : IDWriteFontDownloadListenerVTbl*
  end

  struct IDWriteFontDownloadQueueVTbl
    query_interface : Proc(IDWriteFontDownloadQueue*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontDownloadQueue*, UInt32)
    release : Proc(IDWriteFontDownloadQueue*, UInt32)
    add_listener : Proc(IDWriteFontDownloadQueue*, IDWriteFontDownloadListener, UInt32*, HRESULT)
    remove_listener : Proc(IDWriteFontDownloadQueue*, UInt32, HRESULT)
    is_empty : Proc(IDWriteFontDownloadQueue*, LibC::BOOL)
    begin_download : Proc(IDWriteFontDownloadQueue*, IUnknown, HRESULT)
    cancel_download : Proc(IDWriteFontDownloadQueue*, HRESULT)
    get_generation_count : Proc(IDWriteFontDownloadQueue*, UInt64)
  end

  IDWriteFontDownloadQueue_GUID = LibC::GUID.new("b71e6052-5aea-4fa3-832e-f60d431f7e91")
  CLSID_IDWriteFontDownloadQueue = "b71e6052-5aea-4fa3-832e-f60d431f7e91"
  struct IDWriteFontDownloadQueue
    lpVtbl : IDWriteFontDownloadQueueVTbl*
  end

  struct IDWriteGdiInterop1VTbl
    query_interface : Proc(IDWriteGdiInterop1*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteGdiInterop1*, UInt32)
    release : Proc(IDWriteGdiInterop1*, UInt32)
    create_font_from_logfont : Proc(IDWriteGdiInterop1*, LOGFONTW*, IDWriteFont*, HRESULT)
    convert_font_to_logfont : Proc(IDWriteGdiInterop1*, IDWriteFont, LOGFONTW*, LibC::BOOL*, HRESULT)
    convert_font_face_to_logfont : Proc(IDWriteGdiInterop1*, IDWriteFontFace, LOGFONTW*, HRESULT)
    create_font_face_from_hdc : Proc(IDWriteGdiInterop1*, HDC, IDWriteFontFace*, HRESULT)
    create_bitmap_render_target : Proc(IDWriteGdiInterop1*, HDC, UInt32, UInt32, IDWriteBitmapRenderTarget*, HRESULT)
    create_font_from_logfont2 : Proc(IDWriteGdiInterop1*, LOGFONTW*, IDWriteFontCollection, IDWriteFont*, HRESULT)
    get_font_signature : Proc(IDWriteGdiInterop1*, IDWriteFontFace, FONTSIGNATURE*, HRESULT)
    get_font_signature2 : Proc(IDWriteGdiInterop1*, IDWriteFont, FONTSIGNATURE*, HRESULT)
    get_matching_fonts_by_logfont : Proc(IDWriteGdiInterop1*, LOGFONTA*, IDWriteFontSet, IDWriteFontSet*, HRESULT)
  end

  IDWriteGdiInterop1_GUID = LibC::GUID.new("4556be70-3abd-4f70-90be-421780a6f515")
  CLSID_IDWriteGdiInterop1 = "4556be70-3abd-4f70-90be-421780a6f515"
  struct IDWriteGdiInterop1
    lpVtbl : IDWriteGdiInterop1VTbl*
  end

  struct IDWriteTextFormat2VTbl
    query_interface : Proc(IDWriteTextFormat2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteTextFormat2*, UInt32)
    release : Proc(IDWriteTextFormat2*, UInt32)
    set_text_alignment : Proc(IDWriteTextFormat2*, DWRITE_TEXT_ALIGNMENT, HRESULT)
    set_paragraph_alignment : Proc(IDWriteTextFormat2*, DWRITE_PARAGRAPH_ALIGNMENT, HRESULT)
    set_word_wrapping : Proc(IDWriteTextFormat2*, DWRITE_WORD_WRAPPING, HRESULT)
    set_reading_direction : Proc(IDWriteTextFormat2*, DWRITE_READING_DIRECTION, HRESULT)
    set_flow_direction : Proc(IDWriteTextFormat2*, DWRITE_FLOW_DIRECTION, HRESULT)
    set_incremental_tab_stop : Proc(IDWriteTextFormat2*, Float32, HRESULT)
    set_trimming : Proc(IDWriteTextFormat2*, DWRITE_TRIMMING*, IDWriteInlineObject, HRESULT)
    set_line_spacing : Proc(IDWriteTextFormat2*, DWRITE_LINE_SPACING_METHOD, Float32, Float32, HRESULT)
    get_text_alignment : Proc(IDWriteTextFormat2*, DWRITE_TEXT_ALIGNMENT)
    get_paragraph_alignment : Proc(IDWriteTextFormat2*, DWRITE_PARAGRAPH_ALIGNMENT)
    get_word_wrapping : Proc(IDWriteTextFormat2*, DWRITE_WORD_WRAPPING)
    get_reading_direction : Proc(IDWriteTextFormat2*, DWRITE_READING_DIRECTION)
    get_flow_direction : Proc(IDWriteTextFormat2*, DWRITE_FLOW_DIRECTION)
    get_incremental_tab_stop : Proc(IDWriteTextFormat2*, Float32)
    get_trimming : Proc(IDWriteTextFormat2*, DWRITE_TRIMMING*, IDWriteInlineObject*, HRESULT)
    get_line_spacing : Proc(IDWriteTextFormat2*, DWRITE_LINE_SPACING_METHOD*, Float32*, Float32*, HRESULT)
    get_font_collection : Proc(IDWriteTextFormat2*, IDWriteFontCollection*, HRESULT)
    get_font_family_name_length : Proc(IDWriteTextFormat2*, UInt32)
    get_font_family_name : Proc(IDWriteTextFormat2*, Char*, UInt32, HRESULT)
    get_font_weight : Proc(IDWriteTextFormat2*, DWRITE_FONT_WEIGHT)
    get_font_style : Proc(IDWriteTextFormat2*, DWRITE_FONT_STYLE)
    get_font_stretch : Proc(IDWriteTextFormat2*, DWRITE_FONT_STRETCH)
    get_font_size : Proc(IDWriteTextFormat2*, Float32)
    get_locale_name_length : Proc(IDWriteTextFormat2*, UInt32)
    get_locale_name : Proc(IDWriteTextFormat2*, Char*, UInt32, HRESULT)
    set_vertical_glyph_orientation : Proc(IDWriteTextFormat2*, DWRITE_VERTICAL_GLYPH_ORIENTATION, HRESULT)
    get_vertical_glyph_orientation : Proc(IDWriteTextFormat2*, DWRITE_VERTICAL_GLYPH_ORIENTATION)
    set_last_line_wrapping : Proc(IDWriteTextFormat2*, LibC::BOOL, HRESULT)
    get_last_line_wrapping : Proc(IDWriteTextFormat2*, LibC::BOOL)
    set_optical_alignment : Proc(IDWriteTextFormat2*, DWRITE_OPTICAL_ALIGNMENT, HRESULT)
    get_optical_alignment : Proc(IDWriteTextFormat2*, DWRITE_OPTICAL_ALIGNMENT)
    set_font_fallback : Proc(IDWriteTextFormat2*, IDWriteFontFallback, HRESULT)
    get_font_fallback : Proc(IDWriteTextFormat2*, IDWriteFontFallback*, HRESULT)
    set_line_spacing2 : Proc(IDWriteTextFormat2*, DWRITE_LINE_SPACING*, HRESULT)
    get_line_spacing2 : Proc(IDWriteTextFormat2*, DWRITE_LINE_SPACING*, HRESULT)
  end

  IDWriteTextFormat2_GUID = LibC::GUID.new("f67e0edd-9e3d-4ecc-8c32-4183253dfe70")
  CLSID_IDWriteTextFormat2 = "f67e0edd-9e3d-4ecc-8c32-4183253dfe70"
  struct IDWriteTextFormat2
    lpVtbl : IDWriteTextFormat2VTbl*
  end

  struct IDWriteTextLayout3VTbl
    query_interface : Proc(IDWriteTextLayout3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteTextLayout3*, UInt32)
    release : Proc(IDWriteTextLayout3*, UInt32)
    set_text_alignment : Proc(IDWriteTextLayout3*, DWRITE_TEXT_ALIGNMENT, HRESULT)
    set_paragraph_alignment : Proc(IDWriteTextLayout3*, DWRITE_PARAGRAPH_ALIGNMENT, HRESULT)
    set_word_wrapping : Proc(IDWriteTextLayout3*, DWRITE_WORD_WRAPPING, HRESULT)
    set_reading_direction : Proc(IDWriteTextLayout3*, DWRITE_READING_DIRECTION, HRESULT)
    set_flow_direction : Proc(IDWriteTextLayout3*, DWRITE_FLOW_DIRECTION, HRESULT)
    set_incremental_tab_stop : Proc(IDWriteTextLayout3*, Float32, HRESULT)
    set_trimming : Proc(IDWriteTextLayout3*, DWRITE_TRIMMING*, IDWriteInlineObject, HRESULT)
    set_line_spacing : Proc(IDWriteTextLayout3*, DWRITE_LINE_SPACING_METHOD, Float32, Float32, HRESULT)
    get_text_alignment : Proc(IDWriteTextLayout3*, DWRITE_TEXT_ALIGNMENT)
    get_paragraph_alignment : Proc(IDWriteTextLayout3*, DWRITE_PARAGRAPH_ALIGNMENT)
    get_word_wrapping : Proc(IDWriteTextLayout3*, DWRITE_WORD_WRAPPING)
    get_reading_direction : Proc(IDWriteTextLayout3*, DWRITE_READING_DIRECTION)
    get_flow_direction : Proc(IDWriteTextLayout3*, DWRITE_FLOW_DIRECTION)
    get_incremental_tab_stop : Proc(IDWriteTextLayout3*, Float32)
    get_trimming : Proc(IDWriteTextLayout3*, DWRITE_TRIMMING*, IDWriteInlineObject*, HRESULT)
    get_line_spacing : Proc(IDWriteTextLayout3*, DWRITE_LINE_SPACING_METHOD*, Float32*, Float32*, HRESULT)
    get_font_collection : Proc(IDWriteTextLayout3*, IDWriteFontCollection*, HRESULT)
    get_font_family_name_length : Proc(IDWriteTextLayout3*, UInt32)
    get_font_family_name : Proc(IDWriteTextLayout3*, Char*, UInt32, HRESULT)
    get_font_weight : Proc(IDWriteTextLayout3*, DWRITE_FONT_WEIGHT)
    get_font_style : Proc(IDWriteTextLayout3*, DWRITE_FONT_STYLE)
    get_font_stretch : Proc(IDWriteTextLayout3*, DWRITE_FONT_STRETCH)
    get_font_size : Proc(IDWriteTextLayout3*, Float32)
    get_locale_name_length : Proc(IDWriteTextLayout3*, UInt32)
    get_locale_name : Proc(IDWriteTextLayout3*, Char*, UInt32, HRESULT)
    set_max_width : Proc(IDWriteTextLayout3*, Float32, HRESULT)
    set_max_height : Proc(IDWriteTextLayout3*, Float32, HRESULT)
    set_font_collection : Proc(IDWriteTextLayout3*, IDWriteFontCollection, DWRITE_TEXT_RANGE, HRESULT)
    set_font_family_name : Proc(IDWriteTextLayout3*, LibC::LPWSTR, DWRITE_TEXT_RANGE, HRESULT)
    set_font_weight : Proc(IDWriteTextLayout3*, DWRITE_FONT_WEIGHT, DWRITE_TEXT_RANGE, HRESULT)
    set_font_style : Proc(IDWriteTextLayout3*, DWRITE_FONT_STYLE, DWRITE_TEXT_RANGE, HRESULT)
    set_font_stretch : Proc(IDWriteTextLayout3*, DWRITE_FONT_STRETCH, DWRITE_TEXT_RANGE, HRESULT)
    set_font_size : Proc(IDWriteTextLayout3*, Float32, DWRITE_TEXT_RANGE, HRESULT)
    set_underline : Proc(IDWriteTextLayout3*, LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)
    set_strikethrough : Proc(IDWriteTextLayout3*, LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)
    set_drawing_effect : Proc(IDWriteTextLayout3*, IUnknown, DWRITE_TEXT_RANGE, HRESULT)
    set_inline_object : Proc(IDWriteTextLayout3*, IDWriteInlineObject, DWRITE_TEXT_RANGE, HRESULT)
    set_typography : Proc(IDWriteTextLayout3*, IDWriteTypography, DWRITE_TEXT_RANGE, HRESULT)
    set_locale_name : Proc(IDWriteTextLayout3*, LibC::LPWSTR, DWRITE_TEXT_RANGE, HRESULT)
    get_max_width : Proc(IDWriteTextLayout3*, Float32)
    get_max_height : Proc(IDWriteTextLayout3*, Float32)
    get_font_collection2 : Proc(IDWriteTextLayout3*, UInt32, IDWriteFontCollection*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_family_name_length2 : Proc(IDWriteTextLayout3*, UInt32, UInt32*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_family_name2 : Proc(IDWriteTextLayout3*, UInt32, Char*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_weight2 : Proc(IDWriteTextLayout3*, UInt32, DWRITE_FONT_WEIGHT*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_style2 : Proc(IDWriteTextLayout3*, UInt32, DWRITE_FONT_STYLE*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_stretch2 : Proc(IDWriteTextLayout3*, UInt32, DWRITE_FONT_STRETCH*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_size2 : Proc(IDWriteTextLayout3*, UInt32, Float32*, DWRITE_TEXT_RANGE*, HRESULT)
    get_underline : Proc(IDWriteTextLayout3*, UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)
    get_strikethrough : Proc(IDWriteTextLayout3*, UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)
    get_drawing_effect : Proc(IDWriteTextLayout3*, UInt32, IUnknown*, DWRITE_TEXT_RANGE*, HRESULT)
    get_inline_object : Proc(IDWriteTextLayout3*, UInt32, IDWriteInlineObject*, DWRITE_TEXT_RANGE*, HRESULT)
    get_typography : Proc(IDWriteTextLayout3*, UInt32, IDWriteTypography*, DWRITE_TEXT_RANGE*, HRESULT)
    get_locale_name_length2 : Proc(IDWriteTextLayout3*, UInt32, UInt32*, DWRITE_TEXT_RANGE*, HRESULT)
    get_locale_name2 : Proc(IDWriteTextLayout3*, UInt32, Char*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)
    draw : Proc(IDWriteTextLayout3*, Void*, IDWriteTextRenderer, Float32, Float32, HRESULT)
    get_line_metrics : Proc(IDWriteTextLayout3*, DWRITE_LINE_METRICS*, UInt32, UInt32*, HRESULT)
    get_metrics : Proc(IDWriteTextLayout3*, DWRITE_TEXT_METRICS*, HRESULT)
    get_overhang_metrics : Proc(IDWriteTextLayout3*, DWRITE_OVERHANG_METRICS*, HRESULT)
    get_cluster_metrics : Proc(IDWriteTextLayout3*, DWRITE_CLUSTER_METRICS*, UInt32, UInt32*, HRESULT)
    determine_min_width : Proc(IDWriteTextLayout3*, Float32*, HRESULT)
    hit_test_point : Proc(IDWriteTextLayout3*, Float32, Float32, LibC::BOOL*, LibC::BOOL*, DWRITE_HIT_TEST_METRICS*, HRESULT)
    hit_test_text_position : Proc(IDWriteTextLayout3*, UInt32, LibC::BOOL, Float32*, Float32*, DWRITE_HIT_TEST_METRICS*, HRESULT)
    hit_test_text_range : Proc(IDWriteTextLayout3*, UInt32, UInt32, Float32, Float32, DWRITE_HIT_TEST_METRICS*, UInt32, UInt32*, HRESULT)
    set_pair_kerning : Proc(IDWriteTextLayout3*, LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)
    get_pair_kerning : Proc(IDWriteTextLayout3*, UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)
    set_character_spacing : Proc(IDWriteTextLayout3*, Float32, Float32, Float32, DWRITE_TEXT_RANGE, HRESULT)
    get_character_spacing : Proc(IDWriteTextLayout3*, UInt32, Float32*, Float32*, Float32*, DWRITE_TEXT_RANGE*, HRESULT)
    get_metrics2 : Proc(IDWriteTextLayout3*, DWRITE_TEXT_METRICS1*, HRESULT)
    set_vertical_glyph_orientation : Proc(IDWriteTextLayout3*, DWRITE_VERTICAL_GLYPH_ORIENTATION, HRESULT)
    get_vertical_glyph_orientation : Proc(IDWriteTextLayout3*, DWRITE_VERTICAL_GLYPH_ORIENTATION)
    set_last_line_wrapping : Proc(IDWriteTextLayout3*, LibC::BOOL, HRESULT)
    get_last_line_wrapping : Proc(IDWriteTextLayout3*, LibC::BOOL)
    set_optical_alignment : Proc(IDWriteTextLayout3*, DWRITE_OPTICAL_ALIGNMENT, HRESULT)
    get_optical_alignment : Proc(IDWriteTextLayout3*, DWRITE_OPTICAL_ALIGNMENT)
    set_font_fallback : Proc(IDWriteTextLayout3*, IDWriteFontFallback, HRESULT)
    get_font_fallback : Proc(IDWriteTextLayout3*, IDWriteFontFallback*, HRESULT)
    invalidate_layout : Proc(IDWriteTextLayout3*, HRESULT)
    set_line_spacing2 : Proc(IDWriteTextLayout3*, DWRITE_LINE_SPACING*, HRESULT)
    get_line_spacing2 : Proc(IDWriteTextLayout3*, DWRITE_LINE_SPACING*, HRESULT)
    get_line_metrics2 : Proc(IDWriteTextLayout3*, DWRITE_LINE_METRICS1*, UInt32, UInt32*, HRESULT)
  end

  IDWriteTextLayout3_GUID = LibC::GUID.new("07ddcd52-020e-4de8-ac33-6c953d83f92d")
  CLSID_IDWriteTextLayout3 = "07ddcd52-020e-4de8-ac33-6c953d83f92d"
  struct IDWriteTextLayout3
    lpVtbl : IDWriteTextLayout3VTbl*
  end

  struct IDWriteColorGlyphRunEnumerator1VTbl
    query_interface : Proc(IDWriteColorGlyphRunEnumerator1*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteColorGlyphRunEnumerator1*, UInt32)
    release : Proc(IDWriteColorGlyphRunEnumerator1*, UInt32)
    move_next : Proc(IDWriteColorGlyphRunEnumerator1*, LibC::BOOL*, HRESULT)
    get_current_run : Proc(IDWriteColorGlyphRunEnumerator1*, DWRITE_COLOR_GLYPH_RUN**, HRESULT)
    get_current_run2 : Proc(IDWriteColorGlyphRunEnumerator1*, DWRITE_COLOR_GLYPH_RUN1**, HRESULT)
  end

  IDWriteColorGlyphRunEnumerator1_GUID = LibC::GUID.new("7c5f86da-c7a1-4f05-b8e1-55a179fe5a35")
  CLSID_IDWriteColorGlyphRunEnumerator1 = "7c5f86da-c7a1-4f05-b8e1-55a179fe5a35"
  struct IDWriteColorGlyphRunEnumerator1
    lpVtbl : IDWriteColorGlyphRunEnumerator1VTbl*
  end

  struct IDWriteFontFace4VTbl
    query_interface : Proc(IDWriteFontFace4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontFace4*, UInt32)
    release : Proc(IDWriteFontFace4*, UInt32)
    get_type : Proc(IDWriteFontFace4*, DWRITE_FONT_FACE_TYPE)
    get_files : Proc(IDWriteFontFace4*, UInt32*, IDWriteFontFile*, HRESULT)
    get_index : Proc(IDWriteFontFace4*, UInt32)
    get_simulations : Proc(IDWriteFontFace4*, DWRITE_FONT_SIMULATIONS)
    is_symbol_font : Proc(IDWriteFontFace4*, LibC::BOOL)
    get_metrics : Proc(IDWriteFontFace4*, DWRITE_FONT_METRICS*, Void)
    get_glyph_count : Proc(IDWriteFontFace4*, UInt16)
    get_design_glyph_metrics : Proc(IDWriteFontFace4*, UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)
    get_glyph_indices : Proc(IDWriteFontFace4*, UInt32*, UInt32, UInt16*, HRESULT)
    try_get_font_table : Proc(IDWriteFontFace4*, UInt32, Void**, UInt32*, Void**, LibC::BOOL*, HRESULT)
    release_font_table : Proc(IDWriteFontFace4*, Void*, Void)
    get_glyph_run_outline : Proc(IDWriteFontFace4*, Float32, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, UInt32, LibC::BOOL, LibC::BOOL, ID2D1SimplifiedGeometrySink, HRESULT)
    get_recommended_rendering_mode : Proc(IDWriteFontFace4*, Float32, Float32, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, HRESULT)
    get_gdi_compatible_metrics : Proc(IDWriteFontFace4*, Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS*, HRESULT)
    get_gdi_compatible_glyph_metrics : Proc(IDWriteFontFace4*, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)
    get_metrics2 : Proc(IDWriteFontFace4*, DWRITE_FONT_METRICS1*, Void)
    get_gdi_compatible_metrics2 : Proc(IDWriteFontFace4*, Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS1*, HRESULT)
    get_caret_metrics : Proc(IDWriteFontFace4*, DWRITE_CARET_METRICS*, Void)
    get_unicode_ranges : Proc(IDWriteFontFace4*, UInt32, DWRITE_UNICODE_RANGE*, UInt32*, HRESULT)
    is_monospaced_font : Proc(IDWriteFontFace4*, LibC::BOOL)
    get_design_glyph_advances : Proc(IDWriteFontFace4*, UInt32, UInt16*, Int32*, LibC::BOOL, HRESULT)
    get_gdi_compatible_glyph_advances : Proc(IDWriteFontFace4*, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, LibC::BOOL, UInt32, UInt16*, Int32*, HRESULT)
    get_kerning_pair_adjustments : Proc(IDWriteFontFace4*, UInt32, UInt16*, Int32*, HRESULT)
    has_kerning_pairs : Proc(IDWriteFontFace4*, LibC::BOOL)
    get_recommended_rendering_mode2 : Proc(IDWriteFontFace4*, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, DWRITE_RENDERING_MODE*, HRESULT)
    get_vertical_glyph_variants : Proc(IDWriteFontFace4*, UInt32, UInt16*, UInt16*, HRESULT)
    has_vertical_glyph_variants : Proc(IDWriteFontFace4*, LibC::BOOL)
    is_color_font : Proc(IDWriteFontFace4*, LibC::BOOL)
    get_color_palette_count : Proc(IDWriteFontFace4*, UInt32)
    get_palette_entry_count : Proc(IDWriteFontFace4*, UInt32)
    get_palette_entries : Proc(IDWriteFontFace4*, UInt32, UInt32, UInt32, DWRITE_COLOR_F*, HRESULT)
    get_recommended_rendering_mode3 : Proc(IDWriteFontFace4*, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, DWRITE_GRID_FIT_MODE*, HRESULT)
    get_font_face_reference : Proc(IDWriteFontFace4*, IDWriteFontFaceReference*, HRESULT)
    get_panose : Proc(IDWriteFontFace4*, DWRITE_PANOSE*, Void)
    get_weight : Proc(IDWriteFontFace4*, DWRITE_FONT_WEIGHT)
    get_stretch : Proc(IDWriteFontFace4*, DWRITE_FONT_STRETCH)
    get_style : Proc(IDWriteFontFace4*, DWRITE_FONT_STYLE)
    get_family_names : Proc(IDWriteFontFace4*, IDWriteLocalizedStrings*, HRESULT)
    get_face_names : Proc(IDWriteFontFace4*, IDWriteLocalizedStrings*, HRESULT)
    get_informational_strings : Proc(IDWriteFontFace4*, DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings*, LibC::BOOL*, HRESULT)
    has_character : Proc(IDWriteFontFace4*, UInt32, LibC::BOOL)
    get_recommended_rendering_mode4 : Proc(IDWriteFontFace4*, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE1*, DWRITE_GRID_FIT_MODE*, HRESULT)
    is_character_local : Proc(IDWriteFontFace4*, UInt32, LibC::BOOL)
    is_glyph_local : Proc(IDWriteFontFace4*, UInt16, LibC::BOOL)
    are_characters_local : Proc(IDWriteFontFace4*, Char*, UInt32, LibC::BOOL, LibC::BOOL*, HRESULT)
    are_glyphs_local : Proc(IDWriteFontFace4*, UInt16*, UInt32, LibC::BOOL, LibC::BOOL*, HRESULT)
    get_glyph_image_formats : Proc(IDWriteFontFace4*, UInt16, UInt32, UInt32, DWRITE_GLYPH_IMAGE_FORMATS*, HRESULT)
    get_glyph_image_formats2 : Proc(IDWriteFontFace4*, DWRITE_GLYPH_IMAGE_FORMATS)
    get_glyph_image_data : Proc(IDWriteFontFace4*, UInt16, UInt32, DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_GLYPH_IMAGE_DATA*, Void**, HRESULT)
    release_glyph_image_data : Proc(IDWriteFontFace4*, Void*, Void)
  end

  IDWriteFontFace4_GUID = LibC::GUID.new("27f2a904-4eb8-441d-9678-0563f53e3e2f")
  CLSID_IDWriteFontFace4 = "27f2a904-4eb8-441d-9678-0563f53e3e2f"
  struct IDWriteFontFace4
    lpVtbl : IDWriteFontFace4VTbl*
  end

  struct IDWriteFactory4VTbl
    query_interface : Proc(IDWriteFactory4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFactory4*, UInt32)
    release : Proc(IDWriteFactory4*, UInt32)
    get_system_font_collection : Proc(IDWriteFactory4*, IDWriteFontCollection*, LibC::BOOL, HRESULT)
    create_custom_font_collection : Proc(IDWriteFactory4*, IDWriteFontCollectionLoader, Void*, UInt32, IDWriteFontCollection*, HRESULT)
    register_font_collection_loader : Proc(IDWriteFactory4*, IDWriteFontCollectionLoader, HRESULT)
    unregister_font_collection_loader : Proc(IDWriteFactory4*, IDWriteFontCollectionLoader, HRESULT)
    create_font_file_reference : Proc(IDWriteFactory4*, LibC::LPWSTR, FILETIME*, IDWriteFontFile*, HRESULT)
    create_custom_font_file_reference : Proc(IDWriteFactory4*, Void*, UInt32, IDWriteFontFileLoader, IDWriteFontFile*, HRESULT)
    create_font_face : Proc(IDWriteFactory4*, DWRITE_FONT_FACE_TYPE, UInt32, IDWriteFontFile*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace*, HRESULT)
    create_rendering_params : Proc(IDWriteFactory4*, IDWriteRenderingParams*, HRESULT)
    create_monitor_rendering_params : Proc(IDWriteFactory4*, HMONITOR, IDWriteRenderingParams*, HRESULT)
    create_custom_rendering_params : Proc(IDWriteFactory4*, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams*, HRESULT)
    register_font_file_loader : Proc(IDWriteFactory4*, IDWriteFontFileLoader, HRESULT)
    unregister_font_file_loader : Proc(IDWriteFactory4*, IDWriteFontFileLoader, HRESULT)
    create_text_format : Proc(IDWriteFactory4*, LibC::LPWSTR, IDWriteFontCollection, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, Float32, LibC::LPWSTR, IDWriteTextFormat*, HRESULT)
    create_typography : Proc(IDWriteFactory4*, IDWriteTypography*, HRESULT)
    get_gdi_interop : Proc(IDWriteFactory4*, IDWriteGdiInterop*, HRESULT)
    create_text_layout : Proc(IDWriteFactory4*, Char*, UInt32, IDWriteTextFormat, Float32, Float32, IDWriteTextLayout*, HRESULT)
    create_gdi_compatible_text_layout : Proc(IDWriteFactory4*, Char*, UInt32, IDWriteTextFormat, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, IDWriteTextLayout*, HRESULT)
    create_ellipsis_trimming_sign : Proc(IDWriteFactory4*, IDWriteTextFormat, IDWriteInlineObject*, HRESULT)
    create_text_analyzer : Proc(IDWriteFactory4*, IDWriteTextAnalyzer*, HRESULT)
    create_number_substitution : Proc(IDWriteFactory4*, DWRITE_NUMBER_SUBSTITUTION_METHOD, LibC::LPWSTR, LibC::BOOL, IDWriteNumberSubstitution*, HRESULT)
    create_glyph_run_analysis : Proc(IDWriteFactory4*, DWRITE_GLYPH_RUN*, Float32, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)
    get_eudc_font_collection : Proc(IDWriteFactory4*, IDWriteFontCollection*, LibC::BOOL, HRESULT)
    create_custom_rendering_params2 : Proc(IDWriteFactory4*, Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams1*, HRESULT)
    get_system_font_fallback : Proc(IDWriteFactory4*, IDWriteFontFallback*, HRESULT)
    create_font_fallback_builder : Proc(IDWriteFactory4*, IDWriteFontFallbackBuilder*, HRESULT)
    translate_color_glyph_run : Proc(IDWriteFactory4*, Float32, Float32, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_MEASURING_MODE, DWRITE_MATRIX*, UInt32, IDWriteColorGlyphRunEnumerator*, HRESULT)
    create_custom_rendering_params3 : Proc(IDWriteFactory4*, Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams2*, HRESULT)
    create_glyph_run_analysis2 : Proc(IDWriteFactory4*, DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)
    create_glyph_run_analysis3 : Proc(IDWriteFactory4*, DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE1, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)
    create_custom_rendering_params4 : Proc(IDWriteFactory4*, Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE1, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams3*, HRESULT)
    create_font_face_reference : Proc(IDWriteFactory4*, IDWriteFontFile, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference*, HRESULT)
    create_font_face_reference2 : Proc(IDWriteFactory4*, LibC::LPWSTR, FILETIME*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference*, HRESULT)
    get_system_font_set : Proc(IDWriteFactory4*, IDWriteFontSet*, HRESULT)
    create_font_set_builder : Proc(IDWriteFactory4*, IDWriteFontSetBuilder*, HRESULT)
    create_font_collection_from_font_set : Proc(IDWriteFactory4*, IDWriteFontSet, IDWriteFontCollection1*, HRESULT)
    get_system_font_collection2 : Proc(IDWriteFactory4*, LibC::BOOL, IDWriteFontCollection1*, LibC::BOOL, HRESULT)
    get_font_download_queue : Proc(IDWriteFactory4*, IDWriteFontDownloadQueue*, HRESULT)
    translate_color_glyph_run2 : Proc(IDWriteFactory4*, D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_MEASURING_MODE, DWRITE_MATRIX*, UInt32, IDWriteColorGlyphRunEnumerator1*, HRESULT)
    compute_glyph_origins : Proc(IDWriteFactory4*, DWRITE_GLYPH_RUN*, D2D_POINT_2F, D2D_POINT_2F*, HRESULT)
    compute_glyph_origins2 : Proc(IDWriteFactory4*, DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_POINT_2F, DWRITE_MATRIX*, D2D_POINT_2F*, HRESULT)
  end

  IDWriteFactory4_GUID = LibC::GUID.new("4b0b5bd3-0797-4549-8ac5-fe915cc53856")
  CLSID_IDWriteFactory4 = "4b0b5bd3-0797-4549-8ac5-fe915cc53856"
  struct IDWriteFactory4
    lpVtbl : IDWriteFactory4VTbl*
  end

  struct IDWriteFontSetBuilder1VTbl
    query_interface : Proc(IDWriteFontSetBuilder1*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontSetBuilder1*, UInt32)
    release : Proc(IDWriteFontSetBuilder1*, UInt32)
    add_font_face_reference : Proc(IDWriteFontSetBuilder1*, IDWriteFontFaceReference, DWRITE_FONT_PROPERTY*, UInt32, HRESULT)
    add_font_face_reference2 : Proc(IDWriteFontSetBuilder1*, IDWriteFontFaceReference, HRESULT)
    add_font_set : Proc(IDWriteFontSetBuilder1*, IDWriteFontSet, HRESULT)
    create_font_set : Proc(IDWriteFontSetBuilder1*, IDWriteFontSet*, HRESULT)
    add_font_file : Proc(IDWriteFontSetBuilder1*, IDWriteFontFile, HRESULT)
  end

  IDWriteFontSetBuilder1_GUID = LibC::GUID.new("3ff7715f-3cdc-4dc6-9b72-ec5621dccafd")
  CLSID_IDWriteFontSetBuilder1 = "3ff7715f-3cdc-4dc6-9b72-ec5621dccafd"
  struct IDWriteFontSetBuilder1
    lpVtbl : IDWriteFontSetBuilder1VTbl*
  end

  struct IDWriteAsyncResultVTbl
    query_interface : Proc(IDWriteAsyncResult*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteAsyncResult*, UInt32)
    release : Proc(IDWriteAsyncResult*, UInt32)
    get_wait_handle : Proc(IDWriteAsyncResult*, LibC::HANDLE)
    get_result : Proc(IDWriteAsyncResult*, HRESULT)
  end

  IDWriteAsyncResult_GUID = LibC::GUID.new("ce25f8fd-863b-4d13-9651-c1f88dc73fe2")
  CLSID_IDWriteAsyncResult = "ce25f8fd-863b-4d13-9651-c1f88dc73fe2"
  struct IDWriteAsyncResult
    lpVtbl : IDWriteAsyncResultVTbl*
  end

  struct IDWriteRemoteFontFileStreamVTbl
    query_interface : Proc(IDWriteRemoteFontFileStream*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteRemoteFontFileStream*, UInt32)
    release : Proc(IDWriteRemoteFontFileStream*, UInt32)
    read_file_fragment : Proc(IDWriteRemoteFontFileStream*, Void**, UInt64, UInt64, Void**, HRESULT)
    release_file_fragment : Proc(IDWriteRemoteFontFileStream*, Void*, Void)
    get_file_size : Proc(IDWriteRemoteFontFileStream*, UInt64*, HRESULT)
    get_last_write_time : Proc(IDWriteRemoteFontFileStream*, UInt64*, HRESULT)
    get_local_file_size : Proc(IDWriteRemoteFontFileStream*, UInt64*, HRESULT)
    get_file_fragment_locality : Proc(IDWriteRemoteFontFileStream*, UInt64, UInt64, LibC::BOOL*, UInt64*, HRESULT)
    get_locality : Proc(IDWriteRemoteFontFileStream*, DWRITE_LOCALITY)
    begin_download : Proc(IDWriteRemoteFontFileStream*, Guid*, DWRITE_FILE_FRAGMENT*, UInt32, IDWriteAsyncResult*, HRESULT)
  end

  IDWriteRemoteFontFileStream_GUID = LibC::GUID.new("4db3757a-2c72-4ed9-b2b6-1ababe1aff9c")
  CLSID_IDWriteRemoteFontFileStream = "4db3757a-2c72-4ed9-b2b6-1ababe1aff9c"
  struct IDWriteRemoteFontFileStream
    lpVtbl : IDWriteRemoteFontFileStreamVTbl*
  end

  struct IDWriteRemoteFontFileLoaderVTbl
    query_interface : Proc(IDWriteRemoteFontFileLoader*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteRemoteFontFileLoader*, UInt32)
    release : Proc(IDWriteRemoteFontFileLoader*, UInt32)
    create_stream_from_key : Proc(IDWriteRemoteFontFileLoader*, Void*, UInt32, IDWriteFontFileStream*, HRESULT)
    create_remote_stream_from_key : Proc(IDWriteRemoteFontFileLoader*, Void*, UInt32, IDWriteRemoteFontFileStream*, HRESULT)
    get_locality_from_key : Proc(IDWriteRemoteFontFileLoader*, Void*, UInt32, DWRITE_LOCALITY*, HRESULT)
    create_font_file_reference_from_url : Proc(IDWriteRemoteFontFileLoader*, IDWriteFactory, LibC::LPWSTR, LibC::LPWSTR, IDWriteFontFile*, HRESULT)
  end

  IDWriteRemoteFontFileLoader_GUID = LibC::GUID.new("68648c83-6ede-46c0-ab46-20083a887fde")
  CLSID_IDWriteRemoteFontFileLoader = "68648c83-6ede-46c0-ab46-20083a887fde"
  struct IDWriteRemoteFontFileLoader
    lpVtbl : IDWriteRemoteFontFileLoaderVTbl*
  end

  struct IDWriteInMemoryFontFileLoaderVTbl
    query_interface : Proc(IDWriteInMemoryFontFileLoader*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteInMemoryFontFileLoader*, UInt32)
    release : Proc(IDWriteInMemoryFontFileLoader*, UInt32)
    create_stream_from_key : Proc(IDWriteInMemoryFontFileLoader*, Void*, UInt32, IDWriteFontFileStream*, HRESULT)
    create_in_memory_font_file_reference : Proc(IDWriteInMemoryFontFileLoader*, IDWriteFactory, Void*, UInt32, IUnknown, IDWriteFontFile*, HRESULT)
    get_file_count : Proc(IDWriteInMemoryFontFileLoader*, UInt32)
  end

  IDWriteInMemoryFontFileLoader_GUID = LibC::GUID.new("dc102f47-a12d-4b1c-822d-9e117e33043f")
  CLSID_IDWriteInMemoryFontFileLoader = "dc102f47-a12d-4b1c-822d-9e117e33043f"
  struct IDWriteInMemoryFontFileLoader
    lpVtbl : IDWriteInMemoryFontFileLoaderVTbl*
  end

  struct IDWriteFactory5VTbl
    query_interface : Proc(IDWriteFactory5*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFactory5*, UInt32)
    release : Proc(IDWriteFactory5*, UInt32)
    get_system_font_collection : Proc(IDWriteFactory5*, IDWriteFontCollection*, LibC::BOOL, HRESULT)
    create_custom_font_collection : Proc(IDWriteFactory5*, IDWriteFontCollectionLoader, Void*, UInt32, IDWriteFontCollection*, HRESULT)
    register_font_collection_loader : Proc(IDWriteFactory5*, IDWriteFontCollectionLoader, HRESULT)
    unregister_font_collection_loader : Proc(IDWriteFactory5*, IDWriteFontCollectionLoader, HRESULT)
    create_font_file_reference : Proc(IDWriteFactory5*, LibC::LPWSTR, FILETIME*, IDWriteFontFile*, HRESULT)
    create_custom_font_file_reference : Proc(IDWriteFactory5*, Void*, UInt32, IDWriteFontFileLoader, IDWriteFontFile*, HRESULT)
    create_font_face : Proc(IDWriteFactory5*, DWRITE_FONT_FACE_TYPE, UInt32, IDWriteFontFile*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace*, HRESULT)
    create_rendering_params : Proc(IDWriteFactory5*, IDWriteRenderingParams*, HRESULT)
    create_monitor_rendering_params : Proc(IDWriteFactory5*, HMONITOR, IDWriteRenderingParams*, HRESULT)
    create_custom_rendering_params : Proc(IDWriteFactory5*, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams*, HRESULT)
    register_font_file_loader : Proc(IDWriteFactory5*, IDWriteFontFileLoader, HRESULT)
    unregister_font_file_loader : Proc(IDWriteFactory5*, IDWriteFontFileLoader, HRESULT)
    create_text_format : Proc(IDWriteFactory5*, LibC::LPWSTR, IDWriteFontCollection, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, Float32, LibC::LPWSTR, IDWriteTextFormat*, HRESULT)
    create_typography : Proc(IDWriteFactory5*, IDWriteTypography*, HRESULT)
    get_gdi_interop : Proc(IDWriteFactory5*, IDWriteGdiInterop*, HRESULT)
    create_text_layout : Proc(IDWriteFactory5*, Char*, UInt32, IDWriteTextFormat, Float32, Float32, IDWriteTextLayout*, HRESULT)
    create_gdi_compatible_text_layout : Proc(IDWriteFactory5*, Char*, UInt32, IDWriteTextFormat, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, IDWriteTextLayout*, HRESULT)
    create_ellipsis_trimming_sign : Proc(IDWriteFactory5*, IDWriteTextFormat, IDWriteInlineObject*, HRESULT)
    create_text_analyzer : Proc(IDWriteFactory5*, IDWriteTextAnalyzer*, HRESULT)
    create_number_substitution : Proc(IDWriteFactory5*, DWRITE_NUMBER_SUBSTITUTION_METHOD, LibC::LPWSTR, LibC::BOOL, IDWriteNumberSubstitution*, HRESULT)
    create_glyph_run_analysis : Proc(IDWriteFactory5*, DWRITE_GLYPH_RUN*, Float32, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)
    get_eudc_font_collection : Proc(IDWriteFactory5*, IDWriteFontCollection*, LibC::BOOL, HRESULT)
    create_custom_rendering_params2 : Proc(IDWriteFactory5*, Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams1*, HRESULT)
    get_system_font_fallback : Proc(IDWriteFactory5*, IDWriteFontFallback*, HRESULT)
    create_font_fallback_builder : Proc(IDWriteFactory5*, IDWriteFontFallbackBuilder*, HRESULT)
    translate_color_glyph_run : Proc(IDWriteFactory5*, Float32, Float32, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_MEASURING_MODE, DWRITE_MATRIX*, UInt32, IDWriteColorGlyphRunEnumerator*, HRESULT)
    create_custom_rendering_params3 : Proc(IDWriteFactory5*, Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams2*, HRESULT)
    create_glyph_run_analysis2 : Proc(IDWriteFactory5*, DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)
    create_glyph_run_analysis3 : Proc(IDWriteFactory5*, DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE1, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)
    create_custom_rendering_params4 : Proc(IDWriteFactory5*, Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE1, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams3*, HRESULT)
    create_font_face_reference : Proc(IDWriteFactory5*, IDWriteFontFile, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference*, HRESULT)
    create_font_face_reference2 : Proc(IDWriteFactory5*, LibC::LPWSTR, FILETIME*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference*, HRESULT)
    get_system_font_set : Proc(IDWriteFactory5*, IDWriteFontSet*, HRESULT)
    create_font_set_builder : Proc(IDWriteFactory5*, IDWriteFontSetBuilder*, HRESULT)
    create_font_collection_from_font_set : Proc(IDWriteFactory5*, IDWriteFontSet, IDWriteFontCollection1*, HRESULT)
    get_system_font_collection2 : Proc(IDWriteFactory5*, LibC::BOOL, IDWriteFontCollection1*, LibC::BOOL, HRESULT)
    get_font_download_queue : Proc(IDWriteFactory5*, IDWriteFontDownloadQueue*, HRESULT)
    translate_color_glyph_run2 : Proc(IDWriteFactory5*, D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_MEASURING_MODE, DWRITE_MATRIX*, UInt32, IDWriteColorGlyphRunEnumerator1*, HRESULT)
    compute_glyph_origins : Proc(IDWriteFactory5*, DWRITE_GLYPH_RUN*, D2D_POINT_2F, D2D_POINT_2F*, HRESULT)
    compute_glyph_origins2 : Proc(IDWriteFactory5*, DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_POINT_2F, DWRITE_MATRIX*, D2D_POINT_2F*, HRESULT)
    create_font_set_builder2 : Proc(IDWriteFactory5*, IDWriteFontSetBuilder1*, HRESULT)
    create_in_memory_font_file_loader : Proc(IDWriteFactory5*, IDWriteInMemoryFontFileLoader*, HRESULT)
    create_http_font_file_loader : Proc(IDWriteFactory5*, LibC::LPWSTR, LibC::LPWSTR, IDWriteRemoteFontFileLoader*, HRESULT)
    analyze_container_type : Proc(IDWriteFactory5*, Void*, UInt32, DWRITE_CONTAINER_TYPE)
    unpack_font_file : Proc(IDWriteFactory5*, DWRITE_CONTAINER_TYPE, Void*, UInt32, IDWriteFontFileStream*, HRESULT)
  end

  IDWriteFactory5_GUID = LibC::GUID.new("958db99a-be2a-4f09-af7d-65189803d1d3")
  CLSID_IDWriteFactory5 = "958db99a-be2a-4f09-af7d-65189803d1d3"
  struct IDWriteFactory5
    lpVtbl : IDWriteFactory5VTbl*
  end

  struct IDWriteFactory6VTbl
    query_interface : Proc(IDWriteFactory6*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFactory6*, UInt32)
    release : Proc(IDWriteFactory6*, UInt32)
    get_system_font_collection : Proc(IDWriteFactory6*, IDWriteFontCollection*, LibC::BOOL, HRESULT)
    create_custom_font_collection : Proc(IDWriteFactory6*, IDWriteFontCollectionLoader, Void*, UInt32, IDWriteFontCollection*, HRESULT)
    register_font_collection_loader : Proc(IDWriteFactory6*, IDWriteFontCollectionLoader, HRESULT)
    unregister_font_collection_loader : Proc(IDWriteFactory6*, IDWriteFontCollectionLoader, HRESULT)
    create_font_file_reference : Proc(IDWriteFactory6*, LibC::LPWSTR, FILETIME*, IDWriteFontFile*, HRESULT)
    create_custom_font_file_reference : Proc(IDWriteFactory6*, Void*, UInt32, IDWriteFontFileLoader, IDWriteFontFile*, HRESULT)
    create_font_face : Proc(IDWriteFactory6*, DWRITE_FONT_FACE_TYPE, UInt32, IDWriteFontFile*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace*, HRESULT)
    create_rendering_params : Proc(IDWriteFactory6*, IDWriteRenderingParams*, HRESULT)
    create_monitor_rendering_params : Proc(IDWriteFactory6*, HMONITOR, IDWriteRenderingParams*, HRESULT)
    create_custom_rendering_params : Proc(IDWriteFactory6*, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams*, HRESULT)
    register_font_file_loader : Proc(IDWriteFactory6*, IDWriteFontFileLoader, HRESULT)
    unregister_font_file_loader : Proc(IDWriteFactory6*, IDWriteFontFileLoader, HRESULT)
    create_text_format : Proc(IDWriteFactory6*, LibC::LPWSTR, IDWriteFontCollection, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, Float32, LibC::LPWSTR, IDWriteTextFormat*, HRESULT)
    create_typography : Proc(IDWriteFactory6*, IDWriteTypography*, HRESULT)
    get_gdi_interop : Proc(IDWriteFactory6*, IDWriteGdiInterop*, HRESULT)
    create_text_layout : Proc(IDWriteFactory6*, Char*, UInt32, IDWriteTextFormat, Float32, Float32, IDWriteTextLayout*, HRESULT)
    create_gdi_compatible_text_layout : Proc(IDWriteFactory6*, Char*, UInt32, IDWriteTextFormat, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, IDWriteTextLayout*, HRESULT)
    create_ellipsis_trimming_sign : Proc(IDWriteFactory6*, IDWriteTextFormat, IDWriteInlineObject*, HRESULT)
    create_text_analyzer : Proc(IDWriteFactory6*, IDWriteTextAnalyzer*, HRESULT)
    create_number_substitution : Proc(IDWriteFactory6*, DWRITE_NUMBER_SUBSTITUTION_METHOD, LibC::LPWSTR, LibC::BOOL, IDWriteNumberSubstitution*, HRESULT)
    create_glyph_run_analysis : Proc(IDWriteFactory6*, DWRITE_GLYPH_RUN*, Float32, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)
    get_eudc_font_collection : Proc(IDWriteFactory6*, IDWriteFontCollection*, LibC::BOOL, HRESULT)
    create_custom_rendering_params2 : Proc(IDWriteFactory6*, Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams1*, HRESULT)
    get_system_font_fallback : Proc(IDWriteFactory6*, IDWriteFontFallback*, HRESULT)
    create_font_fallback_builder : Proc(IDWriteFactory6*, IDWriteFontFallbackBuilder*, HRESULT)
    translate_color_glyph_run : Proc(IDWriteFactory6*, Float32, Float32, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_MEASURING_MODE, DWRITE_MATRIX*, UInt32, IDWriteColorGlyphRunEnumerator*, HRESULT)
    create_custom_rendering_params3 : Proc(IDWriteFactory6*, Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams2*, HRESULT)
    create_glyph_run_analysis2 : Proc(IDWriteFactory6*, DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)
    create_glyph_run_analysis3 : Proc(IDWriteFactory6*, DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE1, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)
    create_custom_rendering_params4 : Proc(IDWriteFactory6*, Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE1, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams3*, HRESULT)
    create_font_face_reference : Proc(IDWriteFactory6*, IDWriteFontFile, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference*, HRESULT)
    create_font_face_reference2 : Proc(IDWriteFactory6*, LibC::LPWSTR, FILETIME*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference*, HRESULT)
    get_system_font_set : Proc(IDWriteFactory6*, IDWriteFontSet*, HRESULT)
    create_font_set_builder : Proc(IDWriteFactory6*, IDWriteFontSetBuilder*, HRESULT)
    create_font_collection_from_font_set : Proc(IDWriteFactory6*, IDWriteFontSet, IDWriteFontCollection1*, HRESULT)
    get_system_font_collection2 : Proc(IDWriteFactory6*, LibC::BOOL, IDWriteFontCollection1*, LibC::BOOL, HRESULT)
    get_font_download_queue : Proc(IDWriteFactory6*, IDWriteFontDownloadQueue*, HRESULT)
    translate_color_glyph_run2 : Proc(IDWriteFactory6*, D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_MEASURING_MODE, DWRITE_MATRIX*, UInt32, IDWriteColorGlyphRunEnumerator1*, HRESULT)
    compute_glyph_origins : Proc(IDWriteFactory6*, DWRITE_GLYPH_RUN*, D2D_POINT_2F, D2D_POINT_2F*, HRESULT)
    compute_glyph_origins2 : Proc(IDWriteFactory6*, DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_POINT_2F, DWRITE_MATRIX*, D2D_POINT_2F*, HRESULT)
    create_font_set_builder2 : Proc(IDWriteFactory6*, IDWriteFontSetBuilder1*, HRESULT)
    create_in_memory_font_file_loader : Proc(IDWriteFactory6*, IDWriteInMemoryFontFileLoader*, HRESULT)
    create_http_font_file_loader : Proc(IDWriteFactory6*, LibC::LPWSTR, LibC::LPWSTR, IDWriteRemoteFontFileLoader*, HRESULT)
    analyze_container_type : Proc(IDWriteFactory6*, Void*, UInt32, DWRITE_CONTAINER_TYPE)
    unpack_font_file : Proc(IDWriteFactory6*, DWRITE_CONTAINER_TYPE, Void*, UInt32, IDWriteFontFileStream*, HRESULT)
    create_font_face_reference3 : Proc(IDWriteFactory6*, IDWriteFontFile, UInt32, DWRITE_FONT_SIMULATIONS, DWRITE_FONT_AXIS_VALUE*, UInt32, IDWriteFontFaceReference1*, HRESULT)
    create_font_resource : Proc(IDWriteFactory6*, IDWriteFontFile, UInt32, IDWriteFontResource*, HRESULT)
    get_system_font_set2 : Proc(IDWriteFactory6*, LibC::BOOL, IDWriteFontSet1*, HRESULT)
    get_system_font_collection3 : Proc(IDWriteFactory6*, LibC::BOOL, DWRITE_FONT_FAMILY_MODEL, IDWriteFontCollection2*, HRESULT)
    create_font_collection_from_font_set2 : Proc(IDWriteFactory6*, IDWriteFontSet, DWRITE_FONT_FAMILY_MODEL, IDWriteFontCollection2*, HRESULT)
    create_font_set_builder3 : Proc(IDWriteFactory6*, IDWriteFontSetBuilder2*, HRESULT)
    create_text_format2 : Proc(IDWriteFactory6*, LibC::LPWSTR, IDWriteFontCollection, DWRITE_FONT_AXIS_VALUE*, UInt32, Float32, LibC::LPWSTR, IDWriteTextFormat3*, HRESULT)
  end

  IDWriteFactory6_GUID = LibC::GUID.new("f3744d80-21f7-42eb-b35d-995bc72fc223")
  CLSID_IDWriteFactory6 = "f3744d80-21f7-42eb-b35d-995bc72fc223"
  struct IDWriteFactory6
    lpVtbl : IDWriteFactory6VTbl*
  end

  struct IDWriteFontFace5VTbl
    query_interface : Proc(IDWriteFontFace5*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontFace5*, UInt32)
    release : Proc(IDWriteFontFace5*, UInt32)
    get_type : Proc(IDWriteFontFace5*, DWRITE_FONT_FACE_TYPE)
    get_files : Proc(IDWriteFontFace5*, UInt32*, IDWriteFontFile*, HRESULT)
    get_index : Proc(IDWriteFontFace5*, UInt32)
    get_simulations : Proc(IDWriteFontFace5*, DWRITE_FONT_SIMULATIONS)
    is_symbol_font : Proc(IDWriteFontFace5*, LibC::BOOL)
    get_metrics : Proc(IDWriteFontFace5*, DWRITE_FONT_METRICS*, Void)
    get_glyph_count : Proc(IDWriteFontFace5*, UInt16)
    get_design_glyph_metrics : Proc(IDWriteFontFace5*, UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)
    get_glyph_indices : Proc(IDWriteFontFace5*, UInt32*, UInt32, UInt16*, HRESULT)
    try_get_font_table : Proc(IDWriteFontFace5*, UInt32, Void**, UInt32*, Void**, LibC::BOOL*, HRESULT)
    release_font_table : Proc(IDWriteFontFace5*, Void*, Void)
    get_glyph_run_outline : Proc(IDWriteFontFace5*, Float32, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, UInt32, LibC::BOOL, LibC::BOOL, ID2D1SimplifiedGeometrySink, HRESULT)
    get_recommended_rendering_mode : Proc(IDWriteFontFace5*, Float32, Float32, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, HRESULT)
    get_gdi_compatible_metrics : Proc(IDWriteFontFace5*, Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS*, HRESULT)
    get_gdi_compatible_glyph_metrics : Proc(IDWriteFontFace5*, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)
    get_metrics2 : Proc(IDWriteFontFace5*, DWRITE_FONT_METRICS1*, Void)
    get_gdi_compatible_metrics2 : Proc(IDWriteFontFace5*, Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS1*, HRESULT)
    get_caret_metrics : Proc(IDWriteFontFace5*, DWRITE_CARET_METRICS*, Void)
    get_unicode_ranges : Proc(IDWriteFontFace5*, UInt32, DWRITE_UNICODE_RANGE*, UInt32*, HRESULT)
    is_monospaced_font : Proc(IDWriteFontFace5*, LibC::BOOL)
    get_design_glyph_advances : Proc(IDWriteFontFace5*, UInt32, UInt16*, Int32*, LibC::BOOL, HRESULT)
    get_gdi_compatible_glyph_advances : Proc(IDWriteFontFace5*, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, LibC::BOOL, UInt32, UInt16*, Int32*, HRESULT)
    get_kerning_pair_adjustments : Proc(IDWriteFontFace5*, UInt32, UInt16*, Int32*, HRESULT)
    has_kerning_pairs : Proc(IDWriteFontFace5*, LibC::BOOL)
    get_recommended_rendering_mode2 : Proc(IDWriteFontFace5*, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, DWRITE_RENDERING_MODE*, HRESULT)
    get_vertical_glyph_variants : Proc(IDWriteFontFace5*, UInt32, UInt16*, UInt16*, HRESULT)
    has_vertical_glyph_variants : Proc(IDWriteFontFace5*, LibC::BOOL)
    is_color_font : Proc(IDWriteFontFace5*, LibC::BOOL)
    get_color_palette_count : Proc(IDWriteFontFace5*, UInt32)
    get_palette_entry_count : Proc(IDWriteFontFace5*, UInt32)
    get_palette_entries : Proc(IDWriteFontFace5*, UInt32, UInt32, UInt32, DWRITE_COLOR_F*, HRESULT)
    get_recommended_rendering_mode3 : Proc(IDWriteFontFace5*, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, DWRITE_GRID_FIT_MODE*, HRESULT)
    get_font_face_reference : Proc(IDWriteFontFace5*, IDWriteFontFaceReference*, HRESULT)
    get_panose : Proc(IDWriteFontFace5*, DWRITE_PANOSE*, Void)
    get_weight : Proc(IDWriteFontFace5*, DWRITE_FONT_WEIGHT)
    get_stretch : Proc(IDWriteFontFace5*, DWRITE_FONT_STRETCH)
    get_style : Proc(IDWriteFontFace5*, DWRITE_FONT_STYLE)
    get_family_names : Proc(IDWriteFontFace5*, IDWriteLocalizedStrings*, HRESULT)
    get_face_names : Proc(IDWriteFontFace5*, IDWriteLocalizedStrings*, HRESULT)
    get_informational_strings : Proc(IDWriteFontFace5*, DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings*, LibC::BOOL*, HRESULT)
    has_character : Proc(IDWriteFontFace5*, UInt32, LibC::BOOL)
    get_recommended_rendering_mode4 : Proc(IDWriteFontFace5*, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE1*, DWRITE_GRID_FIT_MODE*, HRESULT)
    is_character_local : Proc(IDWriteFontFace5*, UInt32, LibC::BOOL)
    is_glyph_local : Proc(IDWriteFontFace5*, UInt16, LibC::BOOL)
    are_characters_local : Proc(IDWriteFontFace5*, Char*, UInt32, LibC::BOOL, LibC::BOOL*, HRESULT)
    are_glyphs_local : Proc(IDWriteFontFace5*, UInt16*, UInt32, LibC::BOOL, LibC::BOOL*, HRESULT)
    get_glyph_image_formats : Proc(IDWriteFontFace5*, UInt16, UInt32, UInt32, DWRITE_GLYPH_IMAGE_FORMATS*, HRESULT)
    get_glyph_image_formats2 : Proc(IDWriteFontFace5*, DWRITE_GLYPH_IMAGE_FORMATS)
    get_glyph_image_data : Proc(IDWriteFontFace5*, UInt16, UInt32, DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_GLYPH_IMAGE_DATA*, Void**, HRESULT)
    release_glyph_image_data : Proc(IDWriteFontFace5*, Void*, Void)
    get_font_axis_value_count : Proc(IDWriteFontFace5*, UInt32)
    get_font_axis_values : Proc(IDWriteFontFace5*, DWRITE_FONT_AXIS_VALUE*, UInt32, HRESULT)
    has_variations : Proc(IDWriteFontFace5*, LibC::BOOL)
    get_font_resource : Proc(IDWriteFontFace5*, IDWriteFontResource*, HRESULT)
    equals : Proc(IDWriteFontFace5*, IDWriteFontFace, LibC::BOOL)
  end

  IDWriteFontFace5_GUID = LibC::GUID.new("98eff3a5-b667-479a-b145-e2fa5b9fdc29")
  CLSID_IDWriteFontFace5 = "98eff3a5-b667-479a-b145-e2fa5b9fdc29"
  struct IDWriteFontFace5
    lpVtbl : IDWriteFontFace5VTbl*
  end

  struct IDWriteFontResourceVTbl
    query_interface : Proc(IDWriteFontResource*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontResource*, UInt32)
    release : Proc(IDWriteFontResource*, UInt32)
    get_font_file : Proc(IDWriteFontResource*, IDWriteFontFile*, HRESULT)
    get_font_face_index : Proc(IDWriteFontResource*, UInt32)
    get_font_axis_count : Proc(IDWriteFontResource*, UInt32)
    get_default_font_axis_values : Proc(IDWriteFontResource*, DWRITE_FONT_AXIS_VALUE*, UInt32, HRESULT)
    get_font_axis_ranges : Proc(IDWriteFontResource*, DWRITE_FONT_AXIS_RANGE*, UInt32, HRESULT)
    get_font_axis_attributes : Proc(IDWriteFontResource*, UInt32, DWRITE_FONT_AXIS_ATTRIBUTES)
    get_axis_names : Proc(IDWriteFontResource*, UInt32, IDWriteLocalizedStrings*, HRESULT)
    get_axis_value_name_count : Proc(IDWriteFontResource*, UInt32, UInt32)
    get_axis_value_names : Proc(IDWriteFontResource*, UInt32, UInt32, DWRITE_FONT_AXIS_RANGE*, IDWriteLocalizedStrings*, HRESULT)
    has_variations : Proc(IDWriteFontResource*, LibC::BOOL)
    create_font_face : Proc(IDWriteFontResource*, DWRITE_FONT_SIMULATIONS, DWRITE_FONT_AXIS_VALUE*, UInt32, IDWriteFontFace5*, HRESULT)
    create_font_face_reference : Proc(IDWriteFontResource*, DWRITE_FONT_SIMULATIONS, DWRITE_FONT_AXIS_VALUE*, UInt32, IDWriteFontFaceReference1*, HRESULT)
  end

  IDWriteFontResource_GUID = LibC::GUID.new("1f803a76-6871-48e8-987f-b975551c50f2")
  CLSID_IDWriteFontResource = "1f803a76-6871-48e8-987f-b975551c50f2"
  struct IDWriteFontResource
    lpVtbl : IDWriteFontResourceVTbl*
  end

  struct IDWriteFontFaceReference1VTbl
    query_interface : Proc(IDWriteFontFaceReference1*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontFaceReference1*, UInt32)
    release : Proc(IDWriteFontFaceReference1*, UInt32)
    create_font_face : Proc(IDWriteFontFaceReference1*, IDWriteFontFace3*, HRESULT)
    create_font_face_with_simulations : Proc(IDWriteFontFaceReference1*, DWRITE_FONT_SIMULATIONS, IDWriteFontFace3*, HRESULT)
    equals : Proc(IDWriteFontFaceReference1*, IDWriteFontFaceReference, LibC::BOOL)
    get_font_face_index : Proc(IDWriteFontFaceReference1*, UInt32)
    get_simulations : Proc(IDWriteFontFaceReference1*, DWRITE_FONT_SIMULATIONS)
    get_font_file : Proc(IDWriteFontFaceReference1*, IDWriteFontFile*, HRESULT)
    get_local_file_size : Proc(IDWriteFontFaceReference1*, UInt64)
    get_file_size : Proc(IDWriteFontFaceReference1*, UInt64)
    get_file_time : Proc(IDWriteFontFaceReference1*, FILETIME*, HRESULT)
    get_locality : Proc(IDWriteFontFaceReference1*, DWRITE_LOCALITY)
    enqueue_font_download_request : Proc(IDWriteFontFaceReference1*, HRESULT)
    enqueue_character_download_request : Proc(IDWriteFontFaceReference1*, Char*, UInt32, HRESULT)
    enqueue_glyph_download_request : Proc(IDWriteFontFaceReference1*, UInt16*, UInt32, HRESULT)
    enqueue_file_fragment_download_request : Proc(IDWriteFontFaceReference1*, UInt64, UInt64, HRESULT)
    create_font_face2 : Proc(IDWriteFontFaceReference1*, IDWriteFontFace5*, HRESULT)
    get_font_axis_value_count : Proc(IDWriteFontFaceReference1*, UInt32)
    get_font_axis_values : Proc(IDWriteFontFaceReference1*, DWRITE_FONT_AXIS_VALUE*, UInt32, HRESULT)
  end

  IDWriteFontFaceReference1_GUID = LibC::GUID.new("c081fe77-2fd1-41ac-a5a3-34983c4ba61a")
  CLSID_IDWriteFontFaceReference1 = "c081fe77-2fd1-41ac-a5a3-34983c4ba61a"
  struct IDWriteFontFaceReference1
    lpVtbl : IDWriteFontFaceReference1VTbl*
  end

  struct IDWriteFontSetBuilder2VTbl
    query_interface : Proc(IDWriteFontSetBuilder2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontSetBuilder2*, UInt32)
    release : Proc(IDWriteFontSetBuilder2*, UInt32)
    add_font_face_reference : Proc(IDWriteFontSetBuilder2*, IDWriteFontFaceReference, DWRITE_FONT_PROPERTY*, UInt32, HRESULT)
    add_font_face_reference2 : Proc(IDWriteFontSetBuilder2*, IDWriteFontFaceReference, HRESULT)
    add_font_set : Proc(IDWriteFontSetBuilder2*, IDWriteFontSet, HRESULT)
    create_font_set : Proc(IDWriteFontSetBuilder2*, IDWriteFontSet*, HRESULT)
    add_font_file : Proc(IDWriteFontSetBuilder2*, IDWriteFontFile, HRESULT)
    add_font : Proc(IDWriteFontSetBuilder2*, IDWriteFontFile, UInt32, DWRITE_FONT_SIMULATIONS, DWRITE_FONT_AXIS_VALUE*, UInt32, DWRITE_FONT_AXIS_RANGE*, UInt32, DWRITE_FONT_PROPERTY*, UInt32, HRESULT)
    add_font_file2 : Proc(IDWriteFontSetBuilder2*, LibC::LPWSTR, HRESULT)
  end

  IDWriteFontSetBuilder2_GUID = LibC::GUID.new("ee5ba612-b131-463c-8f4f-3189b9401e45")
  CLSID_IDWriteFontSetBuilder2 = "ee5ba612-b131-463c-8f4f-3189b9401e45"
  struct IDWriteFontSetBuilder2
    lpVtbl : IDWriteFontSetBuilder2VTbl*
  end

  struct IDWriteFontSet1VTbl
    query_interface : Proc(IDWriteFontSet1*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontSet1*, UInt32)
    release : Proc(IDWriteFontSet1*, UInt32)
    get_font_count : Proc(IDWriteFontSet1*, UInt32)
    get_font_face_reference : Proc(IDWriteFontSet1*, UInt32, IDWriteFontFaceReference*, HRESULT)
    find_font_face_reference : Proc(IDWriteFontSet1*, IDWriteFontFaceReference, UInt32*, LibC::BOOL*, HRESULT)
    find_font_face : Proc(IDWriteFontSet1*, IDWriteFontFace, UInt32*, LibC::BOOL*, HRESULT)
    get_property_values : Proc(IDWriteFontSet1*, DWRITE_FONT_PROPERTY_ID, IDWriteStringList*, HRESULT)
    get_property_values2 : Proc(IDWriteFontSet1*, DWRITE_FONT_PROPERTY_ID, LibC::LPWSTR, IDWriteStringList*, HRESULT)
    get_property_values3 : Proc(IDWriteFontSet1*, UInt32, DWRITE_FONT_PROPERTY_ID, LibC::BOOL*, IDWriteLocalizedStrings*, HRESULT)
    get_property_occurrence_count : Proc(IDWriteFontSet1*, DWRITE_FONT_PROPERTY*, UInt32*, HRESULT)
    get_matching_fonts : Proc(IDWriteFontSet1*, LibC::LPWSTR, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontSet*, HRESULT)
    get_matching_fonts2 : Proc(IDWriteFontSet1*, DWRITE_FONT_PROPERTY*, UInt32, IDWriteFontSet*, HRESULT)
    get_matching_fonts3 : Proc(IDWriteFontSet1*, DWRITE_FONT_PROPERTY*, DWRITE_FONT_AXIS_VALUE*, UInt32, IDWriteFontSet1*, HRESULT)
    get_first_font_resources : Proc(IDWriteFontSet1*, IDWriteFontSet1*, HRESULT)
    get_filtered_fonts : Proc(IDWriteFontSet1*, UInt32*, UInt32, IDWriteFontSet1*, HRESULT)
    get_filtered_fonts2 : Proc(IDWriteFontSet1*, DWRITE_FONT_AXIS_RANGE*, UInt32, LibC::BOOL, IDWriteFontSet1*, HRESULT)
    get_filtered_fonts3 : Proc(IDWriteFontSet1*, DWRITE_FONT_PROPERTY*, UInt32, LibC::BOOL, IDWriteFontSet1*, HRESULT)
    get_filtered_font_indices : Proc(IDWriteFontSet1*, DWRITE_FONT_AXIS_RANGE*, UInt32, LibC::BOOL, UInt32*, UInt32, UInt32*, HRESULT)
    get_filtered_font_indices2 : Proc(IDWriteFontSet1*, DWRITE_FONT_PROPERTY*, UInt32, LibC::BOOL, UInt32*, UInt32, UInt32*, HRESULT)
    get_font_axis_ranges : Proc(IDWriteFontSet1*, UInt32, DWRITE_FONT_AXIS_RANGE*, UInt32, UInt32*, HRESULT)
    get_font_axis_ranges2 : Proc(IDWriteFontSet1*, DWRITE_FONT_AXIS_RANGE*, UInt32, UInt32*, HRESULT)
    get_font_face_reference2 : Proc(IDWriteFontSet1*, UInt32, IDWriteFontFaceReference1*, HRESULT)
    create_font_resource : Proc(IDWriteFontSet1*, UInt32, IDWriteFontResource*, HRESULT)
    create_font_face : Proc(IDWriteFontSet1*, UInt32, IDWriteFontFace5*, HRESULT)
    get_font_locality : Proc(IDWriteFontSet1*, UInt32, DWRITE_LOCALITY)
  end

  IDWriteFontSet1_GUID = LibC::GUID.new("7e9fda85-6c92-4053-bc47-7ae3530db4d3")
  CLSID_IDWriteFontSet1 = "7e9fda85-6c92-4053-bc47-7ae3530db4d3"
  struct IDWriteFontSet1
    lpVtbl : IDWriteFontSet1VTbl*
  end

  struct IDWriteFontList2VTbl
    query_interface : Proc(IDWriteFontList2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontList2*, UInt32)
    release : Proc(IDWriteFontList2*, UInt32)
    get_font_collection : Proc(IDWriteFontList2*, IDWriteFontCollection*, HRESULT)
    get_font_count : Proc(IDWriteFontList2*, UInt32)
    get_font : Proc(IDWriteFontList2*, UInt32, IDWriteFont*, HRESULT)
    get_font_locality : Proc(IDWriteFontList2*, UInt32, DWRITE_LOCALITY)
    get_font2 : Proc(IDWriteFontList2*, UInt32, IDWriteFont3*, HRESULT)
    get_font_face_reference : Proc(IDWriteFontList2*, UInt32, IDWriteFontFaceReference*, HRESULT)
    get_font_set : Proc(IDWriteFontList2*, IDWriteFontSet1*, HRESULT)
  end

  IDWriteFontList2_GUID = LibC::GUID.new("c0763a34-77af-445a-b735-08c37b0a5bf5")
  CLSID_IDWriteFontList2 = "c0763a34-77af-445a-b735-08c37b0a5bf5"
  struct IDWriteFontList2
    lpVtbl : IDWriteFontList2VTbl*
  end

  struct IDWriteFontFamily2VTbl
    query_interface : Proc(IDWriteFontFamily2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontFamily2*, UInt32)
    release : Proc(IDWriteFontFamily2*, UInt32)
    get_font_collection : Proc(IDWriteFontFamily2*, IDWriteFontCollection*, HRESULT)
    get_font_count : Proc(IDWriteFontFamily2*, UInt32)
    get_font : Proc(IDWriteFontFamily2*, UInt32, IDWriteFont*, HRESULT)
    get_family_names : Proc(IDWriteFontFamily2*, IDWriteLocalizedStrings*, HRESULT)
    get_first_matching_font : Proc(IDWriteFontFamily2*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFont*, HRESULT)
    get_matching_fonts : Proc(IDWriteFontFamily2*, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontList*, HRESULT)
    get_font_locality : Proc(IDWriteFontFamily2*, UInt32, DWRITE_LOCALITY)
    get_font2 : Proc(IDWriteFontFamily2*, UInt32, IDWriteFont3*, HRESULT)
    get_font_face_reference : Proc(IDWriteFontFamily2*, UInt32, IDWriteFontFaceReference*, HRESULT)
    get_matching_fonts2 : Proc(IDWriteFontFamily2*, DWRITE_FONT_AXIS_VALUE*, UInt32, IDWriteFontList2*, HRESULT)
    get_font_set : Proc(IDWriteFontFamily2*, IDWriteFontSet1*, HRESULT)
  end

  IDWriteFontFamily2_GUID = LibC::GUID.new("3ed49e77-a398-4261-b9cf-c126c2131ef3")
  CLSID_IDWriteFontFamily2 = "3ed49e77-a398-4261-b9cf-c126c2131ef3"
  struct IDWriteFontFamily2
    lpVtbl : IDWriteFontFamily2VTbl*
  end

  struct IDWriteFontCollection2VTbl
    query_interface : Proc(IDWriteFontCollection2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontCollection2*, UInt32)
    release : Proc(IDWriteFontCollection2*, UInt32)
    get_font_family_count : Proc(IDWriteFontCollection2*, UInt32)
    get_font_family : Proc(IDWriteFontCollection2*, UInt32, IDWriteFontFamily*, HRESULT)
    find_family_name : Proc(IDWriteFontCollection2*, LibC::LPWSTR, UInt32*, LibC::BOOL*, HRESULT)
    get_font_from_font_face : Proc(IDWriteFontCollection2*, IDWriteFontFace, IDWriteFont*, HRESULT)
    get_font_set : Proc(IDWriteFontCollection2*, IDWriteFontSet*, HRESULT)
    get_font_family2 : Proc(IDWriteFontCollection2*, UInt32, IDWriteFontFamily1*, HRESULT)
    get_font_family3 : Proc(IDWriteFontCollection2*, UInt32, IDWriteFontFamily2*, HRESULT)
    get_matching_fonts : Proc(IDWriteFontCollection2*, LibC::LPWSTR, DWRITE_FONT_AXIS_VALUE*, UInt32, IDWriteFontList2*, HRESULT)
    get_font_family_model : Proc(IDWriteFontCollection2*, DWRITE_FONT_FAMILY_MODEL)
    get_font_set2 : Proc(IDWriteFontCollection2*, IDWriteFontSet1*, HRESULT)
  end

  IDWriteFontCollection2_GUID = LibC::GUID.new("514039c6-4617-4064-bf8b-92ea83e506e0")
  CLSID_IDWriteFontCollection2 = "514039c6-4617-4064-bf8b-92ea83e506e0"
  struct IDWriteFontCollection2
    lpVtbl : IDWriteFontCollection2VTbl*
  end

  struct IDWriteTextLayout4VTbl
    query_interface : Proc(IDWriteTextLayout4*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteTextLayout4*, UInt32)
    release : Proc(IDWriteTextLayout4*, UInt32)
    set_text_alignment : Proc(IDWriteTextLayout4*, DWRITE_TEXT_ALIGNMENT, HRESULT)
    set_paragraph_alignment : Proc(IDWriteTextLayout4*, DWRITE_PARAGRAPH_ALIGNMENT, HRESULT)
    set_word_wrapping : Proc(IDWriteTextLayout4*, DWRITE_WORD_WRAPPING, HRESULT)
    set_reading_direction : Proc(IDWriteTextLayout4*, DWRITE_READING_DIRECTION, HRESULT)
    set_flow_direction : Proc(IDWriteTextLayout4*, DWRITE_FLOW_DIRECTION, HRESULT)
    set_incremental_tab_stop : Proc(IDWriteTextLayout4*, Float32, HRESULT)
    set_trimming : Proc(IDWriteTextLayout4*, DWRITE_TRIMMING*, IDWriteInlineObject, HRESULT)
    set_line_spacing : Proc(IDWriteTextLayout4*, DWRITE_LINE_SPACING_METHOD, Float32, Float32, HRESULT)
    get_text_alignment : Proc(IDWriteTextLayout4*, DWRITE_TEXT_ALIGNMENT)
    get_paragraph_alignment : Proc(IDWriteTextLayout4*, DWRITE_PARAGRAPH_ALIGNMENT)
    get_word_wrapping : Proc(IDWriteTextLayout4*, DWRITE_WORD_WRAPPING)
    get_reading_direction : Proc(IDWriteTextLayout4*, DWRITE_READING_DIRECTION)
    get_flow_direction : Proc(IDWriteTextLayout4*, DWRITE_FLOW_DIRECTION)
    get_incremental_tab_stop : Proc(IDWriteTextLayout4*, Float32)
    get_trimming : Proc(IDWriteTextLayout4*, DWRITE_TRIMMING*, IDWriteInlineObject*, HRESULT)
    get_line_spacing : Proc(IDWriteTextLayout4*, DWRITE_LINE_SPACING_METHOD*, Float32*, Float32*, HRESULT)
    get_font_collection : Proc(IDWriteTextLayout4*, IDWriteFontCollection*, HRESULT)
    get_font_family_name_length : Proc(IDWriteTextLayout4*, UInt32)
    get_font_family_name : Proc(IDWriteTextLayout4*, Char*, UInt32, HRESULT)
    get_font_weight : Proc(IDWriteTextLayout4*, DWRITE_FONT_WEIGHT)
    get_font_style : Proc(IDWriteTextLayout4*, DWRITE_FONT_STYLE)
    get_font_stretch : Proc(IDWriteTextLayout4*, DWRITE_FONT_STRETCH)
    get_font_size : Proc(IDWriteTextLayout4*, Float32)
    get_locale_name_length : Proc(IDWriteTextLayout4*, UInt32)
    get_locale_name : Proc(IDWriteTextLayout4*, Char*, UInt32, HRESULT)
    set_max_width : Proc(IDWriteTextLayout4*, Float32, HRESULT)
    set_max_height : Proc(IDWriteTextLayout4*, Float32, HRESULT)
    set_font_collection : Proc(IDWriteTextLayout4*, IDWriteFontCollection, DWRITE_TEXT_RANGE, HRESULT)
    set_font_family_name : Proc(IDWriteTextLayout4*, LibC::LPWSTR, DWRITE_TEXT_RANGE, HRESULT)
    set_font_weight : Proc(IDWriteTextLayout4*, DWRITE_FONT_WEIGHT, DWRITE_TEXT_RANGE, HRESULT)
    set_font_style : Proc(IDWriteTextLayout4*, DWRITE_FONT_STYLE, DWRITE_TEXT_RANGE, HRESULT)
    set_font_stretch : Proc(IDWriteTextLayout4*, DWRITE_FONT_STRETCH, DWRITE_TEXT_RANGE, HRESULT)
    set_font_size : Proc(IDWriteTextLayout4*, Float32, DWRITE_TEXT_RANGE, HRESULT)
    set_underline : Proc(IDWriteTextLayout4*, LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)
    set_strikethrough : Proc(IDWriteTextLayout4*, LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)
    set_drawing_effect : Proc(IDWriteTextLayout4*, IUnknown, DWRITE_TEXT_RANGE, HRESULT)
    set_inline_object : Proc(IDWriteTextLayout4*, IDWriteInlineObject, DWRITE_TEXT_RANGE, HRESULT)
    set_typography : Proc(IDWriteTextLayout4*, IDWriteTypography, DWRITE_TEXT_RANGE, HRESULT)
    set_locale_name : Proc(IDWriteTextLayout4*, LibC::LPWSTR, DWRITE_TEXT_RANGE, HRESULT)
    get_max_width : Proc(IDWriteTextLayout4*, Float32)
    get_max_height : Proc(IDWriteTextLayout4*, Float32)
    get_font_collection2 : Proc(IDWriteTextLayout4*, UInt32, IDWriteFontCollection*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_family_name_length2 : Proc(IDWriteTextLayout4*, UInt32, UInt32*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_family_name2 : Proc(IDWriteTextLayout4*, UInt32, Char*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_weight2 : Proc(IDWriteTextLayout4*, UInt32, DWRITE_FONT_WEIGHT*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_style2 : Proc(IDWriteTextLayout4*, UInt32, DWRITE_FONT_STYLE*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_stretch2 : Proc(IDWriteTextLayout4*, UInt32, DWRITE_FONT_STRETCH*, DWRITE_TEXT_RANGE*, HRESULT)
    get_font_size2 : Proc(IDWriteTextLayout4*, UInt32, Float32*, DWRITE_TEXT_RANGE*, HRESULT)
    get_underline : Proc(IDWriteTextLayout4*, UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)
    get_strikethrough : Proc(IDWriteTextLayout4*, UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)
    get_drawing_effect : Proc(IDWriteTextLayout4*, UInt32, IUnknown*, DWRITE_TEXT_RANGE*, HRESULT)
    get_inline_object : Proc(IDWriteTextLayout4*, UInt32, IDWriteInlineObject*, DWRITE_TEXT_RANGE*, HRESULT)
    get_typography : Proc(IDWriteTextLayout4*, UInt32, IDWriteTypography*, DWRITE_TEXT_RANGE*, HRESULT)
    get_locale_name_length2 : Proc(IDWriteTextLayout4*, UInt32, UInt32*, DWRITE_TEXT_RANGE*, HRESULT)
    get_locale_name2 : Proc(IDWriteTextLayout4*, UInt32, Char*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)
    draw : Proc(IDWriteTextLayout4*, Void*, IDWriteTextRenderer, Float32, Float32, HRESULT)
    get_line_metrics : Proc(IDWriteTextLayout4*, DWRITE_LINE_METRICS*, UInt32, UInt32*, HRESULT)
    get_metrics : Proc(IDWriteTextLayout4*, DWRITE_TEXT_METRICS*, HRESULT)
    get_overhang_metrics : Proc(IDWriteTextLayout4*, DWRITE_OVERHANG_METRICS*, HRESULT)
    get_cluster_metrics : Proc(IDWriteTextLayout4*, DWRITE_CLUSTER_METRICS*, UInt32, UInt32*, HRESULT)
    determine_min_width : Proc(IDWriteTextLayout4*, Float32*, HRESULT)
    hit_test_point : Proc(IDWriteTextLayout4*, Float32, Float32, LibC::BOOL*, LibC::BOOL*, DWRITE_HIT_TEST_METRICS*, HRESULT)
    hit_test_text_position : Proc(IDWriteTextLayout4*, UInt32, LibC::BOOL, Float32*, Float32*, DWRITE_HIT_TEST_METRICS*, HRESULT)
    hit_test_text_range : Proc(IDWriteTextLayout4*, UInt32, UInt32, Float32, Float32, DWRITE_HIT_TEST_METRICS*, UInt32, UInt32*, HRESULT)
    set_pair_kerning : Proc(IDWriteTextLayout4*, LibC::BOOL, DWRITE_TEXT_RANGE, HRESULT)
    get_pair_kerning : Proc(IDWriteTextLayout4*, UInt32, LibC::BOOL*, DWRITE_TEXT_RANGE*, HRESULT)
    set_character_spacing : Proc(IDWriteTextLayout4*, Float32, Float32, Float32, DWRITE_TEXT_RANGE, HRESULT)
    get_character_spacing : Proc(IDWriteTextLayout4*, UInt32, Float32*, Float32*, Float32*, DWRITE_TEXT_RANGE*, HRESULT)
    get_metrics2 : Proc(IDWriteTextLayout4*, DWRITE_TEXT_METRICS1*, HRESULT)
    set_vertical_glyph_orientation : Proc(IDWriteTextLayout4*, DWRITE_VERTICAL_GLYPH_ORIENTATION, HRESULT)
    get_vertical_glyph_orientation : Proc(IDWriteTextLayout4*, DWRITE_VERTICAL_GLYPH_ORIENTATION)
    set_last_line_wrapping : Proc(IDWriteTextLayout4*, LibC::BOOL, HRESULT)
    get_last_line_wrapping : Proc(IDWriteTextLayout4*, LibC::BOOL)
    set_optical_alignment : Proc(IDWriteTextLayout4*, DWRITE_OPTICAL_ALIGNMENT, HRESULT)
    get_optical_alignment : Proc(IDWriteTextLayout4*, DWRITE_OPTICAL_ALIGNMENT)
    set_font_fallback : Proc(IDWriteTextLayout4*, IDWriteFontFallback, HRESULT)
    get_font_fallback : Proc(IDWriteTextLayout4*, IDWriteFontFallback*, HRESULT)
    invalidate_layout : Proc(IDWriteTextLayout4*, HRESULT)
    set_line_spacing2 : Proc(IDWriteTextLayout4*, DWRITE_LINE_SPACING*, HRESULT)
    get_line_spacing2 : Proc(IDWriteTextLayout4*, DWRITE_LINE_SPACING*, HRESULT)
    get_line_metrics2 : Proc(IDWriteTextLayout4*, DWRITE_LINE_METRICS1*, UInt32, UInt32*, HRESULT)
    set_font_axis_values : Proc(IDWriteTextLayout4*, DWRITE_FONT_AXIS_VALUE*, UInt32, DWRITE_TEXT_RANGE, HRESULT)
    get_font_axis_value_count : Proc(IDWriteTextLayout4*, UInt32, UInt32)
    get_font_axis_values : Proc(IDWriteTextLayout4*, UInt32, DWRITE_FONT_AXIS_VALUE*, UInt32, DWRITE_TEXT_RANGE*, HRESULT)
    get_automatic_font_axes : Proc(IDWriteTextLayout4*, DWRITE_AUTOMATIC_FONT_AXES)
    set_automatic_font_axes : Proc(IDWriteTextLayout4*, DWRITE_AUTOMATIC_FONT_AXES, HRESULT)
  end

  IDWriteTextLayout4_GUID = LibC::GUID.new("05a9bf42-223f-4441-b5fb-8263685f55e9")
  CLSID_IDWriteTextLayout4 = "05a9bf42-223f-4441-b5fb-8263685f55e9"
  struct IDWriteTextLayout4
    lpVtbl : IDWriteTextLayout4VTbl*
  end

  struct IDWriteTextFormat3VTbl
    query_interface : Proc(IDWriteTextFormat3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteTextFormat3*, UInt32)
    release : Proc(IDWriteTextFormat3*, UInt32)
    set_text_alignment : Proc(IDWriteTextFormat3*, DWRITE_TEXT_ALIGNMENT, HRESULT)
    set_paragraph_alignment : Proc(IDWriteTextFormat3*, DWRITE_PARAGRAPH_ALIGNMENT, HRESULT)
    set_word_wrapping : Proc(IDWriteTextFormat3*, DWRITE_WORD_WRAPPING, HRESULT)
    set_reading_direction : Proc(IDWriteTextFormat3*, DWRITE_READING_DIRECTION, HRESULT)
    set_flow_direction : Proc(IDWriteTextFormat3*, DWRITE_FLOW_DIRECTION, HRESULT)
    set_incremental_tab_stop : Proc(IDWriteTextFormat3*, Float32, HRESULT)
    set_trimming : Proc(IDWriteTextFormat3*, DWRITE_TRIMMING*, IDWriteInlineObject, HRESULT)
    set_line_spacing : Proc(IDWriteTextFormat3*, DWRITE_LINE_SPACING_METHOD, Float32, Float32, HRESULT)
    get_text_alignment : Proc(IDWriteTextFormat3*, DWRITE_TEXT_ALIGNMENT)
    get_paragraph_alignment : Proc(IDWriteTextFormat3*, DWRITE_PARAGRAPH_ALIGNMENT)
    get_word_wrapping : Proc(IDWriteTextFormat3*, DWRITE_WORD_WRAPPING)
    get_reading_direction : Proc(IDWriteTextFormat3*, DWRITE_READING_DIRECTION)
    get_flow_direction : Proc(IDWriteTextFormat3*, DWRITE_FLOW_DIRECTION)
    get_incremental_tab_stop : Proc(IDWriteTextFormat3*, Float32)
    get_trimming : Proc(IDWriteTextFormat3*, DWRITE_TRIMMING*, IDWriteInlineObject*, HRESULT)
    get_line_spacing : Proc(IDWriteTextFormat3*, DWRITE_LINE_SPACING_METHOD*, Float32*, Float32*, HRESULT)
    get_font_collection : Proc(IDWriteTextFormat3*, IDWriteFontCollection*, HRESULT)
    get_font_family_name_length : Proc(IDWriteTextFormat3*, UInt32)
    get_font_family_name : Proc(IDWriteTextFormat3*, Char*, UInt32, HRESULT)
    get_font_weight : Proc(IDWriteTextFormat3*, DWRITE_FONT_WEIGHT)
    get_font_style : Proc(IDWriteTextFormat3*, DWRITE_FONT_STYLE)
    get_font_stretch : Proc(IDWriteTextFormat3*, DWRITE_FONT_STRETCH)
    get_font_size : Proc(IDWriteTextFormat3*, Float32)
    get_locale_name_length : Proc(IDWriteTextFormat3*, UInt32)
    get_locale_name : Proc(IDWriteTextFormat3*, Char*, UInt32, HRESULT)
    set_vertical_glyph_orientation : Proc(IDWriteTextFormat3*, DWRITE_VERTICAL_GLYPH_ORIENTATION, HRESULT)
    get_vertical_glyph_orientation : Proc(IDWriteTextFormat3*, DWRITE_VERTICAL_GLYPH_ORIENTATION)
    set_last_line_wrapping : Proc(IDWriteTextFormat3*, LibC::BOOL, HRESULT)
    get_last_line_wrapping : Proc(IDWriteTextFormat3*, LibC::BOOL)
    set_optical_alignment : Proc(IDWriteTextFormat3*, DWRITE_OPTICAL_ALIGNMENT, HRESULT)
    get_optical_alignment : Proc(IDWriteTextFormat3*, DWRITE_OPTICAL_ALIGNMENT)
    set_font_fallback : Proc(IDWriteTextFormat3*, IDWriteFontFallback, HRESULT)
    get_font_fallback : Proc(IDWriteTextFormat3*, IDWriteFontFallback*, HRESULT)
    set_line_spacing2 : Proc(IDWriteTextFormat3*, DWRITE_LINE_SPACING*, HRESULT)
    get_line_spacing2 : Proc(IDWriteTextFormat3*, DWRITE_LINE_SPACING*, HRESULT)
    set_font_axis_values : Proc(IDWriteTextFormat3*, DWRITE_FONT_AXIS_VALUE*, UInt32, HRESULT)
    get_font_axis_value_count : Proc(IDWriteTextFormat3*, UInt32)
    get_font_axis_values : Proc(IDWriteTextFormat3*, DWRITE_FONT_AXIS_VALUE*, UInt32, HRESULT)
    get_automatic_font_axes : Proc(IDWriteTextFormat3*, DWRITE_AUTOMATIC_FONT_AXES)
    set_automatic_font_axes : Proc(IDWriteTextFormat3*, DWRITE_AUTOMATIC_FONT_AXES, HRESULT)
  end

  IDWriteTextFormat3_GUID = LibC::GUID.new("6d3b5641-e550-430d-a85b-b7bf48a93427")
  CLSID_IDWriteTextFormat3 = "6d3b5641-e550-430d-a85b-b7bf48a93427"
  struct IDWriteTextFormat3
    lpVtbl : IDWriteTextFormat3VTbl*
  end

  struct IDWriteFontFallback1VTbl
    query_interface : Proc(IDWriteFontFallback1*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontFallback1*, UInt32)
    release : Proc(IDWriteFontFallback1*, UInt32)
    map_characters : Proc(IDWriteFontFallback1*, IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteFontCollection, LibC::LPWSTR, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, UInt32*, IDWriteFont*, Float32*, HRESULT)
    map_characters2 : Proc(IDWriteFontFallback1*, IDWriteTextAnalysisSource, UInt32, UInt32, IDWriteFontCollection, LibC::LPWSTR, DWRITE_FONT_AXIS_VALUE*, UInt32, UInt32*, Float32*, IDWriteFontFace5*, HRESULT)
  end

  IDWriteFontFallback1_GUID = LibC::GUID.new("2397599d-dd0d-4681-bd6a-f4f31eaade77")
  CLSID_IDWriteFontFallback1 = "2397599d-dd0d-4681-bd6a-f4f31eaade77"
  struct IDWriteFontFallback1
    lpVtbl : IDWriteFontFallback1VTbl*
  end

  struct IDWriteFontSet2VTbl
    query_interface : Proc(IDWriteFontSet2*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontSet2*, UInt32)
    release : Proc(IDWriteFontSet2*, UInt32)
    get_font_count : Proc(IDWriteFontSet2*, UInt32)
    get_font_face_reference : Proc(IDWriteFontSet2*, UInt32, IDWriteFontFaceReference*, HRESULT)
    find_font_face_reference : Proc(IDWriteFontSet2*, IDWriteFontFaceReference, UInt32*, LibC::BOOL*, HRESULT)
    find_font_face : Proc(IDWriteFontSet2*, IDWriteFontFace, UInt32*, LibC::BOOL*, HRESULT)
    get_property_values : Proc(IDWriteFontSet2*, DWRITE_FONT_PROPERTY_ID, IDWriteStringList*, HRESULT)
    get_property_values2 : Proc(IDWriteFontSet2*, DWRITE_FONT_PROPERTY_ID, LibC::LPWSTR, IDWriteStringList*, HRESULT)
    get_property_values3 : Proc(IDWriteFontSet2*, UInt32, DWRITE_FONT_PROPERTY_ID, LibC::BOOL*, IDWriteLocalizedStrings*, HRESULT)
    get_property_occurrence_count : Proc(IDWriteFontSet2*, DWRITE_FONT_PROPERTY*, UInt32*, HRESULT)
    get_matching_fonts : Proc(IDWriteFontSet2*, LibC::LPWSTR, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontSet*, HRESULT)
    get_matching_fonts2 : Proc(IDWriteFontSet2*, DWRITE_FONT_PROPERTY*, UInt32, IDWriteFontSet*, HRESULT)
    get_matching_fonts3 : Proc(IDWriteFontSet2*, DWRITE_FONT_PROPERTY*, DWRITE_FONT_AXIS_VALUE*, UInt32, IDWriteFontSet1*, HRESULT)
    get_first_font_resources : Proc(IDWriteFontSet2*, IDWriteFontSet1*, HRESULT)
    get_filtered_fonts : Proc(IDWriteFontSet2*, UInt32*, UInt32, IDWriteFontSet1*, HRESULT)
    get_filtered_fonts2 : Proc(IDWriteFontSet2*, DWRITE_FONT_AXIS_RANGE*, UInt32, LibC::BOOL, IDWriteFontSet1*, HRESULT)
    get_filtered_fonts3 : Proc(IDWriteFontSet2*, DWRITE_FONT_PROPERTY*, UInt32, LibC::BOOL, IDWriteFontSet1*, HRESULT)
    get_filtered_font_indices : Proc(IDWriteFontSet2*, DWRITE_FONT_AXIS_RANGE*, UInt32, LibC::BOOL, UInt32*, UInt32, UInt32*, HRESULT)
    get_filtered_font_indices2 : Proc(IDWriteFontSet2*, DWRITE_FONT_PROPERTY*, UInt32, LibC::BOOL, UInt32*, UInt32, UInt32*, HRESULT)
    get_font_axis_ranges : Proc(IDWriteFontSet2*, UInt32, DWRITE_FONT_AXIS_RANGE*, UInt32, UInt32*, HRESULT)
    get_font_axis_ranges2 : Proc(IDWriteFontSet2*, DWRITE_FONT_AXIS_RANGE*, UInt32, UInt32*, HRESULT)
    get_font_face_reference2 : Proc(IDWriteFontSet2*, UInt32, IDWriteFontFaceReference1*, HRESULT)
    create_font_resource : Proc(IDWriteFontSet2*, UInt32, IDWriteFontResource*, HRESULT)
    create_font_face : Proc(IDWriteFontSet2*, UInt32, IDWriteFontFace5*, HRESULT)
    get_font_locality : Proc(IDWriteFontSet2*, UInt32, DWRITE_LOCALITY)
    get_expiration_event : Proc(IDWriteFontSet2*, LibC::HANDLE)
  end

  IDWriteFontSet2_GUID = LibC::GUID.new("dc7ead19-e54c-43af-b2da-4e2b79ba3f7f")
  CLSID_IDWriteFontSet2 = "dc7ead19-e54c-43af-b2da-4e2b79ba3f7f"
  struct IDWriteFontSet2
    lpVtbl : IDWriteFontSet2VTbl*
  end

  struct IDWriteFontCollection3VTbl
    query_interface : Proc(IDWriteFontCollection3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontCollection3*, UInt32)
    release : Proc(IDWriteFontCollection3*, UInt32)
    get_font_family_count : Proc(IDWriteFontCollection3*, UInt32)
    get_font_family : Proc(IDWriteFontCollection3*, UInt32, IDWriteFontFamily*, HRESULT)
    find_family_name : Proc(IDWriteFontCollection3*, LibC::LPWSTR, UInt32*, LibC::BOOL*, HRESULT)
    get_font_from_font_face : Proc(IDWriteFontCollection3*, IDWriteFontFace, IDWriteFont*, HRESULT)
    get_font_set : Proc(IDWriteFontCollection3*, IDWriteFontSet*, HRESULT)
    get_font_family2 : Proc(IDWriteFontCollection3*, UInt32, IDWriteFontFamily1*, HRESULT)
    get_font_family3 : Proc(IDWriteFontCollection3*, UInt32, IDWriteFontFamily2*, HRESULT)
    get_matching_fonts : Proc(IDWriteFontCollection3*, LibC::LPWSTR, DWRITE_FONT_AXIS_VALUE*, UInt32, IDWriteFontList2*, HRESULT)
    get_font_family_model : Proc(IDWriteFontCollection3*, DWRITE_FONT_FAMILY_MODEL)
    get_font_set2 : Proc(IDWriteFontCollection3*, IDWriteFontSet1*, HRESULT)
    get_expiration_event : Proc(IDWriteFontCollection3*, LibC::HANDLE)
  end

  IDWriteFontCollection3_GUID = LibC::GUID.new("a4d055a6-f9e3-4e25-93b7-9e309f3af8e9")
  CLSID_IDWriteFontCollection3 = "a4d055a6-f9e3-4e25-93b7-9e309f3af8e9"
  struct IDWriteFontCollection3
    lpVtbl : IDWriteFontCollection3VTbl*
  end

  struct IDWriteFactory7VTbl
    query_interface : Proc(IDWriteFactory7*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFactory7*, UInt32)
    release : Proc(IDWriteFactory7*, UInt32)
    get_system_font_collection : Proc(IDWriteFactory7*, IDWriteFontCollection*, LibC::BOOL, HRESULT)
    create_custom_font_collection : Proc(IDWriteFactory7*, IDWriteFontCollectionLoader, Void*, UInt32, IDWriteFontCollection*, HRESULT)
    register_font_collection_loader : Proc(IDWriteFactory7*, IDWriteFontCollectionLoader, HRESULT)
    unregister_font_collection_loader : Proc(IDWriteFactory7*, IDWriteFontCollectionLoader, HRESULT)
    create_font_file_reference : Proc(IDWriteFactory7*, LibC::LPWSTR, FILETIME*, IDWriteFontFile*, HRESULT)
    create_custom_font_file_reference : Proc(IDWriteFactory7*, Void*, UInt32, IDWriteFontFileLoader, IDWriteFontFile*, HRESULT)
    create_font_face : Proc(IDWriteFactory7*, DWRITE_FONT_FACE_TYPE, UInt32, IDWriteFontFile*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFace*, HRESULT)
    create_rendering_params : Proc(IDWriteFactory7*, IDWriteRenderingParams*, HRESULT)
    create_monitor_rendering_params : Proc(IDWriteFactory7*, HMONITOR, IDWriteRenderingParams*, HRESULT)
    create_custom_rendering_params : Proc(IDWriteFactory7*, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams*, HRESULT)
    register_font_file_loader : Proc(IDWriteFactory7*, IDWriteFontFileLoader, HRESULT)
    unregister_font_file_loader : Proc(IDWriteFactory7*, IDWriteFontFileLoader, HRESULT)
    create_text_format : Proc(IDWriteFactory7*, LibC::LPWSTR, IDWriteFontCollection, DWRITE_FONT_WEIGHT, DWRITE_FONT_STYLE, DWRITE_FONT_STRETCH, Float32, LibC::LPWSTR, IDWriteTextFormat*, HRESULT)
    create_typography : Proc(IDWriteFactory7*, IDWriteTypography*, HRESULT)
    get_gdi_interop : Proc(IDWriteFactory7*, IDWriteGdiInterop*, HRESULT)
    create_text_layout : Proc(IDWriteFactory7*, Char*, UInt32, IDWriteTextFormat, Float32, Float32, IDWriteTextLayout*, HRESULT)
    create_gdi_compatible_text_layout : Proc(IDWriteFactory7*, Char*, UInt32, IDWriteTextFormat, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, IDWriteTextLayout*, HRESULT)
    create_ellipsis_trimming_sign : Proc(IDWriteFactory7*, IDWriteTextFormat, IDWriteInlineObject*, HRESULT)
    create_text_analyzer : Proc(IDWriteFactory7*, IDWriteTextAnalyzer*, HRESULT)
    create_number_substitution : Proc(IDWriteFactory7*, DWRITE_NUMBER_SUBSTITUTION_METHOD, LibC::LPWSTR, LibC::BOOL, IDWriteNumberSubstitution*, HRESULT)
    create_glyph_run_analysis : Proc(IDWriteFactory7*, DWRITE_GLYPH_RUN*, Float32, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)
    get_eudc_font_collection : Proc(IDWriteFactory7*, IDWriteFontCollection*, LibC::BOOL, HRESULT)
    create_custom_rendering_params2 : Proc(IDWriteFactory7*, Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, IDWriteRenderingParams1*, HRESULT)
    get_system_font_fallback : Proc(IDWriteFactory7*, IDWriteFontFallback*, HRESULT)
    create_font_fallback_builder : Proc(IDWriteFactory7*, IDWriteFontFallbackBuilder*, HRESULT)
    translate_color_glyph_run : Proc(IDWriteFactory7*, Float32, Float32, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_MEASURING_MODE, DWRITE_MATRIX*, UInt32, IDWriteColorGlyphRunEnumerator*, HRESULT)
    create_custom_rendering_params3 : Proc(IDWriteFactory7*, Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams2*, HRESULT)
    create_glyph_run_analysis2 : Proc(IDWriteFactory7*, DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)
    create_glyph_run_analysis3 : Proc(IDWriteFactory7*, DWRITE_GLYPH_RUN*, DWRITE_MATRIX*, DWRITE_RENDERING_MODE1, DWRITE_MEASURING_MODE, DWRITE_GRID_FIT_MODE, DWRITE_TEXT_ANTIALIAS_MODE, Float32, Float32, IDWriteGlyphRunAnalysis*, HRESULT)
    create_custom_rendering_params4 : Proc(IDWriteFactory7*, Float32, Float32, Float32, Float32, DWRITE_PIXEL_GEOMETRY, DWRITE_RENDERING_MODE1, DWRITE_GRID_FIT_MODE, IDWriteRenderingParams3*, HRESULT)
    create_font_face_reference : Proc(IDWriteFactory7*, IDWriteFontFile, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference*, HRESULT)
    create_font_face_reference2 : Proc(IDWriteFactory7*, LibC::LPWSTR, FILETIME*, UInt32, DWRITE_FONT_SIMULATIONS, IDWriteFontFaceReference*, HRESULT)
    get_system_font_set : Proc(IDWriteFactory7*, IDWriteFontSet*, HRESULT)
    create_font_set_builder : Proc(IDWriteFactory7*, IDWriteFontSetBuilder*, HRESULT)
    create_font_collection_from_font_set : Proc(IDWriteFactory7*, IDWriteFontSet, IDWriteFontCollection1*, HRESULT)
    get_system_font_collection2 : Proc(IDWriteFactory7*, LibC::BOOL, IDWriteFontCollection1*, LibC::BOOL, HRESULT)
    get_font_download_queue : Proc(IDWriteFactory7*, IDWriteFontDownloadQueue*, HRESULT)
    translate_color_glyph_run2 : Proc(IDWriteFactory7*, D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_MEASURING_MODE, DWRITE_MATRIX*, UInt32, IDWriteColorGlyphRunEnumerator1*, HRESULT)
    compute_glyph_origins : Proc(IDWriteFactory7*, DWRITE_GLYPH_RUN*, D2D_POINT_2F, D2D_POINT_2F*, HRESULT)
    compute_glyph_origins2 : Proc(IDWriteFactory7*, DWRITE_GLYPH_RUN*, DWRITE_MEASURING_MODE, D2D_POINT_2F, DWRITE_MATRIX*, D2D_POINT_2F*, HRESULT)
    create_font_set_builder2 : Proc(IDWriteFactory7*, IDWriteFontSetBuilder1*, HRESULT)
    create_in_memory_font_file_loader : Proc(IDWriteFactory7*, IDWriteInMemoryFontFileLoader*, HRESULT)
    create_http_font_file_loader : Proc(IDWriteFactory7*, LibC::LPWSTR, LibC::LPWSTR, IDWriteRemoteFontFileLoader*, HRESULT)
    analyze_container_type : Proc(IDWriteFactory7*, Void*, UInt32, DWRITE_CONTAINER_TYPE)
    unpack_font_file : Proc(IDWriteFactory7*, DWRITE_CONTAINER_TYPE, Void*, UInt32, IDWriteFontFileStream*, HRESULT)
    create_font_face_reference3 : Proc(IDWriteFactory7*, IDWriteFontFile, UInt32, DWRITE_FONT_SIMULATIONS, DWRITE_FONT_AXIS_VALUE*, UInt32, IDWriteFontFaceReference1*, HRESULT)
    create_font_resource : Proc(IDWriteFactory7*, IDWriteFontFile, UInt32, IDWriteFontResource*, HRESULT)
    get_system_font_set2 : Proc(IDWriteFactory7*, LibC::BOOL, IDWriteFontSet1*, HRESULT)
    get_system_font_collection3 : Proc(IDWriteFactory7*, LibC::BOOL, DWRITE_FONT_FAMILY_MODEL, IDWriteFontCollection2*, HRESULT)
    create_font_collection_from_font_set2 : Proc(IDWriteFactory7*, IDWriteFontSet, DWRITE_FONT_FAMILY_MODEL, IDWriteFontCollection2*, HRESULT)
    create_font_set_builder3 : Proc(IDWriteFactory7*, IDWriteFontSetBuilder2*, HRESULT)
    create_text_format2 : Proc(IDWriteFactory7*, LibC::LPWSTR, IDWriteFontCollection, DWRITE_FONT_AXIS_VALUE*, UInt32, Float32, LibC::LPWSTR, IDWriteTextFormat3*, HRESULT)
    get_system_font_set3 : Proc(IDWriteFactory7*, LibC::BOOL, IDWriteFontSet2*, HRESULT)
    get_system_font_collection4 : Proc(IDWriteFactory7*, LibC::BOOL, DWRITE_FONT_FAMILY_MODEL, IDWriteFontCollection3*, HRESULT)
  end

  IDWriteFactory7_GUID = LibC::GUID.new("35d0e0b3-9076-4d2e-a016-a91b568a06b4")
  CLSID_IDWriteFactory7 = "35d0e0b3-9076-4d2e-a016-a91b568a06b4"
  struct IDWriteFactory7
    lpVtbl : IDWriteFactory7VTbl*
  end

  struct IDWriteFontSet3VTbl
    query_interface : Proc(IDWriteFontSet3*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontSet3*, UInt32)
    release : Proc(IDWriteFontSet3*, UInt32)
    get_font_count : Proc(IDWriteFontSet3*, UInt32)
    get_font_face_reference : Proc(IDWriteFontSet3*, UInt32, IDWriteFontFaceReference*, HRESULT)
    find_font_face_reference : Proc(IDWriteFontSet3*, IDWriteFontFaceReference, UInt32*, LibC::BOOL*, HRESULT)
    find_font_face : Proc(IDWriteFontSet3*, IDWriteFontFace, UInt32*, LibC::BOOL*, HRESULT)
    get_property_values : Proc(IDWriteFontSet3*, DWRITE_FONT_PROPERTY_ID, IDWriteStringList*, HRESULT)
    get_property_values2 : Proc(IDWriteFontSet3*, DWRITE_FONT_PROPERTY_ID, LibC::LPWSTR, IDWriteStringList*, HRESULT)
    get_property_values3 : Proc(IDWriteFontSet3*, UInt32, DWRITE_FONT_PROPERTY_ID, LibC::BOOL*, IDWriteLocalizedStrings*, HRESULT)
    get_property_occurrence_count : Proc(IDWriteFontSet3*, DWRITE_FONT_PROPERTY*, UInt32*, HRESULT)
    get_matching_fonts : Proc(IDWriteFontSet3*, LibC::LPWSTR, DWRITE_FONT_WEIGHT, DWRITE_FONT_STRETCH, DWRITE_FONT_STYLE, IDWriteFontSet*, HRESULT)
    get_matching_fonts2 : Proc(IDWriteFontSet3*, DWRITE_FONT_PROPERTY*, UInt32, IDWriteFontSet*, HRESULT)
    get_matching_fonts3 : Proc(IDWriteFontSet3*, DWRITE_FONT_PROPERTY*, DWRITE_FONT_AXIS_VALUE*, UInt32, IDWriteFontSet1*, HRESULT)
    get_first_font_resources : Proc(IDWriteFontSet3*, IDWriteFontSet1*, HRESULT)
    get_filtered_fonts : Proc(IDWriteFontSet3*, UInt32*, UInt32, IDWriteFontSet1*, HRESULT)
    get_filtered_fonts2 : Proc(IDWriteFontSet3*, DWRITE_FONT_AXIS_RANGE*, UInt32, LibC::BOOL, IDWriteFontSet1*, HRESULT)
    get_filtered_fonts3 : Proc(IDWriteFontSet3*, DWRITE_FONT_PROPERTY*, UInt32, LibC::BOOL, IDWriteFontSet1*, HRESULT)
    get_filtered_font_indices : Proc(IDWriteFontSet3*, DWRITE_FONT_AXIS_RANGE*, UInt32, LibC::BOOL, UInt32*, UInt32, UInt32*, HRESULT)
    get_filtered_font_indices2 : Proc(IDWriteFontSet3*, DWRITE_FONT_PROPERTY*, UInt32, LibC::BOOL, UInt32*, UInt32, UInt32*, HRESULT)
    get_font_axis_ranges : Proc(IDWriteFontSet3*, UInt32, DWRITE_FONT_AXIS_RANGE*, UInt32, UInt32*, HRESULT)
    get_font_axis_ranges2 : Proc(IDWriteFontSet3*, DWRITE_FONT_AXIS_RANGE*, UInt32, UInt32*, HRESULT)
    get_font_face_reference2 : Proc(IDWriteFontSet3*, UInt32, IDWriteFontFaceReference1*, HRESULT)
    create_font_resource : Proc(IDWriteFontSet3*, UInt32, IDWriteFontResource*, HRESULT)
    create_font_face : Proc(IDWriteFontSet3*, UInt32, IDWriteFontFace5*, HRESULT)
    get_font_locality : Proc(IDWriteFontSet3*, UInt32, DWRITE_LOCALITY)
    get_expiration_event : Proc(IDWriteFontSet3*, LibC::HANDLE)
    get_font_source_type : Proc(IDWriteFontSet3*, UInt32, DWRITE_FONT_SOURCE_TYPE)
    get_font_source_name_length : Proc(IDWriteFontSet3*, UInt32, UInt32)
    get_font_source_name : Proc(IDWriteFontSet3*, UInt32, Char*, UInt32, HRESULT)
  end

  IDWriteFontSet3_GUID = LibC::GUID.new("7c073ef2-a7f4-4045-8c32-8ab8ae640f90")
  CLSID_IDWriteFontSet3 = "7c073ef2-a7f4-4045-8c32-8ab8ae640f90"
  struct IDWriteFontSet3
    lpVtbl : IDWriteFontSet3VTbl*
  end

  struct IDWriteFontFace6VTbl
    query_interface : Proc(IDWriteFontFace6*, Guid*, Void**, HRESULT)
    add_ref : Proc(IDWriteFontFace6*, UInt32)
    release : Proc(IDWriteFontFace6*, UInt32)
    get_type : Proc(IDWriteFontFace6*, DWRITE_FONT_FACE_TYPE)
    get_files : Proc(IDWriteFontFace6*, UInt32*, IDWriteFontFile*, HRESULT)
    get_index : Proc(IDWriteFontFace6*, UInt32)
    get_simulations : Proc(IDWriteFontFace6*, DWRITE_FONT_SIMULATIONS)
    is_symbol_font : Proc(IDWriteFontFace6*, LibC::BOOL)
    get_metrics : Proc(IDWriteFontFace6*, DWRITE_FONT_METRICS*, Void)
    get_glyph_count : Proc(IDWriteFontFace6*, UInt16)
    get_design_glyph_metrics : Proc(IDWriteFontFace6*, UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)
    get_glyph_indices : Proc(IDWriteFontFace6*, UInt32*, UInt32, UInt16*, HRESULT)
    try_get_font_table : Proc(IDWriteFontFace6*, UInt32, Void**, UInt32*, Void**, LibC::BOOL*, HRESULT)
    release_font_table : Proc(IDWriteFontFace6*, Void*, Void)
    get_glyph_run_outline : Proc(IDWriteFontFace6*, Float32, UInt16*, Float32*, DWRITE_GLYPH_OFFSET*, UInt32, LibC::BOOL, LibC::BOOL, ID2D1SimplifiedGeometrySink, HRESULT)
    get_recommended_rendering_mode : Proc(IDWriteFontFace6*, Float32, Float32, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, HRESULT)
    get_gdi_compatible_metrics : Proc(IDWriteFontFace6*, Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS*, HRESULT)
    get_gdi_compatible_glyph_metrics : Proc(IDWriteFontFace6*, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, UInt16*, UInt32, DWRITE_GLYPH_METRICS*, LibC::BOOL, HRESULT)
    get_metrics2 : Proc(IDWriteFontFace6*, DWRITE_FONT_METRICS1*, Void)
    get_gdi_compatible_metrics2 : Proc(IDWriteFontFace6*, Float32, Float32, DWRITE_MATRIX*, DWRITE_FONT_METRICS1*, HRESULT)
    get_caret_metrics : Proc(IDWriteFontFace6*, DWRITE_CARET_METRICS*, Void)
    get_unicode_ranges : Proc(IDWriteFontFace6*, UInt32, DWRITE_UNICODE_RANGE*, UInt32*, HRESULT)
    is_monospaced_font : Proc(IDWriteFontFace6*, LibC::BOOL)
    get_design_glyph_advances : Proc(IDWriteFontFace6*, UInt32, UInt16*, Int32*, LibC::BOOL, HRESULT)
    get_gdi_compatible_glyph_advances : Proc(IDWriteFontFace6*, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, LibC::BOOL, UInt32, UInt16*, Int32*, HRESULT)
    get_kerning_pair_adjustments : Proc(IDWriteFontFace6*, UInt32, UInt16*, Int32*, HRESULT)
    has_kerning_pairs : Proc(IDWriteFontFace6*, LibC::BOOL)
    get_recommended_rendering_mode2 : Proc(IDWriteFontFace6*, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, DWRITE_RENDERING_MODE*, HRESULT)
    get_vertical_glyph_variants : Proc(IDWriteFontFace6*, UInt32, UInt16*, UInt16*, HRESULT)
    has_vertical_glyph_variants : Proc(IDWriteFontFace6*, LibC::BOOL)
    is_color_font : Proc(IDWriteFontFace6*, LibC::BOOL)
    get_color_palette_count : Proc(IDWriteFontFace6*, UInt32)
    get_palette_entry_count : Proc(IDWriteFontFace6*, UInt32)
    get_palette_entries : Proc(IDWriteFontFace6*, UInt32, UInt32, UInt32, DWRITE_COLOR_F*, HRESULT)
    get_recommended_rendering_mode3 : Proc(IDWriteFontFace6*, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE*, DWRITE_GRID_FIT_MODE*, HRESULT)
    get_font_face_reference : Proc(IDWriteFontFace6*, IDWriteFontFaceReference*, HRESULT)
    get_panose : Proc(IDWriteFontFace6*, DWRITE_PANOSE*, Void)
    get_weight : Proc(IDWriteFontFace6*, DWRITE_FONT_WEIGHT)
    get_stretch : Proc(IDWriteFontFace6*, DWRITE_FONT_STRETCH)
    get_style : Proc(IDWriteFontFace6*, DWRITE_FONT_STYLE)
    get_family_names : Proc(IDWriteFontFace6*, IDWriteLocalizedStrings*, HRESULT)
    get_face_names : Proc(IDWriteFontFace6*, IDWriteLocalizedStrings*, HRESULT)
    get_informational_strings : Proc(IDWriteFontFace6*, DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings*, LibC::BOOL*, HRESULT)
    has_character : Proc(IDWriteFontFace6*, UInt32, LibC::BOOL)
    get_recommended_rendering_mode4 : Proc(IDWriteFontFace6*, Float32, Float32, Float32, DWRITE_MATRIX*, LibC::BOOL, DWRITE_OUTLINE_THRESHOLD, DWRITE_MEASURING_MODE, IDWriteRenderingParams, DWRITE_RENDERING_MODE1*, DWRITE_GRID_FIT_MODE*, HRESULT)
    is_character_local : Proc(IDWriteFontFace6*, UInt32, LibC::BOOL)
    is_glyph_local : Proc(IDWriteFontFace6*, UInt16, LibC::BOOL)
    are_characters_local : Proc(IDWriteFontFace6*, Char*, UInt32, LibC::BOOL, LibC::BOOL*, HRESULT)
    are_glyphs_local : Proc(IDWriteFontFace6*, UInt16*, UInt32, LibC::BOOL, LibC::BOOL*, HRESULT)
    get_glyph_image_formats : Proc(IDWriteFontFace6*, UInt16, UInt32, UInt32, DWRITE_GLYPH_IMAGE_FORMATS*, HRESULT)
    get_glyph_image_formats2 : Proc(IDWriteFontFace6*, DWRITE_GLYPH_IMAGE_FORMATS)
    get_glyph_image_data : Proc(IDWriteFontFace6*, UInt16, UInt32, DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_GLYPH_IMAGE_DATA*, Void**, HRESULT)
    release_glyph_image_data : Proc(IDWriteFontFace6*, Void*, Void)
    get_font_axis_value_count : Proc(IDWriteFontFace6*, UInt32)
    get_font_axis_values : Proc(IDWriteFontFace6*, DWRITE_FONT_AXIS_VALUE*, UInt32, HRESULT)
    has_variations : Proc(IDWriteFontFace6*, LibC::BOOL)
    get_font_resource : Proc(IDWriteFontFace6*, IDWriteFontResource*, HRESULT)
    equals : Proc(IDWriteFontFace6*, IDWriteFontFace, LibC::BOOL)
    get_family_names2 : Proc(IDWriteFontFace6*, DWRITE_FONT_FAMILY_MODEL, IDWriteLocalizedStrings*, HRESULT)
    get_face_names2 : Proc(IDWriteFontFace6*, DWRITE_FONT_FAMILY_MODEL, IDWriteLocalizedStrings*, HRESULT)
  end

  IDWriteFontFace6_GUID = LibC::GUID.new("c4b1fe1b-6e84-47d5-b54c-a597981b06ad")
  CLSID_IDWriteFontFace6 = "c4b1fe1b-6e84-47d5-b54c-a597981b06ad"
  struct IDWriteFontFace6
    lpVtbl : IDWriteFontFace6VTbl*
  end


  # Params # factorytype : DWRITE_FACTORY_TYPE [In],iid : Guid* [In],factory : IUnknown* [In]
  fun DWriteCreateFactory(factorytype : DWRITE_FACTORY_TYPE, iid : Guid*, factory : IUnknown*) : HRESULT
end
