require "../foundation.cr"
require "../graphics/dxgi/common.cr"
require "../system/com.cr"
require "../graphics/direct3d.cr"
require "../graphics/dxgi.cr"

{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link("delayimp")]
{% end %}
@[Link("user32")]
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/IGNORE:4199")]
{% end %}
{% if compare_versions(Crystal::VERSION, "1.8.2") <= 0 %}
@[Link(ldflags: "/DELAYLOAD:d3d10.dll")]
@[Link(ldflags: "/DELAYLOAD:d3d10_1.dll")]
{% else %}
@[Link("d3d10")]
@[Link("d3d10_1")]
{% end %}
lib LibWin32
  D3D10_16BIT_INDEX_STRIP_CUT_VALUE = 65535_u32
  D3D10_32BIT_INDEX_STRIP_CUT_VALUE = 4294967295_u32
  D3D10_8BIT_INDEX_STRIP_CUT_VALUE = 255_u32
  D3D10_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9_u32
  D3D10_CLIP_OR_CULL_DISTANCE_COUNT = 8_u32
  D3D10_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1_u32
  D3D10_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64_u32
  D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4_u32
  D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1_u32
  D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1_u32
  D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1_u32
  D3D10_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32_u32
  D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1_u32
  D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128_u32
  D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1_u32
  D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1_u32
  D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128_u32
  D3D10_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1_u32
  D3D10_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16_u32
  D3D10_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1_u32
  D3D10_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1_u32
  D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT = 16_u32
  D3D10_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32_u32
  D3D10_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4_u32
  D3D10_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_COMMONSHADER_TEMP_REGISTER_COUNT = 4096_u32
  D3D10_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3_u32
  D3D10_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3_u32
  D3D10_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10_u32
  D3D10_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = -10_i32
  D3D10_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = -8_i32
  D3D10_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7_u32
  D3D10_DEFAULT_BLEND_FACTOR_ALPHA = "1.0_f32"
  D3D10_DEFAULT_BLEND_FACTOR_BLUE = "1.0_f32"
  D3D10_DEFAULT_BLEND_FACTOR_GREEN = "1.0_f32"
  D3D10_DEFAULT_BLEND_FACTOR_RED = "1.0_f32"
  D3D10_DEFAULT_BORDER_COLOR_COMPONENT = "0.0_f32"
  D3D10_DEFAULT_DEPTH_BIAS = 0_u32
  D3D10_DEFAULT_DEPTH_BIAS_CLAMP = "0.0_f32"
  D3D10_DEFAULT_MAX_ANISOTROPY = "16.0_f32"
  D3D10_DEFAULT_MIP_LOD_BIAS = "0.0_f32"
  D3D10_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0_u32
  D3D10_DEFAULT_SAMPLE_MASK = 4294967295_u32
  D3D10_DEFAULT_SCISSOR_ENDX = 0_u32
  D3D10_DEFAULT_SCISSOR_ENDY = 0_u32
  D3D10_DEFAULT_SCISSOR_STARTX = 0_u32
  D3D10_DEFAULT_SCISSOR_STARTY = 0_u32
  D3D10_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = "0.0_f32"
  D3D10_DEFAULT_STENCIL_READ_MASK = 255_u32
  D3D10_DEFAULT_STENCIL_REFERENCE = 0_u32
  D3D10_DEFAULT_STENCIL_WRITE_MASK = 255_u32
  D3D10_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0_u32
  D3D10_DEFAULT_VIEWPORT_HEIGHT = 0_u32
  D3D10_DEFAULT_VIEWPORT_MAX_DEPTH = "0.0_f32"
  D3D10_DEFAULT_VIEWPORT_MIN_DEPTH = "0.0_f32"
  D3D10_DEFAULT_VIEWPORT_TOPLEFTX = 0_u32
  D3D10_DEFAULT_VIEWPORT_TOPLEFTY = 0_u32
  D3D10_DEFAULT_VIEWPORT_WIDTH = 0_u32
  D3D10_FLOAT16_FUSED_TOLERANCE_IN_ULP = "0.6_f64"
  D3D10_FLOAT32_MAX = "3.4028235e+38_f32"
  D3D10_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = "0.6_f32"
  D3D10_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = "2.4_f32"
  D3D10_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = "1.0_f32"
  D3D10_FLOAT_TO_SRGB_OFFSET = "0.055_f32"
  D3D10_FLOAT_TO_SRGB_SCALE_1 = "12.92_f32"
  D3D10_FLOAT_TO_SRGB_SCALE_2 = "1.055_f32"
  D3D10_FLOAT_TO_SRGB_THRESHOLD = "0.0031308_f32"
  D3D10_FTOI_INSTRUCTION_MAX_INPUT = "2147483600.0_f32"
  D3D10_FTOI_INSTRUCTION_MIN_INPUT = "-2147483600.0_f32"
  D3D10_FTOU_INSTRUCTION_MAX_INPUT = "4294967300.0_f32"
  D3D10_FTOU_INSTRUCTION_MIN_INPUT = "0.0_f32"
  D3D10_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1_u32
  D3D10_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1_u32
  D3D10_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2_u32
  D3D10_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1_u32
  D3D10_GS_INPUT_REGISTER_COMPONENTS = 4_u32
  D3D10_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_GS_INPUT_REGISTER_COUNT = 16_u32
  D3D10_GS_INPUT_REGISTER_READS_PER_INST = 2_u32
  D3D10_GS_INPUT_REGISTER_READ_PORTS = 1_u32
  D3D10_GS_INPUT_REGISTER_VERTICES = 6_u32
  D3D10_GS_OUTPUT_ELEMENTS = 32_u32
  D3D10_GS_OUTPUT_REGISTER_COMPONENTS = 4_u32
  D3D10_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_GS_OUTPUT_REGISTER_COUNT = 32_u32
  D3D10_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0_u32
  D3D10_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0_u32
  D3D10_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0_u32
  D3D10_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1_u32
  D3D10_IA_INSTANCE_ID_BIT_COUNT = 32_u32
  D3D10_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32_u32
  D3D10_IA_PRIMITIVE_ID_BIT_COUNT = 32_u32
  D3D10_IA_VERTEX_ID_BIT_COUNT = 32_u32
  D3D10_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 16_u32
  D3D10_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 64_u32
  D3D10_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 16_u32
  D3D10_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 4294967295_u32
  D3D10_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 4294967295_u32
  D3D10_LINEAR_GAMMA = "1.0_f32"
  D3D10_MAX_BORDER_COLOR_COMPONENT = "1.0_f32"
  D3D10_MAX_DEPTH = "1.0_f32"
  D3D10_MAX_MAXANISOTROPY = 16_u32
  D3D10_MAX_MULTISAMPLE_SAMPLE_COUNT = 32_u32
  D3D10_MAX_POSITION_VALUE = "3.4028236e+34_f32"
  D3D10_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17_u32
  D3D10_MIN_BORDER_COLOR_COMPONENT = "0.0_f32"
  D3D10_MIN_DEPTH = "0.0_f32"
  D3D10_MIN_MAXANISOTROPY = 0_u32
  D3D10_MIP_LOD_BIAS_MAX = "15.99_f32"
  D3D10_MIP_LOD_BIAS_MIN = "-16.0_f32"
  D3D10_MIP_LOD_FRACTIONAL_BIT_COUNT = 6_u32
  D3D10_MIP_LOD_RANGE_BIT_COUNT = 8_u32
  D3D10_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = "1.4_f32"
  D3D10_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0_u32
  D3D10_PIXEL_ADDRESS_RANGE_BIT_COUNT = 13_u32
  D3D10_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15_u32
  D3D10_PS_FRONTFACING_DEFAULT_VALUE = 4294967295_u32
  D3D10_PS_FRONTFACING_FALSE_VALUE = 0_u32
  D3D10_PS_FRONTFACING_TRUE_VALUE = 4294967295_u32
  D3D10_PS_INPUT_REGISTER_COMPONENTS = 4_u32
  D3D10_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_PS_INPUT_REGISTER_COUNT = 32_u32
  D3D10_PS_INPUT_REGISTER_READS_PER_INST = 2_u32
  D3D10_PS_INPUT_REGISTER_READ_PORTS = 1_u32
  D3D10_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = "0.0_f32"
  D3D10_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1_u32
  D3D10_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1_u32
  D3D10_PS_OUTPUT_REGISTER_COMPONENTS = 4_u32
  D3D10_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_PS_OUTPUT_REGISTER_COUNT = 8_u32
  D3D10_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = "0.5_f32"
  D3D10_REQ_BLEND_OBJECT_COUNT_PER_CONTEXT = 4096_u32
  D3D10_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27_u32
  D3D10_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096_u32
  D3D10_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_CONTEXT = 4096_u32
  D3D10_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32_u32
  D3D10_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32_u32
  D3D10_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 8192_u32
  D3D10_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024_u32
  D3D10_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096_u32
  D3D10_REQ_MAXANISOTROPY = 16_u32
  D3D10_REQ_MIP_LEVELS = 14_u32
  D3D10_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048_u32
  D3D10_REQ_RASTERIZER_OBJECT_COUNT_PER_CONTEXT = 4096_u32
  D3D10_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 8192_u32
  D3D10_REQ_RESOURCE_SIZE_IN_MEGABYTES = 128_u32
  D3D10_REQ_RESOURCE_VIEW_COUNT_PER_CONTEXT_2_TO_EXP = 20_u32
  D3D10_REQ_SAMPLER_OBJECT_COUNT_PER_CONTEXT = 4096_u32
  D3D10_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 512_u32
  D3D10_REQ_TEXTURE1D_U_DIMENSION = 8192_u32
  D3D10_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 512_u32
  D3D10_REQ_TEXTURE2D_U_OR_V_DIMENSION = 8192_u32
  D3D10_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048_u32
  D3D10_REQ_TEXTURECUBE_DIMENSION = 8192_u32
  D3D10_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0_u32
  D3D10_SHADER_MAJOR_VERSION = 4_u32
  D3D10_SHADER_MINOR_VERSION = 0_u32
  D3D10_SHIFT_INSTRUCTION_PAD_VALUE = 0_u32
  D3D10_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5_u32
  D3D10_SIMULTANEOUS_RENDER_TARGET_COUNT = 8_u32
  D3D10_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048_u32
  D3D10_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 256_u32
  D3D10_SO_BUFFER_SLOT_COUNT = 4_u32
  D3D10_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 4294967295_u32
  D3D10_SO_MULTIPLE_BUFFER_ELEMENTS_PER_BUFFER = 1_u32
  D3D10_SO_SINGLE_BUFFER_COMPONENT_LIMIT = 64_u32
  D3D10_SRGB_GAMMA = "2.2_f32"
  D3D10_SRGB_TO_FLOAT_DENOMINATOR_1 = "12.92_f32"
  D3D10_SRGB_TO_FLOAT_DENOMINATOR_2 = "1.055_f32"
  D3D10_SRGB_TO_FLOAT_EXPONENT = "2.4_f32"
  D3D10_SRGB_TO_FLOAT_OFFSET = "0.055_f32"
  D3D10_SRGB_TO_FLOAT_THRESHOLD = "0.04045_f32"
  D3D10_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = "0.5_f32"
  D3D10_STANDARD_COMPONENT_BIT_COUNT = 32_u32
  D3D10_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64_u32
  D3D10_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4_u32
  D3D10_STANDARD_PIXEL_COMPONENT_COUNT = 128_u32
  D3D10_STANDARD_PIXEL_ELEMENT_COUNT = 32_u32
  D3D10_STANDARD_VECTOR_SIZE = 4_u32
  D3D10_STANDARD_VERTEX_ELEMENT_COUNT = 16_u32
  D3D10_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64_u32
  D3D10_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8_u32
  D3D10_SUBTEXEL_FRACTIONAL_BIT_COUNT = 6_u32
  D3D10_TEXEL_ADDRESS_RANGE_BIT_COUNT = 18_u32
  D3D10_UNBOUND_MEMORY_ACCESS_RESULT = 0_u32
  D3D10_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15_u32
  D3D10_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16_u32
  D3D10_VIEWPORT_BOUNDS_MAX = 16383_u32
  D3D10_VIEWPORT_BOUNDS_MIN = -16384_i32
  D3D10_VS_INPUT_REGISTER_COMPONENTS = 4_u32
  D3D10_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_VS_INPUT_REGISTER_COUNT = 16_u32
  D3D10_VS_INPUT_REGISTER_READS_PER_INST = 2_u32
  D3D10_VS_INPUT_REGISTER_READ_PORTS = 1_u32
  D3D10_VS_OUTPUT_REGISTER_COMPONENTS = 4_u32
  D3D10_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_VS_OUTPUT_REGISTER_COUNT = 16_u32
  D3D10_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10_u32
  D3D10_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25_u32
  D3D10_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25_u32
  D3D_MAJOR_VERSION = 10_u32
  D3D_MINOR_VERSION = 0_u32
  D3D_SPEC_DATE_DAY = 8_u32
  D3D_SPEC_DATE_MONTH = 8_u32
  D3D_SPEC_DATE_YEAR = 2006_u32
  D3D_SPEC_VERSION = "1.050005_f64"
  D3D10_1_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 16_u32
  D3D10_1_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 16_u32
  FACD3D10 = 2169_u32
  D3D10_APPEND_ALIGNED_ELEMENT = 4294967295_u32
  D3D10_FILTER_TYPE_MASK = 3_u32
  D3D10_MIN_FILTER_SHIFT = 4_u32
  D3D10_MAG_FILTER_SHIFT = 2_u32
  D3D10_MIP_FILTER_SHIFT = 0_u32
  D3D10_COMPARISON_FILTERING_BIT = 128_u32
  D3D10_ANISOTROPIC_FILTERING_BIT = 64_u32
  D3D10_TEXT_1BIT_BIT = 2147483648_u32
  D3D10_SDK_VERSION = 29_u32
  D3D10_1_DEFAULT_SAMPLE_MASK = 4294967295_u32
  D3D10_1_FLOAT16_FUSED_TOLERANCE_IN_ULP = "0.6_f64"
  D3D10_1_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = "0.6_f32"
  D3D10_1_GS_INPUT_REGISTER_COUNT = 32_u32
  D3D10_1_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128_u32
  D3D10_1_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1_u32
  D3D10_1_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_1_PS_OUTPUT_MASK_REGISTER_COUNT = 1_u32
  D3D10_1_SHADER_MAJOR_VERSION = 4_u32
  D3D10_1_SHADER_MINOR_VERSION = 1_u32
  D3D10_1_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048_u32
  D3D10_1_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 256_u32
  D3D10_1_SO_BUFFER_SLOT_COUNT = 4_u32
  D3D10_1_SO_MULTIPLE_BUFFER_ELEMENTS_PER_BUFFER = 1_u32
  D3D10_1_SO_SINGLE_BUFFER_COMPONENT_LIMIT = 64_u32
  D3D10_1_STANDARD_VERTEX_ELEMENT_COUNT = 32_u32
  D3D10_1_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8_u32
  D3D10_1_VS_INPUT_REGISTER_COUNT = 32_u32
  D3D10_1_VS_OUTPUT_REGISTER_COUNT = 32_u32
  D3D10_SDK_LAYERS_VERSION = 11_u32
  D3D10_DEBUG_FEATURE_FLUSH_PER_RENDER_OP = 1_u32
  D3D10_DEBUG_FEATURE_FINISH_PER_RENDER_OP = 2_u32
  D3D10_DEBUG_FEATURE_PRESENT_PER_RENDER_OP = 4_u32
  DXGI_DEBUG_D3D10 = "243b4c52-3606-4d3a-99d7-a7e7b33ed706"
  D3D10_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT = 1024_u32
  D3D10_SHADER_DEBUG = 1_u32
  D3D10_SHADER_SKIP_VALIDATION = 2_u32
  D3D10_SHADER_SKIP_OPTIMIZATION = 4_u32
  D3D10_SHADER_PACK_MATRIX_ROW_MAJOR = 8_u32
  D3D10_SHADER_PACK_MATRIX_COLUMN_MAJOR = 16_u32
  D3D10_SHADER_PARTIAL_PRECISION = 32_u32
  D3D10_SHADER_FORCE_VS_SOFTWARE_NO_OPT = 64_u32
  D3D10_SHADER_FORCE_PS_SOFTWARE_NO_OPT = 128_u32
  D3D10_SHADER_NO_PRESHADER = 256_u32
  D3D10_SHADER_AVOID_FLOW_CONTROL = 512_u32
  D3D10_SHADER_PREFER_FLOW_CONTROL = 1024_u32
  D3D10_SHADER_ENABLE_STRICTNESS = 2048_u32
  D3D10_SHADER_ENABLE_BACKWARDS_COMPATIBILITY = 4096_u32
  D3D10_SHADER_IEEE_STRICTNESS = 8192_u32
  D3D10_SHADER_WARNINGS_ARE_ERRORS = 262144_u32
  D3D10_SHADER_RESOURCES_MAY_ALIAS = 524288_u32
  D3D10_ENABLE_UNBOUNDED_DESCRIPTOR_TABLES = 1048576_u32
  D3D10_ALL_RESOURCES_BOUND = 2097152_u32
  D3D10_SHADER_DEBUG_NAME_FOR_SOURCE = 4194304_u32
  D3D10_SHADER_DEBUG_NAME_FOR_BINARY = 8388608_u32
  D3D10_SHADER_OPTIMIZATION_LEVEL0 = 16384_u32
  D3D10_SHADER_OPTIMIZATION_LEVEL1 = 0_u32
  D3D10_SHADER_OPTIMIZATION_LEVEL3 = 32768_u32
  D3D10_SHADER_FLAGS2_FORCE_ROOT_SIGNATURE_LATEST = 0_u32
  D3D10_SHADER_FLAGS2_FORCE_ROOT_SIGNATURE_1_0 = 16_u32
  D3D10_SHADER_FLAGS2_FORCE_ROOT_SIGNATURE_1_1 = 32_u32
  D3D10_EFFECT_COMPILE_CHILD_EFFECT = 1_u32
  D3D10_EFFECT_COMPILE_ALLOW_SLOW_OPS = 2_u32
  D3D10_EFFECT_SINGLE_THREADED = 8_u32
  D3D10_EFFECT_VARIABLE_POOLED = 1_u32
  D3D10_EFFECT_VARIABLE_ANNOTATION = 2_u32
  D3D10_EFFECT_VARIABLE_EXPLICIT_BIND_POINT = 4_u32
  GUID_DeviceType = "d722fb4d-7a68-437a-b20c-5804ee2494a6"

  alias PFN_D3D10_CREATE_DEVICE1 = Proc(IDXGIAdapter, D3D10_DRIVER_TYPE, HINSTANCE, UInt32, D3D10_FEATURE_LEVEL1, UInt32, ID3D10Device1*, HRESULT)
  alias PFN_D3D10_CREATE_DEVICE_AND_SWAP_CHAIN1 = Proc(IDXGIAdapter, D3D10_DRIVER_TYPE, HINSTANCE, UInt32, D3D10_FEATURE_LEVEL1, UInt32, DXGI_SWAP_CHAIN_DESC*, IDXGISwapChain*, ID3D10Device1*, HRESULT)


  enum D3D10_INPUT_CLASSIFICATION : Int32
    D3D10_INPUT_PER_VERTEX_DATA = 0
    D3D10_INPUT_PER_INSTANCE_DATA = 1
  end

  enum D3D10_FILL_MODE : Int32
    D3D10_FILL_WIREFRAME = 2
    D3D10_FILL_SOLID = 3
  end

  enum D3D10_CULL_MODE : Int32
    D3D10_CULL_NONE = 1
    D3D10_CULL_FRONT = 2
    D3D10_CULL_BACK = 3
  end

  enum D3D10_RESOURCE_DIMENSION : Int32
    D3D10_RESOURCE_DIMENSION_UNKNOWN = 0
    D3D10_RESOURCE_DIMENSION_BUFFER = 1
    D3D10_RESOURCE_DIMENSION_TEXTURE1D = 2
    D3D10_RESOURCE_DIMENSION_TEXTURE2D = 3
    D3D10_RESOURCE_DIMENSION_TEXTURE3D = 4
  end

  enum D3D10_DSV_DIMENSION : Int32
    D3D10_DSV_DIMENSION_UNKNOWN = 0
    D3D10_DSV_DIMENSION_TEXTURE1D = 1
    D3D10_DSV_DIMENSION_TEXTURE1DARRAY = 2
    D3D10_DSV_DIMENSION_TEXTURE2D = 3
    D3D10_DSV_DIMENSION_TEXTURE2DARRAY = 4
    D3D10_DSV_DIMENSION_TEXTURE2DMS = 5
    D3D10_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
  end

  enum D3D10_RTV_DIMENSION : Int32
    D3D10_RTV_DIMENSION_UNKNOWN = 0
    D3D10_RTV_DIMENSION_BUFFER = 1
    D3D10_RTV_DIMENSION_TEXTURE1D = 2
    D3D10_RTV_DIMENSION_TEXTURE1DARRAY = 3
    D3D10_RTV_DIMENSION_TEXTURE2D = 4
    D3D10_RTV_DIMENSION_TEXTURE2DARRAY = 5
    D3D10_RTV_DIMENSION_TEXTURE2DMS = 6
    D3D10_RTV_DIMENSION_TEXTURE2DMSARRAY = 7
    D3D10_RTV_DIMENSION_TEXTURE3D = 8
  end

  enum D3D10_USAGE : Int32
    D3D10_USAGE_DEFAULT = 0
    D3D10_USAGE_IMMUTABLE = 1
    D3D10_USAGE_DYNAMIC = 2
    D3D10_USAGE_STAGING = 3
  end

  enum D3D10_BIND_FLAG : Int32
    D3D10_BIND_VERTEX_BUFFER = 1
    D3D10_BIND_INDEX_BUFFER = 2
    D3D10_BIND_CONSTANT_BUFFER = 4
    D3D10_BIND_SHADER_RESOURCE = 8
    D3D10_BIND_STREAM_OUTPUT = 16
    D3D10_BIND_RENDER_TARGET = 32
    D3D10_BIND_DEPTH_STENCIL = 64
  end

  enum D3D10_CPU_ACCESS_FLAG : Int32
    D3D10_CPU_ACCESS_WRITE = 65536
    D3D10_CPU_ACCESS_READ = 131072
  end

  enum D3D10_RESOURCE_MISC_FLAG : Int32
    D3D10_RESOURCE_MISC_GENERATE_MIPS = 1
    D3D10_RESOURCE_MISC_SHARED = 2
    D3D10_RESOURCE_MISC_TEXTURECUBE = 4
    D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX = 16
    D3D10_RESOURCE_MISC_GDI_COMPATIBLE = 32
  end

  enum D3D10_MAP : Int32
    D3D10_MAP_READ = 1
    D3D10_MAP_WRITE = 2
    D3D10_MAP_READ_WRITE = 3
    D3D10_MAP_WRITE_DISCARD = 4
    D3D10_MAP_WRITE_NO_OVERWRITE = 5
  end

  enum D3D10_MAP_FLAG : Int32
    D3D10_MAP_FLAG_DO_NOT_WAIT = 1048576
  end

  enum D3D10_RAISE_FLAG : Int32
    D3D10_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 1
  end

  enum D3D10_CLEAR_FLAG : Int32
    D3D10_CLEAR_DEPTH = 1
    D3D10_CLEAR_STENCIL = 2
  end

  enum D3D10_COMPARISON_FUNC : Int32
    D3D10_COMPARISON_NEVER = 1
    D3D10_COMPARISON_LESS = 2
    D3D10_COMPARISON_EQUAL = 3
    D3D10_COMPARISON_LESS_EQUAL = 4
    D3D10_COMPARISON_GREATER = 5
    D3D10_COMPARISON_NOT_EQUAL = 6
    D3D10_COMPARISON_GREATER_EQUAL = 7
    D3D10_COMPARISON_ALWAYS = 8
  end

  enum D3D10_DEPTH_WRITE_MASK : Int32
    D3D10_DEPTH_WRITE_MASK_ZERO = 0
    D3D10_DEPTH_WRITE_MASK_ALL = 1
  end

  enum D3D10_STENCIL_OP : Int32
    D3D10_STENCIL_OP_KEEP = 1
    D3D10_STENCIL_OP_ZERO = 2
    D3D10_STENCIL_OP_REPLACE = 3
    D3D10_STENCIL_OP_INCR_SAT = 4
    D3D10_STENCIL_OP_DECR_SAT = 5
    D3D10_STENCIL_OP_INVERT = 6
    D3D10_STENCIL_OP_INCR = 7
    D3D10_STENCIL_OP_DECR = 8
  end

  enum D3D10_BLEND : Int32
    D3D10_BLEND_ZERO = 1
    D3D10_BLEND_ONE = 2
    D3D10_BLEND_SRC_COLOR = 3
    D3D10_BLEND_INV_SRC_COLOR = 4
    D3D10_BLEND_SRC_ALPHA = 5
    D3D10_BLEND_INV_SRC_ALPHA = 6
    D3D10_BLEND_DEST_ALPHA = 7
    D3D10_BLEND_INV_DEST_ALPHA = 8
    D3D10_BLEND_DEST_COLOR = 9
    D3D10_BLEND_INV_DEST_COLOR = 10
    D3D10_BLEND_SRC_ALPHA_SAT = 11
    D3D10_BLEND_BLEND_FACTOR = 14
    D3D10_BLEND_INV_BLEND_FACTOR = 15
    D3D10_BLEND_SRC1_COLOR = 16
    D3D10_BLEND_INV_SRC1_COLOR = 17
    D3D10_BLEND_SRC1_ALPHA = 18
    D3D10_BLEND_INV_SRC1_ALPHA = 19
  end

  enum D3D10_BLEND_OP : Int32
    D3D10_BLEND_OP_ADD = 1
    D3D10_BLEND_OP_SUBTRACT = 2
    D3D10_BLEND_OP_REV_SUBTRACT = 3
    D3D10_BLEND_OP_MIN = 4
    D3D10_BLEND_OP_MAX = 5
  end

  enum D3D10_COLOR_WRITE_ENABLE : Int32
    D3D10_COLOR_WRITE_ENABLE_RED = 1
    D3D10_COLOR_WRITE_ENABLE_GREEN = 2
    D3D10_COLOR_WRITE_ENABLE_BLUE = 4
    D3D10_COLOR_WRITE_ENABLE_ALPHA = 8
    D3D10_COLOR_WRITE_ENABLE_ALL = 15
  end

  enum D3D10_TEXTURECUBE_FACE : Int32
    D3D10_TEXTURECUBE_FACE_POSITIVE_X = 0
    D3D10_TEXTURECUBE_FACE_NEGATIVE_X = 1
    D3D10_TEXTURECUBE_FACE_POSITIVE_Y = 2
    D3D10_TEXTURECUBE_FACE_NEGATIVE_Y = 3
    D3D10_TEXTURECUBE_FACE_POSITIVE_Z = 4
    D3D10_TEXTURECUBE_FACE_NEGATIVE_Z = 5
  end

  enum D3D10_FILTER : Int32
    D3D10_FILTER_MIN_MAG_MIP_POINT = 0
    D3D10_FILTER_MIN_MAG_POINT_MIP_LINEAR = 1
    D3D10_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4
    D3D10_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5
    D3D10_FILTER_MIN_LINEAR_MAG_MIP_POINT = 16
    D3D10_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17
    D3D10_FILTER_MIN_MAG_LINEAR_MIP_POINT = 20
    D3D10_FILTER_MIN_MAG_MIP_LINEAR = 21
    D3D10_FILTER_ANISOTROPIC = 85
    D3D10_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 128
    D3D10_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 129
    D3D10_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 132
    D3D10_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 133
    D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 144
    D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 145
    D3D10_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 148
    D3D10_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 149
    D3D10_FILTER_COMPARISON_ANISOTROPIC = 213
    D3D10_FILTER_TEXT_1BIT = -2147483648
  end

  enum D3D10_FILTER_TYPE : Int32
    D3D10_FILTER_TYPE_POINT = 0
    D3D10_FILTER_TYPE_LINEAR = 1
  end

  enum D3D10_TEXTURE_ADDRESS_MODE : Int32
    D3D10_TEXTURE_ADDRESS_WRAP = 1
    D3D10_TEXTURE_ADDRESS_MIRROR = 2
    D3D10_TEXTURE_ADDRESS_CLAMP = 3
    D3D10_TEXTURE_ADDRESS_BORDER = 4
    D3D10_TEXTURE_ADDRESS_MIRROR_ONCE = 5
  end

  enum D3D10_FORMAT_SUPPORT : Int32
    D3D10_FORMAT_SUPPORT_BUFFER = 1
    D3D10_FORMAT_SUPPORT_IA_VERTEX_BUFFER = 2
    D3D10_FORMAT_SUPPORT_IA_INDEX_BUFFER = 4
    D3D10_FORMAT_SUPPORT_SO_BUFFER = 8
    D3D10_FORMAT_SUPPORT_TEXTURE1D = 16
    D3D10_FORMAT_SUPPORT_TEXTURE2D = 32
    D3D10_FORMAT_SUPPORT_TEXTURE3D = 64
    D3D10_FORMAT_SUPPORT_TEXTURECUBE = 128
    D3D10_FORMAT_SUPPORT_SHADER_LOAD = 256
    D3D10_FORMAT_SUPPORT_SHADER_SAMPLE = 512
    D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 1024
    D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 2048
    D3D10_FORMAT_SUPPORT_MIP = 4096
    D3D10_FORMAT_SUPPORT_MIP_AUTOGEN = 8192
    D3D10_FORMAT_SUPPORT_RENDER_TARGET = 16384
    D3D10_FORMAT_SUPPORT_BLENDABLE = 32768
    D3D10_FORMAT_SUPPORT_DEPTH_STENCIL = 65536
    D3D10_FORMAT_SUPPORT_CPU_LOCKABLE = 131072
    D3D10_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 262144
    D3D10_FORMAT_SUPPORT_DISPLAY = 524288
    D3D10_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 1048576
    D3D10_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 2097152
    D3D10_FORMAT_SUPPORT_MULTISAMPLE_LOAD = 4194304
    D3D10_FORMAT_SUPPORT_SHADER_GATHER = 8388608
    D3D10_FORMAT_SUPPORT_BACK_BUFFER_CAST = 16777216
  end

  enum D3D10_ASYNC_GETDATA_FLAG : Int32
    D3D10_ASYNC_GETDATA_DONOTFLUSH = 1
  end

  enum D3D10_QUERY : Int32
    D3D10_QUERY_EVENT = 0
    D3D10_QUERY_OCCLUSION = 1
    D3D10_QUERY_TIMESTAMP = 2
    D3D10_QUERY_TIMESTAMP_DISJOINT = 3
    D3D10_QUERY_PIPELINE_STATISTICS = 4
    D3D10_QUERY_OCCLUSION_PREDICATE = 5
    D3D10_QUERY_SO_STATISTICS = 6
    D3D10_QUERY_SO_OVERFLOW_PREDICATE = 7
  end

  enum D3D10_QUERY_MISC_FLAG : Int32
    D3D10_QUERY_MISC_PREDICATEHINT = 1
  end

  enum D3D10_COUNTER : Int32
    D3D10_COUNTER_GPU_IDLE = 0
    D3D10_COUNTER_VERTEX_PROCESSING = 1
    D3D10_COUNTER_GEOMETRY_PROCESSING = 2
    D3D10_COUNTER_PIXEL_PROCESSING = 3
    D3D10_COUNTER_OTHER_GPU_PROCESSING = 4
    D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION = 5
    D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION = 6
    D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION = 7
    D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION = 8
    D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION = 9
    D3D10_COUNTER_VS_MEMORY_LIMITED = 10
    D3D10_COUNTER_VS_COMPUTATION_LIMITED = 11
    D3D10_COUNTER_GS_MEMORY_LIMITED = 12
    D3D10_COUNTER_GS_COMPUTATION_LIMITED = 13
    D3D10_COUNTER_PS_MEMORY_LIMITED = 14
    D3D10_COUNTER_PS_COMPUTATION_LIMITED = 15
    D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE = 16
    D3D10_COUNTER_TEXTURE_CACHE_HIT_RATE = 17
    D3D10_COUNTER_DEVICE_DEPENDENT_0 = 1073741824
  end

  enum D3D10_COUNTER_TYPE : Int32
    D3D10_COUNTER_TYPE_FLOAT32 = 0
    D3D10_COUNTER_TYPE_UINT16 = 1
    D3D10_COUNTER_TYPE_UINT32 = 2
    D3D10_COUNTER_TYPE_UINT64 = 3
  end

  enum D3D10_CREATE_DEVICE_FLAG : Int32
    D3D10_CREATE_DEVICE_SINGLETHREADED = 1
    D3D10_CREATE_DEVICE_DEBUG = 2
    D3D10_CREATE_DEVICE_SWITCH_TO_REF = 4
    D3D10_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 8
    D3D10_CREATE_DEVICE_ALLOW_NULL_FROM_MAP = 16
    D3D10_CREATE_DEVICE_BGRA_SUPPORT = 32
    D3D10_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 128
    D3D10_CREATE_DEVICE_STRICT_VALIDATION = 512
    D3D10_CREATE_DEVICE_DEBUGGABLE = 1024
  end

  enum D3D10_MESSAGE_CATEGORY : Int32
    D3D10_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0
    D3D10_MESSAGE_CATEGORY_MISCELLANEOUS = 1
    D3D10_MESSAGE_CATEGORY_INITIALIZATION = 2
    D3D10_MESSAGE_CATEGORY_CLEANUP = 3
    D3D10_MESSAGE_CATEGORY_COMPILATION = 4
    D3D10_MESSAGE_CATEGORY_STATE_CREATION = 5
    D3D10_MESSAGE_CATEGORY_STATE_SETTING = 6
    D3D10_MESSAGE_CATEGORY_STATE_GETTING = 7
    D3D10_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 8
    D3D10_MESSAGE_CATEGORY_EXECUTION = 9
    D3D10_MESSAGE_CATEGORY_SHADER = 10
  end

  enum D3D10_MESSAGE_SEVERITY : Int32
    D3D10_MESSAGE_SEVERITY_CORRUPTION = 0
    D3D10_MESSAGE_SEVERITY_ERROR = 1
    D3D10_MESSAGE_SEVERITY_WARNING = 2
    D3D10_MESSAGE_SEVERITY_INFO = 3
    D3D10_MESSAGE_SEVERITY_MESSAGE = 4
  end

  enum D3D10_MESSAGE_ID : Int32
    D3D10_MESSAGE_ID_UNKNOWN = 0
    D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = 1
    D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = 2
    D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = 3
    D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 4
    D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = 5
    D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 6
    D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = 7
    D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 8
    D3D10_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = 9
    D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = 10
    D3D10_MESSAGE_ID_STRING_FROM_APPLICATION = 11
    D3D10_MESSAGE_ID_CORRUPTED_THIS = 12
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER1 = 13
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER2 = 14
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER3 = 15
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER4 = 16
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER5 = 17
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER6 = 18
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER7 = 19
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER8 = 20
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER9 = 21
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER10 = 22
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER11 = 23
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER12 = 24
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER13 = 25
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER14 = 26
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER15 = 27
    D3D10_MESSAGE_ID_CORRUPTED_MULTITHREADING = 28
    D3D10_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 29
    D3D10_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 30
    D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 31
    D3D10_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 32
    D3D10_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = 33
    D3D10_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 34
    D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 35
    D3D10_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = 36
    D3D10_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = 37
    D3D10_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 38
    D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 39
    D3D10_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = 40
    D3D10_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = 41
    D3D10_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = 42
    D3D10_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 43
    D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 44
    D3D10_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = 45
    D3D10_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = 46
    D3D10_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 47
    D3D10_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 48
    D3D10_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 49
    D3D10_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = 50
    D3D10_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 51
    D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 52
    D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = 53
    D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = 54
    D3D10_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 55
    D3D10_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 56
    D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = 57
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = 58
    D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = 59
    D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 60
    D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 61
    D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 62
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = 63
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = 64
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = 65
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = 66
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = 67
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = 68
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = 69
    D3D10_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = 70
    D3D10_MESSAGE_ID_CREATEBUFFER_NULLDESC = 71
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 72
    D3D10_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = 73
    D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 74
    D3D10_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = 75
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = 76
    D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 77
    D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 78
    D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 79
    D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 80
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 81
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = 82
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = 83
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = 84
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = 85
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = 86
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = 87
    D3D10_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = 88
    D3D10_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = 89
    D3D10_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = 90
    D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 91
    D3D10_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = 92
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = 93
    D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 94
    D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 95
    D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 96
    D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 97
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 98
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = 99
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = 100
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = 101
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = 102
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = 103
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = 104
    D3D10_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = 105
    D3D10_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = 106
    D3D10_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = 107
    D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 108
    D3D10_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = 109
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = 110
    D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 111
    D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 112
    D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 113
    D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 114
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 115
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = 116
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = 117
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = 118
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = 119
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = 120
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = 121
    D3D10_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = 122
    D3D10_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = 123
    D3D10_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = 124
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 125
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 126
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 127
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 128
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 129
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 130
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 131
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 132
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 133
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 134
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 135
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 136
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 137
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 138
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 139
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 140
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 141
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 142
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 143
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 144
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 145
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 146
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 147
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 148
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 149
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 150
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 151
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 152
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 153
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 154
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 155
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 156
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 157
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 158
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 159
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 160
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 161
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 162
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 163
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = 164
    D3D10_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 165
    D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 166
    D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 167
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 168
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 169
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 170
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 171
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 172
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 173
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 174
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 175
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 176
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 177
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 178
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 179
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 180
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 181
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 182
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 183
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 184
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 185
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 186
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 187
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 188
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 189
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 190
    D3D10_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 191
    D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 192
    D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 193
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 194
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 195
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 196
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 197
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = 198
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = 199
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 200
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 201
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 202
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 203
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 204
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 205
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 206
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 207
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 208
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 209
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 210
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = 211
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 212
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 213
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 214
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 215
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 216
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 217
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 218
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = 219
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = 220
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = 221
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = 222
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = 223
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = 224
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 225
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 226
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 227
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = 228
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = 229
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = 230
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = 231
    D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = 232
    D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 233
    D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 234
    D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = 235
    D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 236
    D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 237
    D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = 238
    D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 239
    D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 240
    D3D10_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = 241
    D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 242
    D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 243
    D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 244
    D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 245
    D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = 246
    D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 247
    D3D10_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 248
    D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 249
    D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = 250
    D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 251
    D3D10_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 252
    D3D10_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = 253
    D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 254
    D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 255
    D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = 256
    D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 257
    D3D10_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 258
    D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 259
    D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 260
    D3D10_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = 261
    D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 262
    D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 263
    D3D10_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 264
    D3D10_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 265
    D3D10_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 266
    D3D10_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 267
    D3D10_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 268
    D3D10_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 269
    D3D10_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 270
    D3D10_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 271
    D3D10_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 272
    D3D10_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 273
    D3D10_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 274
    D3D10_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 275
    D3D10_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 276
    D3D10_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = 277
    D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 278
    D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 279
    D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 280
    D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = 281
    D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 282
    D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 283
    D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = 284
    D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = 285
    D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = 286
    D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 287
    D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 288
    D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 289
    D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 290
    D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 291
    D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 292
    D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 293
    D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 294
    D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = 295
    D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = 296
    D3D10_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = 297
    D3D10_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = 298
    D3D10_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = 299
    D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = 300
    D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = 301
    D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = 302
    D3D10_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = 303
    D3D10_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 304
    D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 305
    D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = 306
    D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = 307
    D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = 308
    D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = 309
    D3D10_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = 310
    D3D10_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 311
    D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 312
    D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = 313
    D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = 314
    D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = 315
    D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = 316
    D3D10_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = 317
    D3D10_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 318
    D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 319
    D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = 320
    D3D10_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 321
    D3D10_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 322
    D3D10_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 323
    D3D10_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = 324
    D3D10_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 325
    D3D10_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = 326
    D3D10_MESSAGE_ID_REF_THREADING_MODE = 327
    D3D10_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = 328
    D3D10_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = 329
    D3D10_MESSAGE_ID_REF_HARDWARE_EXCEPTION = 330
    D3D10_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 331
    D3D10_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = 332
    D3D10_MESSAGE_ID_REF_OUT_OF_MEMORY = 333
    D3D10_MESSAGE_ID_REF_INFO = 334
    D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = 335
    D3D10_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 336
    D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 337
    D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 338
    D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 339
    D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 340
    D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 341
    D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 342
    D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = 343
    D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 344
    D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = 345
    D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 346
    D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 347
    D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 348
    D3D10_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 349
    D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 350
    D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 351
    D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = 352
    D3D10_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 353
    D3D10_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 354
    D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 355
    D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 356
    D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 357
    D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 358
    D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 359
    D3D10_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 360
    D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 361
    D3D10_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = 362
    D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 363
    D3D10_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 364
    D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 365
    D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 366
    D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 367
    D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 368
    D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 369
    D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 370
    D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 371
    D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 372
    D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 373
    D3D10_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 374
    D3D10_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 375
    D3D10_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 376
    D3D10_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 377
    D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 378
    D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 379
    D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 380
    D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 381
    D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 382
    D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 383
    D3D10_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = 384
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 385
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 386
    D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 387
    D3D10_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = 388
    D3D10_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 389
    D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = 390
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 391
    D3D10_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = 392
    D3D10_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = 393
    D3D10_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = 394
    D3D10_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = 395
    D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = 396
    D3D10_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 397
    D3D10_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 398
    D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = 399
    D3D10_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = 400
    D3D10_MESSAGE_ID_CREATECOUNTER_NULLDESC = 401
    D3D10_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = 402
    D3D10_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 403
    D3D10_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = 404
    D3D10_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = 405
    D3D10_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = 406
    D3D10_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = 407
    D3D10_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 408
    D3D10_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = 409
    D3D10_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = 410
    D3D10_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = 411
    D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = 412
    D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = 413
    D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = 414
    D3D10_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 415
    D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 416
    D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 417
    D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 418
    D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 419
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 420
    D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 421
    D3D10_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 422
    D3D10_MESSAGE_ID_LIVE_BUFFER = 423
    D3D10_MESSAGE_ID_LIVE_TEXTURE1D = 424
    D3D10_MESSAGE_ID_LIVE_TEXTURE2D = 425
    D3D10_MESSAGE_ID_LIVE_TEXTURE3D = 426
    D3D10_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW = 427
    D3D10_MESSAGE_ID_LIVE_RENDERTARGETVIEW = 428
    D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW = 429
    D3D10_MESSAGE_ID_LIVE_VERTEXSHADER = 430
    D3D10_MESSAGE_ID_LIVE_GEOMETRYSHADER = 431
    D3D10_MESSAGE_ID_LIVE_PIXELSHADER = 432
    D3D10_MESSAGE_ID_LIVE_INPUTLAYOUT = 433
    D3D10_MESSAGE_ID_LIVE_SAMPLER = 434
    D3D10_MESSAGE_ID_LIVE_BLENDSTATE = 435
    D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE = 436
    D3D10_MESSAGE_ID_LIVE_RASTERIZERSTATE = 437
    D3D10_MESSAGE_ID_LIVE_QUERY = 438
    D3D10_MESSAGE_ID_LIVE_PREDICATE = 439
    D3D10_MESSAGE_ID_LIVE_COUNTER = 440
    D3D10_MESSAGE_ID_LIVE_DEVICE = 441
    D3D10_MESSAGE_ID_LIVE_SWAPCHAIN = 442
    D3D10_MESSAGE_ID_D3D10_MESSAGES_END = 443
    D3D10_MESSAGE_ID_D3D10L9_MESSAGES_START = 1048576
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 1048577
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = 1048578
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 1048579
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 1048580
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 1048581
    D3D10_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = 1048582
    D3D10_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048583
    D3D10_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048584
    D3D10_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = 1048585
    D3D10_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = 1048586
    D3D10_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = 1048587
    D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 1048588
    D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 1048589
    D3D10_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 1048590
    D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 1048591
    D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 1048592
    D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 1048593
    D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 1048594
    D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 1048595
    D3D10_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 1048596
    D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = 1048597
    D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 1048598
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 1048599
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 1048600
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = 1048601
    D3D10_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 1048602
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 1048603
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 1048604
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 1048605
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 1048606
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = 1048607
    D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 1048608
    D3D10_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 1048609
    D3D10_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 1048610
    D3D10_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 1048611
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 1048612
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 1048613
    D3D10_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = 1048614
    D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 1048615
    D3D10_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 1048616
    D3D10_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = 1048617
    D3D10_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = 1048618
    D3D10_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = 1048619
    D3D10_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = 1048620
    D3D10_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = 1048621
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 1048622
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = 1048623
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 1048624
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = 1048625
    D3D10_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = 1048626
    D3D10_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 1048627
    D3D10_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = 1048628
    D3D10_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 1048629
    D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 1048630
    D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 1048631
    D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 1048632
    D3D10_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = 1048633
    D3D10_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = 1048634
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 1048635
    D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = 1048636
    D3D10_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES = 1048637
    D3D10_MESSAGE_ID_D3D10L9_MESSAGES_END = 1048638
  end

  enum D3D10_DRIVER_TYPE : Int32
    D3D10_DRIVER_TYPE_HARDWARE = 0
    D3D10_DRIVER_TYPE_REFERENCE = 1
    D3D10_DRIVER_TYPE_NULL = 2
    D3D10_DRIVER_TYPE_SOFTWARE = 3
    D3D10_DRIVER_TYPE_WARP = 5
  end

  enum D3D10_DEVICE_STATE_TYPES : Int32
    D3D10_DST_SO_BUFFERS = 1
    D3D10_DST_OM_RENDER_TARGETS = 2
    D3D10_DST_OM_DEPTH_STENCIL_STATE = 3
    D3D10_DST_OM_BLEND_STATE = 4
    D3D10_DST_VS = 5
    D3D10_DST_VS_SAMPLERS = 6
    D3D10_DST_VS_SHADER_RESOURCES = 7
    D3D10_DST_VS_CONSTANT_BUFFERS = 8
    D3D10_DST_GS = 9
    D3D10_DST_GS_SAMPLERS = 10
    D3D10_DST_GS_SHADER_RESOURCES = 11
    D3D10_DST_GS_CONSTANT_BUFFERS = 12
    D3D10_DST_PS = 13
    D3D10_DST_PS_SAMPLERS = 14
    D3D10_DST_PS_SHADER_RESOURCES = 15
    D3D10_DST_PS_CONSTANT_BUFFERS = 16
    D3D10_DST_IA_VERTEX_BUFFERS = 17
    D3D10_DST_IA_INDEX_BUFFER = 18
    D3D10_DST_IA_INPUT_LAYOUT = 19
    D3D10_DST_IA_PRIMITIVE_TOPOLOGY = 20
    D3D10_DST_RS_VIEWPORTS = 21
    D3D10_DST_RS_SCISSOR_RECTS = 22
    D3D10_DST_RS_RASTERIZER_STATE = 23
    D3D10_DST_PREDICATION = 24
  end

  enum D3D10_FEATURE_LEVEL1 : Int32
    D3D10_FEATURE_LEVEL_10_0 = 40960
    D3D10_FEATURE_LEVEL_10_1 = 41216
    D3D10_FEATURE_LEVEL_9_1 = 37120
    D3D10_FEATURE_LEVEL_9_2 = 37376
    D3D10_FEATURE_LEVEL_9_3 = 37632
  end

  enum D3D10_STANDARD_MULTISAMPLE_QUALITY_LEVELS : Int32
    D3D10_STANDARD_MULTISAMPLE_PATTERN = -1
    D3D10_CENTER_MULTISAMPLE_PATTERN = -2
  end

  enum D3D10_SHADER_DEBUG_REGTYPE : Int32
    D3D10_SHADER_DEBUG_REG_INPUT = 0
    D3D10_SHADER_DEBUG_REG_OUTPUT = 1
    D3D10_SHADER_DEBUG_REG_CBUFFER = 2
    D3D10_SHADER_DEBUG_REG_TBUFFER = 3
    D3D10_SHADER_DEBUG_REG_TEMP = 4
    D3D10_SHADER_DEBUG_REG_TEMPARRAY = 5
    D3D10_SHADER_DEBUG_REG_TEXTURE = 6
    D3D10_SHADER_DEBUG_REG_SAMPLER = 7
    D3D10_SHADER_DEBUG_REG_IMMEDIATECBUFFER = 8
    D3D10_SHADER_DEBUG_REG_LITERAL = 9
    D3D10_SHADER_DEBUG_REG_UNUSED = 10
    D3D11_SHADER_DEBUG_REG_INTERFACE_POINTERS = 11
    D3D11_SHADER_DEBUG_REG_UAV = 12
    D3D10_SHADER_DEBUG_REG_FORCE_DWORD = 2147483647
  end

  enum D3D10_SHADER_DEBUG_SCOPETYPE : Int32
    D3D10_SHADER_DEBUG_SCOPE_GLOBAL = 0
    D3D10_SHADER_DEBUG_SCOPE_BLOCK = 1
    D3D10_SHADER_DEBUG_SCOPE_FORLOOP = 2
    D3D10_SHADER_DEBUG_SCOPE_STRUCT = 3
    D3D10_SHADER_DEBUG_SCOPE_FUNC_PARAMS = 4
    D3D10_SHADER_DEBUG_SCOPE_STATEBLOCK = 5
    D3D10_SHADER_DEBUG_SCOPE_NAMESPACE = 6
    D3D10_SHADER_DEBUG_SCOPE_ANNOTATION = 7
    D3D10_SHADER_DEBUG_SCOPE_FORCE_DWORD = 2147483647
  end

  enum D3D10_SHADER_DEBUG_VARTYPE : Int32
    D3D10_SHADER_DEBUG_VAR_VARIABLE = 0
    D3D10_SHADER_DEBUG_VAR_FUNCTION = 1
    D3D10_SHADER_DEBUG_VAR_FORCE_DWORD = 2147483647
  end

  union D3D10_BUFFER_SRV_Anonymous1_e__Union
    first_element : UInt32
    element_offset : UInt32
  end
  union D3D10_BUFFER_SRV_Anonymous2_e__Union
    num_elements : UInt32
    element_width : UInt32
  end
  union D3D10_SHADER_RESOURCE_VIEW_DESC_Anonymous_e__Union
    buffer : D3D10_BUFFER_SRV
    texture1_d : D3D10_TEX1D_SRV
    texture1_d_array : D3D10_TEX1D_ARRAY_SRV
    texture2_d : D3D10_TEX2D_SRV
    texture2_d_array : D3D10_TEX2D_ARRAY_SRV
    texture2_dms : D3D10_TEX2DMS_SRV
    texture2_dms_array : D3D10_TEX2DMS_ARRAY_SRV
    texture3_d : D3D10_TEX3D_SRV
    texture_cube : D3D10_TEXCUBE_SRV
  end
  union D3D10_BUFFER_RTV_Anonymous2_e__Union
    num_elements : UInt32
    element_width : UInt32
  end
  union D3D10_BUFFER_RTV_Anonymous1_e__Union
    first_element : UInt32
    element_offset : UInt32
  end
  union D3D10_RENDER_TARGET_VIEW_DESC_Anonymous_e__Union
    buffer : D3D10_BUFFER_RTV
    texture1_d : D3D10_TEX1D_RTV
    texture1_d_array : D3D10_TEX1D_ARRAY_RTV
    texture2_d : D3D10_TEX2D_RTV
    texture2_d_array : D3D10_TEX2D_ARRAY_RTV
    texture2_dms : D3D10_TEX2DMS_RTV
    texture2_dms_array : D3D10_TEX2DMS_ARRAY_RTV
    texture3_d : D3D10_TEX3D_RTV
  end
  union D3D10_DEPTH_STENCIL_VIEW_DESC_Anonymous_e__Union
    texture1_d : D3D10_TEX1D_DSV
    texture1_d_array : D3D10_TEX1D_ARRAY_DSV
    texture2_d : D3D10_TEX2D_DSV
    texture2_d_array : D3D10_TEX2D_ARRAY_DSV
    texture2_dms : D3D10_TEX2DMS_DSV
    texture2_dms_array : D3D10_TEX2DMS_ARRAY_DSV
  end
  union D3D10_SHADER_RESOURCE_VIEW_DESC1_Anonymous_e__Union
    buffer : D3D10_BUFFER_SRV
    texture1_d : D3D10_TEX1D_SRV
    texture1_d_array : D3D10_TEX1D_ARRAY_SRV
    texture2_d : D3D10_TEX2D_SRV
    texture2_d_array : D3D10_TEX2D_ARRAY_SRV
    texture2_dms : D3D10_TEX2DMS_SRV
    texture2_dms_array : D3D10_TEX2DMS_ARRAY_SRV
    texture3_d : D3D10_TEX3D_SRV
    texture_cube : D3D10_TEXCUBE_SRV
    texture_cube_array : D3D10_TEXCUBE_ARRAY_SRV1
  end

  struct D3D10_INPUT_ELEMENT_DESC
    semantic_name : PSTR
    semantic_index : UInt32
    format : DXGI_FORMAT
    input_slot : UInt32
    aligned_byte_offset : UInt32
    input_slot_class : D3D10_INPUT_CLASSIFICATION
    instance_data_step_rate : UInt32
  end
  struct D3D10_SO_DECLARATION_ENTRY
    semantic_name : PSTR
    semantic_index : UInt32
    start_component : UInt8
    component_count : UInt8
    output_slot : UInt8
  end
  struct D3D10_VIEWPORT
    top_left_x : Int32
    top_left_y : Int32
    width : UInt32
    height : UInt32
    min_depth : Float32
    max_depth : Float32
  end
  struct D3D10_BOX
    left : UInt32
    top : UInt32
    front : UInt32
    right : UInt32
    bottom : UInt32
    back : UInt32
  end
  struct D3D10_DEPTH_STENCILOP_DESC
    stencil_fail_op : D3D10_STENCIL_OP
    stencil_depth_fail_op : D3D10_STENCIL_OP
    stencil_pass_op : D3D10_STENCIL_OP
    stencil_func : D3D10_COMPARISON_FUNC
  end
  struct D3D10_DEPTH_STENCIL_DESC
    depth_enable : LibC::BOOL
    depth_write_mask : D3D10_DEPTH_WRITE_MASK
    depth_func : D3D10_COMPARISON_FUNC
    stencil_enable : LibC::BOOL
    stencil_read_mask : UInt8
    stencil_write_mask : UInt8
    front_face : D3D10_DEPTH_STENCILOP_DESC
    back_face : D3D10_DEPTH_STENCILOP_DESC
  end
  struct D3D10_BLEND_DESC
    alpha_to_coverage_enable : LibC::BOOL
    blend_enable : LibC::BOOL[8]*
    src_blend : D3D10_BLEND
    dest_blend : D3D10_BLEND
    blend_op : D3D10_BLEND_OP
    src_blend_alpha : D3D10_BLEND
    dest_blend_alpha : D3D10_BLEND
    blend_op_alpha : D3D10_BLEND_OP
    render_target_write_mask : UInt8[8]*
  end
  struct D3D10_RASTERIZER_DESC
    fill_mode : D3D10_FILL_MODE
    cull_mode : D3D10_CULL_MODE
    front_counter_clockwise : LibC::BOOL
    depth_bias : Int32
    depth_bias_clamp : Float32
    slope_scaled_depth_bias : Float32
    depth_clip_enable : LibC::BOOL
    scissor_enable : LibC::BOOL
    multisample_enable : LibC::BOOL
    antialiased_line_enable : LibC::BOOL
  end
  struct D3D10_SUBRESOURCE_DATA
    p_sys_mem : Void*
    sys_mem_pitch : UInt32
    sys_mem_slice_pitch : UInt32
  end
  struct D3D10_BUFFER_DESC
    byte_width : UInt32
    usage : D3D10_USAGE
    bind_flags : UInt32
    cpu_access_flags : UInt32
    misc_flags : UInt32
  end
  struct D3D10_TEXTURE1D_DESC
    width : UInt32
    mip_levels : UInt32
    array_size : UInt32
    format : DXGI_FORMAT
    usage : D3D10_USAGE
    bind_flags : UInt32
    cpu_access_flags : UInt32
    misc_flags : UInt32
  end
  struct D3D10_TEXTURE2D_DESC
    width : UInt32
    height : UInt32
    mip_levels : UInt32
    array_size : UInt32
    format : DXGI_FORMAT
    sample_desc : DXGI_SAMPLE_DESC
    usage : D3D10_USAGE
    bind_flags : UInt32
    cpu_access_flags : UInt32
    misc_flags : UInt32
  end
  struct D3D10_MAPPED_TEXTURE2D
    p_data : Void*
    row_pitch : UInt32
  end
  struct D3D10_TEXTURE3D_DESC
    width : UInt32
    height : UInt32
    depth : UInt32
    mip_levels : UInt32
    format : DXGI_FORMAT
    usage : D3D10_USAGE
    bind_flags : UInt32
    cpu_access_flags : UInt32
    misc_flags : UInt32
  end
  struct D3D10_MAPPED_TEXTURE3D
    p_data : Void*
    row_pitch : UInt32
    depth_pitch : UInt32
  end
  struct D3D10_BUFFER_SRV
    anonymous1 : D3D10_BUFFER_SRV_Anonymous1_e__Union
    anonymous2 : D3D10_BUFFER_SRV_Anonymous2_e__Union
  end
  struct D3D10_TEX1D_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
  end
  struct D3D10_TEX1D_ARRAY_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D10_TEX2D_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
  end
  struct D3D10_TEX2D_ARRAY_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D10_TEX3D_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
  end
  struct D3D10_TEXCUBE_SRV
    most_detailed_mip : UInt32
    mip_levels : UInt32
  end
  struct D3D10_TEX2DMS_SRV
    unused_field_nothing_to_define : UInt32
  end
  struct D3D10_TEX2DMS_ARRAY_SRV
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D10_SHADER_RESOURCE_VIEW_DESC
    format : DXGI_FORMAT
    view_dimension : D3D_SRV_DIMENSION
    anonymous : D3D10_SHADER_RESOURCE_VIEW_DESC_Anonymous_e__Union
  end
  struct D3D10_BUFFER_RTV
    anonymous1 : D3D10_BUFFER_RTV_Anonymous1_e__Union
    anonymous2 : D3D10_BUFFER_RTV_Anonymous2_e__Union
  end
  struct D3D10_TEX1D_RTV
    mip_slice : UInt32
  end
  struct D3D10_TEX1D_ARRAY_RTV
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D10_TEX2D_RTV
    mip_slice : UInt32
  end
  struct D3D10_TEX2DMS_RTV
    unused_field_nothing_to_define : UInt32
  end
  struct D3D10_TEX2D_ARRAY_RTV
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D10_TEX2DMS_ARRAY_RTV
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D10_TEX3D_RTV
    mip_slice : UInt32
    first_w_slice : UInt32
    w_size : UInt32
  end
  struct D3D10_RENDER_TARGET_VIEW_DESC
    format : DXGI_FORMAT
    view_dimension : D3D10_RTV_DIMENSION
    anonymous : D3D10_RENDER_TARGET_VIEW_DESC_Anonymous_e__Union
  end
  struct D3D10_TEX1D_DSV
    mip_slice : UInt32
  end
  struct D3D10_TEX1D_ARRAY_DSV
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D10_TEX2D_DSV
    mip_slice : UInt32
  end
  struct D3D10_TEX2D_ARRAY_DSV
    mip_slice : UInt32
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D10_TEX2DMS_DSV
    unused_field_nothing_to_define : UInt32
  end
  struct D3D10_TEX2DMS_ARRAY_DSV
    first_array_slice : UInt32
    array_size : UInt32
  end
  struct D3D10_DEPTH_STENCIL_VIEW_DESC
    format : DXGI_FORMAT
    view_dimension : D3D10_DSV_DIMENSION
    anonymous : D3D10_DEPTH_STENCIL_VIEW_DESC_Anonymous_e__Union
  end
  struct D3D10_SAMPLER_DESC
    filter : D3D10_FILTER
    address_u : D3D10_TEXTURE_ADDRESS_MODE
    address_v : D3D10_TEXTURE_ADDRESS_MODE
    address_w : D3D10_TEXTURE_ADDRESS_MODE
    mip_lod_bias : Float32
    max_anisotropy : UInt32
    comparison_func : D3D10_COMPARISON_FUNC
    border_color : Float32[4]*
    min_lod : Float32
    max_lod : Float32
  end
  struct D3D10_QUERY_DESC
    query : D3D10_QUERY
    misc_flags : UInt32
  end
  struct D3D10_QUERY_DATA_TIMESTAMP_DISJOINT
    frequency : UInt64
    disjoint : LibC::BOOL
  end
  struct D3D10_QUERY_DATA_PIPELINE_STATISTICS
    ia_vertices : UInt64
    ia_primitives : UInt64
    vs_invocations : UInt64
    gs_invocations : UInt64
    gs_primitives : UInt64
    c_invocations : UInt64
    c_primitives : UInt64
    ps_invocations : UInt64
  end
  struct D3D10_QUERY_DATA_SO_STATISTICS
    num_primitives_written : UInt64
    primitives_storage_needed : UInt64
  end
  struct D3D10_COUNTER_DESC
    counter : D3D10_COUNTER
    misc_flags : UInt32
  end
  struct D3D10_COUNTER_INFO
    last_device_dependent_counter : D3D10_COUNTER
    num_simultaneous_counters : UInt32
    num_detectable_parallel_units : UInt8
  end
  struct D3D10_MESSAGE
    category : D3D10_MESSAGE_CATEGORY
    severity : D3D10_MESSAGE_SEVERITY
    id : D3D10_MESSAGE_ID
    p_description : UInt8*
    description_byte_length : LibC::UINT_PTR
  end
  struct D3D10_INFO_QUEUE_FILTER_DESC
    num_categories : UInt32
    p_category_list : D3D10_MESSAGE_CATEGORY*
    num_severities : UInt32
    p_severity_list : D3D10_MESSAGE_SEVERITY*
    num_i_ds : UInt32
    p_id_list : D3D10_MESSAGE_ID*
  end
  struct D3D10_INFO_QUEUE_FILTER
    allow_list : D3D10_INFO_QUEUE_FILTER_DESC
    deny_list : D3D10_INFO_QUEUE_FILTER_DESC
  end
  struct D3D10_SHADER_DESC
    version : UInt32
    creator : PSTR
    flags : UInt32
    constant_buffers : UInt32
    bound_resources : UInt32
    input_parameters : UInt32
    output_parameters : UInt32
    instruction_count : UInt32
    temp_register_count : UInt32
    temp_array_count : UInt32
    def_count : UInt32
    dcl_count : UInt32
    texture_normal_instructions : UInt32
    texture_load_instructions : UInt32
    texture_comp_instructions : UInt32
    texture_bias_instructions : UInt32
    texture_gradient_instructions : UInt32
    float_instruction_count : UInt32
    int_instruction_count : UInt32
    uint_instruction_count : UInt32
    static_flow_control_count : UInt32
    dynamic_flow_control_count : UInt32
    macro_instruction_count : UInt32
    array_instruction_count : UInt32
    cut_instruction_count : UInt32
    emit_instruction_count : UInt32
    gs_output_topology : D3D_PRIMITIVE_TOPOLOGY
    gs_max_output_vertex_count : UInt32
  end
  struct D3D10_SHADER_BUFFER_DESC
    name : PSTR
    type : D3D_CBUFFER_TYPE
    variables : UInt32
    size : UInt32
    u_flags : UInt32
  end
  struct D3D10_SHADER_VARIABLE_DESC
    name : PSTR
    start_offset : UInt32
    size : UInt32
    u_flags : UInt32
    default_value : Void*
  end
  struct D3D10_SHADER_TYPE_DESC
    class : D3D_SHADER_VARIABLE_CLASS
    type : D3D_SHADER_VARIABLE_TYPE
    rows : UInt32
    columns : UInt32
    elements : UInt32
    members : UInt32
    offset : UInt32
  end
  struct D3D10_SHADER_INPUT_BIND_DESC
    name : PSTR
    type : D3D_SHADER_INPUT_TYPE
    bind_point : UInt32
    bind_count : UInt32
    u_flags : UInt32
    return_type : D3D_RESOURCE_RETURN_TYPE
    dimension : D3D_SRV_DIMENSION
    num_samples : UInt32
  end
  struct D3D10_SIGNATURE_PARAMETER_DESC
    semantic_name : PSTR
    semantic_index : UInt32
    register : UInt32
    system_value_type : D3D_NAME
    component_type : D3D_REGISTER_COMPONENT_TYPE
    mask : UInt8
    read_write_mask : UInt8
  end
  struct D3D10_STATE_BLOCK_MASK
    vs : UInt8
    vs_samplers : UInt8[2]*
    vs_shader_resources : UInt8[16]*
    vs_constant_buffers : UInt8[2]*
    gs : UInt8
    gs_samplers : UInt8[2]*
    gs_shader_resources : UInt8[16]*
    gs_constant_buffers : UInt8[2]*
    ps : UInt8
    ps_samplers : UInt8[2]*
    ps_shader_resources : UInt8[16]*
    ps_constant_buffers : UInt8[2]*
    ia_vertex_buffers : UInt8[2]*
    ia_index_buffer : UInt8
    ia_input_layout : UInt8
    ia_primitive_topology : UInt8
    om_render_targets : UInt8
    om_depth_stencil_state : UInt8
    om_blend_state : UInt8
    rs_viewports : UInt8
    rs_scissor_rects : UInt8
    rs_rasterizer_state : UInt8
    so_buffers : UInt8
    predication : UInt8
  end
  struct D3D10_EFFECT_TYPE_DESC
    type_name : PSTR
    class : D3D_SHADER_VARIABLE_CLASS
    type : D3D_SHADER_VARIABLE_TYPE
    elements : UInt32
    members : UInt32
    rows : UInt32
    columns : UInt32
    packed_size : UInt32
    unpacked_size : UInt32
    stride : UInt32
  end
  struct D3D10_EFFECT_VARIABLE_DESC
    name : PSTR
    semantic : PSTR
    flags : UInt32
    annotations : UInt32
    buffer_offset : UInt32
    explicit_bind_point : UInt32
  end
  struct D3D10_EFFECT_SHADER_DESC
    p_input_signature : UInt8*
    is_inline : LibC::BOOL
    p_bytecode : UInt8*
    bytecode_length : UInt32
    so_decl : PSTR
    num_input_signature_entries : UInt32
    num_output_signature_entries : UInt32
  end
  struct D3D10_PASS_DESC
    name : PSTR
    annotations : UInt32
    p_ia_input_signature : UInt8*
    ia_input_signature_size : LibC::UINT_PTR
    stencil_ref : UInt32
    sample_mask : UInt32
    blend_factor : Float32[4]*
  end
  struct D3D10_PASS_SHADER_DESC
    p_shader_variable : ID3D10EffectShaderVariable
    shader_index : UInt32
  end
  struct D3D10_TECHNIQUE_DESC
    name : PSTR
    passes : UInt32
    annotations : UInt32
  end
  struct D3D10_EFFECT_DESC
    is_child_effect : LibC::BOOL
    constant_buffers : UInt32
    shared_constant_buffers : UInt32
    global_variables : UInt32
    shared_global_variables : UInt32
    techniques : UInt32
  end
  struct D3D10_RENDER_TARGET_BLEND_DESC1
    blend_enable : LibC::BOOL
    src_blend : D3D10_BLEND
    dest_blend : D3D10_BLEND
    blend_op : D3D10_BLEND_OP
    src_blend_alpha : D3D10_BLEND
    dest_blend_alpha : D3D10_BLEND
    blend_op_alpha : D3D10_BLEND_OP
    render_target_write_mask : UInt8
  end
  struct D3D10_BLEND_DESC1
    alpha_to_coverage_enable : LibC::BOOL
    independent_blend_enable : LibC::BOOL
    render_target : D3D10_RENDER_TARGET_BLEND_DESC1[8]*
  end
  struct D3D10_TEXCUBE_ARRAY_SRV1
    most_detailed_mip : UInt32
    mip_levels : UInt32
    first2_d_array_face : UInt32
    num_cubes : UInt32
  end
  struct D3D10_SHADER_RESOURCE_VIEW_DESC1
    format : DXGI_FORMAT
    view_dimension : D3D_SRV_DIMENSION
    anonymous : D3D10_SHADER_RESOURCE_VIEW_DESC1_Anonymous_e__Union
  end
  struct D3D10_SHADER_DEBUG_TOKEN_INFO
    file : UInt32
    line : UInt32
    column : UInt32
    token_length : UInt32
    token_id : UInt32
  end
  struct D3D10_SHADER_DEBUG_VAR_INFO
    token_id : UInt32
    type : D3D_SHADER_VARIABLE_TYPE
    register : UInt32
    component : UInt32
    scope_var : UInt32
    scope_var_offset : UInt32
  end
  struct D3D10_SHADER_DEBUG_INPUT_INFO
    var : UInt32
    initial_register_set : D3D10_SHADER_DEBUG_REGTYPE
    initial_bank : UInt32
    initial_register : UInt32
    initial_component : UInt32
    initial_value : UInt32
  end
  struct D3D10_SHADER_DEBUG_SCOPEVAR_INFO
    token_id : UInt32
    var_type : D3D10_SHADER_DEBUG_VARTYPE
    class : D3D_SHADER_VARIABLE_CLASS
    rows : UInt32
    columns : UInt32
    struct_member_scope : UInt32
    u_array_indices : UInt32
    array_elements : UInt32
    array_strides : UInt32
    u_variables : UInt32
    u_first_variable : UInt32
  end
  struct D3D10_SHADER_DEBUG_SCOPE_INFO
    scope_type : D3D10_SHADER_DEBUG_SCOPETYPE
    name : UInt32
    u_name_len : UInt32
    u_variables : UInt32
    variable_data : UInt32
  end
  struct D3D10_SHADER_DEBUG_OUTPUTVAR
    var : UInt32
    u_value_min : UInt32
    u_value_max : UInt32
    i_value_min : Int32
    i_value_max : Int32
    f_value_min : Float32
    f_value_max : Float32
    b_na_n_possible : LibC::BOOL
    b_inf_possible : LibC::BOOL
  end
  struct D3D10_SHADER_DEBUG_OUTPUTREG_INFO
    output_register_set : D3D10_SHADER_DEBUG_REGTYPE
    output_reg : UInt32
    temp_array_reg : UInt32
    output_components : UInt32[4]*
    output_vars : D3D10_SHADER_DEBUG_OUTPUTVAR[4]*
    index_reg : UInt32
    index_comp : UInt32
  end
  struct D3D10_SHADER_DEBUG_INST_INFO
    id : UInt32
    opcode : UInt32
    u_outputs : UInt32
    p_outputs : D3D10_SHADER_DEBUG_OUTPUTREG_INFO[2]*
    token_id : UInt32
    nesting_level : UInt32
    scopes : UInt32
    scope_info : UInt32
    accessed_vars : UInt32
    accessed_vars_info : UInt32
  end
  struct D3D10_SHADER_DEBUG_FILE_INFO
    file_name : UInt32
    file_name_len : UInt32
    file_data : UInt32
    file_len : UInt32
  end
  struct D3D10_SHADER_DEBUG_INFO
    size : UInt32
    creator : UInt32
    entrypoint_name : UInt32
    shader_target : UInt32
    compile_flags : UInt32
    files : UInt32
    file_info : UInt32
    instructions : UInt32
    instruction_info : UInt32
    variables : UInt32
    variable_info : UInt32
    input_variables : UInt32
    input_variable_info : UInt32
    tokens : UInt32
    token_info : UInt32
    scopes : UInt32
    scope_info : UInt32
    scope_variables : UInt32
    scope_variable_info : UInt32
    uint_offset : UInt32
    string_offset : UInt32
  end


  struct ID3D10DeviceChildVTbl
    query_interface : Proc(ID3D10DeviceChild*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10DeviceChild*, UInt32)
    release : Proc(ID3D10DeviceChild*, UInt32)
    get_device : Proc(ID3D10DeviceChild*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10DeviceChild*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10DeviceChild*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10DeviceChild*, Guid*, IUnknown, HRESULT)
  end

  ID3D10DeviceChild_GUID = LibC::GUID.new("9b7e4c00-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10DeviceChild = "9b7e4c00-342c-4106-a19f-4f2704f689f0"
  struct ID3D10DeviceChild
    lpVtbl : ID3D10DeviceChildVTbl*
  end

  struct ID3D10DepthStencilStateVTbl
    query_interface : Proc(ID3D10DepthStencilState*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10DepthStencilState*, UInt32)
    release : Proc(ID3D10DepthStencilState*, UInt32)
    get_device : Proc(ID3D10DepthStencilState*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10DepthStencilState*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10DepthStencilState*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10DepthStencilState*, Guid*, IUnknown, HRESULT)
    get_desc : Proc(ID3D10DepthStencilState*, D3D10_DEPTH_STENCIL_DESC*, Void)
  end

  ID3D10DepthStencilState_GUID = LibC::GUID.new("2b4b1cc8-a4ad-41f8-8322-ca86fc3ec675")
  CLSID_ID3D10DepthStencilState = "2b4b1cc8-a4ad-41f8-8322-ca86fc3ec675"
  struct ID3D10DepthStencilState
    lpVtbl : ID3D10DepthStencilStateVTbl*
  end

  struct ID3D10BlendStateVTbl
    query_interface : Proc(ID3D10BlendState*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10BlendState*, UInt32)
    release : Proc(ID3D10BlendState*, UInt32)
    get_device : Proc(ID3D10BlendState*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10BlendState*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10BlendState*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10BlendState*, Guid*, IUnknown, HRESULT)
    get_desc : Proc(ID3D10BlendState*, D3D10_BLEND_DESC*, Void)
  end

  ID3D10BlendState_GUID = LibC::GUID.new("edad8d19-8a35-4d6d-8566-2ea276cde161")
  CLSID_ID3D10BlendState = "edad8d19-8a35-4d6d-8566-2ea276cde161"
  struct ID3D10BlendState
    lpVtbl : ID3D10BlendStateVTbl*
  end

  struct ID3D10RasterizerStateVTbl
    query_interface : Proc(ID3D10RasterizerState*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10RasterizerState*, UInt32)
    release : Proc(ID3D10RasterizerState*, UInt32)
    get_device : Proc(ID3D10RasterizerState*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10RasterizerState*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10RasterizerState*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10RasterizerState*, Guid*, IUnknown, HRESULT)
    get_desc : Proc(ID3D10RasterizerState*, D3D10_RASTERIZER_DESC*, Void)
  end

  ID3D10RasterizerState_GUID = LibC::GUID.new("a2a07292-89af-4345-be2e-c53d9fbb6e9f")
  CLSID_ID3D10RasterizerState = "a2a07292-89af-4345-be2e-c53d9fbb6e9f"
  struct ID3D10RasterizerState
    lpVtbl : ID3D10RasterizerStateVTbl*
  end

  struct ID3D10ResourceVTbl
    query_interface : Proc(ID3D10Resource*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10Resource*, UInt32)
    release : Proc(ID3D10Resource*, UInt32)
    get_device : Proc(ID3D10Resource*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10Resource*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10Resource*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10Resource*, Guid*, IUnknown, HRESULT)
    get_type : Proc(ID3D10Resource*, D3D10_RESOURCE_DIMENSION*, Void)
    set_eviction_priority : Proc(ID3D10Resource*, UInt32, Void)
    get_eviction_priority : Proc(ID3D10Resource*, UInt32)
  end

  ID3D10Resource_GUID = LibC::GUID.new("9b7e4c01-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10Resource = "9b7e4c01-342c-4106-a19f-4f2704f689f0"
  struct ID3D10Resource
    lpVtbl : ID3D10ResourceVTbl*
  end

  struct ID3D10BufferVTbl
    query_interface : Proc(ID3D10Buffer*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10Buffer*, UInt32)
    release : Proc(ID3D10Buffer*, UInt32)
    get_device : Proc(ID3D10Buffer*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10Buffer*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10Buffer*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10Buffer*, Guid*, IUnknown, HRESULT)
    get_type : Proc(ID3D10Buffer*, D3D10_RESOURCE_DIMENSION*, Void)
    set_eviction_priority : Proc(ID3D10Buffer*, UInt32, Void)
    get_eviction_priority : Proc(ID3D10Buffer*, UInt32)
    map : Proc(ID3D10Buffer*, D3D10_MAP, UInt32, Void**, HRESULT)
    unmap : Proc(ID3D10Buffer*, Void)
    get_desc : Proc(ID3D10Buffer*, D3D10_BUFFER_DESC*, Void)
  end

  ID3D10Buffer_GUID = LibC::GUID.new("9b7e4c02-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10Buffer = "9b7e4c02-342c-4106-a19f-4f2704f689f0"
  struct ID3D10Buffer
    lpVtbl : ID3D10BufferVTbl*
  end

  struct ID3D10Texture1DVTbl
    query_interface : Proc(ID3D10Texture1D*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10Texture1D*, UInt32)
    release : Proc(ID3D10Texture1D*, UInt32)
    get_device : Proc(ID3D10Texture1D*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10Texture1D*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10Texture1D*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10Texture1D*, Guid*, IUnknown, HRESULT)
    get_type : Proc(ID3D10Texture1D*, D3D10_RESOURCE_DIMENSION*, Void)
    set_eviction_priority : Proc(ID3D10Texture1D*, UInt32, Void)
    get_eviction_priority : Proc(ID3D10Texture1D*, UInt32)
    map : Proc(ID3D10Texture1D*, UInt32, D3D10_MAP, UInt32, Void**, HRESULT)
    unmap : Proc(ID3D10Texture1D*, UInt32, Void)
    get_desc : Proc(ID3D10Texture1D*, D3D10_TEXTURE1D_DESC*, Void)
  end

  ID3D10Texture1D_GUID = LibC::GUID.new("9b7e4c03-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10Texture1D = "9b7e4c03-342c-4106-a19f-4f2704f689f0"
  struct ID3D10Texture1D
    lpVtbl : ID3D10Texture1DVTbl*
  end

  struct ID3D10Texture2DVTbl
    query_interface : Proc(ID3D10Texture2D*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10Texture2D*, UInt32)
    release : Proc(ID3D10Texture2D*, UInt32)
    get_device : Proc(ID3D10Texture2D*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10Texture2D*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10Texture2D*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10Texture2D*, Guid*, IUnknown, HRESULT)
    get_type : Proc(ID3D10Texture2D*, D3D10_RESOURCE_DIMENSION*, Void)
    set_eviction_priority : Proc(ID3D10Texture2D*, UInt32, Void)
    get_eviction_priority : Proc(ID3D10Texture2D*, UInt32)
    map : Proc(ID3D10Texture2D*, UInt32, D3D10_MAP, UInt32, D3D10_MAPPED_TEXTURE2D*, HRESULT)
    unmap : Proc(ID3D10Texture2D*, UInt32, Void)
    get_desc : Proc(ID3D10Texture2D*, D3D10_TEXTURE2D_DESC*, Void)
  end

  ID3D10Texture2D_GUID = LibC::GUID.new("9b7e4c04-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10Texture2D = "9b7e4c04-342c-4106-a19f-4f2704f689f0"
  struct ID3D10Texture2D
    lpVtbl : ID3D10Texture2DVTbl*
  end

  struct ID3D10Texture3DVTbl
    query_interface : Proc(ID3D10Texture3D*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10Texture3D*, UInt32)
    release : Proc(ID3D10Texture3D*, UInt32)
    get_device : Proc(ID3D10Texture3D*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10Texture3D*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10Texture3D*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10Texture3D*, Guid*, IUnknown, HRESULT)
    get_type : Proc(ID3D10Texture3D*, D3D10_RESOURCE_DIMENSION*, Void)
    set_eviction_priority : Proc(ID3D10Texture3D*, UInt32, Void)
    get_eviction_priority : Proc(ID3D10Texture3D*, UInt32)
    map : Proc(ID3D10Texture3D*, UInt32, D3D10_MAP, UInt32, D3D10_MAPPED_TEXTURE3D*, HRESULT)
    unmap : Proc(ID3D10Texture3D*, UInt32, Void)
    get_desc : Proc(ID3D10Texture3D*, D3D10_TEXTURE3D_DESC*, Void)
  end

  ID3D10Texture3D_GUID = LibC::GUID.new("9b7e4c05-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10Texture3D = "9b7e4c05-342c-4106-a19f-4f2704f689f0"
  struct ID3D10Texture3D
    lpVtbl : ID3D10Texture3DVTbl*
  end

  struct ID3D10ViewVTbl
    query_interface : Proc(ID3D10View*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10View*, UInt32)
    release : Proc(ID3D10View*, UInt32)
    get_device : Proc(ID3D10View*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10View*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10View*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10View*, Guid*, IUnknown, HRESULT)
    get_resource : Proc(ID3D10View*, ID3D10Resource*, Void)
  end

  ID3D10View_GUID = LibC::GUID.new("c902b03f-60a7-49ba-9936-2a3ab37a7e33")
  CLSID_ID3D10View = "c902b03f-60a7-49ba-9936-2a3ab37a7e33"
  struct ID3D10View
    lpVtbl : ID3D10ViewVTbl*
  end

  struct ID3D10ShaderResourceViewVTbl
    query_interface : Proc(ID3D10ShaderResourceView*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10ShaderResourceView*, UInt32)
    release : Proc(ID3D10ShaderResourceView*, UInt32)
    get_device : Proc(ID3D10ShaderResourceView*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10ShaderResourceView*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10ShaderResourceView*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10ShaderResourceView*, Guid*, IUnknown, HRESULT)
    get_resource : Proc(ID3D10ShaderResourceView*, ID3D10Resource*, Void)
    get_desc : Proc(ID3D10ShaderResourceView*, D3D10_SHADER_RESOURCE_VIEW_DESC*, Void)
  end

  ID3D10ShaderResourceView_GUID = LibC::GUID.new("9b7e4c07-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10ShaderResourceView = "9b7e4c07-342c-4106-a19f-4f2704f689f0"
  struct ID3D10ShaderResourceView
    lpVtbl : ID3D10ShaderResourceViewVTbl*
  end

  struct ID3D10RenderTargetViewVTbl
    query_interface : Proc(ID3D10RenderTargetView*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10RenderTargetView*, UInt32)
    release : Proc(ID3D10RenderTargetView*, UInt32)
    get_device : Proc(ID3D10RenderTargetView*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10RenderTargetView*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10RenderTargetView*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10RenderTargetView*, Guid*, IUnknown, HRESULT)
    get_resource : Proc(ID3D10RenderTargetView*, ID3D10Resource*, Void)
    get_desc : Proc(ID3D10RenderTargetView*, D3D10_RENDER_TARGET_VIEW_DESC*, Void)
  end

  ID3D10RenderTargetView_GUID = LibC::GUID.new("9b7e4c08-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10RenderTargetView = "9b7e4c08-342c-4106-a19f-4f2704f689f0"
  struct ID3D10RenderTargetView
    lpVtbl : ID3D10RenderTargetViewVTbl*
  end

  struct ID3D10DepthStencilViewVTbl
    query_interface : Proc(ID3D10DepthStencilView*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10DepthStencilView*, UInt32)
    release : Proc(ID3D10DepthStencilView*, UInt32)
    get_device : Proc(ID3D10DepthStencilView*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10DepthStencilView*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10DepthStencilView*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10DepthStencilView*, Guid*, IUnknown, HRESULT)
    get_resource : Proc(ID3D10DepthStencilView*, ID3D10Resource*, Void)
    get_desc : Proc(ID3D10DepthStencilView*, D3D10_DEPTH_STENCIL_VIEW_DESC*, Void)
  end

  ID3D10DepthStencilView_GUID = LibC::GUID.new("9b7e4c09-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10DepthStencilView = "9b7e4c09-342c-4106-a19f-4f2704f689f0"
  struct ID3D10DepthStencilView
    lpVtbl : ID3D10DepthStencilViewVTbl*
  end

  struct ID3D10VertexShaderVTbl
    query_interface : Proc(ID3D10VertexShader*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10VertexShader*, UInt32)
    release : Proc(ID3D10VertexShader*, UInt32)
    get_device : Proc(ID3D10VertexShader*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10VertexShader*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10VertexShader*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10VertexShader*, Guid*, IUnknown, HRESULT)
  end

  ID3D10VertexShader_GUID = LibC::GUID.new("9b7e4c0a-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10VertexShader = "9b7e4c0a-342c-4106-a19f-4f2704f689f0"
  struct ID3D10VertexShader
    lpVtbl : ID3D10VertexShaderVTbl*
  end

  struct ID3D10GeometryShaderVTbl
    query_interface : Proc(ID3D10GeometryShader*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10GeometryShader*, UInt32)
    release : Proc(ID3D10GeometryShader*, UInt32)
    get_device : Proc(ID3D10GeometryShader*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10GeometryShader*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10GeometryShader*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10GeometryShader*, Guid*, IUnknown, HRESULT)
  end

  ID3D10GeometryShader_GUID = LibC::GUID.new("6316be88-54cd-4040-ab44-20461bc81f68")
  CLSID_ID3D10GeometryShader = "6316be88-54cd-4040-ab44-20461bc81f68"
  struct ID3D10GeometryShader
    lpVtbl : ID3D10GeometryShaderVTbl*
  end

  struct ID3D10PixelShaderVTbl
    query_interface : Proc(ID3D10PixelShader*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10PixelShader*, UInt32)
    release : Proc(ID3D10PixelShader*, UInt32)
    get_device : Proc(ID3D10PixelShader*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10PixelShader*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10PixelShader*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10PixelShader*, Guid*, IUnknown, HRESULT)
  end

  ID3D10PixelShader_GUID = LibC::GUID.new("4968b601-9d00-4cde-8346-8e7f675819b6")
  CLSID_ID3D10PixelShader = "4968b601-9d00-4cde-8346-8e7f675819b6"
  struct ID3D10PixelShader
    lpVtbl : ID3D10PixelShaderVTbl*
  end

  struct ID3D10InputLayoutVTbl
    query_interface : Proc(ID3D10InputLayout*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10InputLayout*, UInt32)
    release : Proc(ID3D10InputLayout*, UInt32)
    get_device : Proc(ID3D10InputLayout*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10InputLayout*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10InputLayout*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10InputLayout*, Guid*, IUnknown, HRESULT)
  end

  ID3D10InputLayout_GUID = LibC::GUID.new("9b7e4c0b-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10InputLayout = "9b7e4c0b-342c-4106-a19f-4f2704f689f0"
  struct ID3D10InputLayout
    lpVtbl : ID3D10InputLayoutVTbl*
  end

  struct ID3D10SamplerStateVTbl
    query_interface : Proc(ID3D10SamplerState*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10SamplerState*, UInt32)
    release : Proc(ID3D10SamplerState*, UInt32)
    get_device : Proc(ID3D10SamplerState*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10SamplerState*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10SamplerState*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10SamplerState*, Guid*, IUnknown, HRESULT)
    get_desc : Proc(ID3D10SamplerState*, D3D10_SAMPLER_DESC*, Void)
  end

  ID3D10SamplerState_GUID = LibC::GUID.new("9b7e4c0c-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10SamplerState = "9b7e4c0c-342c-4106-a19f-4f2704f689f0"
  struct ID3D10SamplerState
    lpVtbl : ID3D10SamplerStateVTbl*
  end

  struct ID3D10AsynchronousVTbl
    query_interface : Proc(ID3D10Asynchronous*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10Asynchronous*, UInt32)
    release : Proc(ID3D10Asynchronous*, UInt32)
    get_device : Proc(ID3D10Asynchronous*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10Asynchronous*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10Asynchronous*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10Asynchronous*, Guid*, IUnknown, HRESULT)
    rbegin : Proc(ID3D10Asynchronous*, Void)
    rend : Proc(ID3D10Asynchronous*, Void)
    get_data : Proc(ID3D10Asynchronous*, Void*, UInt32, UInt32, HRESULT)
    get_data_size : Proc(ID3D10Asynchronous*, UInt32)
  end

  ID3D10Asynchronous_GUID = LibC::GUID.new("9b7e4c0d-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10Asynchronous = "9b7e4c0d-342c-4106-a19f-4f2704f689f0"
  struct ID3D10Asynchronous
    lpVtbl : ID3D10AsynchronousVTbl*
  end

  struct ID3D10QueryVTbl
    query_interface : Proc(ID3D10Query*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10Query*, UInt32)
    release : Proc(ID3D10Query*, UInt32)
    get_device : Proc(ID3D10Query*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10Query*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10Query*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10Query*, Guid*, IUnknown, HRESULT)
    rbegin : Proc(ID3D10Query*, Void)
    rend : Proc(ID3D10Query*, Void)
    get_data : Proc(ID3D10Query*, Void*, UInt32, UInt32, HRESULT)
    get_data_size : Proc(ID3D10Query*, UInt32)
    get_desc : Proc(ID3D10Query*, D3D10_QUERY_DESC*, Void)
  end

  ID3D10Query_GUID = LibC::GUID.new("9b7e4c0e-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10Query = "9b7e4c0e-342c-4106-a19f-4f2704f689f0"
  struct ID3D10Query
    lpVtbl : ID3D10QueryVTbl*
  end

  struct ID3D10PredicateVTbl
    query_interface : Proc(ID3D10Predicate*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10Predicate*, UInt32)
    release : Proc(ID3D10Predicate*, UInt32)
    get_device : Proc(ID3D10Predicate*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10Predicate*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10Predicate*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10Predicate*, Guid*, IUnknown, HRESULT)
    rbegin : Proc(ID3D10Predicate*, Void)
    rend : Proc(ID3D10Predicate*, Void)
    get_data : Proc(ID3D10Predicate*, Void*, UInt32, UInt32, HRESULT)
    get_data_size : Proc(ID3D10Predicate*, UInt32)
    get_desc : Proc(ID3D10Predicate*, D3D10_QUERY_DESC*, Void)
  end

  ID3D10Predicate_GUID = LibC::GUID.new("9b7e4c10-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10Predicate = "9b7e4c10-342c-4106-a19f-4f2704f689f0"
  struct ID3D10Predicate
    lpVtbl : ID3D10PredicateVTbl*
  end

  struct ID3D10CounterVTbl
    query_interface : Proc(ID3D10Counter*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10Counter*, UInt32)
    release : Proc(ID3D10Counter*, UInt32)
    get_device : Proc(ID3D10Counter*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10Counter*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10Counter*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10Counter*, Guid*, IUnknown, HRESULT)
    rbegin : Proc(ID3D10Counter*, Void)
    rend : Proc(ID3D10Counter*, Void)
    get_data : Proc(ID3D10Counter*, Void*, UInt32, UInt32, HRESULT)
    get_data_size : Proc(ID3D10Counter*, UInt32)
    get_desc : Proc(ID3D10Counter*, D3D10_COUNTER_DESC*, Void)
  end

  ID3D10Counter_GUID = LibC::GUID.new("9b7e4c11-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10Counter = "9b7e4c11-342c-4106-a19f-4f2704f689f0"
  struct ID3D10Counter
    lpVtbl : ID3D10CounterVTbl*
  end

  struct ID3D10DeviceVTbl
    query_interface : Proc(ID3D10Device*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10Device*, UInt32)
    release : Proc(ID3D10Device*, UInt32)
    vs_set_constant_buffers : Proc(ID3D10Device*, UInt32, UInt32, ID3D10Buffer*, Void)
    ps_set_shader_resources : Proc(ID3D10Device*, UInt32, UInt32, ID3D10ShaderResourceView*, Void)
    ps_set_shader : Proc(ID3D10Device*, ID3D10PixelShader, Void)
    ps_set_samplers : Proc(ID3D10Device*, UInt32, UInt32, ID3D10SamplerState*, Void)
    vs_set_shader : Proc(ID3D10Device*, ID3D10VertexShader, Void)
    draw_indexed : Proc(ID3D10Device*, UInt32, UInt32, Int32, Void)
    draw : Proc(ID3D10Device*, UInt32, UInt32, Void)
    ps_set_constant_buffers : Proc(ID3D10Device*, UInt32, UInt32, ID3D10Buffer*, Void)
    ia_set_input_layout : Proc(ID3D10Device*, ID3D10InputLayout, Void)
    ia_set_vertex_buffers : Proc(ID3D10Device*, UInt32, UInt32, ID3D10Buffer*, UInt32*, UInt32*, Void)
    ia_set_index_buffer : Proc(ID3D10Device*, ID3D10Buffer, DXGI_FORMAT, UInt32, Void)
    draw_indexed_instanced : Proc(ID3D10Device*, UInt32, UInt32, UInt32, Int32, UInt32, Void)
    draw_instanced : Proc(ID3D10Device*, UInt32, UInt32, UInt32, UInt32, Void)
    gs_set_constant_buffers : Proc(ID3D10Device*, UInt32, UInt32, ID3D10Buffer*, Void)
    gs_set_shader : Proc(ID3D10Device*, ID3D10GeometryShader, Void)
    ia_set_primitive_topology : Proc(ID3D10Device*, D3D_PRIMITIVE_TOPOLOGY, Void)
    vs_set_shader_resources : Proc(ID3D10Device*, UInt32, UInt32, ID3D10ShaderResourceView*, Void)
    vs_set_samplers : Proc(ID3D10Device*, UInt32, UInt32, ID3D10SamplerState*, Void)
    set_predication : Proc(ID3D10Device*, ID3D10Predicate, LibC::BOOL, Void)
    gs_set_shader_resources : Proc(ID3D10Device*, UInt32, UInt32, ID3D10ShaderResourceView*, Void)
    gs_set_samplers : Proc(ID3D10Device*, UInt32, UInt32, ID3D10SamplerState*, Void)
    om_set_render_targets : Proc(ID3D10Device*, UInt32, ID3D10RenderTargetView*, ID3D10DepthStencilView, Void)
    om_set_blend_state : Proc(ID3D10Device*, ID3D10BlendState, Float32*, UInt32, Void)
    om_set_depth_stencil_state : Proc(ID3D10Device*, ID3D10DepthStencilState, UInt32, Void)
    so_set_targets : Proc(ID3D10Device*, UInt32, ID3D10Buffer*, UInt32*, Void)
    draw_auto : Proc(ID3D10Device*, Void)
    rs_set_state : Proc(ID3D10Device*, ID3D10RasterizerState, Void)
    rs_set_viewports : Proc(ID3D10Device*, UInt32, D3D10_VIEWPORT*, Void)
    rs_set_scissor_rects : Proc(ID3D10Device*, UInt32, RECT*, Void)
    copy_subresource_region : Proc(ID3D10Device*, ID3D10Resource, UInt32, UInt32, UInt32, UInt32, ID3D10Resource, UInt32, D3D10_BOX*, Void)
    copy_resource : Proc(ID3D10Device*, ID3D10Resource, ID3D10Resource, Void)
    update_subresource : Proc(ID3D10Device*, ID3D10Resource, UInt32, D3D10_BOX*, Void*, UInt32, UInt32, Void)
    clear_render_target_view : Proc(ID3D10Device*, ID3D10RenderTargetView, Float32*, Void)
    clear_depth_stencil_view : Proc(ID3D10Device*, ID3D10DepthStencilView, UInt32, Float32, UInt8, Void)
    generate_mips : Proc(ID3D10Device*, ID3D10ShaderResourceView, Void)
    resolve_subresource : Proc(ID3D10Device*, ID3D10Resource, UInt32, ID3D10Resource, UInt32, DXGI_FORMAT, Void)
    vs_get_constant_buffers : Proc(ID3D10Device*, UInt32, UInt32, ID3D10Buffer*, Void)
    ps_get_shader_resources : Proc(ID3D10Device*, UInt32, UInt32, ID3D10ShaderResourceView*, Void)
    ps_get_shader : Proc(ID3D10Device*, ID3D10PixelShader*, Void)
    ps_get_samplers : Proc(ID3D10Device*, UInt32, UInt32, ID3D10SamplerState*, Void)
    vs_get_shader : Proc(ID3D10Device*, ID3D10VertexShader*, Void)
    ps_get_constant_buffers : Proc(ID3D10Device*, UInt32, UInt32, ID3D10Buffer*, Void)
    ia_get_input_layout : Proc(ID3D10Device*, ID3D10InputLayout*, Void)
    ia_get_vertex_buffers : Proc(ID3D10Device*, UInt32, UInt32, ID3D10Buffer*, UInt32*, UInt32*, Void)
    ia_get_index_buffer : Proc(ID3D10Device*, ID3D10Buffer*, DXGI_FORMAT*, UInt32*, Void)
    gs_get_constant_buffers : Proc(ID3D10Device*, UInt32, UInt32, ID3D10Buffer*, Void)
    gs_get_shader : Proc(ID3D10Device*, ID3D10GeometryShader*, Void)
    ia_get_primitive_topology : Proc(ID3D10Device*, D3D_PRIMITIVE_TOPOLOGY*, Void)
    vs_get_shader_resources : Proc(ID3D10Device*, UInt32, UInt32, ID3D10ShaderResourceView*, Void)
    vs_get_samplers : Proc(ID3D10Device*, UInt32, UInt32, ID3D10SamplerState*, Void)
    get_predication : Proc(ID3D10Device*, ID3D10Predicate*, LibC::BOOL*, Void)
    gs_get_shader_resources : Proc(ID3D10Device*, UInt32, UInt32, ID3D10ShaderResourceView*, Void)
    gs_get_samplers : Proc(ID3D10Device*, UInt32, UInt32, ID3D10SamplerState*, Void)
    om_get_render_targets : Proc(ID3D10Device*, UInt32, ID3D10RenderTargetView*, ID3D10DepthStencilView*, Void)
    om_get_blend_state : Proc(ID3D10Device*, ID3D10BlendState*, Float32*, UInt32*, Void)
    om_get_depth_stencil_state : Proc(ID3D10Device*, ID3D10DepthStencilState*, UInt32*, Void)
    so_get_targets : Proc(ID3D10Device*, UInt32, ID3D10Buffer*, UInt32*, Void)
    rs_get_state : Proc(ID3D10Device*, ID3D10RasterizerState*, Void)
    rs_get_viewports : Proc(ID3D10Device*, UInt32*, D3D10_VIEWPORT*, Void)
    rs_get_scissor_rects : Proc(ID3D10Device*, UInt32*, RECT*, Void)
    get_device_removed_reason : Proc(ID3D10Device*, HRESULT)
    set_exception_mode : Proc(ID3D10Device*, UInt32, HRESULT)
    get_exception_mode : Proc(ID3D10Device*, UInt32)
    get_private_data : Proc(ID3D10Device*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10Device*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10Device*, Guid*, IUnknown, HRESULT)
    clear_state : Proc(ID3D10Device*, Void)
    flush : Proc(ID3D10Device*, Void)
    create_buffer : Proc(ID3D10Device*, D3D10_BUFFER_DESC*, D3D10_SUBRESOURCE_DATA*, ID3D10Buffer*, HRESULT)
    create_texture1_d : Proc(ID3D10Device*, D3D10_TEXTURE1D_DESC*, D3D10_SUBRESOURCE_DATA*, ID3D10Texture1D*, HRESULT)
    create_texture2_d : Proc(ID3D10Device*, D3D10_TEXTURE2D_DESC*, D3D10_SUBRESOURCE_DATA*, ID3D10Texture2D*, HRESULT)
    create_texture3_d : Proc(ID3D10Device*, D3D10_TEXTURE3D_DESC*, D3D10_SUBRESOURCE_DATA*, ID3D10Texture3D*, HRESULT)
    create_shader_resource_view : Proc(ID3D10Device*, ID3D10Resource, D3D10_SHADER_RESOURCE_VIEW_DESC*, ID3D10ShaderResourceView*, HRESULT)
    create_render_target_view : Proc(ID3D10Device*, ID3D10Resource, D3D10_RENDER_TARGET_VIEW_DESC*, ID3D10RenderTargetView*, HRESULT)
    create_depth_stencil_view : Proc(ID3D10Device*, ID3D10Resource, D3D10_DEPTH_STENCIL_VIEW_DESC*, ID3D10DepthStencilView*, HRESULT)
    create_input_layout : Proc(ID3D10Device*, D3D10_INPUT_ELEMENT_DESC*, UInt32, Void*, LibC::UINT_PTR, ID3D10InputLayout*, HRESULT)
    create_vertex_shader : Proc(ID3D10Device*, Void*, LibC::UINT_PTR, ID3D10VertexShader*, HRESULT)
    create_geometry_shader : Proc(ID3D10Device*, Void*, LibC::UINT_PTR, ID3D10GeometryShader*, HRESULT)
    create_geometry_shader_with_stream_output : Proc(ID3D10Device*, Void*, LibC::UINT_PTR, D3D10_SO_DECLARATION_ENTRY*, UInt32, UInt32, ID3D10GeometryShader*, HRESULT)
    create_pixel_shader : Proc(ID3D10Device*, Void*, LibC::UINT_PTR, ID3D10PixelShader*, HRESULT)
    create_blend_state : Proc(ID3D10Device*, D3D10_BLEND_DESC*, ID3D10BlendState*, HRESULT)
    create_depth_stencil_state : Proc(ID3D10Device*, D3D10_DEPTH_STENCIL_DESC*, ID3D10DepthStencilState*, HRESULT)
    create_rasterizer_state : Proc(ID3D10Device*, D3D10_RASTERIZER_DESC*, ID3D10RasterizerState*, HRESULT)
    create_sampler_state : Proc(ID3D10Device*, D3D10_SAMPLER_DESC*, ID3D10SamplerState*, HRESULT)
    create_query : Proc(ID3D10Device*, D3D10_QUERY_DESC*, ID3D10Query*, HRESULT)
    create_predicate : Proc(ID3D10Device*, D3D10_QUERY_DESC*, ID3D10Predicate*, HRESULT)
    create_counter : Proc(ID3D10Device*, D3D10_COUNTER_DESC*, ID3D10Counter*, HRESULT)
    check_format_support : Proc(ID3D10Device*, DXGI_FORMAT, UInt32*, HRESULT)
    check_multisample_quality_levels : Proc(ID3D10Device*, DXGI_FORMAT, UInt32, UInt32*, HRESULT)
    check_counter_info : Proc(ID3D10Device*, D3D10_COUNTER_INFO*, Void)
    check_counter : Proc(ID3D10Device*, D3D10_COUNTER_DESC*, D3D10_COUNTER_TYPE*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, HRESULT)
    get_creation_flags : Proc(ID3D10Device*, UInt32)
    open_shared_resource : Proc(ID3D10Device*, LibC::HANDLE, Guid*, Void**, HRESULT)
    set_text_filter_size : Proc(ID3D10Device*, UInt32, UInt32, Void)
    get_text_filter_size : Proc(ID3D10Device*, UInt32*, UInt32*, Void)
  end

  ID3D10Device_GUID = LibC::GUID.new("9b7e4c0f-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10Device = "9b7e4c0f-342c-4106-a19f-4f2704f689f0"
  struct ID3D10Device
    lpVtbl : ID3D10DeviceVTbl*
  end

  struct ID3D10MultithreadVTbl
    query_interface : Proc(ID3D10Multithread*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10Multithread*, UInt32)
    release : Proc(ID3D10Multithread*, UInt32)
    enter : Proc(ID3D10Multithread*, Void)
    leave : Proc(ID3D10Multithread*, Void)
    set_multithread_protected : Proc(ID3D10Multithread*, LibC::BOOL, LibC::BOOL)
    get_multithread_protected : Proc(ID3D10Multithread*, LibC::BOOL)
  end

  ID3D10Multithread_GUID = LibC::GUID.new("9b7e4e00-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10Multithread = "9b7e4e00-342c-4106-a19f-4f2704f689f0"
  struct ID3D10Multithread
    lpVtbl : ID3D10MultithreadVTbl*
  end

  struct ID3D10DebugVTbl
    query_interface : Proc(ID3D10Debug*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10Debug*, UInt32)
    release : Proc(ID3D10Debug*, UInt32)
    set_feature_mask : Proc(ID3D10Debug*, UInt32, HRESULT)
    get_feature_mask : Proc(ID3D10Debug*, UInt32)
    set_present_per_render_op_delay : Proc(ID3D10Debug*, UInt32, HRESULT)
    get_present_per_render_op_delay : Proc(ID3D10Debug*, UInt32)
    set_swap_chain : Proc(ID3D10Debug*, IDXGISwapChain, HRESULT)
    get_swap_chain : Proc(ID3D10Debug*, IDXGISwapChain*, HRESULT)
    validate : Proc(ID3D10Debug*, HRESULT)
  end

  ID3D10Debug_GUID = LibC::GUID.new("9b7e4e01-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10Debug = "9b7e4e01-342c-4106-a19f-4f2704f689f0"
  struct ID3D10Debug
    lpVtbl : ID3D10DebugVTbl*
  end

  struct ID3D10SwitchToRefVTbl
    query_interface : Proc(ID3D10SwitchToRef*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10SwitchToRef*, UInt32)
    release : Proc(ID3D10SwitchToRef*, UInt32)
    set_use_ref : Proc(ID3D10SwitchToRef*, LibC::BOOL, LibC::BOOL)
    get_use_ref : Proc(ID3D10SwitchToRef*, LibC::BOOL)
  end

  ID3D10SwitchToRef_GUID = LibC::GUID.new("9b7e4e02-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10SwitchToRef = "9b7e4e02-342c-4106-a19f-4f2704f689f0"
  struct ID3D10SwitchToRef
    lpVtbl : ID3D10SwitchToRefVTbl*
  end

  struct ID3D10InfoQueueVTbl
    query_interface : Proc(ID3D10InfoQueue*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10InfoQueue*, UInt32)
    release : Proc(ID3D10InfoQueue*, UInt32)
    set_message_count_limit : Proc(ID3D10InfoQueue*, UInt64, HRESULT)
    clear_stored_messages : Proc(ID3D10InfoQueue*, Void)
    get_message : Proc(ID3D10InfoQueue*, UInt64, D3D10_MESSAGE*, LibC::UINT_PTR*, HRESULT)
    get_num_messages_allowed_by_storage_filter : Proc(ID3D10InfoQueue*, UInt64)
    get_num_messages_denied_by_storage_filter : Proc(ID3D10InfoQueue*, UInt64)
    get_num_stored_messages : Proc(ID3D10InfoQueue*, UInt64)
    get_num_stored_messages_allowed_by_retrieval_filter : Proc(ID3D10InfoQueue*, UInt64)
    get_num_messages_discarded_by_message_count_limit : Proc(ID3D10InfoQueue*, UInt64)
    get_message_count_limit : Proc(ID3D10InfoQueue*, UInt64)
    add_storage_filter_entries : Proc(ID3D10InfoQueue*, D3D10_INFO_QUEUE_FILTER*, HRESULT)
    get_storage_filter : Proc(ID3D10InfoQueue*, D3D10_INFO_QUEUE_FILTER*, LibC::UINT_PTR*, HRESULT)
    clear_storage_filter : Proc(ID3D10InfoQueue*, Void)
    push_empty_storage_filter : Proc(ID3D10InfoQueue*, HRESULT)
    push_copy_of_storage_filter : Proc(ID3D10InfoQueue*, HRESULT)
    push_storage_filter : Proc(ID3D10InfoQueue*, D3D10_INFO_QUEUE_FILTER*, HRESULT)
    pop_storage_filter : Proc(ID3D10InfoQueue*, Void)
    get_storage_filter_stack_size : Proc(ID3D10InfoQueue*, UInt32)
    add_retrieval_filter_entries : Proc(ID3D10InfoQueue*, D3D10_INFO_QUEUE_FILTER*, HRESULT)
    get_retrieval_filter : Proc(ID3D10InfoQueue*, D3D10_INFO_QUEUE_FILTER*, LibC::UINT_PTR*, HRESULT)
    clear_retrieval_filter : Proc(ID3D10InfoQueue*, Void)
    push_empty_retrieval_filter : Proc(ID3D10InfoQueue*, HRESULT)
    push_copy_of_retrieval_filter : Proc(ID3D10InfoQueue*, HRESULT)
    push_retrieval_filter : Proc(ID3D10InfoQueue*, D3D10_INFO_QUEUE_FILTER*, HRESULT)
    pop_retrieval_filter : Proc(ID3D10InfoQueue*, Void)
    get_retrieval_filter_stack_size : Proc(ID3D10InfoQueue*, UInt32)
    add_message : Proc(ID3D10InfoQueue*, D3D10_MESSAGE_CATEGORY, D3D10_MESSAGE_SEVERITY, D3D10_MESSAGE_ID, PSTR, HRESULT)
    add_application_message : Proc(ID3D10InfoQueue*, D3D10_MESSAGE_SEVERITY, PSTR, HRESULT)
    set_break_on_category : Proc(ID3D10InfoQueue*, D3D10_MESSAGE_CATEGORY, LibC::BOOL, HRESULT)
    set_break_on_severity : Proc(ID3D10InfoQueue*, D3D10_MESSAGE_SEVERITY, LibC::BOOL, HRESULT)
    set_break_on_id : Proc(ID3D10InfoQueue*, D3D10_MESSAGE_ID, LibC::BOOL, HRESULT)
    get_break_on_category : Proc(ID3D10InfoQueue*, D3D10_MESSAGE_CATEGORY, LibC::BOOL)
    get_break_on_severity : Proc(ID3D10InfoQueue*, D3D10_MESSAGE_SEVERITY, LibC::BOOL)
    get_break_on_id : Proc(ID3D10InfoQueue*, D3D10_MESSAGE_ID, LibC::BOOL)
    set_mute_debug_output : Proc(ID3D10InfoQueue*, LibC::BOOL, Void)
    get_mute_debug_output : Proc(ID3D10InfoQueue*, LibC::BOOL)
  end

  ID3D10InfoQueue_GUID = LibC::GUID.new("1b940b17-2642-4d1f-ab1f-b99bad0c395f")
  CLSID_ID3D10InfoQueue = "1b940b17-2642-4d1f-ab1f-b99bad0c395f"
  struct ID3D10InfoQueue
    lpVtbl : ID3D10InfoQueueVTbl*
  end

  struct ID3D10ShaderReflectionTypeVTbl
    get_desc : Proc(ID3D10ShaderReflectionType*, D3D10_SHADER_TYPE_DESC*, HRESULT)
    get_member_type_by_index : Proc(ID3D10ShaderReflectionType*, UInt32, ID3D10ShaderReflectionType)
    get_member_type_by_name : Proc(ID3D10ShaderReflectionType*, PSTR, ID3D10ShaderReflectionType)
    get_member_type_name : Proc(ID3D10ShaderReflectionType*, UInt32, PSTR)
  end

  ID3D10ShaderReflectionType_GUID = LibC::GUID.new("c530ad7d-9b16-4395-a979-ba2ecff83add")
  CLSID_ID3D10ShaderReflectionType = "c530ad7d-9b16-4395-a979-ba2ecff83add"
  struct ID3D10ShaderReflectionType
    lpVtbl : ID3D10ShaderReflectionTypeVTbl*
  end

  struct ID3D10ShaderReflectionVariableVTbl
    get_desc : Proc(ID3D10ShaderReflectionVariable*, D3D10_SHADER_VARIABLE_DESC*, HRESULT)
    get_type : Proc(ID3D10ShaderReflectionVariable*, ID3D10ShaderReflectionType)
  end

  ID3D10ShaderReflectionVariable_GUID = LibC::GUID.new("1bf63c95-2650-405d-99c1-3636bd1da0a1")
  CLSID_ID3D10ShaderReflectionVariable = "1bf63c95-2650-405d-99c1-3636bd1da0a1"
  struct ID3D10ShaderReflectionVariable
    lpVtbl : ID3D10ShaderReflectionVariableVTbl*
  end

  struct ID3D10ShaderReflectionConstantBufferVTbl
    get_desc : Proc(ID3D10ShaderReflectionConstantBuffer*, D3D10_SHADER_BUFFER_DESC*, HRESULT)
    get_variable_by_index : Proc(ID3D10ShaderReflectionConstantBuffer*, UInt32, ID3D10ShaderReflectionVariable)
    get_variable_by_name : Proc(ID3D10ShaderReflectionConstantBuffer*, PSTR, ID3D10ShaderReflectionVariable)
  end

  ID3D10ShaderReflectionConstantBuffer_GUID = LibC::GUID.new("66c66a94-dddd-4b62-a66a-f0da33c2b4d0")
  CLSID_ID3D10ShaderReflectionConstantBuffer = "66c66a94-dddd-4b62-a66a-f0da33c2b4d0"
  struct ID3D10ShaderReflectionConstantBuffer
    lpVtbl : ID3D10ShaderReflectionConstantBufferVTbl*
  end

  struct ID3D10ShaderReflectionVTbl
    query_interface : Proc(ID3D10ShaderReflection*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10ShaderReflection*, UInt32)
    release : Proc(ID3D10ShaderReflection*, UInt32)
    get_desc : Proc(ID3D10ShaderReflection*, D3D10_SHADER_DESC*, HRESULT)
    get_constant_buffer_by_index : Proc(ID3D10ShaderReflection*, UInt32, ID3D10ShaderReflectionConstantBuffer)
    get_constant_buffer_by_name : Proc(ID3D10ShaderReflection*, PSTR, ID3D10ShaderReflectionConstantBuffer)
    get_resource_binding_desc : Proc(ID3D10ShaderReflection*, UInt32, D3D10_SHADER_INPUT_BIND_DESC*, HRESULT)
    get_input_parameter_desc : Proc(ID3D10ShaderReflection*, UInt32, D3D10_SIGNATURE_PARAMETER_DESC*, HRESULT)
    get_output_parameter_desc : Proc(ID3D10ShaderReflection*, UInt32, D3D10_SIGNATURE_PARAMETER_DESC*, HRESULT)
  end

  ID3D10ShaderReflection_GUID = LibC::GUID.new("d40e20b6-f8f7-42ad-ab20-4baf8f15dfaa")
  CLSID_ID3D10ShaderReflection = "d40e20b6-f8f7-42ad-ab20-4baf8f15dfaa"
  struct ID3D10ShaderReflection
    lpVtbl : ID3D10ShaderReflectionVTbl*
  end

  struct ID3D10StateBlockVTbl
    query_interface : Proc(ID3D10StateBlock*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10StateBlock*, UInt32)
    release : Proc(ID3D10StateBlock*, UInt32)
    capture : Proc(ID3D10StateBlock*, HRESULT)
    apply : Proc(ID3D10StateBlock*, HRESULT)
    release_all_device_objects : Proc(ID3D10StateBlock*, HRESULT)
    get_device : Proc(ID3D10StateBlock*, ID3D10Device*, HRESULT)
  end

  ID3D10StateBlock_GUID = LibC::GUID.new("0803425a-57f5-4dd6-9465-a87570834a08")
  CLSID_ID3D10StateBlock = "0803425a-57f5-4dd6-9465-a87570834a08"
  struct ID3D10StateBlock
    lpVtbl : ID3D10StateBlockVTbl*
  end

  struct ID3D10EffectTypeVTbl
    is_valid : Proc(ID3D10EffectType*, LibC::BOOL)
    get_desc : Proc(ID3D10EffectType*, D3D10_EFFECT_TYPE_DESC*, HRESULT)
    get_member_type_by_index : Proc(ID3D10EffectType*, UInt32, ID3D10EffectType)
    get_member_type_by_name : Proc(ID3D10EffectType*, PSTR, ID3D10EffectType)
    get_member_type_by_semantic : Proc(ID3D10EffectType*, PSTR, ID3D10EffectType)
    get_member_name : Proc(ID3D10EffectType*, UInt32, PSTR)
    get_member_semantic : Proc(ID3D10EffectType*, UInt32, PSTR)
  end

  ID3D10EffectType_GUID = LibC::GUID.new("4e9e1ddc-cd9d-4772-a837-00180b9b88fd")
  CLSID_ID3D10EffectType = "4e9e1ddc-cd9d-4772-a837-00180b9b88fd"
  struct ID3D10EffectType
    lpVtbl : ID3D10EffectTypeVTbl*
  end

  struct ID3D10EffectVariableVTbl
    is_valid : Proc(ID3D10EffectVariable*, LibC::BOOL)
    get_type : Proc(ID3D10EffectVariable*, ID3D10EffectType)
    get_desc : Proc(ID3D10EffectVariable*, D3D10_EFFECT_VARIABLE_DESC*, HRESULT)
    get_annotation_by_index : Proc(ID3D10EffectVariable*, UInt32, ID3D10EffectVariable)
    get_annotation_by_name : Proc(ID3D10EffectVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_index : Proc(ID3D10EffectVariable*, UInt32, ID3D10EffectVariable)
    get_member_by_name : Proc(ID3D10EffectVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_semantic : Proc(ID3D10EffectVariable*, PSTR, ID3D10EffectVariable)
    get_element : Proc(ID3D10EffectVariable*, UInt32, ID3D10EffectVariable)
    get_parent_constant_buffer : Proc(ID3D10EffectVariable*, ID3D10EffectConstantBuffer)
    as_scalar : Proc(ID3D10EffectVariable*, ID3D10EffectScalarVariable)
    as_vector : Proc(ID3D10EffectVariable*, ID3D10EffectVectorVariable)
    as_matrix : Proc(ID3D10EffectVariable*, ID3D10EffectMatrixVariable)
    as_string : Proc(ID3D10EffectVariable*, ID3D10EffectStringVariable)
    as_shader_resource : Proc(ID3D10EffectVariable*, ID3D10EffectShaderResourceVariable)
    as_render_target_view : Proc(ID3D10EffectVariable*, ID3D10EffectRenderTargetViewVariable)
    as_depth_stencil_view : Proc(ID3D10EffectVariable*, ID3D10EffectDepthStencilViewVariable)
    as_constant_buffer : Proc(ID3D10EffectVariable*, ID3D10EffectConstantBuffer)
    as_shader : Proc(ID3D10EffectVariable*, ID3D10EffectShaderVariable)
    as_blend : Proc(ID3D10EffectVariable*, ID3D10EffectBlendVariable)
    as_depth_stencil : Proc(ID3D10EffectVariable*, ID3D10EffectDepthStencilVariable)
    as_rasterizer : Proc(ID3D10EffectVariable*, ID3D10EffectRasterizerVariable)
    as_sampler : Proc(ID3D10EffectVariable*, ID3D10EffectSamplerVariable)
    set_raw_value : Proc(ID3D10EffectVariable*, Void*, UInt32, UInt32, HRESULT)
    get_raw_value : Proc(ID3D10EffectVariable*, Void*, UInt32, UInt32, HRESULT)
  end

  ID3D10EffectVariable_GUID = LibC::GUID.new("ae897105-00e6-45bf-bb8e-281dd6db8e1b")
  CLSID_ID3D10EffectVariable = "ae897105-00e6-45bf-bb8e-281dd6db8e1b"
  struct ID3D10EffectVariable
    lpVtbl : ID3D10EffectVariableVTbl*
  end

  struct ID3D10EffectScalarVariableVTbl
    is_valid : Proc(ID3D10EffectScalarVariable*, LibC::BOOL)
    get_type : Proc(ID3D10EffectScalarVariable*, ID3D10EffectType)
    get_desc : Proc(ID3D10EffectScalarVariable*, D3D10_EFFECT_VARIABLE_DESC*, HRESULT)
    get_annotation_by_index : Proc(ID3D10EffectScalarVariable*, UInt32, ID3D10EffectVariable)
    get_annotation_by_name : Proc(ID3D10EffectScalarVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_index : Proc(ID3D10EffectScalarVariable*, UInt32, ID3D10EffectVariable)
    get_member_by_name : Proc(ID3D10EffectScalarVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_semantic : Proc(ID3D10EffectScalarVariable*, PSTR, ID3D10EffectVariable)
    get_element : Proc(ID3D10EffectScalarVariable*, UInt32, ID3D10EffectVariable)
    get_parent_constant_buffer : Proc(ID3D10EffectScalarVariable*, ID3D10EffectConstantBuffer)
    as_scalar : Proc(ID3D10EffectScalarVariable*, ID3D10EffectScalarVariable)
    as_vector : Proc(ID3D10EffectScalarVariable*, ID3D10EffectVectorVariable)
    as_matrix : Proc(ID3D10EffectScalarVariable*, ID3D10EffectMatrixVariable)
    as_string : Proc(ID3D10EffectScalarVariable*, ID3D10EffectStringVariable)
    as_shader_resource : Proc(ID3D10EffectScalarVariable*, ID3D10EffectShaderResourceVariable)
    as_render_target_view : Proc(ID3D10EffectScalarVariable*, ID3D10EffectRenderTargetViewVariable)
    as_depth_stencil_view : Proc(ID3D10EffectScalarVariable*, ID3D10EffectDepthStencilViewVariable)
    as_constant_buffer : Proc(ID3D10EffectScalarVariable*, ID3D10EffectConstantBuffer)
    as_shader : Proc(ID3D10EffectScalarVariable*, ID3D10EffectShaderVariable)
    as_blend : Proc(ID3D10EffectScalarVariable*, ID3D10EffectBlendVariable)
    as_depth_stencil : Proc(ID3D10EffectScalarVariable*, ID3D10EffectDepthStencilVariable)
    as_rasterizer : Proc(ID3D10EffectScalarVariable*, ID3D10EffectRasterizerVariable)
    as_sampler : Proc(ID3D10EffectScalarVariable*, ID3D10EffectSamplerVariable)
    set_raw_value : Proc(ID3D10EffectScalarVariable*, Void*, UInt32, UInt32, HRESULT)
    get_raw_value : Proc(ID3D10EffectScalarVariable*, Void*, UInt32, UInt32, HRESULT)
    set_float : Proc(ID3D10EffectScalarVariable*, Float32, HRESULT)
    get_float : Proc(ID3D10EffectScalarVariable*, Float32*, HRESULT)
    set_float_array : Proc(ID3D10EffectScalarVariable*, Float32*, UInt32, UInt32, HRESULT)
    get_float_array : Proc(ID3D10EffectScalarVariable*, Float32*, UInt32, UInt32, HRESULT)
    set_int : Proc(ID3D10EffectScalarVariable*, Int32, HRESULT)
    get_int : Proc(ID3D10EffectScalarVariable*, Int32*, HRESULT)
    set_int_array : Proc(ID3D10EffectScalarVariable*, Int32*, UInt32, UInt32, HRESULT)
    get_int_array : Proc(ID3D10EffectScalarVariable*, Int32*, UInt32, UInt32, HRESULT)
    set_bool : Proc(ID3D10EffectScalarVariable*, LibC::BOOL, HRESULT)
    get_bool : Proc(ID3D10EffectScalarVariable*, LibC::BOOL*, HRESULT)
    set_bool_array : Proc(ID3D10EffectScalarVariable*, LibC::BOOL*, UInt32, UInt32, HRESULT)
    get_bool_array : Proc(ID3D10EffectScalarVariable*, LibC::BOOL*, UInt32, UInt32, HRESULT)
  end

  ID3D10EffectScalarVariable_GUID = LibC::GUID.new("00e48f7b-d2c8-49e8-a86c-022dee53431f")
  CLSID_ID3D10EffectScalarVariable = "00e48f7b-d2c8-49e8-a86c-022dee53431f"
  struct ID3D10EffectScalarVariable
    lpVtbl : ID3D10EffectScalarVariableVTbl*
  end

  struct ID3D10EffectVectorVariableVTbl
    is_valid : Proc(ID3D10EffectVectorVariable*, LibC::BOOL)
    get_type : Proc(ID3D10EffectVectorVariable*, ID3D10EffectType)
    get_desc : Proc(ID3D10EffectVectorVariable*, D3D10_EFFECT_VARIABLE_DESC*, HRESULT)
    get_annotation_by_index : Proc(ID3D10EffectVectorVariable*, UInt32, ID3D10EffectVariable)
    get_annotation_by_name : Proc(ID3D10EffectVectorVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_index : Proc(ID3D10EffectVectorVariable*, UInt32, ID3D10EffectVariable)
    get_member_by_name : Proc(ID3D10EffectVectorVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_semantic : Proc(ID3D10EffectVectorVariable*, PSTR, ID3D10EffectVariable)
    get_element : Proc(ID3D10EffectVectorVariable*, UInt32, ID3D10EffectVariable)
    get_parent_constant_buffer : Proc(ID3D10EffectVectorVariable*, ID3D10EffectConstantBuffer)
    as_scalar : Proc(ID3D10EffectVectorVariable*, ID3D10EffectScalarVariable)
    as_vector : Proc(ID3D10EffectVectorVariable*, ID3D10EffectVectorVariable)
    as_matrix : Proc(ID3D10EffectVectorVariable*, ID3D10EffectMatrixVariable)
    as_string : Proc(ID3D10EffectVectorVariable*, ID3D10EffectStringVariable)
    as_shader_resource : Proc(ID3D10EffectVectorVariable*, ID3D10EffectShaderResourceVariable)
    as_render_target_view : Proc(ID3D10EffectVectorVariable*, ID3D10EffectRenderTargetViewVariable)
    as_depth_stencil_view : Proc(ID3D10EffectVectorVariable*, ID3D10EffectDepthStencilViewVariable)
    as_constant_buffer : Proc(ID3D10EffectVectorVariable*, ID3D10EffectConstantBuffer)
    as_shader : Proc(ID3D10EffectVectorVariable*, ID3D10EffectShaderVariable)
    as_blend : Proc(ID3D10EffectVectorVariable*, ID3D10EffectBlendVariable)
    as_depth_stencil : Proc(ID3D10EffectVectorVariable*, ID3D10EffectDepthStencilVariable)
    as_rasterizer : Proc(ID3D10EffectVectorVariable*, ID3D10EffectRasterizerVariable)
    as_sampler : Proc(ID3D10EffectVectorVariable*, ID3D10EffectSamplerVariable)
    set_raw_value : Proc(ID3D10EffectVectorVariable*, Void*, UInt32, UInt32, HRESULT)
    get_raw_value : Proc(ID3D10EffectVectorVariable*, Void*, UInt32, UInt32, HRESULT)
    set_bool_vector : Proc(ID3D10EffectVectorVariable*, LibC::BOOL*, HRESULT)
    set_int_vector : Proc(ID3D10EffectVectorVariable*, Int32*, HRESULT)
    set_float_vector : Proc(ID3D10EffectVectorVariable*, Float32*, HRESULT)
    get_bool_vector : Proc(ID3D10EffectVectorVariable*, LibC::BOOL*, HRESULT)
    get_int_vector : Proc(ID3D10EffectVectorVariable*, Int32*, HRESULT)
    get_float_vector : Proc(ID3D10EffectVectorVariable*, Float32*, HRESULT)
    set_bool_vector_array : Proc(ID3D10EffectVectorVariable*, LibC::BOOL*, UInt32, UInt32, HRESULT)
    set_int_vector_array : Proc(ID3D10EffectVectorVariable*, Int32*, UInt32, UInt32, HRESULT)
    set_float_vector_array : Proc(ID3D10EffectVectorVariable*, Float32*, UInt32, UInt32, HRESULT)
    get_bool_vector_array : Proc(ID3D10EffectVectorVariable*, LibC::BOOL*, UInt32, UInt32, HRESULT)
    get_int_vector_array : Proc(ID3D10EffectVectorVariable*, Int32*, UInt32, UInt32, HRESULT)
    get_float_vector_array : Proc(ID3D10EffectVectorVariable*, Float32*, UInt32, UInt32, HRESULT)
  end

  ID3D10EffectVectorVariable_GUID = LibC::GUID.new("62b98c44-1f82-4c67-bcd0-72cf8f217e81")
  CLSID_ID3D10EffectVectorVariable = "62b98c44-1f82-4c67-bcd0-72cf8f217e81"
  struct ID3D10EffectVectorVariable
    lpVtbl : ID3D10EffectVectorVariableVTbl*
  end

  struct ID3D10EffectMatrixVariableVTbl
    is_valid : Proc(ID3D10EffectMatrixVariable*, LibC::BOOL)
    get_type : Proc(ID3D10EffectMatrixVariable*, ID3D10EffectType)
    get_desc : Proc(ID3D10EffectMatrixVariable*, D3D10_EFFECT_VARIABLE_DESC*, HRESULT)
    get_annotation_by_index : Proc(ID3D10EffectMatrixVariable*, UInt32, ID3D10EffectVariable)
    get_annotation_by_name : Proc(ID3D10EffectMatrixVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_index : Proc(ID3D10EffectMatrixVariable*, UInt32, ID3D10EffectVariable)
    get_member_by_name : Proc(ID3D10EffectMatrixVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_semantic : Proc(ID3D10EffectMatrixVariable*, PSTR, ID3D10EffectVariable)
    get_element : Proc(ID3D10EffectMatrixVariable*, UInt32, ID3D10EffectVariable)
    get_parent_constant_buffer : Proc(ID3D10EffectMatrixVariable*, ID3D10EffectConstantBuffer)
    as_scalar : Proc(ID3D10EffectMatrixVariable*, ID3D10EffectScalarVariable)
    as_vector : Proc(ID3D10EffectMatrixVariable*, ID3D10EffectVectorVariable)
    as_matrix : Proc(ID3D10EffectMatrixVariable*, ID3D10EffectMatrixVariable)
    as_string : Proc(ID3D10EffectMatrixVariable*, ID3D10EffectStringVariable)
    as_shader_resource : Proc(ID3D10EffectMatrixVariable*, ID3D10EffectShaderResourceVariable)
    as_render_target_view : Proc(ID3D10EffectMatrixVariable*, ID3D10EffectRenderTargetViewVariable)
    as_depth_stencil_view : Proc(ID3D10EffectMatrixVariable*, ID3D10EffectDepthStencilViewVariable)
    as_constant_buffer : Proc(ID3D10EffectMatrixVariable*, ID3D10EffectConstantBuffer)
    as_shader : Proc(ID3D10EffectMatrixVariable*, ID3D10EffectShaderVariable)
    as_blend : Proc(ID3D10EffectMatrixVariable*, ID3D10EffectBlendVariable)
    as_depth_stencil : Proc(ID3D10EffectMatrixVariable*, ID3D10EffectDepthStencilVariable)
    as_rasterizer : Proc(ID3D10EffectMatrixVariable*, ID3D10EffectRasterizerVariable)
    as_sampler : Proc(ID3D10EffectMatrixVariable*, ID3D10EffectSamplerVariable)
    set_raw_value : Proc(ID3D10EffectMatrixVariable*, Void*, UInt32, UInt32, HRESULT)
    get_raw_value : Proc(ID3D10EffectMatrixVariable*, Void*, UInt32, UInt32, HRESULT)
    set_matrix : Proc(ID3D10EffectMatrixVariable*, Float32*, HRESULT)
    get_matrix : Proc(ID3D10EffectMatrixVariable*, Float32*, HRESULT)
    set_matrix_array : Proc(ID3D10EffectMatrixVariable*, Float32*, UInt32, UInt32, HRESULT)
    get_matrix_array : Proc(ID3D10EffectMatrixVariable*, Float32*, UInt32, UInt32, HRESULT)
    set_matrix_transpose : Proc(ID3D10EffectMatrixVariable*, Float32*, HRESULT)
    get_matrix_transpose : Proc(ID3D10EffectMatrixVariable*, Float32*, HRESULT)
    set_matrix_transpose_array : Proc(ID3D10EffectMatrixVariable*, Float32*, UInt32, UInt32, HRESULT)
    get_matrix_transpose_array : Proc(ID3D10EffectMatrixVariable*, Float32*, UInt32, UInt32, HRESULT)
  end

  ID3D10EffectMatrixVariable_GUID = LibC::GUID.new("50666c24-b82f-4eed-a172-5b6e7e8522e0")
  CLSID_ID3D10EffectMatrixVariable = "50666c24-b82f-4eed-a172-5b6e7e8522e0"
  struct ID3D10EffectMatrixVariable
    lpVtbl : ID3D10EffectMatrixVariableVTbl*
  end

  struct ID3D10EffectStringVariableVTbl
    is_valid : Proc(ID3D10EffectStringVariable*, LibC::BOOL)
    get_type : Proc(ID3D10EffectStringVariable*, ID3D10EffectType)
    get_desc : Proc(ID3D10EffectStringVariable*, D3D10_EFFECT_VARIABLE_DESC*, HRESULT)
    get_annotation_by_index : Proc(ID3D10EffectStringVariable*, UInt32, ID3D10EffectVariable)
    get_annotation_by_name : Proc(ID3D10EffectStringVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_index : Proc(ID3D10EffectStringVariable*, UInt32, ID3D10EffectVariable)
    get_member_by_name : Proc(ID3D10EffectStringVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_semantic : Proc(ID3D10EffectStringVariable*, PSTR, ID3D10EffectVariable)
    get_element : Proc(ID3D10EffectStringVariable*, UInt32, ID3D10EffectVariable)
    get_parent_constant_buffer : Proc(ID3D10EffectStringVariable*, ID3D10EffectConstantBuffer)
    as_scalar : Proc(ID3D10EffectStringVariable*, ID3D10EffectScalarVariable)
    as_vector : Proc(ID3D10EffectStringVariable*, ID3D10EffectVectorVariable)
    as_matrix : Proc(ID3D10EffectStringVariable*, ID3D10EffectMatrixVariable)
    as_string : Proc(ID3D10EffectStringVariable*, ID3D10EffectStringVariable)
    as_shader_resource : Proc(ID3D10EffectStringVariable*, ID3D10EffectShaderResourceVariable)
    as_render_target_view : Proc(ID3D10EffectStringVariable*, ID3D10EffectRenderTargetViewVariable)
    as_depth_stencil_view : Proc(ID3D10EffectStringVariable*, ID3D10EffectDepthStencilViewVariable)
    as_constant_buffer : Proc(ID3D10EffectStringVariable*, ID3D10EffectConstantBuffer)
    as_shader : Proc(ID3D10EffectStringVariable*, ID3D10EffectShaderVariable)
    as_blend : Proc(ID3D10EffectStringVariable*, ID3D10EffectBlendVariable)
    as_depth_stencil : Proc(ID3D10EffectStringVariable*, ID3D10EffectDepthStencilVariable)
    as_rasterizer : Proc(ID3D10EffectStringVariable*, ID3D10EffectRasterizerVariable)
    as_sampler : Proc(ID3D10EffectStringVariable*, ID3D10EffectSamplerVariable)
    set_raw_value : Proc(ID3D10EffectStringVariable*, Void*, UInt32, UInt32, HRESULT)
    get_raw_value : Proc(ID3D10EffectStringVariable*, Void*, UInt32, UInt32, HRESULT)
    get_string : Proc(ID3D10EffectStringVariable*, PSTR*, HRESULT)
    get_string_array : Proc(ID3D10EffectStringVariable*, PSTR*, UInt32, UInt32, HRESULT)
  end

  ID3D10EffectStringVariable_GUID = LibC::GUID.new("71417501-8df9-4e0a-a78a-255f9756baff")
  CLSID_ID3D10EffectStringVariable = "71417501-8df9-4e0a-a78a-255f9756baff"
  struct ID3D10EffectStringVariable
    lpVtbl : ID3D10EffectStringVariableVTbl*
  end

  struct ID3D10EffectShaderResourceVariableVTbl
    is_valid : Proc(ID3D10EffectShaderResourceVariable*, LibC::BOOL)
    get_type : Proc(ID3D10EffectShaderResourceVariable*, ID3D10EffectType)
    get_desc : Proc(ID3D10EffectShaderResourceVariable*, D3D10_EFFECT_VARIABLE_DESC*, HRESULT)
    get_annotation_by_index : Proc(ID3D10EffectShaderResourceVariable*, UInt32, ID3D10EffectVariable)
    get_annotation_by_name : Proc(ID3D10EffectShaderResourceVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_index : Proc(ID3D10EffectShaderResourceVariable*, UInt32, ID3D10EffectVariable)
    get_member_by_name : Proc(ID3D10EffectShaderResourceVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_semantic : Proc(ID3D10EffectShaderResourceVariable*, PSTR, ID3D10EffectVariable)
    get_element : Proc(ID3D10EffectShaderResourceVariable*, UInt32, ID3D10EffectVariable)
    get_parent_constant_buffer : Proc(ID3D10EffectShaderResourceVariable*, ID3D10EffectConstantBuffer)
    as_scalar : Proc(ID3D10EffectShaderResourceVariable*, ID3D10EffectScalarVariable)
    as_vector : Proc(ID3D10EffectShaderResourceVariable*, ID3D10EffectVectorVariable)
    as_matrix : Proc(ID3D10EffectShaderResourceVariable*, ID3D10EffectMatrixVariable)
    as_string : Proc(ID3D10EffectShaderResourceVariable*, ID3D10EffectStringVariable)
    as_shader_resource : Proc(ID3D10EffectShaderResourceVariable*, ID3D10EffectShaderResourceVariable)
    as_render_target_view : Proc(ID3D10EffectShaderResourceVariable*, ID3D10EffectRenderTargetViewVariable)
    as_depth_stencil_view : Proc(ID3D10EffectShaderResourceVariable*, ID3D10EffectDepthStencilViewVariable)
    as_constant_buffer : Proc(ID3D10EffectShaderResourceVariable*, ID3D10EffectConstantBuffer)
    as_shader : Proc(ID3D10EffectShaderResourceVariable*, ID3D10EffectShaderVariable)
    as_blend : Proc(ID3D10EffectShaderResourceVariable*, ID3D10EffectBlendVariable)
    as_depth_stencil : Proc(ID3D10EffectShaderResourceVariable*, ID3D10EffectDepthStencilVariable)
    as_rasterizer : Proc(ID3D10EffectShaderResourceVariable*, ID3D10EffectRasterizerVariable)
    as_sampler : Proc(ID3D10EffectShaderResourceVariable*, ID3D10EffectSamplerVariable)
    set_raw_value : Proc(ID3D10EffectShaderResourceVariable*, Void*, UInt32, UInt32, HRESULT)
    get_raw_value : Proc(ID3D10EffectShaderResourceVariable*, Void*, UInt32, UInt32, HRESULT)
    set_resource : Proc(ID3D10EffectShaderResourceVariable*, ID3D10ShaderResourceView, HRESULT)
    get_resource : Proc(ID3D10EffectShaderResourceVariable*, ID3D10ShaderResourceView*, HRESULT)
    set_resource_array : Proc(ID3D10EffectShaderResourceVariable*, ID3D10ShaderResourceView*, UInt32, UInt32, HRESULT)
    get_resource_array : Proc(ID3D10EffectShaderResourceVariable*, ID3D10ShaderResourceView*, UInt32, UInt32, HRESULT)
  end

  ID3D10EffectShaderResourceVariable_GUID = LibC::GUID.new("c0a7157b-d872-4b1d-8073-efc2acd4b1fc")
  CLSID_ID3D10EffectShaderResourceVariable = "c0a7157b-d872-4b1d-8073-efc2acd4b1fc"
  struct ID3D10EffectShaderResourceVariable
    lpVtbl : ID3D10EffectShaderResourceVariableVTbl*
  end

  struct ID3D10EffectRenderTargetViewVariableVTbl
    is_valid : Proc(ID3D10EffectRenderTargetViewVariable*, LibC::BOOL)
    get_type : Proc(ID3D10EffectRenderTargetViewVariable*, ID3D10EffectType)
    get_desc : Proc(ID3D10EffectRenderTargetViewVariable*, D3D10_EFFECT_VARIABLE_DESC*, HRESULT)
    get_annotation_by_index : Proc(ID3D10EffectRenderTargetViewVariable*, UInt32, ID3D10EffectVariable)
    get_annotation_by_name : Proc(ID3D10EffectRenderTargetViewVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_index : Proc(ID3D10EffectRenderTargetViewVariable*, UInt32, ID3D10EffectVariable)
    get_member_by_name : Proc(ID3D10EffectRenderTargetViewVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_semantic : Proc(ID3D10EffectRenderTargetViewVariable*, PSTR, ID3D10EffectVariable)
    get_element : Proc(ID3D10EffectRenderTargetViewVariable*, UInt32, ID3D10EffectVariable)
    get_parent_constant_buffer : Proc(ID3D10EffectRenderTargetViewVariable*, ID3D10EffectConstantBuffer)
    as_scalar : Proc(ID3D10EffectRenderTargetViewVariable*, ID3D10EffectScalarVariable)
    as_vector : Proc(ID3D10EffectRenderTargetViewVariable*, ID3D10EffectVectorVariable)
    as_matrix : Proc(ID3D10EffectRenderTargetViewVariable*, ID3D10EffectMatrixVariable)
    as_string : Proc(ID3D10EffectRenderTargetViewVariable*, ID3D10EffectStringVariable)
    as_shader_resource : Proc(ID3D10EffectRenderTargetViewVariable*, ID3D10EffectShaderResourceVariable)
    as_render_target_view : Proc(ID3D10EffectRenderTargetViewVariable*, ID3D10EffectRenderTargetViewVariable)
    as_depth_stencil_view : Proc(ID3D10EffectRenderTargetViewVariable*, ID3D10EffectDepthStencilViewVariable)
    as_constant_buffer : Proc(ID3D10EffectRenderTargetViewVariable*, ID3D10EffectConstantBuffer)
    as_shader : Proc(ID3D10EffectRenderTargetViewVariable*, ID3D10EffectShaderVariable)
    as_blend : Proc(ID3D10EffectRenderTargetViewVariable*, ID3D10EffectBlendVariable)
    as_depth_stencil : Proc(ID3D10EffectRenderTargetViewVariable*, ID3D10EffectDepthStencilVariable)
    as_rasterizer : Proc(ID3D10EffectRenderTargetViewVariable*, ID3D10EffectRasterizerVariable)
    as_sampler : Proc(ID3D10EffectRenderTargetViewVariable*, ID3D10EffectSamplerVariable)
    set_raw_value : Proc(ID3D10EffectRenderTargetViewVariable*, Void*, UInt32, UInt32, HRESULT)
    get_raw_value : Proc(ID3D10EffectRenderTargetViewVariable*, Void*, UInt32, UInt32, HRESULT)
    set_render_target : Proc(ID3D10EffectRenderTargetViewVariable*, ID3D10RenderTargetView, HRESULT)
    get_render_target : Proc(ID3D10EffectRenderTargetViewVariable*, ID3D10RenderTargetView*, HRESULT)
    set_render_target_array : Proc(ID3D10EffectRenderTargetViewVariable*, ID3D10RenderTargetView*, UInt32, UInt32, HRESULT)
    get_render_target_array : Proc(ID3D10EffectRenderTargetViewVariable*, ID3D10RenderTargetView*, UInt32, UInt32, HRESULT)
  end

  ID3D10EffectRenderTargetViewVariable_GUID = LibC::GUID.new("28ca0cc3-c2c9-40bb-b57f-67b737122b17")
  CLSID_ID3D10EffectRenderTargetViewVariable = "28ca0cc3-c2c9-40bb-b57f-67b737122b17"
  struct ID3D10EffectRenderTargetViewVariable
    lpVtbl : ID3D10EffectRenderTargetViewVariableVTbl*
  end

  struct ID3D10EffectDepthStencilViewVariableVTbl
    is_valid : Proc(ID3D10EffectDepthStencilViewVariable*, LibC::BOOL)
    get_type : Proc(ID3D10EffectDepthStencilViewVariable*, ID3D10EffectType)
    get_desc : Proc(ID3D10EffectDepthStencilViewVariable*, D3D10_EFFECT_VARIABLE_DESC*, HRESULT)
    get_annotation_by_index : Proc(ID3D10EffectDepthStencilViewVariable*, UInt32, ID3D10EffectVariable)
    get_annotation_by_name : Proc(ID3D10EffectDepthStencilViewVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_index : Proc(ID3D10EffectDepthStencilViewVariable*, UInt32, ID3D10EffectVariable)
    get_member_by_name : Proc(ID3D10EffectDepthStencilViewVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_semantic : Proc(ID3D10EffectDepthStencilViewVariable*, PSTR, ID3D10EffectVariable)
    get_element : Proc(ID3D10EffectDepthStencilViewVariable*, UInt32, ID3D10EffectVariable)
    get_parent_constant_buffer : Proc(ID3D10EffectDepthStencilViewVariable*, ID3D10EffectConstantBuffer)
    as_scalar : Proc(ID3D10EffectDepthStencilViewVariable*, ID3D10EffectScalarVariable)
    as_vector : Proc(ID3D10EffectDepthStencilViewVariable*, ID3D10EffectVectorVariable)
    as_matrix : Proc(ID3D10EffectDepthStencilViewVariable*, ID3D10EffectMatrixVariable)
    as_string : Proc(ID3D10EffectDepthStencilViewVariable*, ID3D10EffectStringVariable)
    as_shader_resource : Proc(ID3D10EffectDepthStencilViewVariable*, ID3D10EffectShaderResourceVariable)
    as_render_target_view : Proc(ID3D10EffectDepthStencilViewVariable*, ID3D10EffectRenderTargetViewVariable)
    as_depth_stencil_view : Proc(ID3D10EffectDepthStencilViewVariable*, ID3D10EffectDepthStencilViewVariable)
    as_constant_buffer : Proc(ID3D10EffectDepthStencilViewVariable*, ID3D10EffectConstantBuffer)
    as_shader : Proc(ID3D10EffectDepthStencilViewVariable*, ID3D10EffectShaderVariable)
    as_blend : Proc(ID3D10EffectDepthStencilViewVariable*, ID3D10EffectBlendVariable)
    as_depth_stencil : Proc(ID3D10EffectDepthStencilViewVariable*, ID3D10EffectDepthStencilVariable)
    as_rasterizer : Proc(ID3D10EffectDepthStencilViewVariable*, ID3D10EffectRasterizerVariable)
    as_sampler : Proc(ID3D10EffectDepthStencilViewVariable*, ID3D10EffectSamplerVariable)
    set_raw_value : Proc(ID3D10EffectDepthStencilViewVariable*, Void*, UInt32, UInt32, HRESULT)
    get_raw_value : Proc(ID3D10EffectDepthStencilViewVariable*, Void*, UInt32, UInt32, HRESULT)
    set_depth_stencil : Proc(ID3D10EffectDepthStencilViewVariable*, ID3D10DepthStencilView, HRESULT)
    get_depth_stencil : Proc(ID3D10EffectDepthStencilViewVariable*, ID3D10DepthStencilView*, HRESULT)
    set_depth_stencil_array : Proc(ID3D10EffectDepthStencilViewVariable*, ID3D10DepthStencilView*, UInt32, UInt32, HRESULT)
    get_depth_stencil_array : Proc(ID3D10EffectDepthStencilViewVariable*, ID3D10DepthStencilView*, UInt32, UInt32, HRESULT)
  end

  ID3D10EffectDepthStencilViewVariable_GUID = LibC::GUID.new("3e02c918-cc79-4985-b622-2d92ad701623")
  CLSID_ID3D10EffectDepthStencilViewVariable = "3e02c918-cc79-4985-b622-2d92ad701623"
  struct ID3D10EffectDepthStencilViewVariable
    lpVtbl : ID3D10EffectDepthStencilViewVariableVTbl*
  end

  struct ID3D10EffectConstantBufferVTbl
    is_valid : Proc(ID3D10EffectConstantBuffer*, LibC::BOOL)
    get_type : Proc(ID3D10EffectConstantBuffer*, ID3D10EffectType)
    get_desc : Proc(ID3D10EffectConstantBuffer*, D3D10_EFFECT_VARIABLE_DESC*, HRESULT)
    get_annotation_by_index : Proc(ID3D10EffectConstantBuffer*, UInt32, ID3D10EffectVariable)
    get_annotation_by_name : Proc(ID3D10EffectConstantBuffer*, PSTR, ID3D10EffectVariable)
    get_member_by_index : Proc(ID3D10EffectConstantBuffer*, UInt32, ID3D10EffectVariable)
    get_member_by_name : Proc(ID3D10EffectConstantBuffer*, PSTR, ID3D10EffectVariable)
    get_member_by_semantic : Proc(ID3D10EffectConstantBuffer*, PSTR, ID3D10EffectVariable)
    get_element : Proc(ID3D10EffectConstantBuffer*, UInt32, ID3D10EffectVariable)
    get_parent_constant_buffer : Proc(ID3D10EffectConstantBuffer*, ID3D10EffectConstantBuffer)
    as_scalar : Proc(ID3D10EffectConstantBuffer*, ID3D10EffectScalarVariable)
    as_vector : Proc(ID3D10EffectConstantBuffer*, ID3D10EffectVectorVariable)
    as_matrix : Proc(ID3D10EffectConstantBuffer*, ID3D10EffectMatrixVariable)
    as_string : Proc(ID3D10EffectConstantBuffer*, ID3D10EffectStringVariable)
    as_shader_resource : Proc(ID3D10EffectConstantBuffer*, ID3D10EffectShaderResourceVariable)
    as_render_target_view : Proc(ID3D10EffectConstantBuffer*, ID3D10EffectRenderTargetViewVariable)
    as_depth_stencil_view : Proc(ID3D10EffectConstantBuffer*, ID3D10EffectDepthStencilViewVariable)
    as_constant_buffer : Proc(ID3D10EffectConstantBuffer*, ID3D10EffectConstantBuffer)
    as_shader : Proc(ID3D10EffectConstantBuffer*, ID3D10EffectShaderVariable)
    as_blend : Proc(ID3D10EffectConstantBuffer*, ID3D10EffectBlendVariable)
    as_depth_stencil : Proc(ID3D10EffectConstantBuffer*, ID3D10EffectDepthStencilVariable)
    as_rasterizer : Proc(ID3D10EffectConstantBuffer*, ID3D10EffectRasterizerVariable)
    as_sampler : Proc(ID3D10EffectConstantBuffer*, ID3D10EffectSamplerVariable)
    set_raw_value : Proc(ID3D10EffectConstantBuffer*, Void*, UInt32, UInt32, HRESULT)
    get_raw_value : Proc(ID3D10EffectConstantBuffer*, Void*, UInt32, UInt32, HRESULT)
    set_constant_buffer : Proc(ID3D10EffectConstantBuffer*, ID3D10Buffer, HRESULT)
    get_constant_buffer : Proc(ID3D10EffectConstantBuffer*, ID3D10Buffer*, HRESULT)
    set_texture_buffer : Proc(ID3D10EffectConstantBuffer*, ID3D10ShaderResourceView, HRESULT)
    get_texture_buffer : Proc(ID3D10EffectConstantBuffer*, ID3D10ShaderResourceView*, HRESULT)
  end

  ID3D10EffectConstantBuffer_GUID = LibC::GUID.new("56648f4d-cc8b-4444-a5ad-b5a3d76e91b3")
  CLSID_ID3D10EffectConstantBuffer = "56648f4d-cc8b-4444-a5ad-b5a3d76e91b3"
  struct ID3D10EffectConstantBuffer
    lpVtbl : ID3D10EffectConstantBufferVTbl*
  end

  struct ID3D10EffectShaderVariableVTbl
    is_valid : Proc(ID3D10EffectShaderVariable*, LibC::BOOL)
    get_type : Proc(ID3D10EffectShaderVariable*, ID3D10EffectType)
    get_desc : Proc(ID3D10EffectShaderVariable*, D3D10_EFFECT_VARIABLE_DESC*, HRESULT)
    get_annotation_by_index : Proc(ID3D10EffectShaderVariable*, UInt32, ID3D10EffectVariable)
    get_annotation_by_name : Proc(ID3D10EffectShaderVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_index : Proc(ID3D10EffectShaderVariable*, UInt32, ID3D10EffectVariable)
    get_member_by_name : Proc(ID3D10EffectShaderVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_semantic : Proc(ID3D10EffectShaderVariable*, PSTR, ID3D10EffectVariable)
    get_element : Proc(ID3D10EffectShaderVariable*, UInt32, ID3D10EffectVariable)
    get_parent_constant_buffer : Proc(ID3D10EffectShaderVariable*, ID3D10EffectConstantBuffer)
    as_scalar : Proc(ID3D10EffectShaderVariable*, ID3D10EffectScalarVariable)
    as_vector : Proc(ID3D10EffectShaderVariable*, ID3D10EffectVectorVariable)
    as_matrix : Proc(ID3D10EffectShaderVariable*, ID3D10EffectMatrixVariable)
    as_string : Proc(ID3D10EffectShaderVariable*, ID3D10EffectStringVariable)
    as_shader_resource : Proc(ID3D10EffectShaderVariable*, ID3D10EffectShaderResourceVariable)
    as_render_target_view : Proc(ID3D10EffectShaderVariable*, ID3D10EffectRenderTargetViewVariable)
    as_depth_stencil_view : Proc(ID3D10EffectShaderVariable*, ID3D10EffectDepthStencilViewVariable)
    as_constant_buffer : Proc(ID3D10EffectShaderVariable*, ID3D10EffectConstantBuffer)
    as_shader : Proc(ID3D10EffectShaderVariable*, ID3D10EffectShaderVariable)
    as_blend : Proc(ID3D10EffectShaderVariable*, ID3D10EffectBlendVariable)
    as_depth_stencil : Proc(ID3D10EffectShaderVariable*, ID3D10EffectDepthStencilVariable)
    as_rasterizer : Proc(ID3D10EffectShaderVariable*, ID3D10EffectRasterizerVariable)
    as_sampler : Proc(ID3D10EffectShaderVariable*, ID3D10EffectSamplerVariable)
    set_raw_value : Proc(ID3D10EffectShaderVariable*, Void*, UInt32, UInt32, HRESULT)
    get_raw_value : Proc(ID3D10EffectShaderVariable*, Void*, UInt32, UInt32, HRESULT)
    get_shader_desc : Proc(ID3D10EffectShaderVariable*, UInt32, D3D10_EFFECT_SHADER_DESC*, HRESULT)
    get_vertex_shader : Proc(ID3D10EffectShaderVariable*, UInt32, ID3D10VertexShader*, HRESULT)
    get_geometry_shader : Proc(ID3D10EffectShaderVariable*, UInt32, ID3D10GeometryShader*, HRESULT)
    get_pixel_shader : Proc(ID3D10EffectShaderVariable*, UInt32, ID3D10PixelShader*, HRESULT)
    get_input_signature_element_desc : Proc(ID3D10EffectShaderVariable*, UInt32, UInt32, D3D10_SIGNATURE_PARAMETER_DESC*, HRESULT)
    get_output_signature_element_desc : Proc(ID3D10EffectShaderVariable*, UInt32, UInt32, D3D10_SIGNATURE_PARAMETER_DESC*, HRESULT)
  end

  ID3D10EffectShaderVariable_GUID = LibC::GUID.new("80849279-c799-4797-8c33-0407a07d9e06")
  CLSID_ID3D10EffectShaderVariable = "80849279-c799-4797-8c33-0407a07d9e06"
  struct ID3D10EffectShaderVariable
    lpVtbl : ID3D10EffectShaderVariableVTbl*
  end

  struct ID3D10EffectBlendVariableVTbl
    is_valid : Proc(ID3D10EffectBlendVariable*, LibC::BOOL)
    get_type : Proc(ID3D10EffectBlendVariable*, ID3D10EffectType)
    get_desc : Proc(ID3D10EffectBlendVariable*, D3D10_EFFECT_VARIABLE_DESC*, HRESULT)
    get_annotation_by_index : Proc(ID3D10EffectBlendVariable*, UInt32, ID3D10EffectVariable)
    get_annotation_by_name : Proc(ID3D10EffectBlendVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_index : Proc(ID3D10EffectBlendVariable*, UInt32, ID3D10EffectVariable)
    get_member_by_name : Proc(ID3D10EffectBlendVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_semantic : Proc(ID3D10EffectBlendVariable*, PSTR, ID3D10EffectVariable)
    get_element : Proc(ID3D10EffectBlendVariable*, UInt32, ID3D10EffectVariable)
    get_parent_constant_buffer : Proc(ID3D10EffectBlendVariable*, ID3D10EffectConstantBuffer)
    as_scalar : Proc(ID3D10EffectBlendVariable*, ID3D10EffectScalarVariable)
    as_vector : Proc(ID3D10EffectBlendVariable*, ID3D10EffectVectorVariable)
    as_matrix : Proc(ID3D10EffectBlendVariable*, ID3D10EffectMatrixVariable)
    as_string : Proc(ID3D10EffectBlendVariable*, ID3D10EffectStringVariable)
    as_shader_resource : Proc(ID3D10EffectBlendVariable*, ID3D10EffectShaderResourceVariable)
    as_render_target_view : Proc(ID3D10EffectBlendVariable*, ID3D10EffectRenderTargetViewVariable)
    as_depth_stencil_view : Proc(ID3D10EffectBlendVariable*, ID3D10EffectDepthStencilViewVariable)
    as_constant_buffer : Proc(ID3D10EffectBlendVariable*, ID3D10EffectConstantBuffer)
    as_shader : Proc(ID3D10EffectBlendVariable*, ID3D10EffectShaderVariable)
    as_blend : Proc(ID3D10EffectBlendVariable*, ID3D10EffectBlendVariable)
    as_depth_stencil : Proc(ID3D10EffectBlendVariable*, ID3D10EffectDepthStencilVariable)
    as_rasterizer : Proc(ID3D10EffectBlendVariable*, ID3D10EffectRasterizerVariable)
    as_sampler : Proc(ID3D10EffectBlendVariable*, ID3D10EffectSamplerVariable)
    set_raw_value : Proc(ID3D10EffectBlendVariable*, Void*, UInt32, UInt32, HRESULT)
    get_raw_value : Proc(ID3D10EffectBlendVariable*, Void*, UInt32, UInt32, HRESULT)
    get_blend_state : Proc(ID3D10EffectBlendVariable*, UInt32, ID3D10BlendState*, HRESULT)
    get_backing_store : Proc(ID3D10EffectBlendVariable*, UInt32, D3D10_BLEND_DESC*, HRESULT)
  end

  ID3D10EffectBlendVariable_GUID = LibC::GUID.new("1fcd2294-df6d-4eae-86b3-0e9160cfb07b")
  CLSID_ID3D10EffectBlendVariable = "1fcd2294-df6d-4eae-86b3-0e9160cfb07b"
  struct ID3D10EffectBlendVariable
    lpVtbl : ID3D10EffectBlendVariableVTbl*
  end

  struct ID3D10EffectDepthStencilVariableVTbl
    is_valid : Proc(ID3D10EffectDepthStencilVariable*, LibC::BOOL)
    get_type : Proc(ID3D10EffectDepthStencilVariable*, ID3D10EffectType)
    get_desc : Proc(ID3D10EffectDepthStencilVariable*, D3D10_EFFECT_VARIABLE_DESC*, HRESULT)
    get_annotation_by_index : Proc(ID3D10EffectDepthStencilVariable*, UInt32, ID3D10EffectVariable)
    get_annotation_by_name : Proc(ID3D10EffectDepthStencilVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_index : Proc(ID3D10EffectDepthStencilVariable*, UInt32, ID3D10EffectVariable)
    get_member_by_name : Proc(ID3D10EffectDepthStencilVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_semantic : Proc(ID3D10EffectDepthStencilVariable*, PSTR, ID3D10EffectVariable)
    get_element : Proc(ID3D10EffectDepthStencilVariable*, UInt32, ID3D10EffectVariable)
    get_parent_constant_buffer : Proc(ID3D10EffectDepthStencilVariable*, ID3D10EffectConstantBuffer)
    as_scalar : Proc(ID3D10EffectDepthStencilVariable*, ID3D10EffectScalarVariable)
    as_vector : Proc(ID3D10EffectDepthStencilVariable*, ID3D10EffectVectorVariable)
    as_matrix : Proc(ID3D10EffectDepthStencilVariable*, ID3D10EffectMatrixVariable)
    as_string : Proc(ID3D10EffectDepthStencilVariable*, ID3D10EffectStringVariable)
    as_shader_resource : Proc(ID3D10EffectDepthStencilVariable*, ID3D10EffectShaderResourceVariable)
    as_render_target_view : Proc(ID3D10EffectDepthStencilVariable*, ID3D10EffectRenderTargetViewVariable)
    as_depth_stencil_view : Proc(ID3D10EffectDepthStencilVariable*, ID3D10EffectDepthStencilViewVariable)
    as_constant_buffer : Proc(ID3D10EffectDepthStencilVariable*, ID3D10EffectConstantBuffer)
    as_shader : Proc(ID3D10EffectDepthStencilVariable*, ID3D10EffectShaderVariable)
    as_blend : Proc(ID3D10EffectDepthStencilVariable*, ID3D10EffectBlendVariable)
    as_depth_stencil : Proc(ID3D10EffectDepthStencilVariable*, ID3D10EffectDepthStencilVariable)
    as_rasterizer : Proc(ID3D10EffectDepthStencilVariable*, ID3D10EffectRasterizerVariable)
    as_sampler : Proc(ID3D10EffectDepthStencilVariable*, ID3D10EffectSamplerVariable)
    set_raw_value : Proc(ID3D10EffectDepthStencilVariable*, Void*, UInt32, UInt32, HRESULT)
    get_raw_value : Proc(ID3D10EffectDepthStencilVariable*, Void*, UInt32, UInt32, HRESULT)
    get_depth_stencil_state : Proc(ID3D10EffectDepthStencilVariable*, UInt32, ID3D10DepthStencilState*, HRESULT)
    get_backing_store : Proc(ID3D10EffectDepthStencilVariable*, UInt32, D3D10_DEPTH_STENCIL_DESC*, HRESULT)
  end

  ID3D10EffectDepthStencilVariable_GUID = LibC::GUID.new("af482368-330a-46a5-9a5c-01c71af24c8d")
  CLSID_ID3D10EffectDepthStencilVariable = "af482368-330a-46a5-9a5c-01c71af24c8d"
  struct ID3D10EffectDepthStencilVariable
    lpVtbl : ID3D10EffectDepthStencilVariableVTbl*
  end

  struct ID3D10EffectRasterizerVariableVTbl
    is_valid : Proc(ID3D10EffectRasterizerVariable*, LibC::BOOL)
    get_type : Proc(ID3D10EffectRasterizerVariable*, ID3D10EffectType)
    get_desc : Proc(ID3D10EffectRasterizerVariable*, D3D10_EFFECT_VARIABLE_DESC*, HRESULT)
    get_annotation_by_index : Proc(ID3D10EffectRasterizerVariable*, UInt32, ID3D10EffectVariable)
    get_annotation_by_name : Proc(ID3D10EffectRasterizerVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_index : Proc(ID3D10EffectRasterizerVariable*, UInt32, ID3D10EffectVariable)
    get_member_by_name : Proc(ID3D10EffectRasterizerVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_semantic : Proc(ID3D10EffectRasterizerVariable*, PSTR, ID3D10EffectVariable)
    get_element : Proc(ID3D10EffectRasterizerVariable*, UInt32, ID3D10EffectVariable)
    get_parent_constant_buffer : Proc(ID3D10EffectRasterizerVariable*, ID3D10EffectConstantBuffer)
    as_scalar : Proc(ID3D10EffectRasterizerVariable*, ID3D10EffectScalarVariable)
    as_vector : Proc(ID3D10EffectRasterizerVariable*, ID3D10EffectVectorVariable)
    as_matrix : Proc(ID3D10EffectRasterizerVariable*, ID3D10EffectMatrixVariable)
    as_string : Proc(ID3D10EffectRasterizerVariable*, ID3D10EffectStringVariable)
    as_shader_resource : Proc(ID3D10EffectRasterizerVariable*, ID3D10EffectShaderResourceVariable)
    as_render_target_view : Proc(ID3D10EffectRasterizerVariable*, ID3D10EffectRenderTargetViewVariable)
    as_depth_stencil_view : Proc(ID3D10EffectRasterizerVariable*, ID3D10EffectDepthStencilViewVariable)
    as_constant_buffer : Proc(ID3D10EffectRasterizerVariable*, ID3D10EffectConstantBuffer)
    as_shader : Proc(ID3D10EffectRasterizerVariable*, ID3D10EffectShaderVariable)
    as_blend : Proc(ID3D10EffectRasterizerVariable*, ID3D10EffectBlendVariable)
    as_depth_stencil : Proc(ID3D10EffectRasterizerVariable*, ID3D10EffectDepthStencilVariable)
    as_rasterizer : Proc(ID3D10EffectRasterizerVariable*, ID3D10EffectRasterizerVariable)
    as_sampler : Proc(ID3D10EffectRasterizerVariable*, ID3D10EffectSamplerVariable)
    set_raw_value : Proc(ID3D10EffectRasterizerVariable*, Void*, UInt32, UInt32, HRESULT)
    get_raw_value : Proc(ID3D10EffectRasterizerVariable*, Void*, UInt32, UInt32, HRESULT)
    get_rasterizer_state : Proc(ID3D10EffectRasterizerVariable*, UInt32, ID3D10RasterizerState*, HRESULT)
    get_backing_store : Proc(ID3D10EffectRasterizerVariable*, UInt32, D3D10_RASTERIZER_DESC*, HRESULT)
  end

  ID3D10EffectRasterizerVariable_GUID = LibC::GUID.new("21af9f0e-4d94-4ea9-9785-2cb76b8c0b34")
  CLSID_ID3D10EffectRasterizerVariable = "21af9f0e-4d94-4ea9-9785-2cb76b8c0b34"
  struct ID3D10EffectRasterizerVariable
    lpVtbl : ID3D10EffectRasterizerVariableVTbl*
  end

  struct ID3D10EffectSamplerVariableVTbl
    is_valid : Proc(ID3D10EffectSamplerVariable*, LibC::BOOL)
    get_type : Proc(ID3D10EffectSamplerVariable*, ID3D10EffectType)
    get_desc : Proc(ID3D10EffectSamplerVariable*, D3D10_EFFECT_VARIABLE_DESC*, HRESULT)
    get_annotation_by_index : Proc(ID3D10EffectSamplerVariable*, UInt32, ID3D10EffectVariable)
    get_annotation_by_name : Proc(ID3D10EffectSamplerVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_index : Proc(ID3D10EffectSamplerVariable*, UInt32, ID3D10EffectVariable)
    get_member_by_name : Proc(ID3D10EffectSamplerVariable*, PSTR, ID3D10EffectVariable)
    get_member_by_semantic : Proc(ID3D10EffectSamplerVariable*, PSTR, ID3D10EffectVariable)
    get_element : Proc(ID3D10EffectSamplerVariable*, UInt32, ID3D10EffectVariable)
    get_parent_constant_buffer : Proc(ID3D10EffectSamplerVariable*, ID3D10EffectConstantBuffer)
    as_scalar : Proc(ID3D10EffectSamplerVariable*, ID3D10EffectScalarVariable)
    as_vector : Proc(ID3D10EffectSamplerVariable*, ID3D10EffectVectorVariable)
    as_matrix : Proc(ID3D10EffectSamplerVariable*, ID3D10EffectMatrixVariable)
    as_string : Proc(ID3D10EffectSamplerVariable*, ID3D10EffectStringVariable)
    as_shader_resource : Proc(ID3D10EffectSamplerVariable*, ID3D10EffectShaderResourceVariable)
    as_render_target_view : Proc(ID3D10EffectSamplerVariable*, ID3D10EffectRenderTargetViewVariable)
    as_depth_stencil_view : Proc(ID3D10EffectSamplerVariable*, ID3D10EffectDepthStencilViewVariable)
    as_constant_buffer : Proc(ID3D10EffectSamplerVariable*, ID3D10EffectConstantBuffer)
    as_shader : Proc(ID3D10EffectSamplerVariable*, ID3D10EffectShaderVariable)
    as_blend : Proc(ID3D10EffectSamplerVariable*, ID3D10EffectBlendVariable)
    as_depth_stencil : Proc(ID3D10EffectSamplerVariable*, ID3D10EffectDepthStencilVariable)
    as_rasterizer : Proc(ID3D10EffectSamplerVariable*, ID3D10EffectRasterizerVariable)
    as_sampler : Proc(ID3D10EffectSamplerVariable*, ID3D10EffectSamplerVariable)
    set_raw_value : Proc(ID3D10EffectSamplerVariable*, Void*, UInt32, UInt32, HRESULT)
    get_raw_value : Proc(ID3D10EffectSamplerVariable*, Void*, UInt32, UInt32, HRESULT)
    get_sampler : Proc(ID3D10EffectSamplerVariable*, UInt32, ID3D10SamplerState*, HRESULT)
    get_backing_store : Proc(ID3D10EffectSamplerVariable*, UInt32, D3D10_SAMPLER_DESC*, HRESULT)
  end

  ID3D10EffectSamplerVariable_GUID = LibC::GUID.new("6530d5c7-07e9-4271-a418-e7ce4bd1e480")
  CLSID_ID3D10EffectSamplerVariable = "6530d5c7-07e9-4271-a418-e7ce4bd1e480"
  struct ID3D10EffectSamplerVariable
    lpVtbl : ID3D10EffectSamplerVariableVTbl*
  end

  struct ID3D10EffectPassVTbl
    is_valid : Proc(ID3D10EffectPass*, LibC::BOOL)
    get_desc : Proc(ID3D10EffectPass*, D3D10_PASS_DESC*, HRESULT)
    get_vertex_shader_desc : Proc(ID3D10EffectPass*, D3D10_PASS_SHADER_DESC*, HRESULT)
    get_geometry_shader_desc : Proc(ID3D10EffectPass*, D3D10_PASS_SHADER_DESC*, HRESULT)
    get_pixel_shader_desc : Proc(ID3D10EffectPass*, D3D10_PASS_SHADER_DESC*, HRESULT)
    get_annotation_by_index : Proc(ID3D10EffectPass*, UInt32, ID3D10EffectVariable)
    get_annotation_by_name : Proc(ID3D10EffectPass*, PSTR, ID3D10EffectVariable)
    apply : Proc(ID3D10EffectPass*, UInt32, HRESULT)
    compute_state_block_mask : Proc(ID3D10EffectPass*, D3D10_STATE_BLOCK_MASK*, HRESULT)
  end

  ID3D10EffectPass_GUID = LibC::GUID.new("5cfbeb89-1a06-46e0-b282-e3f9bfa36a54")
  CLSID_ID3D10EffectPass = "5cfbeb89-1a06-46e0-b282-e3f9bfa36a54"
  struct ID3D10EffectPass
    lpVtbl : ID3D10EffectPassVTbl*
  end

  struct ID3D10EffectTechniqueVTbl
    is_valid : Proc(ID3D10EffectTechnique*, LibC::BOOL)
    get_desc : Proc(ID3D10EffectTechnique*, D3D10_TECHNIQUE_DESC*, HRESULT)
    get_annotation_by_index : Proc(ID3D10EffectTechnique*, UInt32, ID3D10EffectVariable)
    get_annotation_by_name : Proc(ID3D10EffectTechnique*, PSTR, ID3D10EffectVariable)
    get_pass_by_index : Proc(ID3D10EffectTechnique*, UInt32, ID3D10EffectPass)
    get_pass_by_name : Proc(ID3D10EffectTechnique*, PSTR, ID3D10EffectPass)
    compute_state_block_mask : Proc(ID3D10EffectTechnique*, D3D10_STATE_BLOCK_MASK*, HRESULT)
  end

  ID3D10EffectTechnique_GUID = LibC::GUID.new("db122ce8-d1c9-4292-b237-24ed3de8b175")
  CLSID_ID3D10EffectTechnique = "db122ce8-d1c9-4292-b237-24ed3de8b175"
  struct ID3D10EffectTechnique
    lpVtbl : ID3D10EffectTechniqueVTbl*
  end

  struct ID3D10EffectVTbl
    query_interface : Proc(ID3D10Effect*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10Effect*, UInt32)
    release : Proc(ID3D10Effect*, UInt32)
    is_valid : Proc(ID3D10Effect*, LibC::BOOL)
    is_pool : Proc(ID3D10Effect*, LibC::BOOL)
    get_device : Proc(ID3D10Effect*, ID3D10Device*, HRESULT)
    get_desc : Proc(ID3D10Effect*, D3D10_EFFECT_DESC*, HRESULT)
    get_constant_buffer_by_index : Proc(ID3D10Effect*, UInt32, ID3D10EffectConstantBuffer)
    get_constant_buffer_by_name : Proc(ID3D10Effect*, PSTR, ID3D10EffectConstantBuffer)
    get_variable_by_index : Proc(ID3D10Effect*, UInt32, ID3D10EffectVariable)
    get_variable_by_name : Proc(ID3D10Effect*, PSTR, ID3D10EffectVariable)
    get_variable_by_semantic : Proc(ID3D10Effect*, PSTR, ID3D10EffectVariable)
    get_technique_by_index : Proc(ID3D10Effect*, UInt32, ID3D10EffectTechnique)
    get_technique_by_name : Proc(ID3D10Effect*, PSTR, ID3D10EffectTechnique)
    optimize : Proc(ID3D10Effect*, HRESULT)
    is_optimized : Proc(ID3D10Effect*, LibC::BOOL)
  end

  ID3D10Effect_GUID = LibC::GUID.new("51b0ca8b-ec0b-4519-870d-8ee1cb5017c7")
  CLSID_ID3D10Effect = "51b0ca8b-ec0b-4519-870d-8ee1cb5017c7"
  struct ID3D10Effect
    lpVtbl : ID3D10EffectVTbl*
  end

  struct ID3D10EffectPoolVTbl
    query_interface : Proc(ID3D10EffectPool*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10EffectPool*, UInt32)
    release : Proc(ID3D10EffectPool*, UInt32)
    as_effect : Proc(ID3D10EffectPool*, ID3D10Effect)
  end

  ID3D10EffectPool_GUID = LibC::GUID.new("9537ab04-3250-412e-8213-fcd2f8677933")
  CLSID_ID3D10EffectPool = "9537ab04-3250-412e-8213-fcd2f8677933"
  struct ID3D10EffectPool
    lpVtbl : ID3D10EffectPoolVTbl*
  end

  struct ID3D10BlendState1VTbl
    query_interface : Proc(ID3D10BlendState1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10BlendState1*, UInt32)
    release : Proc(ID3D10BlendState1*, UInt32)
    get_device : Proc(ID3D10BlendState1*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10BlendState1*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10BlendState1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10BlendState1*, Guid*, IUnknown, HRESULT)
    get_desc : Proc(ID3D10BlendState1*, D3D10_BLEND_DESC*, Void)
    get_desc1 : Proc(ID3D10BlendState1*, D3D10_BLEND_DESC1*, Void)
  end

  ID3D10BlendState1_GUID = LibC::GUID.new("edad8d99-8a35-4d6d-8566-2ea276cde161")
  CLSID_ID3D10BlendState1 = "edad8d99-8a35-4d6d-8566-2ea276cde161"
  struct ID3D10BlendState1
    lpVtbl : ID3D10BlendState1VTbl*
  end

  struct ID3D10ShaderResourceView1VTbl
    query_interface : Proc(ID3D10ShaderResourceView1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10ShaderResourceView1*, UInt32)
    release : Proc(ID3D10ShaderResourceView1*, UInt32)
    get_device : Proc(ID3D10ShaderResourceView1*, ID3D10Device*, Void)
    get_private_data : Proc(ID3D10ShaderResourceView1*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10ShaderResourceView1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10ShaderResourceView1*, Guid*, IUnknown, HRESULT)
    get_resource : Proc(ID3D10ShaderResourceView1*, ID3D10Resource*, Void)
    get_desc : Proc(ID3D10ShaderResourceView1*, D3D10_SHADER_RESOURCE_VIEW_DESC*, Void)
    get_desc1 : Proc(ID3D10ShaderResourceView1*, D3D10_SHADER_RESOURCE_VIEW_DESC1*, Void)
  end

  ID3D10ShaderResourceView1_GUID = LibC::GUID.new("9b7e4c87-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10ShaderResourceView1 = "9b7e4c87-342c-4106-a19f-4f2704f689f0"
  struct ID3D10ShaderResourceView1
    lpVtbl : ID3D10ShaderResourceView1VTbl*
  end

  struct ID3D10Device1VTbl
    query_interface : Proc(ID3D10Device1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10Device1*, UInt32)
    release : Proc(ID3D10Device1*, UInt32)
    vs_set_constant_buffers : Proc(ID3D10Device1*, UInt32, UInt32, ID3D10Buffer*, Void)
    ps_set_shader_resources : Proc(ID3D10Device1*, UInt32, UInt32, ID3D10ShaderResourceView*, Void)
    ps_set_shader : Proc(ID3D10Device1*, ID3D10PixelShader, Void)
    ps_set_samplers : Proc(ID3D10Device1*, UInt32, UInt32, ID3D10SamplerState*, Void)
    vs_set_shader : Proc(ID3D10Device1*, ID3D10VertexShader, Void)
    draw_indexed : Proc(ID3D10Device1*, UInt32, UInt32, Int32, Void)
    draw : Proc(ID3D10Device1*, UInt32, UInt32, Void)
    ps_set_constant_buffers : Proc(ID3D10Device1*, UInt32, UInt32, ID3D10Buffer*, Void)
    ia_set_input_layout : Proc(ID3D10Device1*, ID3D10InputLayout, Void)
    ia_set_vertex_buffers : Proc(ID3D10Device1*, UInt32, UInt32, ID3D10Buffer*, UInt32*, UInt32*, Void)
    ia_set_index_buffer : Proc(ID3D10Device1*, ID3D10Buffer, DXGI_FORMAT, UInt32, Void)
    draw_indexed_instanced : Proc(ID3D10Device1*, UInt32, UInt32, UInt32, Int32, UInt32, Void)
    draw_instanced : Proc(ID3D10Device1*, UInt32, UInt32, UInt32, UInt32, Void)
    gs_set_constant_buffers : Proc(ID3D10Device1*, UInt32, UInt32, ID3D10Buffer*, Void)
    gs_set_shader : Proc(ID3D10Device1*, ID3D10GeometryShader, Void)
    ia_set_primitive_topology : Proc(ID3D10Device1*, D3D_PRIMITIVE_TOPOLOGY, Void)
    vs_set_shader_resources : Proc(ID3D10Device1*, UInt32, UInt32, ID3D10ShaderResourceView*, Void)
    vs_set_samplers : Proc(ID3D10Device1*, UInt32, UInt32, ID3D10SamplerState*, Void)
    set_predication : Proc(ID3D10Device1*, ID3D10Predicate, LibC::BOOL, Void)
    gs_set_shader_resources : Proc(ID3D10Device1*, UInt32, UInt32, ID3D10ShaderResourceView*, Void)
    gs_set_samplers : Proc(ID3D10Device1*, UInt32, UInt32, ID3D10SamplerState*, Void)
    om_set_render_targets : Proc(ID3D10Device1*, UInt32, ID3D10RenderTargetView*, ID3D10DepthStencilView, Void)
    om_set_blend_state : Proc(ID3D10Device1*, ID3D10BlendState, Float32*, UInt32, Void)
    om_set_depth_stencil_state : Proc(ID3D10Device1*, ID3D10DepthStencilState, UInt32, Void)
    so_set_targets : Proc(ID3D10Device1*, UInt32, ID3D10Buffer*, UInt32*, Void)
    draw_auto : Proc(ID3D10Device1*, Void)
    rs_set_state : Proc(ID3D10Device1*, ID3D10RasterizerState, Void)
    rs_set_viewports : Proc(ID3D10Device1*, UInt32, D3D10_VIEWPORT*, Void)
    rs_set_scissor_rects : Proc(ID3D10Device1*, UInt32, RECT*, Void)
    copy_subresource_region : Proc(ID3D10Device1*, ID3D10Resource, UInt32, UInt32, UInt32, UInt32, ID3D10Resource, UInt32, D3D10_BOX*, Void)
    copy_resource : Proc(ID3D10Device1*, ID3D10Resource, ID3D10Resource, Void)
    update_subresource : Proc(ID3D10Device1*, ID3D10Resource, UInt32, D3D10_BOX*, Void*, UInt32, UInt32, Void)
    clear_render_target_view : Proc(ID3D10Device1*, ID3D10RenderTargetView, Float32*, Void)
    clear_depth_stencil_view : Proc(ID3D10Device1*, ID3D10DepthStencilView, UInt32, Float32, UInt8, Void)
    generate_mips : Proc(ID3D10Device1*, ID3D10ShaderResourceView, Void)
    resolve_subresource : Proc(ID3D10Device1*, ID3D10Resource, UInt32, ID3D10Resource, UInt32, DXGI_FORMAT, Void)
    vs_get_constant_buffers : Proc(ID3D10Device1*, UInt32, UInt32, ID3D10Buffer*, Void)
    ps_get_shader_resources : Proc(ID3D10Device1*, UInt32, UInt32, ID3D10ShaderResourceView*, Void)
    ps_get_shader : Proc(ID3D10Device1*, ID3D10PixelShader*, Void)
    ps_get_samplers : Proc(ID3D10Device1*, UInt32, UInt32, ID3D10SamplerState*, Void)
    vs_get_shader : Proc(ID3D10Device1*, ID3D10VertexShader*, Void)
    ps_get_constant_buffers : Proc(ID3D10Device1*, UInt32, UInt32, ID3D10Buffer*, Void)
    ia_get_input_layout : Proc(ID3D10Device1*, ID3D10InputLayout*, Void)
    ia_get_vertex_buffers : Proc(ID3D10Device1*, UInt32, UInt32, ID3D10Buffer*, UInt32*, UInt32*, Void)
    ia_get_index_buffer : Proc(ID3D10Device1*, ID3D10Buffer*, DXGI_FORMAT*, UInt32*, Void)
    gs_get_constant_buffers : Proc(ID3D10Device1*, UInt32, UInt32, ID3D10Buffer*, Void)
    gs_get_shader : Proc(ID3D10Device1*, ID3D10GeometryShader*, Void)
    ia_get_primitive_topology : Proc(ID3D10Device1*, D3D_PRIMITIVE_TOPOLOGY*, Void)
    vs_get_shader_resources : Proc(ID3D10Device1*, UInt32, UInt32, ID3D10ShaderResourceView*, Void)
    vs_get_samplers : Proc(ID3D10Device1*, UInt32, UInt32, ID3D10SamplerState*, Void)
    get_predication : Proc(ID3D10Device1*, ID3D10Predicate*, LibC::BOOL*, Void)
    gs_get_shader_resources : Proc(ID3D10Device1*, UInt32, UInt32, ID3D10ShaderResourceView*, Void)
    gs_get_samplers : Proc(ID3D10Device1*, UInt32, UInt32, ID3D10SamplerState*, Void)
    om_get_render_targets : Proc(ID3D10Device1*, UInt32, ID3D10RenderTargetView*, ID3D10DepthStencilView*, Void)
    om_get_blend_state : Proc(ID3D10Device1*, ID3D10BlendState*, Float32*, UInt32*, Void)
    om_get_depth_stencil_state : Proc(ID3D10Device1*, ID3D10DepthStencilState*, UInt32*, Void)
    so_get_targets : Proc(ID3D10Device1*, UInt32, ID3D10Buffer*, UInt32*, Void)
    rs_get_state : Proc(ID3D10Device1*, ID3D10RasterizerState*, Void)
    rs_get_viewports : Proc(ID3D10Device1*, UInt32*, D3D10_VIEWPORT*, Void)
    rs_get_scissor_rects : Proc(ID3D10Device1*, UInt32*, RECT*, Void)
    get_device_removed_reason : Proc(ID3D10Device1*, HRESULT)
    set_exception_mode : Proc(ID3D10Device1*, UInt32, HRESULT)
    get_exception_mode : Proc(ID3D10Device1*, UInt32)
    get_private_data : Proc(ID3D10Device1*, Guid*, UInt32*, Void*, HRESULT)
    set_private_data : Proc(ID3D10Device1*, Guid*, UInt32, Void*, HRESULT)
    set_private_data_interface : Proc(ID3D10Device1*, Guid*, IUnknown, HRESULT)
    clear_state : Proc(ID3D10Device1*, Void)
    flush : Proc(ID3D10Device1*, Void)
    create_buffer : Proc(ID3D10Device1*, D3D10_BUFFER_DESC*, D3D10_SUBRESOURCE_DATA*, ID3D10Buffer*, HRESULT)
    create_texture1_d : Proc(ID3D10Device1*, D3D10_TEXTURE1D_DESC*, D3D10_SUBRESOURCE_DATA*, ID3D10Texture1D*, HRESULT)
    create_texture2_d : Proc(ID3D10Device1*, D3D10_TEXTURE2D_DESC*, D3D10_SUBRESOURCE_DATA*, ID3D10Texture2D*, HRESULT)
    create_texture3_d : Proc(ID3D10Device1*, D3D10_TEXTURE3D_DESC*, D3D10_SUBRESOURCE_DATA*, ID3D10Texture3D*, HRESULT)
    create_shader_resource_view : Proc(ID3D10Device1*, ID3D10Resource, D3D10_SHADER_RESOURCE_VIEW_DESC*, ID3D10ShaderResourceView*, HRESULT)
    create_render_target_view : Proc(ID3D10Device1*, ID3D10Resource, D3D10_RENDER_TARGET_VIEW_DESC*, ID3D10RenderTargetView*, HRESULT)
    create_depth_stencil_view : Proc(ID3D10Device1*, ID3D10Resource, D3D10_DEPTH_STENCIL_VIEW_DESC*, ID3D10DepthStencilView*, HRESULT)
    create_input_layout : Proc(ID3D10Device1*, D3D10_INPUT_ELEMENT_DESC*, UInt32, Void*, LibC::UINT_PTR, ID3D10InputLayout*, HRESULT)
    create_vertex_shader : Proc(ID3D10Device1*, Void*, LibC::UINT_PTR, ID3D10VertexShader*, HRESULT)
    create_geometry_shader : Proc(ID3D10Device1*, Void*, LibC::UINT_PTR, ID3D10GeometryShader*, HRESULT)
    create_geometry_shader_with_stream_output : Proc(ID3D10Device1*, Void*, LibC::UINT_PTR, D3D10_SO_DECLARATION_ENTRY*, UInt32, UInt32, ID3D10GeometryShader*, HRESULT)
    create_pixel_shader : Proc(ID3D10Device1*, Void*, LibC::UINT_PTR, ID3D10PixelShader*, HRESULT)
    create_blend_state : Proc(ID3D10Device1*, D3D10_BLEND_DESC*, ID3D10BlendState*, HRESULT)
    create_depth_stencil_state : Proc(ID3D10Device1*, D3D10_DEPTH_STENCIL_DESC*, ID3D10DepthStencilState*, HRESULT)
    create_rasterizer_state : Proc(ID3D10Device1*, D3D10_RASTERIZER_DESC*, ID3D10RasterizerState*, HRESULT)
    create_sampler_state : Proc(ID3D10Device1*, D3D10_SAMPLER_DESC*, ID3D10SamplerState*, HRESULT)
    create_query : Proc(ID3D10Device1*, D3D10_QUERY_DESC*, ID3D10Query*, HRESULT)
    create_predicate : Proc(ID3D10Device1*, D3D10_QUERY_DESC*, ID3D10Predicate*, HRESULT)
    create_counter : Proc(ID3D10Device1*, D3D10_COUNTER_DESC*, ID3D10Counter*, HRESULT)
    check_format_support : Proc(ID3D10Device1*, DXGI_FORMAT, UInt32*, HRESULT)
    check_multisample_quality_levels : Proc(ID3D10Device1*, DXGI_FORMAT, UInt32, UInt32*, HRESULT)
    check_counter_info : Proc(ID3D10Device1*, D3D10_COUNTER_INFO*, Void)
    check_counter : Proc(ID3D10Device1*, D3D10_COUNTER_DESC*, D3D10_COUNTER_TYPE*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, HRESULT)
    get_creation_flags : Proc(ID3D10Device1*, UInt32)
    open_shared_resource : Proc(ID3D10Device1*, LibC::HANDLE, Guid*, Void**, HRESULT)
    set_text_filter_size : Proc(ID3D10Device1*, UInt32, UInt32, Void)
    get_text_filter_size : Proc(ID3D10Device1*, UInt32*, UInt32*, Void)
    create_shader_resource_view1 : Proc(ID3D10Device1*, ID3D10Resource, D3D10_SHADER_RESOURCE_VIEW_DESC1*, ID3D10ShaderResourceView1*, HRESULT)
    create_blend_state1 : Proc(ID3D10Device1*, D3D10_BLEND_DESC1*, ID3D10BlendState1*, HRESULT)
    get_feature_level : Proc(ID3D10Device1*, D3D10_FEATURE_LEVEL1)
  end

  ID3D10Device1_GUID = LibC::GUID.new("9b7e4c8f-342c-4106-a19f-4f2704f689f0")
  CLSID_ID3D10Device1 = "9b7e4c8f-342c-4106-a19f-4f2704f689f0"
  struct ID3D10Device1
    lpVtbl : ID3D10Device1VTbl*
  end

  struct ID3D10ShaderReflection1VTbl
    query_interface : Proc(ID3D10ShaderReflection1*, Guid*, Void**, HRESULT)
    add_ref : Proc(ID3D10ShaderReflection1*, UInt32)
    release : Proc(ID3D10ShaderReflection1*, UInt32)
    get_desc : Proc(ID3D10ShaderReflection1*, D3D10_SHADER_DESC*, HRESULT)
    get_constant_buffer_by_index : Proc(ID3D10ShaderReflection1*, UInt32, ID3D10ShaderReflectionConstantBuffer)
    get_constant_buffer_by_name : Proc(ID3D10ShaderReflection1*, PSTR, ID3D10ShaderReflectionConstantBuffer)
    get_resource_binding_desc : Proc(ID3D10ShaderReflection1*, UInt32, D3D10_SHADER_INPUT_BIND_DESC*, HRESULT)
    get_input_parameter_desc : Proc(ID3D10ShaderReflection1*, UInt32, D3D10_SIGNATURE_PARAMETER_DESC*, HRESULT)
    get_output_parameter_desc : Proc(ID3D10ShaderReflection1*, UInt32, D3D10_SIGNATURE_PARAMETER_DESC*, HRESULT)
    get_variable_by_name : Proc(ID3D10ShaderReflection1*, PSTR, ID3D10ShaderReflectionVariable)
    get_resource_binding_desc_by_name : Proc(ID3D10ShaderReflection1*, PSTR, D3D10_SHADER_INPUT_BIND_DESC*, HRESULT)
    get_mov_instruction_count : Proc(ID3D10ShaderReflection1*, UInt32*, HRESULT)
    get_movc_instruction_count : Proc(ID3D10ShaderReflection1*, UInt32*, HRESULT)
    get_conversion_instruction_count : Proc(ID3D10ShaderReflection1*, UInt32*, HRESULT)
    get_bitwise_instruction_count : Proc(ID3D10ShaderReflection1*, UInt32*, HRESULT)
    get_gs_input_primitive : Proc(ID3D10ShaderReflection1*, D3D_PRIMITIVE*, HRESULT)
    is_level9_shader : Proc(ID3D10ShaderReflection1*, LibC::BOOL*, HRESULT)
    is_sample_frequency_shader : Proc(ID3D10ShaderReflection1*, LibC::BOOL*, HRESULT)
  end

  ID3D10ShaderReflection1_GUID = LibC::GUID.new("c3457783-a846-47ce-9520-cea6f66e7447")
  CLSID_ID3D10ShaderReflection1 = "c3457783-a846-47ce-9520-cea6f66e7447"
  struct ID3D10ShaderReflection1
    lpVtbl : ID3D10ShaderReflection1VTbl*
  end


  # Params # padapter : IDXGIAdapter [In],drivertype : D3D10_DRIVER_TYPE [In],software : HINSTANCE [In],flags : UInt32 [In],sdkversion : UInt32 [In],ppdevice : ID3D10Device* [In]
  fun D3D10CreateDevice(padapter : IDXGIAdapter, drivertype : D3D10_DRIVER_TYPE, software : HINSTANCE, flags : UInt32, sdkversion : UInt32, ppdevice : ID3D10Device*) : HRESULT

  # Params # padapter : IDXGIAdapter [In],drivertype : D3D10_DRIVER_TYPE [In],software : HINSTANCE [In],flags : UInt32 [In],sdkversion : UInt32 [In],pswapchaindesc : DXGI_SWAP_CHAIN_DESC* [In],ppswapchain : IDXGISwapChain* [In],ppdevice : ID3D10Device* [In]
  fun D3D10CreateDeviceAndSwapChain(padapter : IDXGIAdapter, drivertype : D3D10_DRIVER_TYPE, software : HINSTANCE, flags : UInt32, sdkversion : UInt32, pswapchaindesc : DXGI_SWAP_CHAIN_DESC*, ppswapchain : IDXGISwapChain*, ppdevice : ID3D10Device*) : HRESULT

  # Params # numbytes : LibC::UINT_PTR [In],ppbuffer : ID3DBlob* [In]
  fun D3D10CreateBlob(numbytes : LibC::UINT_PTR, ppbuffer : ID3DBlob*) : HRESULT

  # Params # psrcdata : PSTR [In],srcdatasize : LibC::UINT_PTR [In],pfilename : PSTR [In],pdefines : D3D_SHADER_MACRO* [In],pinclude : ID3DInclude [In],pfunctionname : PSTR [In],pprofile : PSTR [In],flags : UInt32 [In],ppshader : ID3DBlob* [In],pperrormsgs : ID3DBlob* [In]
  fun D3D10CompileShader(psrcdata : PSTR, srcdatasize : LibC::UINT_PTR, pfilename : PSTR, pdefines : D3D_SHADER_MACRO*, pinclude : ID3DInclude, pfunctionname : PSTR, pprofile : PSTR, flags : UInt32, ppshader : ID3DBlob*, pperrormsgs : ID3DBlob*) : HRESULT

  # Params # pshader : Void* [In],bytecodelength : LibC::UINT_PTR [In],enablecolorcode : LibC::BOOL [In],pcomments : PSTR [In],ppdisassembly : ID3DBlob* [In]
  fun D3D10DisassembleShader(pshader : Void*, bytecodelength : LibC::UINT_PTR, enablecolorcode : LibC::BOOL, pcomments : PSTR, ppdisassembly : ID3DBlob*) : HRESULT

  # Params # pdevice : ID3D10Device [In]
  fun D3D10GetPixelShaderProfile(pdevice : ID3D10Device) : PSTR

  # Params # pdevice : ID3D10Device [In]
  fun D3D10GetVertexShaderProfile(pdevice : ID3D10Device) : PSTR

  # Params # pdevice : ID3D10Device [In]
  fun D3D10GetGeometryShaderProfile(pdevice : ID3D10Device) : PSTR

  # Params # pshaderbytecode : Void* [In],bytecodelength : LibC::UINT_PTR [In],ppreflector : ID3D10ShaderReflection* [In]
  fun D3D10ReflectShader(pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, ppreflector : ID3D10ShaderReflection*) : HRESULT

  # Params # psrcdata : PSTR [In],srcdatasize : LibC::UINT_PTR [In],pfilename : PSTR [In],pdefines : D3D_SHADER_MACRO* [In],pinclude : ID3DInclude [In],ppshadertext : ID3DBlob* [In],pperrormsgs : ID3DBlob* [In]
  fun D3D10PreprocessShader(psrcdata : PSTR, srcdatasize : LibC::UINT_PTR, pfilename : PSTR, pdefines : D3D_SHADER_MACRO*, pinclude : ID3DInclude, ppshadertext : ID3DBlob*, pperrormsgs : ID3DBlob*) : HRESULT

  # Params # pshaderbytecode : Void* [In],bytecodelength : LibC::UINT_PTR [In],ppsignatureblob : ID3DBlob* [In]
  fun D3D10GetInputSignatureBlob(pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, ppsignatureblob : ID3DBlob*) : HRESULT

  # Params # pshaderbytecode : Void* [In],bytecodelength : LibC::UINT_PTR [In],ppsignatureblob : ID3DBlob* [In]
  fun D3D10GetOutputSignatureBlob(pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, ppsignatureblob : ID3DBlob*) : HRESULT

  # Params # pshaderbytecode : Void* [In],bytecodelength : LibC::UINT_PTR [In],ppsignatureblob : ID3DBlob* [In]
  fun D3D10GetInputAndOutputSignatureBlob(pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, ppsignatureblob : ID3DBlob*) : HRESULT

  # Params # pshaderbytecode : Void* [In],bytecodelength : LibC::UINT_PTR [In],ppdebuginfo : ID3DBlob* [In]
  fun D3D10GetShaderDebugInfo(pshaderbytecode : Void*, bytecodelength : LibC::UINT_PTR, ppdebuginfo : ID3DBlob*) : HRESULT

  # Params # pa : D3D10_STATE_BLOCK_MASK* [In],pb : D3D10_STATE_BLOCK_MASK* [In],presult : D3D10_STATE_BLOCK_MASK* [In]
  fun D3D10StateBlockMaskUnion(pa : D3D10_STATE_BLOCK_MASK*, pb : D3D10_STATE_BLOCK_MASK*, presult : D3D10_STATE_BLOCK_MASK*) : HRESULT

  # Params # pa : D3D10_STATE_BLOCK_MASK* [In],pb : D3D10_STATE_BLOCK_MASK* [In],presult : D3D10_STATE_BLOCK_MASK* [In]
  fun D3D10StateBlockMaskIntersect(pa : D3D10_STATE_BLOCK_MASK*, pb : D3D10_STATE_BLOCK_MASK*, presult : D3D10_STATE_BLOCK_MASK*) : HRESULT

  # Params # pa : D3D10_STATE_BLOCK_MASK* [In],pb : D3D10_STATE_BLOCK_MASK* [In],presult : D3D10_STATE_BLOCK_MASK* [In]
  fun D3D10StateBlockMaskDifference(pa : D3D10_STATE_BLOCK_MASK*, pb : D3D10_STATE_BLOCK_MASK*, presult : D3D10_STATE_BLOCK_MASK*) : HRESULT

  # Params # pmask : D3D10_STATE_BLOCK_MASK* [In],statetype : D3D10_DEVICE_STATE_TYPES [In],rangestart : UInt32 [In],rangelength : UInt32 [In]
  fun D3D10StateBlockMaskEnableCapture(pmask : D3D10_STATE_BLOCK_MASK*, statetype : D3D10_DEVICE_STATE_TYPES, rangestart : UInt32, rangelength : UInt32) : HRESULT

  # Params # pmask : D3D10_STATE_BLOCK_MASK* [In],statetype : D3D10_DEVICE_STATE_TYPES [In],rangestart : UInt32 [In],rangelength : UInt32 [In]
  fun D3D10StateBlockMaskDisableCapture(pmask : D3D10_STATE_BLOCK_MASK*, statetype : D3D10_DEVICE_STATE_TYPES, rangestart : UInt32, rangelength : UInt32) : HRESULT

  # Params # pmask : D3D10_STATE_BLOCK_MASK* [In]
  fun D3D10StateBlockMaskEnableAll(pmask : D3D10_STATE_BLOCK_MASK*) : HRESULT

  # Params # pmask : D3D10_STATE_BLOCK_MASK* [In]
  fun D3D10StateBlockMaskDisableAll(pmask : D3D10_STATE_BLOCK_MASK*) : HRESULT

  # Params # pmask : D3D10_STATE_BLOCK_MASK* [In],statetype : D3D10_DEVICE_STATE_TYPES [In],entry : UInt32 [In]
  fun D3D10StateBlockMaskGetSetting(pmask : D3D10_STATE_BLOCK_MASK*, statetype : D3D10_DEVICE_STATE_TYPES, entry : UInt32) : LibC::BOOL

  # Params # pdevice : ID3D10Device [In],pstateblockmask : D3D10_STATE_BLOCK_MASK* [In],ppstateblock : ID3D10StateBlock* [In]
  fun D3D10CreateStateBlock(pdevice : ID3D10Device, pstateblockmask : D3D10_STATE_BLOCK_MASK*, ppstateblock : ID3D10StateBlock*) : HRESULT

  # Params # pdata : Void* [In],datalength : LibC::UINT_PTR [In],psrcfilename : PSTR [In],pdefines : D3D_SHADER_MACRO* [In],pinclude : ID3DInclude [In],hlslflags : UInt32 [In],fxflags : UInt32 [In],ppcompiledeffect : ID3DBlob* [In],pperrors : ID3DBlob* [In]
  fun D3D10CompileEffectFromMemory(pdata : Void*, datalength : LibC::UINT_PTR, psrcfilename : PSTR, pdefines : D3D_SHADER_MACRO*, pinclude : ID3DInclude, hlslflags : UInt32, fxflags : UInt32, ppcompiledeffect : ID3DBlob*, pperrors : ID3DBlob*) : HRESULT

  # Params # pdata : Void* [In],datalength : LibC::UINT_PTR [In],fxflags : UInt32 [In],pdevice : ID3D10Device [In],peffectpool : ID3D10EffectPool [In],ppeffect : ID3D10Effect* [In]
  fun D3D10CreateEffectFromMemory(pdata : Void*, datalength : LibC::UINT_PTR, fxflags : UInt32, pdevice : ID3D10Device, peffectpool : ID3D10EffectPool, ppeffect : ID3D10Effect*) : HRESULT

  # Params # pdata : Void* [In],datalength : LibC::UINT_PTR [In],fxflags : UInt32 [In],pdevice : ID3D10Device [In],ppeffectpool : ID3D10EffectPool* [In]
  fun D3D10CreateEffectPoolFromMemory(pdata : Void*, datalength : LibC::UINT_PTR, fxflags : UInt32, pdevice : ID3D10Device, ppeffectpool : ID3D10EffectPool*) : HRESULT

  # Params # peffect : ID3D10Effect [In],enablecolorcode : LibC::BOOL [In],ppdisassembly : ID3DBlob* [In]
  fun D3D10DisassembleEffect(peffect : ID3D10Effect, enablecolorcode : LibC::BOOL, ppdisassembly : ID3DBlob*) : HRESULT

  # Params # padapter : IDXGIAdapter [In],drivertype : D3D10_DRIVER_TYPE [In],software : HINSTANCE [In],flags : UInt32 [In],hardwarelevel : D3D10_FEATURE_LEVEL1 [In],sdkversion : UInt32 [In],ppdevice : ID3D10Device1* [In]
  fun D3D10CreateDevice1(padapter : IDXGIAdapter, drivertype : D3D10_DRIVER_TYPE, software : HINSTANCE, flags : UInt32, hardwarelevel : D3D10_FEATURE_LEVEL1, sdkversion : UInt32, ppdevice : ID3D10Device1*) : HRESULT

  # Params # padapter : IDXGIAdapter [In],drivertype : D3D10_DRIVER_TYPE [In],software : HINSTANCE [In],flags : UInt32 [In],hardwarelevel : D3D10_FEATURE_LEVEL1 [In],sdkversion : UInt32 [In],pswapchaindesc : DXGI_SWAP_CHAIN_DESC* [In],ppswapchain : IDXGISwapChain* [In],ppdevice : ID3D10Device1* [In]
  fun D3D10CreateDeviceAndSwapChain1(padapter : IDXGIAdapter, drivertype : D3D10_DRIVER_TYPE, software : HINSTANCE, flags : UInt32, hardwarelevel : D3D10_FEATURE_LEVEL1, sdkversion : UInt32, pswapchaindesc : DXGI_SWAP_CHAIN_DESC*, ppswapchain : IDXGISwapChain*, ppdevice : ID3D10Device1*) : HRESULT
end
