require "./../foundation.cr"
require "./dxgi/common.cr"
require "./../system/com.cr"
require "./direct3_d.cr"
require "./dxgi.cr"

module Win32cr::Graphics::Direct3D10
  extend self
  alias PFN_D3D10_CREATE_DEVICE1 = Proc(Void*, Win32cr::Graphics::Direct3D10::D3D10_DRIVER_TYPE, Win32cr::Foundation::HINSTANCE, UInt32, Win32cr::Graphics::Direct3D10::D3D10_FEATURE_LEVEL1, UInt32, Void**, Win32cr::Foundation::HRESULT)

  alias PFN_D3D10_CREATE_DEVICE_AND_SWAP_CHAIN1 = Proc(Void*, Win32cr::Graphics::Direct3D10::D3D10_DRIVER_TYPE, Win32cr::Foundation::HINSTANCE, UInt32, Win32cr::Graphics::Direct3D10::D3D10_FEATURE_LEVEL1, UInt32, Win32cr::Graphics::Dxgi::DXGI_SWAP_CHAIN_DESC*, Void**, Void**, Win32cr::Foundation::HRESULT)

  D3D10_16BIT_INDEX_STRIP_CUT_VALUE = 65535_u32
  D3D10_32BIT_INDEX_STRIP_CUT_VALUE = 4294967295_u32
  D3D10_8BIT_INDEX_STRIP_CUT_VALUE = 255_u32
  D3D10_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9_u32
  D3D10_CLIP_OR_CULL_DISTANCE_COUNT = 8_u32
  D3D10_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1_u32
  D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1_u32
  D3D10_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64_u32
  D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4_u32
  D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1_u32
  D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1_u32
  D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1_u32
  D3D10_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32_u32
  D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1_u32
  D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128_u32
  D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1_u32
  D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1_u32
  D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128_u32
  D3D10_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1_u32
  D3D10_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16_u32
  D3D10_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1_u32
  D3D10_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1_u32
  D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT = 16_u32
  D3D10_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32_u32
  D3D10_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4_u32
  D3D10_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_COMMONSHADER_TEMP_REGISTER_COUNT = 4096_u32
  D3D10_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3_u32
  D3D10_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3_u32
  D3D10_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10_u32
  D3D10_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = -10_i32
  D3D10_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = -8_i32
  D3D10_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7_u32
  D3D10_DEFAULT_BLEND_FACTOR_ALPHA = 1
  D3D10_DEFAULT_BLEND_FACTOR_BLUE = 1
  D3D10_DEFAULT_BLEND_FACTOR_GREEN = 1
  D3D10_DEFAULT_BLEND_FACTOR_RED = 1
  D3D10_DEFAULT_BORDER_COLOR_COMPONENT = 0
  D3D10_DEFAULT_DEPTH_BIAS = 0_u32
  D3D10_DEFAULT_DEPTH_BIAS_CLAMP = 0
  D3D10_DEFAULT_MAX_ANISOTROPY = 16
  D3D10_DEFAULT_MIP_LOD_BIAS = 0
  D3D10_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0_u32
  D3D10_DEFAULT_SAMPLE_MASK = 4294967295_u32
  D3D10_DEFAULT_SCISSOR_ENDX = 0_u32
  D3D10_DEFAULT_SCISSOR_ENDY = 0_u32
  D3D10_DEFAULT_SCISSOR_STARTX = 0_u32
  D3D10_DEFAULT_SCISSOR_STARTY = 0_u32
  D3D10_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0
  D3D10_DEFAULT_STENCIL_READ_MASK = 255_u32
  D3D10_DEFAULT_STENCIL_REFERENCE = 0_u32
  D3D10_DEFAULT_STENCIL_WRITE_MASK = 255_u32
  D3D10_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0_u32
  D3D10_DEFAULT_VIEWPORT_HEIGHT = 0_u32
  D3D10_DEFAULT_VIEWPORT_MAX_DEPTH = 0
  D3D10_DEFAULT_VIEWPORT_MIN_DEPTH = 0
  D3D10_DEFAULT_VIEWPORT_TOPLEFTX = 0_u32
  D3D10_DEFAULT_VIEWPORT_TOPLEFTY = 0_u32
  D3D10_DEFAULT_VIEWPORT_WIDTH = 0_u32
  D3D10_FLOAT16_FUSED_TOLERANCE_IN_ULP = 0.6
  D3D10_FLOAT32_MAX = 3.4028235E+38
  D3D10_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = 0.6
  D3D10_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = 2.4
  D3D10_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = 1
  D3D10_FLOAT_TO_SRGB_OFFSET = 0.055
  D3D10_FLOAT_TO_SRGB_SCALE_1 = 12.92
  D3D10_FLOAT_TO_SRGB_SCALE_2 = 1.055
  D3D10_FLOAT_TO_SRGB_THRESHOLD = 0.0031308
  D3D10_FTOI_INSTRUCTION_MAX_INPUT = 2.1474836E+09
  D3D10_FTOI_INSTRUCTION_MIN_INPUT = -2.1474836E+09
  D3D10_FTOU_INSTRUCTION_MAX_INPUT = 4.2949673E+09
  D3D10_FTOU_INSTRUCTION_MIN_INPUT = 0
  D3D10_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1_u32
  D3D10_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1_u32
  D3D10_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2_u32
  D3D10_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1_u32
  D3D10_GS_INPUT_REGISTER_COMPONENTS = 4_u32
  D3D10_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_GS_INPUT_REGISTER_COUNT = 16_u32
  D3D10_GS_INPUT_REGISTER_READS_PER_INST = 2_u32
  D3D10_GS_INPUT_REGISTER_READ_PORTS = 1_u32
  D3D10_GS_INPUT_REGISTER_VERTICES = 6_u32
  D3D10_GS_OUTPUT_ELEMENTS = 32_u32
  D3D10_GS_OUTPUT_REGISTER_COMPONENTS = 4_u32
  D3D10_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_GS_OUTPUT_REGISTER_COUNT = 32_u32
  D3D10_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0_u32
  D3D10_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0_u32
  D3D10_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0_u32
  D3D10_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1_u32
  D3D10_IA_INSTANCE_ID_BIT_COUNT = 32_u32
  D3D10_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32_u32
  D3D10_IA_PRIMITIVE_ID_BIT_COUNT = 32_u32
  D3D10_IA_VERTEX_ID_BIT_COUNT = 32_u32
  D3D10_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 16_u32
  D3D10_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 64_u32
  D3D10_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 16_u32
  D3D10_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 4294967295_u32
  D3D10_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 4294967295_u32
  D3D10_LINEAR_GAMMA = 1
  D3D10_MAX_BORDER_COLOR_COMPONENT = 1
  D3D10_MAX_DEPTH = 1
  D3D10_MAX_MAXANISOTROPY = 16_u32
  D3D10_MAX_MULTISAMPLE_SAMPLE_COUNT = 32_u32
  D3D10_MAX_POSITION_VALUE = 3.4028236E+34
  D3D10_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17_u32
  D3D10_MIN_BORDER_COLOR_COMPONENT = 0
  D3D10_MIN_DEPTH = 0
  D3D10_MIN_MAXANISOTROPY = 0_u32
  D3D10_MIP_LOD_BIAS_MAX = 15.99
  D3D10_MIP_LOD_BIAS_MIN = -16
  D3D10_MIP_LOD_FRACTIONAL_BIT_COUNT = 6_u32
  D3D10_MIP_LOD_RANGE_BIT_COUNT = 8_u32
  D3D10_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = 1.4
  D3D10_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0_u32
  D3D10_PIXEL_ADDRESS_RANGE_BIT_COUNT = 13_u32
  D3D10_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15_u32
  D3D10_PS_FRONTFACING_DEFAULT_VALUE = 4294967295_u32
  D3D10_PS_FRONTFACING_FALSE_VALUE = 0_u32
  D3D10_PS_FRONTFACING_TRUE_VALUE = 4294967295_u32
  D3D10_PS_INPUT_REGISTER_COMPONENTS = 4_u32
  D3D10_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_PS_INPUT_REGISTER_COUNT = 32_u32
  D3D10_PS_INPUT_REGISTER_READS_PER_INST = 2_u32
  D3D10_PS_INPUT_REGISTER_READ_PORTS = 1_u32
  D3D10_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0
  D3D10_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1_u32
  D3D10_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1_u32
  D3D10_PS_OUTPUT_REGISTER_COMPONENTS = 4_u32
  D3D10_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_PS_OUTPUT_REGISTER_COUNT = 8_u32
  D3D10_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.5
  D3D10_REQ_BLEND_OBJECT_COUNT_PER_CONTEXT = 4096_u32
  D3D10_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27_u32
  D3D10_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096_u32
  D3D10_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_CONTEXT = 4096_u32
  D3D10_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32_u32
  D3D10_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32_u32
  D3D10_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 8192_u32
  D3D10_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024_u32
  D3D10_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096_u32
  D3D10_REQ_MAXANISOTROPY = 16_u32
  D3D10_REQ_MIP_LEVELS = 14_u32
  D3D10_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048_u32
  D3D10_REQ_RASTERIZER_OBJECT_COUNT_PER_CONTEXT = 4096_u32
  D3D10_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 8192_u32
  D3D10_REQ_RESOURCE_SIZE_IN_MEGABYTES = 128_u32
  D3D10_REQ_RESOURCE_VIEW_COUNT_PER_CONTEXT_2_TO_EXP = 20_u32
  D3D10_REQ_SAMPLER_OBJECT_COUNT_PER_CONTEXT = 4096_u32
  D3D10_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 512_u32
  D3D10_REQ_TEXTURE1D_U_DIMENSION = 8192_u32
  D3D10_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 512_u32
  D3D10_REQ_TEXTURE2D_U_OR_V_DIMENSION = 8192_u32
  D3D10_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048_u32
  D3D10_REQ_TEXTURECUBE_DIMENSION = 8192_u32
  D3D10_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0_u32
  D3D10_SHADER_MAJOR_VERSION = 4_u32
  D3D10_SHADER_MINOR_VERSION = 0_u32
  D3D10_SHIFT_INSTRUCTION_PAD_VALUE = 0_u32
  D3D10_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5_u32
  D3D10_SIMULTANEOUS_RENDER_TARGET_COUNT = 8_u32
  D3D10_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048_u32
  D3D10_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 256_u32
  D3D10_SO_BUFFER_SLOT_COUNT = 4_u32
  D3D10_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 4294967295_u32
  D3D10_SO_MULTIPLE_BUFFER_ELEMENTS_PER_BUFFER = 1_u32
  D3D10_SO_SINGLE_BUFFER_COMPONENT_LIMIT = 64_u32
  D3D10_SRGB_GAMMA = 2.2
  D3D10_SRGB_TO_FLOAT_DENOMINATOR_1 = 12.92
  D3D10_SRGB_TO_FLOAT_DENOMINATOR_2 = 1.055
  D3D10_SRGB_TO_FLOAT_EXPONENT = 2.4
  D3D10_SRGB_TO_FLOAT_OFFSET = 0.055
  D3D10_SRGB_TO_FLOAT_THRESHOLD = 0.04045
  D3D10_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = 0.5
  D3D10_STANDARD_COMPONENT_BIT_COUNT = 32_u32
  D3D10_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64_u32
  D3D10_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4_u32
  D3D10_STANDARD_PIXEL_COMPONENT_COUNT = 128_u32
  D3D10_STANDARD_PIXEL_ELEMENT_COUNT = 32_u32
  D3D10_STANDARD_VECTOR_SIZE = 4_u32
  D3D10_STANDARD_VERTEX_ELEMENT_COUNT = 16_u32
  D3D10_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64_u32
  D3D10_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8_u32
  D3D10_SUBTEXEL_FRACTIONAL_BIT_COUNT = 6_u32
  D3D10_TEXEL_ADDRESS_RANGE_BIT_COUNT = 18_u32
  D3D10_UNBOUND_MEMORY_ACCESS_RESULT = 0_u32
  D3D10_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15_u32
  D3D10_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16_u32
  D3D10_VIEWPORT_BOUNDS_MAX = 16383_u32
  D3D10_VIEWPORT_BOUNDS_MIN = -16384_i32
  D3D10_VS_INPUT_REGISTER_COMPONENTS = 4_u32
  D3D10_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_VS_INPUT_REGISTER_COUNT = 16_u32
  D3D10_VS_INPUT_REGISTER_READS_PER_INST = 2_u32
  D3D10_VS_INPUT_REGISTER_READ_PORTS = 1_u32
  D3D10_VS_OUTPUT_REGISTER_COMPONENTS = 4_u32
  D3D10_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_VS_OUTPUT_REGISTER_COUNT = 16_u32
  D3D10_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10_u32
  D3D10_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25_u32
  D3D10_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25_u32
  D3D_MAJOR_VERSION = 10_u32
  D3D_MINOR_VERSION = 0_u32
  D3D_SPEC_DATE_DAY = 8_u32
  D3D_SPEC_DATE_MONTH = 8_u32
  D3D_SPEC_DATE_YEAR = 2006_u32
  D3D_SPEC_VERSION = 1.050005
  D3D10_1_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 16_u32
  D3D10_1_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 16_u32
  FACD3D10_ = 2169_u32
  D3D10_APPEND_ALIGNED_ELEMENT = 4294967295_u32
  D3D10_FILTER_TYPE_MASK = 3_u32
  D3D10_MIN_FILTER_SHIFT = 4_u32
  D3D10_MAG_FILTER_SHIFT = 2_u32
  D3D10_MIP_FILTER_SHIFT = 0_u32
  D3D10_COMPARISON_FILTERING_BIT = 128_u32
  D3D10_ANISOTROPIC_FILTERING_BIT = 64_u32
  D3D10_TEXT_1BIT_BIT = 2147483648_u32
  D3D10_SDK_VERSION = 29_u32
  D3D10_1_DEFAULT_SAMPLE_MASK = 4294967295_u32
  D3D10_1_FLOAT16_FUSED_TOLERANCE_IN_ULP = 0.6
  D3D10_1_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = 0.6
  D3D10_1_GS_INPUT_REGISTER_COUNT = 32_u32
  D3D10_1_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128_u32
  D3D10_1_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1_u32
  D3D10_1_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D10_1_PS_OUTPUT_MASK_REGISTER_COUNT = 1_u32
  D3D10_1_SHADER_MAJOR_VERSION = 4_u32
  D3D10_1_SHADER_MINOR_VERSION = 1_u32
  D3D10_1_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048_u32
  D3D10_1_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 256_u32
  D3D10_1_SO_BUFFER_SLOT_COUNT = 4_u32
  D3D10_1_SO_MULTIPLE_BUFFER_ELEMENTS_PER_BUFFER = 1_u32
  D3D10_1_SO_SINGLE_BUFFER_COMPONENT_LIMIT = 64_u32
  D3D10_1_STANDARD_VERTEX_ELEMENT_COUNT = 32_u32
  D3D10_1_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8_u32
  D3D10_1_VS_INPUT_REGISTER_COUNT = 32_u32
  D3D10_1_VS_OUTPUT_REGISTER_COUNT = 32_u32
  D3D10_SDK_LAYERS_VERSION = 11_u32
  D3D10_DEBUG_FEATURE_FLUSH_PER_RENDER_OP = 1_u32
  D3D10_DEBUG_FEATURE_FINISH_PER_RENDER_OP = 2_u32
  D3D10_DEBUG_FEATURE_PRESENT_PER_RENDER_OP = 4_u32
  DXGI_DEBUG_D3D10 = "243b4c52-3606-4d3a-99d7-a7e7b33ed706"
  D3D10_REGKEY_PATH = "Software\\Microsoft\\Direct3D"
  D3D10_MUTE_DEBUG_OUTPUT = "MuteDebugOutput"
  D3D10_ENABLE_BREAK_ON_MESSAGE = "EnableBreakOnMessage"
  D3D10_INFOQUEUE_STORAGE_FILTER_OVERRIDE = "InfoQueueStorageFilterOverride"
  D3D10_MUTE_CATEGORY = "Mute_CATEGORY_%s"
  D3D10_MUTE_SEVERITY = "Mute_SEVERITY_%s"
  D3D10_MUTE_ID_STRING = "Mute_ID_%s"
  D3D10_MUTE_ID_DECIMAL = "Mute_ID_%d"
  D3D10_UNMUTE_SEVERITY_INFO = "Unmute_SEVERITY_INFO"
  D3D10_BREAKON_CATEGORY = "BreakOn_CATEGORY_%s"
  D3D10_BREAKON_SEVERITY = "BreakOn_SEVERITY_%s"
  D3D10_BREAKON_ID_STRING = "BreakOn_ID_%s"
  D3D10_BREAKON_ID_DECIMAL = "BreakOn_ID_%d"
  D3D10_APPSIZE_STRING = "Size"
  D3D10_APPNAME_STRING = "Name"
  D3D10_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT = 1024_u32
  D3D10_SHADER_DEBUG = 1_u32
  D3D10_SHADER_SKIP_VALIDATION = 2_u32
  D3D10_SHADER_SKIP_OPTIMIZATION = 4_u32
  D3D10_SHADER_PACK_MATRIX_ROW_MAJOR = 8_u32
  D3D10_SHADER_PACK_MATRIX_COLUMN_MAJOR = 16_u32
  D3D10_SHADER_PARTIAL_PRECISION = 32_u32
  D3D10_SHADER_FORCE_VS_SOFTWARE_NO_OPT = 64_u32
  D3D10_SHADER_FORCE_PS_SOFTWARE_NO_OPT = 128_u32
  D3D10_SHADER_NO_PRESHADER = 256_u32
  D3D10_SHADER_AVOID_FLOW_CONTROL = 512_u32
  D3D10_SHADER_PREFER_FLOW_CONTROL = 1024_u32
  D3D10_SHADER_ENABLE_STRICTNESS = 2048_u32
  D3D10_SHADER_ENABLE_BACKWARDS_COMPATIBILITY = 4096_u32
  D3D10_SHADER_IEEE_STRICTNESS = 8192_u32
  D3D10_SHADER_WARNINGS_ARE_ERRORS = 262144_u32
  D3D10_SHADER_RESOURCES_MAY_ALIAS = 524288_u32
  D3D10_ENABLE_UNBOUNDED_DESCRIPTOR_TABLES = 1048576_u32
  D3D10_ALL_RESOURCES_BOUND = 2097152_u32
  D3D10_SHADER_DEBUG_NAME_FOR_SOURCE = 4194304_u32
  D3D10_SHADER_DEBUG_NAME_FOR_BINARY = 8388608_u32
  D3D10_SHADER_OPTIMIZATION_LEVEL0 = 16384_u32
  D3D10_SHADER_OPTIMIZATION_LEVEL1 = 0_u32
  D3D10_SHADER_OPTIMIZATION_LEVEL3 = 32768_u32
  D3D10_SHADER_FLAGS2_FORCE_ROOT_SIGNATURE_LATEST = 0_u32
  D3D10_SHADER_FLAGS2_FORCE_ROOT_SIGNATURE_1_0 = 16_u32
  D3D10_SHADER_FLAGS2_FORCE_ROOT_SIGNATURE_1_1 = 32_u32
  D3D10_EFFECT_COMPILE_CHILD_EFFECT = 1_u32
  D3D10_EFFECT_COMPILE_ALLOW_SLOW_OPS = 2_u32
  D3D10_EFFECT_SINGLE_THREADED = 8_u32
  D3D10_EFFECT_VARIABLE_POOLED = 1_u32
  D3D10_EFFECT_VARIABLE_ANNOTATION = 2_u32
  D3D10_EFFECT_VARIABLE_EXPLICIT_BIND_POINT = 4_u32
  GUID_DeviceType = "d722fb4d-7a68-437a-b20c-5804ee2494a6"

  enum D3D10_INPUT_CLASSIFICATION
    D3D10_INPUT_PER_VERTEX_DATA = 0_i32
    D3D10_INPUT_PER_INSTANCE_DATA = 1_i32
  end
  enum D3D10_FILL_MODE
    D3D10_FILL_WIREFRAME = 2_i32
    D3D10_FILL_SOLID = 3_i32
  end
  enum D3D10_CULL_MODE
    D3D10_CULL_NONE = 1_i32
    D3D10_CULL_FRONT = 2_i32
    D3D10_CULL_BACK = 3_i32
  end
  enum D3D10_RESOURCE_DIMENSION
    D3D10_RESOURCE_DIMENSION_UNKNOWN = 0_i32
    D3D10_RESOURCE_DIMENSION_BUFFER = 1_i32
    D3D10_RESOURCE_DIMENSION_TEXTURE1D = 2_i32
    D3D10_RESOURCE_DIMENSION_TEXTURE2D = 3_i32
    D3D10_RESOURCE_DIMENSION_TEXTURE3D = 4_i32
  end
  enum D3D10_DSV_DIMENSION
    D3D10_DSV_DIMENSION_UNKNOWN = 0_i32
    D3D10_DSV_DIMENSION_TEXTURE1D = 1_i32
    D3D10_DSV_DIMENSION_TEXTURE1DARRAY = 2_i32
    D3D10_DSV_DIMENSION_TEXTURE2D = 3_i32
    D3D10_DSV_DIMENSION_TEXTURE2DARRAY = 4_i32
    D3D10_DSV_DIMENSION_TEXTURE2DMS = 5_i32
    D3D10_DSV_DIMENSION_TEXTURE2DMSARRAY = 6_i32
  end
  enum D3D10_RTV_DIMENSION
    D3D10_RTV_DIMENSION_UNKNOWN = 0_i32
    D3D10_RTV_DIMENSION_BUFFER = 1_i32
    D3D10_RTV_DIMENSION_TEXTURE1D = 2_i32
    D3D10_RTV_DIMENSION_TEXTURE1DARRAY = 3_i32
    D3D10_RTV_DIMENSION_TEXTURE2D = 4_i32
    D3D10_RTV_DIMENSION_TEXTURE2DARRAY = 5_i32
    D3D10_RTV_DIMENSION_TEXTURE2DMS = 6_i32
    D3D10_RTV_DIMENSION_TEXTURE2DMSARRAY = 7_i32
    D3D10_RTV_DIMENSION_TEXTURE3D = 8_i32
  end
  enum D3D10_USAGE
    D3D10_USAGE_DEFAULT = 0_i32
    D3D10_USAGE_IMMUTABLE = 1_i32
    D3D10_USAGE_DYNAMIC = 2_i32
    D3D10_USAGE_STAGING = 3_i32
  end
  enum D3D10_BIND_FLAG
    D3D10_BIND_VERTEX_BUFFER = 1_i32
    D3D10_BIND_INDEX_BUFFER = 2_i32
    D3D10_BIND_CONSTANT_BUFFER = 4_i32
    D3D10_BIND_SHADER_RESOURCE = 8_i32
    D3D10_BIND_STREAM_OUTPUT = 16_i32
    D3D10_BIND_RENDER_TARGET = 32_i32
    D3D10_BIND_DEPTH_STENCIL = 64_i32
  end
  enum D3D10_CPU_ACCESS_FLAG
    D3D10_CPU_ACCESS_WRITE = 65536_i32
    D3D10_CPU_ACCESS_READ = 131072_i32
  end
  enum D3D10_RESOURCE_MISC_FLAG
    D3D10_RESOURCE_MISC_GENERATE_MIPS = 1_i32
    D3D10_RESOURCE_MISC_SHARED = 2_i32
    D3D10_RESOURCE_MISC_TEXTURECUBE = 4_i32
    D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX = 16_i32
    D3D10_RESOURCE_MISC_GDI_COMPATIBLE = 32_i32
  end
  enum D3D10_MAP
    D3D10_MAP_READ = 1_i32
    D3D10_MAP_WRITE = 2_i32
    D3D10_MAP_READ_WRITE = 3_i32
    D3D10_MAP_WRITE_DISCARD = 4_i32
    D3D10_MAP_WRITE_NO_OVERWRITE = 5_i32
  end
  enum D3D10_MAP_FLAG
    D3D10_MAP_FLAG_DO_NOT_WAIT = 1048576_i32
  end
  enum D3D10_RAISE_FLAG
    D3D10_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 1_i32
  end
  enum D3D10_CLEAR_FLAG
    D3D10_CLEAR_DEPTH = 1_i32
    D3D10_CLEAR_STENCIL = 2_i32
  end
  enum D3D10_COMPARISON_FUNC
    D3D10_COMPARISON_NEVER = 1_i32
    D3D10_COMPARISON_LESS = 2_i32
    D3D10_COMPARISON_EQUAL = 3_i32
    D3D10_COMPARISON_LESS_EQUAL = 4_i32
    D3D10_COMPARISON_GREATER = 5_i32
    D3D10_COMPARISON_NOT_EQUAL = 6_i32
    D3D10_COMPARISON_GREATER_EQUAL = 7_i32
    D3D10_COMPARISON_ALWAYS = 8_i32
  end
  enum D3D10_DEPTH_WRITE_MASK
    D3D10_DEPTH_WRITE_MASK_ZERO = 0_i32
    D3D10_DEPTH_WRITE_MASK_ALL = 1_i32
  end
  enum D3D10_STENCIL_OP
    D3D10_STENCIL_OP_KEEP = 1_i32
    D3D10_STENCIL_OP_ZERO = 2_i32
    D3D10_STENCIL_OP_REPLACE = 3_i32
    D3D10_STENCIL_OP_INCR_SAT = 4_i32
    D3D10_STENCIL_OP_DECR_SAT = 5_i32
    D3D10_STENCIL_OP_INVERT = 6_i32
    D3D10_STENCIL_OP_INCR = 7_i32
    D3D10_STENCIL_OP_DECR = 8_i32
  end
  enum D3D10_BLEND
    D3D10_BLEND_ZERO = 1_i32
    D3D10_BLEND_ONE = 2_i32
    D3D10_BLEND_SRC_COLOR = 3_i32
    D3D10_BLEND_INV_SRC_COLOR = 4_i32
    D3D10_BLEND_SRC_ALPHA = 5_i32
    D3D10_BLEND_INV_SRC_ALPHA = 6_i32
    D3D10_BLEND_DEST_ALPHA = 7_i32
    D3D10_BLEND_INV_DEST_ALPHA = 8_i32
    D3D10_BLEND_DEST_COLOR = 9_i32
    D3D10_BLEND_INV_DEST_COLOR = 10_i32
    D3D10_BLEND_SRC_ALPHA_SAT = 11_i32
    D3D10_BLEND_BLEND_FACTOR = 14_i32
    D3D10_BLEND_INV_BLEND_FACTOR = 15_i32
    D3D10_BLEND_SRC1_COLOR = 16_i32
    D3D10_BLEND_INV_SRC1_COLOR = 17_i32
    D3D10_BLEND_SRC1_ALPHA = 18_i32
    D3D10_BLEND_INV_SRC1_ALPHA = 19_i32
  end
  enum D3D10_BLEND_OP
    D3D10_BLEND_OP_ADD = 1_i32
    D3D10_BLEND_OP_SUBTRACT = 2_i32
    D3D10_BLEND_OP_REV_SUBTRACT = 3_i32
    D3D10_BLEND_OP_MIN = 4_i32
    D3D10_BLEND_OP_MAX = 5_i32
  end
  enum D3D10_COLOR_WRITE_ENABLE
    D3D10_COLOR_WRITE_ENABLE_RED = 1_i32
    D3D10_COLOR_WRITE_ENABLE_GREEN = 2_i32
    D3D10_COLOR_WRITE_ENABLE_BLUE = 4_i32
    D3D10_COLOR_WRITE_ENABLE_ALPHA = 8_i32
    D3D10_COLOR_WRITE_ENABLE_ALL = 15_i32
  end
  enum D3D10_TEXTURECUBE_FACE
    D3D10_TEXTURECUBE_FACE_POSITIVE_X = 0_i32
    D3D10_TEXTURECUBE_FACE_NEGATIVE_X = 1_i32
    D3D10_TEXTURECUBE_FACE_POSITIVE_Y = 2_i32
    D3D10_TEXTURECUBE_FACE_NEGATIVE_Y = 3_i32
    D3D10_TEXTURECUBE_FACE_POSITIVE_Z = 4_i32
    D3D10_TEXTURECUBE_FACE_NEGATIVE_Z = 5_i32
  end
  enum D3D10_FILTER
    D3D10_FILTER_MIN_MAG_MIP_POINT = 0_i32
    D3D10_FILTER_MIN_MAG_POINT_MIP_LINEAR = 1_i32
    D3D10_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4_i32
    D3D10_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5_i32
    D3D10_FILTER_MIN_LINEAR_MAG_MIP_POINT = 16_i32
    D3D10_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17_i32
    D3D10_FILTER_MIN_MAG_LINEAR_MIP_POINT = 20_i32
    D3D10_FILTER_MIN_MAG_MIP_LINEAR = 21_i32
    D3D10_FILTER_ANISOTROPIC = 85_i32
    D3D10_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 128_i32
    D3D10_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 129_i32
    D3D10_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 132_i32
    D3D10_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 133_i32
    D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 144_i32
    D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 145_i32
    D3D10_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 148_i32
    D3D10_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 149_i32
    D3D10_FILTER_COMPARISON_ANISOTROPIC = 213_i32
    D3D10_FILTER_TEXT_1BIT = -2147483648_i32
  end
  enum D3D10_FILTER_TYPE
    D3D10_FILTER_TYPE_POINT = 0_i32
    D3D10_FILTER_TYPE_LINEAR = 1_i32
  end
  enum D3D10_TEXTURE_ADDRESS_MODE
    D3D10_TEXTURE_ADDRESS_WRAP = 1_i32
    D3D10_TEXTURE_ADDRESS_MIRROR = 2_i32
    D3D10_TEXTURE_ADDRESS_CLAMP = 3_i32
    D3D10_TEXTURE_ADDRESS_BORDER = 4_i32
    D3D10_TEXTURE_ADDRESS_MIRROR_ONCE = 5_i32
  end
  enum D3D10_FORMAT_SUPPORT
    D3D10_FORMAT_SUPPORT_BUFFER = 1_i32
    D3D10_FORMAT_SUPPORT_IA_VERTEX_BUFFER = 2_i32
    D3D10_FORMAT_SUPPORT_IA_INDEX_BUFFER = 4_i32
    D3D10_FORMAT_SUPPORT_SO_BUFFER = 8_i32
    D3D10_FORMAT_SUPPORT_TEXTURE1D = 16_i32
    D3D10_FORMAT_SUPPORT_TEXTURE2D = 32_i32
    D3D10_FORMAT_SUPPORT_TEXTURE3D = 64_i32
    D3D10_FORMAT_SUPPORT_TEXTURECUBE = 128_i32
    D3D10_FORMAT_SUPPORT_SHADER_LOAD = 256_i32
    D3D10_FORMAT_SUPPORT_SHADER_SAMPLE = 512_i32
    D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 1024_i32
    D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 2048_i32
    D3D10_FORMAT_SUPPORT_MIP = 4096_i32
    D3D10_FORMAT_SUPPORT_MIP_AUTOGEN = 8192_i32
    D3D10_FORMAT_SUPPORT_RENDER_TARGET = 16384_i32
    D3D10_FORMAT_SUPPORT_BLENDABLE = 32768_i32
    D3D10_FORMAT_SUPPORT_DEPTH_STENCIL = 65536_i32
    D3D10_FORMAT_SUPPORT_CPU_LOCKABLE = 131072_i32
    D3D10_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 262144_i32
    D3D10_FORMAT_SUPPORT_DISPLAY = 524288_i32
    D3D10_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 1048576_i32
    D3D10_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 2097152_i32
    D3D10_FORMAT_SUPPORT_MULTISAMPLE_LOAD = 4194304_i32
    D3D10_FORMAT_SUPPORT_SHADER_GATHER = 8388608_i32
    D3D10_FORMAT_SUPPORT_BACK_BUFFER_CAST = 16777216_i32
  end
  enum D3D10_ASYNC_GETDATA_FLAG
    D3D10_ASYNC_GETDATA_DONOTFLUSH = 1_i32
  end
  enum D3D10_QUERY
    D3D10_QUERY_EVENT = 0_i32
    D3D10_QUERY_OCCLUSION = 1_i32
    D3D10_QUERY_TIMESTAMP = 2_i32
    D3D10_QUERY_TIMESTAMP_DISJOINT = 3_i32
    D3D10_QUERY_PIPELINE_STATISTICS = 4_i32
    D3D10_QUERY_OCCLUSION_PREDICATE = 5_i32
    D3D10_QUERY_SO_STATISTICS = 6_i32
    D3D10_QUERY_SO_OVERFLOW_PREDICATE = 7_i32
  end
  enum D3D10_QUERY_MISC_FLAG
    D3D10_QUERY_MISC_PREDICATEHINT = 1_i32
  end
  enum D3D10_COUNTER
    D3D10_COUNTER_GPU_IDLE = 0_i32
    D3D10_COUNTER_VERTEX_PROCESSING = 1_i32
    D3D10_COUNTER_GEOMETRY_PROCESSING = 2_i32
    D3D10_COUNTER_PIXEL_PROCESSING = 3_i32
    D3D10_COUNTER_OTHER_GPU_PROCESSING = 4_i32
    D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION = 5_i32
    D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION = 6_i32
    D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION = 7_i32
    D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION = 8_i32
    D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION = 9_i32
    D3D10_COUNTER_VS_MEMORY_LIMITED = 10_i32
    D3D10_COUNTER_VS_COMPUTATION_LIMITED = 11_i32
    D3D10_COUNTER_GS_MEMORY_LIMITED = 12_i32
    D3D10_COUNTER_GS_COMPUTATION_LIMITED = 13_i32
    D3D10_COUNTER_PS_MEMORY_LIMITED = 14_i32
    D3D10_COUNTER_PS_COMPUTATION_LIMITED = 15_i32
    D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE = 16_i32
    D3D10_COUNTER_TEXTURE_CACHE_HIT_RATE = 17_i32
    D3D10_COUNTER_DEVICE_DEPENDENT_0 = 1073741824_i32
  end
  enum D3D10_COUNTER_TYPE
    D3D10_COUNTER_TYPE_FLOAT32 = 0_i32
    D3D10_COUNTER_TYPE_UINT16 = 1_i32
    D3D10_COUNTER_TYPE_UINT32 = 2_i32
    D3D10_COUNTER_TYPE_UINT64 = 3_i32
  end
  enum D3D10_CREATE_DEVICE_FLAG
    D3D10_CREATE_DEVICE_SINGLETHREADED = 1_i32
    D3D10_CREATE_DEVICE_DEBUG = 2_i32
    D3D10_CREATE_DEVICE_SWITCH_TO_REF = 4_i32
    D3D10_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 8_i32
    D3D10_CREATE_DEVICE_ALLOW_NULL_FROM_MAP = 16_i32
    D3D10_CREATE_DEVICE_BGRA_SUPPORT = 32_i32
    D3D10_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 128_i32
    D3D10_CREATE_DEVICE_STRICT_VALIDATION = 512_i32
    D3D10_CREATE_DEVICE_DEBUGGABLE = 1024_i32
  end
  enum D3D10_MESSAGE_CATEGORY
    D3D10_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0_i32
    D3D10_MESSAGE_CATEGORY_MISCELLANEOUS = 1_i32
    D3D10_MESSAGE_CATEGORY_INITIALIZATION = 2_i32
    D3D10_MESSAGE_CATEGORY_CLEANUP = 3_i32
    D3D10_MESSAGE_CATEGORY_COMPILATION = 4_i32
    D3D10_MESSAGE_CATEGORY_STATE_CREATION = 5_i32
    D3D10_MESSAGE_CATEGORY_STATE_SETTING = 6_i32
    D3D10_MESSAGE_CATEGORY_STATE_GETTING = 7_i32
    D3D10_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 8_i32
    D3D10_MESSAGE_CATEGORY_EXECUTION = 9_i32
    D3D10_MESSAGE_CATEGORY_SHADER = 10_i32
  end
  enum D3D10_MESSAGE_SEVERITY
    D3D10_MESSAGE_SEVERITY_CORRUPTION = 0_i32
    D3D10_MESSAGE_SEVERITY_ERROR = 1_i32
    D3D10_MESSAGE_SEVERITY_WARNING = 2_i32
    D3D10_MESSAGE_SEVERITY_INFO = 3_i32
    D3D10_MESSAGE_SEVERITY_MESSAGE = 4_i32
  end
  enum D3D10_MESSAGE_ID
    D3D10_MESSAGE_ID_UNKNOWN = 0_i32
    D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = 1_i32
    D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = 2_i32
    D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = 3_i32
    D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 4_i32
    D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = 5_i32
    D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 6_i32
    D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = 7_i32
    D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 8_i32
    D3D10_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = 9_i32
    D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = 10_i32
    D3D10_MESSAGE_ID_STRING_FROM_APPLICATION = 11_i32
    D3D10_MESSAGE_ID_CORRUPTED_THIS = 12_i32
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER1 = 13_i32
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER2 = 14_i32
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER3 = 15_i32
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER4 = 16_i32
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER5 = 17_i32
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER6 = 18_i32
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER7 = 19_i32
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER8 = 20_i32
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER9 = 21_i32
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER10 = 22_i32
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER11 = 23_i32
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER12 = 24_i32
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER13 = 25_i32
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER14 = 26_i32
    D3D10_MESSAGE_ID_CORRUPTED_PARAMETER15 = 27_i32
    D3D10_MESSAGE_ID_CORRUPTED_MULTITHREADING = 28_i32
    D3D10_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 29_i32
    D3D10_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 30_i32
    D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 31_i32
    D3D10_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 32_i32
    D3D10_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = 33_i32
    D3D10_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 34_i32
    D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 35_i32
    D3D10_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = 36_i32
    D3D10_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = 37_i32
    D3D10_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 38_i32
    D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 39_i32
    D3D10_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = 40_i32
    D3D10_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = 41_i32
    D3D10_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = 42_i32
    D3D10_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 43_i32
    D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 44_i32
    D3D10_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = 45_i32
    D3D10_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = 46_i32
    D3D10_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 47_i32
    D3D10_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 48_i32
    D3D10_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 49_i32
    D3D10_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = 50_i32
    D3D10_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 51_i32
    D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 52_i32
    D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = 53_i32
    D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = 54_i32
    D3D10_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 55_i32
    D3D10_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 56_i32
    D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = 57_i32
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = 58_i32
    D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = 59_i32
    D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 60_i32
    D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 61_i32
    D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 62_i32
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = 63_i32
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = 64_i32
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = 65_i32
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = 66_i32
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = 67_i32
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = 68_i32
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = 69_i32
    D3D10_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = 70_i32
    D3D10_MESSAGE_ID_CREATEBUFFER_NULLDESC = 71_i32
    D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 72_i32
    D3D10_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = 73_i32
    D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 74_i32
    D3D10_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = 75_i32
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = 76_i32
    D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 77_i32
    D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 78_i32
    D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 79_i32
    D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 80_i32
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 81_i32
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = 82_i32
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = 83_i32
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = 84_i32
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = 85_i32
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = 86_i32
    D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = 87_i32
    D3D10_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = 88_i32
    D3D10_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = 89_i32
    D3D10_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = 90_i32
    D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 91_i32
    D3D10_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = 92_i32
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = 93_i32
    D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 94_i32
    D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 95_i32
    D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 96_i32
    D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 97_i32
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 98_i32
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = 99_i32
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = 100_i32
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = 101_i32
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = 102_i32
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = 103_i32
    D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = 104_i32
    D3D10_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = 105_i32
    D3D10_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = 106_i32
    D3D10_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = 107_i32
    D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 108_i32
    D3D10_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = 109_i32
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = 110_i32
    D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 111_i32
    D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 112_i32
    D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 113_i32
    D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 114_i32
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 115_i32
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = 116_i32
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = 117_i32
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = 118_i32
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = 119_i32
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = 120_i32
    D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = 121_i32
    D3D10_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = 122_i32
    D3D10_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = 123_i32
    D3D10_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = 124_i32
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 125_i32
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 126_i32
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 127_i32
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 128_i32
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 129_i32
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 130_i32
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 131_i32
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 132_i32
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 133_i32
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 134_i32
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 135_i32
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 136_i32
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 137_i32
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 138_i32
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 139_i32
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 140_i32
    D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 141_i32
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 142_i32
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 143_i32
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 144_i32
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 145_i32
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 146_i32
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 147_i32
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 148_i32
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 149_i32
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 150_i32
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 151_i32
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 152_i32
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 153_i32
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 154_i32
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 155_i32
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 156_i32
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 157_i32
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 158_i32
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 159_i32
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 160_i32
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 161_i32
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 162_i32
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 163_i32
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = 164_i32
    D3D10_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 165_i32
    D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 166_i32
    D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 167_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 168_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 169_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 170_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 171_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 172_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 173_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 174_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 175_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 176_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 177_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 178_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 179_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 180_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 181_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 182_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 183_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 184_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 185_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 186_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 187_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 188_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 189_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 190_i32
    D3D10_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 191_i32
    D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 192_i32
    D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 193_i32
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 194_i32
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 195_i32
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 196_i32
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 197_i32
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = 198_i32
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = 199_i32
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 200_i32
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 201_i32
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 202_i32
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 203_i32
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 204_i32
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 205_i32
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 206_i32
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 207_i32
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 208_i32
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 209_i32
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 210_i32
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = 211_i32
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 212_i32
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 213_i32
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 214_i32
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 215_i32
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 216_i32
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 217_i32
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 218_i32
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = 219_i32
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = 220_i32
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = 221_i32
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = 222_i32
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = 223_i32
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = 224_i32
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 225_i32
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 226_i32
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 227_i32
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = 228_i32
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = 229_i32
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = 230_i32
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = 231_i32
    D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = 232_i32
    D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 233_i32
    D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 234_i32
    D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = 235_i32
    D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 236_i32
    D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 237_i32
    D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = 238_i32
    D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 239_i32
    D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 240_i32
    D3D10_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = 241_i32
    D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 242_i32
    D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 243_i32
    D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 244_i32
    D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 245_i32
    D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = 246_i32
    D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 247_i32
    D3D10_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 248_i32
    D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 249_i32
    D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = 250_i32
    D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 251_i32
    D3D10_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 252_i32
    D3D10_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = 253_i32
    D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 254_i32
    D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 255_i32
    D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = 256_i32
    D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 257_i32
    D3D10_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 258_i32
    D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 259_i32
    D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 260_i32
    D3D10_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = 261_i32
    D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 262_i32
    D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 263_i32
    D3D10_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 264_i32
    D3D10_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 265_i32
    D3D10_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 266_i32
    D3D10_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 267_i32
    D3D10_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 268_i32
    D3D10_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 269_i32
    D3D10_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 270_i32
    D3D10_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 271_i32
    D3D10_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 272_i32
    D3D10_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 273_i32
    D3D10_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 274_i32
    D3D10_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 275_i32
    D3D10_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 276_i32
    D3D10_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = 277_i32
    D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 278_i32
    D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 279_i32
    D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 280_i32
    D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = 281_i32
    D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 282_i32
    D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 283_i32
    D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = 284_i32
    D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = 285_i32
    D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = 286_i32
    D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 287_i32
    D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 288_i32
    D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 289_i32
    D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 290_i32
    D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 291_i32
    D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 292_i32
    D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 293_i32
    D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 294_i32
    D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = 295_i32
    D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = 296_i32
    D3D10_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = 297_i32
    D3D10_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = 298_i32
    D3D10_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = 299_i32
    D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = 300_i32
    D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = 301_i32
    D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = 302_i32
    D3D10_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = 303_i32
    D3D10_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 304_i32
    D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 305_i32
    D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = 306_i32
    D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = 307_i32
    D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = 308_i32
    D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = 309_i32
    D3D10_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = 310_i32
    D3D10_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 311_i32
    D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 312_i32
    D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = 313_i32
    D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = 314_i32
    D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = 315_i32
    D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = 316_i32
    D3D10_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = 317_i32
    D3D10_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 318_i32
    D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 319_i32
    D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = 320_i32
    D3D10_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 321_i32
    D3D10_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 322_i32
    D3D10_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 323_i32
    D3D10_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = 324_i32
    D3D10_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 325_i32
    D3D10_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = 326_i32
    D3D10_MESSAGE_ID_REF_THREADING_MODE = 327_i32
    D3D10_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = 328_i32
    D3D10_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = 329_i32
    D3D10_MESSAGE_ID_REF_HARDWARE_EXCEPTION = 330_i32
    D3D10_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 331_i32
    D3D10_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = 332_i32
    D3D10_MESSAGE_ID_REF_OUT_OF_MEMORY = 333_i32
    D3D10_MESSAGE_ID_REF_INFO = 334_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = 335_i32
    D3D10_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 336_i32
    D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 337_i32
    D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 338_i32
    D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 339_i32
    D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 340_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 341_i32
    D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 342_i32
    D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = 343_i32
    D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 344_i32
    D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = 345_i32
    D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 346_i32
    D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 347_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 348_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 349_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 350_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 351_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = 352_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 353_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 354_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 355_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 356_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 357_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 358_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 359_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 360_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 361_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = 362_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 363_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 364_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 365_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 366_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 367_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 368_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 369_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 370_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 371_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 372_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 373_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 374_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 375_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 376_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 377_i32
    D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 378_i32
    D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 379_i32
    D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 380_i32
    D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 381_i32
    D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 382_i32
    D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 383_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = 384_i32
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 385_i32
    D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 386_i32
    D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 387_i32
    D3D10_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = 388_i32
    D3D10_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 389_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = 390_i32
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 391_i32
    D3D10_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = 392_i32
    D3D10_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = 393_i32
    D3D10_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = 394_i32
    D3D10_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = 395_i32
    D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = 396_i32
    D3D10_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 397_i32
    D3D10_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 398_i32
    D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = 399_i32
    D3D10_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = 400_i32
    D3D10_MESSAGE_ID_CREATECOUNTER_NULLDESC = 401_i32
    D3D10_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = 402_i32
    D3D10_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 403_i32
    D3D10_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = 404_i32
    D3D10_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = 405_i32
    D3D10_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = 406_i32
    D3D10_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = 407_i32
    D3D10_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 408_i32
    D3D10_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = 409_i32
    D3D10_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = 410_i32
    D3D10_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = 411_i32
    D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = 412_i32
    D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = 413_i32
    D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = 414_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 415_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 416_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 417_i32
    D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 418_i32
    D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 419_i32
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 420_i32
    D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 421_i32
    D3D10_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 422_i32
    D3D10_MESSAGE_ID_LIVE_BUFFER = 423_i32
    D3D10_MESSAGE_ID_LIVE_TEXTURE1D = 424_i32
    D3D10_MESSAGE_ID_LIVE_TEXTURE2D = 425_i32
    D3D10_MESSAGE_ID_LIVE_TEXTURE3D = 426_i32
    D3D10_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW = 427_i32
    D3D10_MESSAGE_ID_LIVE_RENDERTARGETVIEW = 428_i32
    D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW = 429_i32
    D3D10_MESSAGE_ID_LIVE_VERTEXSHADER = 430_i32
    D3D10_MESSAGE_ID_LIVE_GEOMETRYSHADER = 431_i32
    D3D10_MESSAGE_ID_LIVE_PIXELSHADER = 432_i32
    D3D10_MESSAGE_ID_LIVE_INPUTLAYOUT = 433_i32
    D3D10_MESSAGE_ID_LIVE_SAMPLER = 434_i32
    D3D10_MESSAGE_ID_LIVE_BLENDSTATE = 435_i32
    D3D10_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE = 436_i32
    D3D10_MESSAGE_ID_LIVE_RASTERIZERSTATE = 437_i32
    D3D10_MESSAGE_ID_LIVE_QUERY = 438_i32
    D3D10_MESSAGE_ID_LIVE_PREDICATE = 439_i32
    D3D10_MESSAGE_ID_LIVE_COUNTER = 440_i32
    D3D10_MESSAGE_ID_LIVE_DEVICE = 441_i32
    D3D10_MESSAGE_ID_LIVE_SWAPCHAIN = 442_i32
    D3D10_MESSAGE_ID_D3D10_MESSAGES_END = 443_i32
    D3D10_MESSAGE_ID_D3D10L9_MESSAGES_START = 1048576_i32
    D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 1048577_i32
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = 1048578_i32
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 1048579_i32
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 1048580_i32
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 1048581_i32
    D3D10_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = 1048582_i32
    D3D10_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048583_i32
    D3D10_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048584_i32
    D3D10_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = 1048585_i32
    D3D10_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = 1048586_i32
    D3D10_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = 1048587_i32
    D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 1048588_i32
    D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 1048589_i32
    D3D10_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 1048590_i32
    D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 1048591_i32
    D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 1048592_i32
    D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 1048593_i32
    D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 1048594_i32
    D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 1048595_i32
    D3D10_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 1048596_i32
    D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = 1048597_i32
    D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 1048598_i32
    D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 1048599_i32
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 1048600_i32
    D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = 1048601_i32
    D3D10_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 1048602_i32
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 1048603_i32
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 1048604_i32
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 1048605_i32
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 1048606_i32
    D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = 1048607_i32
    D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 1048608_i32
    D3D10_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 1048609_i32
    D3D10_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 1048610_i32
    D3D10_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 1048611_i32
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 1048612_i32
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 1048613_i32
    D3D10_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = 1048614_i32
    D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 1048615_i32
    D3D10_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 1048616_i32
    D3D10_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = 1048617_i32
    D3D10_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = 1048618_i32
    D3D10_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = 1048619_i32
    D3D10_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = 1048620_i32
    D3D10_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = 1048621_i32
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 1048622_i32
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = 1048623_i32
    D3D10_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 1048624_i32
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = 1048625_i32
    D3D10_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = 1048626_i32
    D3D10_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 1048627_i32
    D3D10_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = 1048628_i32
    D3D10_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 1048629_i32
    D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 1048630_i32
    D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 1048631_i32
    D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 1048632_i32
    D3D10_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = 1048633_i32
    D3D10_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = 1048634_i32
    D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 1048635_i32
    D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = 1048636_i32
    D3D10_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES = 1048637_i32
    D3D10_MESSAGE_ID_D3D10L9_MESSAGES_END = 1048638_i32
  end
  enum D3D10_DRIVER_TYPE
    D3D10_DRIVER_TYPE_HARDWARE = 0_i32
    D3D10_DRIVER_TYPE_REFERENCE = 1_i32
    D3D10_DRIVER_TYPE_NULL = 2_i32
    D3D10_DRIVER_TYPE_SOFTWARE = 3_i32
    D3D10_DRIVER_TYPE_WARP = 5_i32
  end
  enum D3D10_DEVICE_STATE_TYPES
    D3D10_DST_SO_BUFFERS = 1_i32
    D3D10_DST_OM_RENDER_TARGETS = 2_i32
    D3D10_DST_OM_DEPTH_STENCIL_STATE = 3_i32
    D3D10_DST_OM_BLEND_STATE = 4_i32
    D3D10_DST_VS = 5_i32
    D3D10_DST_VS_SAMPLERS = 6_i32
    D3D10_DST_VS_SHADER_RESOURCES = 7_i32
    D3D10_DST_VS_CONSTANT_BUFFERS = 8_i32
    D3D10_DST_GS = 9_i32
    D3D10_DST_GS_SAMPLERS = 10_i32
    D3D10_DST_GS_SHADER_RESOURCES = 11_i32
    D3D10_DST_GS_CONSTANT_BUFFERS = 12_i32
    D3D10_DST_PS = 13_i32
    D3D10_DST_PS_SAMPLERS = 14_i32
    D3D10_DST_PS_SHADER_RESOURCES = 15_i32
    D3D10_DST_PS_CONSTANT_BUFFERS = 16_i32
    D3D10_DST_IA_VERTEX_BUFFERS = 17_i32
    D3D10_DST_IA_INDEX_BUFFER = 18_i32
    D3D10_DST_IA_INPUT_LAYOUT = 19_i32
    D3D10_DST_IA_PRIMITIVE_TOPOLOGY = 20_i32
    D3D10_DST_RS_VIEWPORTS = 21_i32
    D3D10_DST_RS_SCISSOR_RECTS = 22_i32
    D3D10_DST_RS_RASTERIZER_STATE = 23_i32
    D3D10_DST_PREDICATION = 24_i32
  end
  enum D3D10_FEATURE_LEVEL1
    D3D10_FEATURE_LEVEL_10_0 = 40960_i32
    D3D10_FEATURE_LEVEL_10_1 = 41216_i32
    D3D10_FEATURE_LEVEL_9_1 = 37120_i32
    D3D10_FEATURE_LEVEL_9_2 = 37376_i32
    D3D10_FEATURE_LEVEL_9_3 = 37632_i32
  end
  enum D3D10_STANDARD_MULTISAMPLE_QUALITY_LEVELS
    D3D10_STANDARD_MULTISAMPLE_PATTERN = -1_i32
    D3D10_CENTER_MULTISAMPLE_PATTERN = -2_i32
  end
  enum D3D10_SHADER_DEBUG_REGTYPE
    D3D10_SHADER_DEBUG_REG_INPUT = 0_i32
    D3D10_SHADER_DEBUG_REG_OUTPUT = 1_i32
    D3D10_SHADER_DEBUG_REG_CBUFFER = 2_i32
    D3D10_SHADER_DEBUG_REG_TBUFFER = 3_i32
    D3D10_SHADER_DEBUG_REG_TEMP = 4_i32
    D3D10_SHADER_DEBUG_REG_TEMPARRAY = 5_i32
    D3D10_SHADER_DEBUG_REG_TEXTURE = 6_i32
    D3D10_SHADER_DEBUG_REG_SAMPLER = 7_i32
    D3D10_SHADER_DEBUG_REG_IMMEDIATECBUFFER = 8_i32
    D3D10_SHADER_DEBUG_REG_LITERAL = 9_i32
    D3D10_SHADER_DEBUG_REG_UNUSED = 10_i32
    D3D11_SHADER_DEBUG_REG_INTERFACE_POINTERS = 11_i32
    D3D11_SHADER_DEBUG_REG_UAV = 12_i32
    D3D10_SHADER_DEBUG_REG_FORCE_DWORD = 2147483647_i32
  end
  enum D3D10_SHADER_DEBUG_SCOPETYPE
    D3D10_SHADER_DEBUG_SCOPE_GLOBAL = 0_i32
    D3D10_SHADER_DEBUG_SCOPE_BLOCK = 1_i32
    D3D10_SHADER_DEBUG_SCOPE_FORLOOP = 2_i32
    D3D10_SHADER_DEBUG_SCOPE_STRUCT = 3_i32
    D3D10_SHADER_DEBUG_SCOPE_FUNC_PARAMS = 4_i32
    D3D10_SHADER_DEBUG_SCOPE_STATEBLOCK = 5_i32
    D3D10_SHADER_DEBUG_SCOPE_NAMESPACE = 6_i32
    D3D10_SHADER_DEBUG_SCOPE_ANNOTATION = 7_i32
    D3D10_SHADER_DEBUG_SCOPE_FORCE_DWORD = 2147483647_i32
  end
  enum D3D10_SHADER_DEBUG_VARTYPE
    D3D10_SHADER_DEBUG_VAR_VARIABLE = 0_i32
    D3D10_SHADER_DEBUG_VAR_FUNCTION = 1_i32
    D3D10_SHADER_DEBUG_VAR_FORCE_DWORD = 2147483647_i32
  end

  @[Extern]
  struct D3D10_INPUT_ELEMENT_DESC
    property semantic_name : Win32cr::Foundation::PSTR
    property semantic_index : UInt32
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property input_slot : UInt32
    property aligned_byte_offset : UInt32
    property input_slot_class : Win32cr::Graphics::Direct3D10::D3D10_INPUT_CLASSIFICATION
    property instance_data_step_rate : UInt32
    def initialize(@semantic_name : Win32cr::Foundation::PSTR, @semantic_index : UInt32, @format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @input_slot : UInt32, @aligned_byte_offset : UInt32, @input_slot_class : Win32cr::Graphics::Direct3D10::D3D10_INPUT_CLASSIFICATION, @instance_data_step_rate : UInt32)
    end
  end

  @[Extern]
  struct D3D10_SO_DECLARATION_ENTRY
    property semantic_name : Win32cr::Foundation::PSTR
    property semantic_index : UInt32
    property start_component : UInt8
    property component_count : UInt8
    property output_slot : UInt8
    def initialize(@semantic_name : Win32cr::Foundation::PSTR, @semantic_index : UInt32, @start_component : UInt8, @component_count : UInt8, @output_slot : UInt8)
    end
  end

  @[Extern]
  struct D3D10_VIEWPORT
    property top_left_x : Int32
    property top_left_y : Int32
    property width : UInt32
    property height : UInt32
    property min_depth : Float32
    property max_depth : Float32
    def initialize(@top_left_x : Int32, @top_left_y : Int32, @width : UInt32, @height : UInt32, @min_depth : Float32, @max_depth : Float32)
    end
  end

  @[Extern]
  struct D3D10_BOX
    property left : UInt32
    property top : UInt32
    property front : UInt32
    property right : UInt32
    property bottom : UInt32
    property back : UInt32
    def initialize(@left : UInt32, @top : UInt32, @front : UInt32, @right : UInt32, @bottom : UInt32, @back : UInt32)
    end
  end

  @[Extern]
  struct D3D10_DEPTH_STENCILOP_DESC
    property stencil_fail_op : Win32cr::Graphics::Direct3D10::D3D10_STENCIL_OP
    property stencil_depth_fail_op : Win32cr::Graphics::Direct3D10::D3D10_STENCIL_OP
    property stencil_pass_op : Win32cr::Graphics::Direct3D10::D3D10_STENCIL_OP
    property stencil_func : Win32cr::Graphics::Direct3D10::D3D10_COMPARISON_FUNC
    def initialize(@stencil_fail_op : Win32cr::Graphics::Direct3D10::D3D10_STENCIL_OP, @stencil_depth_fail_op : Win32cr::Graphics::Direct3D10::D3D10_STENCIL_OP, @stencil_pass_op : Win32cr::Graphics::Direct3D10::D3D10_STENCIL_OP, @stencil_func : Win32cr::Graphics::Direct3D10::D3D10_COMPARISON_FUNC)
    end
  end

  @[Extern]
  struct D3D10_DEPTH_STENCIL_DESC
    property depth_enable : Win32cr::Foundation::BOOL
    property depth_write_mask : Win32cr::Graphics::Direct3D10::D3D10_DEPTH_WRITE_MASK
    property depth_func : Win32cr::Graphics::Direct3D10::D3D10_COMPARISON_FUNC
    property stencil_enable : Win32cr::Foundation::BOOL
    property stencil_read_mask : UInt8
    property stencil_write_mask : UInt8
    property front_face : Win32cr::Graphics::Direct3D10::D3D10_DEPTH_STENCILOP_DESC
    property back_face : Win32cr::Graphics::Direct3D10::D3D10_DEPTH_STENCILOP_DESC
    def initialize(@depth_enable : Win32cr::Foundation::BOOL, @depth_write_mask : Win32cr::Graphics::Direct3D10::D3D10_DEPTH_WRITE_MASK, @depth_func : Win32cr::Graphics::Direct3D10::D3D10_COMPARISON_FUNC, @stencil_enable : Win32cr::Foundation::BOOL, @stencil_read_mask : UInt8, @stencil_write_mask : UInt8, @front_face : Win32cr::Graphics::Direct3D10::D3D10_DEPTH_STENCILOP_DESC, @back_face : Win32cr::Graphics::Direct3D10::D3D10_DEPTH_STENCILOP_DESC)
    end
  end

  @[Extern]
  struct D3D10_BLEND_DESC
    property alpha_to_coverage_enable : Win32cr::Foundation::BOOL
    property blend_enable : Win32cr::Foundation::BOOL[8]
    property src_blend : Win32cr::Graphics::Direct3D10::D3D10_BLEND
    property dest_blend : Win32cr::Graphics::Direct3D10::D3D10_BLEND
    property blend_op : Win32cr::Graphics::Direct3D10::D3D10_BLEND_OP
    property src_blend_alpha : Win32cr::Graphics::Direct3D10::D3D10_BLEND
    property dest_blend_alpha : Win32cr::Graphics::Direct3D10::D3D10_BLEND
    property blend_op_alpha : Win32cr::Graphics::Direct3D10::D3D10_BLEND_OP
    property render_target_write_mask : UInt8[8]
    def initialize(@alpha_to_coverage_enable : Win32cr::Foundation::BOOL, @blend_enable : Win32cr::Foundation::BOOL[8], @src_blend : Win32cr::Graphics::Direct3D10::D3D10_BLEND, @dest_blend : Win32cr::Graphics::Direct3D10::D3D10_BLEND, @blend_op : Win32cr::Graphics::Direct3D10::D3D10_BLEND_OP, @src_blend_alpha : Win32cr::Graphics::Direct3D10::D3D10_BLEND, @dest_blend_alpha : Win32cr::Graphics::Direct3D10::D3D10_BLEND, @blend_op_alpha : Win32cr::Graphics::Direct3D10::D3D10_BLEND_OP, @render_target_write_mask : UInt8[8])
    end
  end

  @[Extern]
  struct D3D10_RASTERIZER_DESC
    property fill_mode : Win32cr::Graphics::Direct3D10::D3D10_FILL_MODE
    property cull_mode : Win32cr::Graphics::Direct3D10::D3D10_CULL_MODE
    property front_counter_clockwise : Win32cr::Foundation::BOOL
    property depth_bias : Int32
    property depth_bias_clamp : Float32
    property slope_scaled_depth_bias : Float32
    property depth_clip_enable : Win32cr::Foundation::BOOL
    property scissor_enable : Win32cr::Foundation::BOOL
    property multisample_enable : Win32cr::Foundation::BOOL
    property antialiased_line_enable : Win32cr::Foundation::BOOL
    def initialize(@fill_mode : Win32cr::Graphics::Direct3D10::D3D10_FILL_MODE, @cull_mode : Win32cr::Graphics::Direct3D10::D3D10_CULL_MODE, @front_counter_clockwise : Win32cr::Foundation::BOOL, @depth_bias : Int32, @depth_bias_clamp : Float32, @slope_scaled_depth_bias : Float32, @depth_clip_enable : Win32cr::Foundation::BOOL, @scissor_enable : Win32cr::Foundation::BOOL, @multisample_enable : Win32cr::Foundation::BOOL, @antialiased_line_enable : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D3D10_SUBRESOURCE_DATA
    property pSysMem : Void*
    property sys_mem_pitch : UInt32
    property sys_mem_slice_pitch : UInt32
    def initialize(@pSysMem : Void*, @sys_mem_pitch : UInt32, @sys_mem_slice_pitch : UInt32)
    end
  end

  @[Extern]
  struct D3D10_BUFFER_DESC
    property byte_width : UInt32
    property usage : Win32cr::Graphics::Direct3D10::D3D10_USAGE
    property bind_flags : UInt32
    property cpu_access_flags : UInt32
    property misc_flags : UInt32
    def initialize(@byte_width : UInt32, @usage : Win32cr::Graphics::Direct3D10::D3D10_USAGE, @bind_flags : UInt32, @cpu_access_flags : UInt32, @misc_flags : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TEXTURE1D_DESC
    property width : UInt32
    property mip_levels : UInt32
    property array_size : UInt32
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property usage : Win32cr::Graphics::Direct3D10::D3D10_USAGE
    property bind_flags : UInt32
    property cpu_access_flags : UInt32
    property misc_flags : UInt32
    def initialize(@width : UInt32, @mip_levels : UInt32, @array_size : UInt32, @format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @usage : Win32cr::Graphics::Direct3D10::D3D10_USAGE, @bind_flags : UInt32, @cpu_access_flags : UInt32, @misc_flags : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TEXTURE2D_DESC
    property width : UInt32
    property height : UInt32
    property mip_levels : UInt32
    property array_size : UInt32
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property sample_desc : Win32cr::Graphics::Dxgi::Common::DXGI_SAMPLE_DESC
    property usage : Win32cr::Graphics::Direct3D10::D3D10_USAGE
    property bind_flags : UInt32
    property cpu_access_flags : UInt32
    property misc_flags : UInt32
    def initialize(@width : UInt32, @height : UInt32, @mip_levels : UInt32, @array_size : UInt32, @format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @sample_desc : Win32cr::Graphics::Dxgi::Common::DXGI_SAMPLE_DESC, @usage : Win32cr::Graphics::Direct3D10::D3D10_USAGE, @bind_flags : UInt32, @cpu_access_flags : UInt32, @misc_flags : UInt32)
    end
  end

  @[Extern]
  struct D3D10_MAPPED_TEXTURE2D
    property pData : Void*
    property row_pitch : UInt32
    def initialize(@pData : Void*, @row_pitch : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TEXTURE3D_DESC
    property width : UInt32
    property height : UInt32
    property depth : UInt32
    property mip_levels : UInt32
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property usage : Win32cr::Graphics::Direct3D10::D3D10_USAGE
    property bind_flags : UInt32
    property cpu_access_flags : UInt32
    property misc_flags : UInt32
    def initialize(@width : UInt32, @height : UInt32, @depth : UInt32, @mip_levels : UInt32, @format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @usage : Win32cr::Graphics::Direct3D10::D3D10_USAGE, @bind_flags : UInt32, @cpu_access_flags : UInt32, @misc_flags : UInt32)
    end
  end

  @[Extern]
  struct D3D10_MAPPED_TEXTURE3D
    property pData : Void*
    property row_pitch : UInt32
    property depth_pitch : UInt32
    def initialize(@pData : Void*, @row_pitch : UInt32, @depth_pitch : UInt32)
    end
  end

  @[Extern]
  struct D3D10_BUFFER_SRV
    property anonymous1 : Anonymous1_e__Union_
    property anonymous2 : Anonymous2_e__Union_

    # Nested Type Anonymous1_e__Union_
    @[Extern(union: true)]
    struct Anonymous1_e__Union_
    property first_element : UInt32
    property element_offset : UInt32
    def initialize(@first_element : UInt32, @element_offset : UInt32)
    end
    end


    # Nested Type Anonymous2_e__Union_
    @[Extern(union: true)]
    struct Anonymous2_e__Union_
    property num_elements : UInt32
    property element_width : UInt32
    def initialize(@num_elements : UInt32, @element_width : UInt32)
    end
    end

    def initialize(@anonymous1 : Anonymous1_e__Union_, @anonymous2 : Anonymous2_e__Union_)
    end
  end

  @[Extern]
  struct D3D10_TEX1D_SRV
    property most_detailed_mip : UInt32
    property mip_levels : UInt32
    def initialize(@most_detailed_mip : UInt32, @mip_levels : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TEX1D_ARRAY_SRV
    property most_detailed_mip : UInt32
    property mip_levels : UInt32
    property first_array_slice : UInt32
    property array_size : UInt32
    def initialize(@most_detailed_mip : UInt32, @mip_levels : UInt32, @first_array_slice : UInt32, @array_size : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TEX2D_SRV
    property most_detailed_mip : UInt32
    property mip_levels : UInt32
    def initialize(@most_detailed_mip : UInt32, @mip_levels : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TEX2D_ARRAY_SRV
    property most_detailed_mip : UInt32
    property mip_levels : UInt32
    property first_array_slice : UInt32
    property array_size : UInt32
    def initialize(@most_detailed_mip : UInt32, @mip_levels : UInt32, @first_array_slice : UInt32, @array_size : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TEX3D_SRV
    property most_detailed_mip : UInt32
    property mip_levels : UInt32
    def initialize(@most_detailed_mip : UInt32, @mip_levels : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TEXCUBE_SRV
    property most_detailed_mip : UInt32
    property mip_levels : UInt32
    def initialize(@most_detailed_mip : UInt32, @mip_levels : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TEX2DMS_SRV
    property unused_field_nothing_to_define : UInt32
    def initialize(@unused_field_nothing_to_define : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TEX2DMS_ARRAY_SRV
    property first_array_slice : UInt32
    property array_size : UInt32
    def initialize(@first_array_slice : UInt32, @array_size : UInt32)
    end
  end

  @[Extern]
  struct D3D10_SHADER_RESOURCE_VIEW_DESC
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property view_dimension : Win32cr::Graphics::Direct3D::D3D_SRV_DIMENSION
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property buffer : Win32cr::Graphics::Direct3D10::D3D10_BUFFER_SRV
    property texture1_d : Win32cr::Graphics::Direct3D10::D3D10_TEX1D_SRV
    property texture1_d_array : Win32cr::Graphics::Direct3D10::D3D10_TEX1D_ARRAY_SRV
    property texture2_d : Win32cr::Graphics::Direct3D10::D3D10_TEX2D_SRV
    property texture2_d_array : Win32cr::Graphics::Direct3D10::D3D10_TEX2D_ARRAY_SRV
    property texture2_dms : Win32cr::Graphics::Direct3D10::D3D10_TEX2DMS_SRV
    property texture2_dms_array : Win32cr::Graphics::Direct3D10::D3D10_TEX2DMS_ARRAY_SRV
    property texture3_d : Win32cr::Graphics::Direct3D10::D3D10_TEX3D_SRV
    property texture_cube : Win32cr::Graphics::Direct3D10::D3D10_TEXCUBE_SRV
    def initialize(@buffer : Win32cr::Graphics::Direct3D10::D3D10_BUFFER_SRV, @texture1_d : Win32cr::Graphics::Direct3D10::D3D10_TEX1D_SRV, @texture1_d_array : Win32cr::Graphics::Direct3D10::D3D10_TEX1D_ARRAY_SRV, @texture2_d : Win32cr::Graphics::Direct3D10::D3D10_TEX2D_SRV, @texture2_d_array : Win32cr::Graphics::Direct3D10::D3D10_TEX2D_ARRAY_SRV, @texture2_dms : Win32cr::Graphics::Direct3D10::D3D10_TEX2DMS_SRV, @texture2_dms_array : Win32cr::Graphics::Direct3D10::D3D10_TEX2DMS_ARRAY_SRV, @texture3_d : Win32cr::Graphics::Direct3D10::D3D10_TEX3D_SRV, @texture_cube : Win32cr::Graphics::Direct3D10::D3D10_TEXCUBE_SRV)
    end
    end

    def initialize(@format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @view_dimension : Win32cr::Graphics::Direct3D::D3D_SRV_DIMENSION, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct D3D10_BUFFER_RTV
    property anonymous1 : Anonymous1_e__Union_
    property anonymous2 : Anonymous2_e__Union_

    # Nested Type Anonymous2_e__Union_
    @[Extern(union: true)]
    struct Anonymous2_e__Union_
    property num_elements : UInt32
    property element_width : UInt32
    def initialize(@num_elements : UInt32, @element_width : UInt32)
    end
    end


    # Nested Type Anonymous1_e__Union_
    @[Extern(union: true)]
    struct Anonymous1_e__Union_
    property first_element : UInt32
    property element_offset : UInt32
    def initialize(@first_element : UInt32, @element_offset : UInt32)
    end
    end

    def initialize(@anonymous1 : Anonymous1_e__Union_, @anonymous2 : Anonymous2_e__Union_)
    end
  end

  @[Extern]
  struct D3D10_TEX1D_RTV
    property mip_slice : UInt32
    def initialize(@mip_slice : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TEX1D_ARRAY_RTV
    property mip_slice : UInt32
    property first_array_slice : UInt32
    property array_size : UInt32
    def initialize(@mip_slice : UInt32, @first_array_slice : UInt32, @array_size : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TEX2D_RTV
    property mip_slice : UInt32
    def initialize(@mip_slice : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TEX2DMS_RTV
    property unused_field_nothing_to_define : UInt32
    def initialize(@unused_field_nothing_to_define : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TEX2D_ARRAY_RTV
    property mip_slice : UInt32
    property first_array_slice : UInt32
    property array_size : UInt32
    def initialize(@mip_slice : UInt32, @first_array_slice : UInt32, @array_size : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TEX2DMS_ARRAY_RTV
    property first_array_slice : UInt32
    property array_size : UInt32
    def initialize(@first_array_slice : UInt32, @array_size : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TEX3D_RTV
    property mip_slice : UInt32
    property first_w_slice : UInt32
    property w_size : UInt32
    def initialize(@mip_slice : UInt32, @first_w_slice : UInt32, @w_size : UInt32)
    end
  end

  @[Extern]
  struct D3D10_RENDER_TARGET_VIEW_DESC
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property view_dimension : Win32cr::Graphics::Direct3D10::D3D10_RTV_DIMENSION
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property buffer : Win32cr::Graphics::Direct3D10::D3D10_BUFFER_RTV
    property texture1_d : Win32cr::Graphics::Direct3D10::D3D10_TEX1D_RTV
    property texture1_d_array : Win32cr::Graphics::Direct3D10::D3D10_TEX1D_ARRAY_RTV
    property texture2_d : Win32cr::Graphics::Direct3D10::D3D10_TEX2D_RTV
    property texture2_d_array : Win32cr::Graphics::Direct3D10::D3D10_TEX2D_ARRAY_RTV
    property texture2_dms : Win32cr::Graphics::Direct3D10::D3D10_TEX2DMS_RTV
    property texture2_dms_array : Win32cr::Graphics::Direct3D10::D3D10_TEX2DMS_ARRAY_RTV
    property texture3_d : Win32cr::Graphics::Direct3D10::D3D10_TEX3D_RTV
    def initialize(@buffer : Win32cr::Graphics::Direct3D10::D3D10_BUFFER_RTV, @texture1_d : Win32cr::Graphics::Direct3D10::D3D10_TEX1D_RTV, @texture1_d_array : Win32cr::Graphics::Direct3D10::D3D10_TEX1D_ARRAY_RTV, @texture2_d : Win32cr::Graphics::Direct3D10::D3D10_TEX2D_RTV, @texture2_d_array : Win32cr::Graphics::Direct3D10::D3D10_TEX2D_ARRAY_RTV, @texture2_dms : Win32cr::Graphics::Direct3D10::D3D10_TEX2DMS_RTV, @texture2_dms_array : Win32cr::Graphics::Direct3D10::D3D10_TEX2DMS_ARRAY_RTV, @texture3_d : Win32cr::Graphics::Direct3D10::D3D10_TEX3D_RTV)
    end
    end

    def initialize(@format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @view_dimension : Win32cr::Graphics::Direct3D10::D3D10_RTV_DIMENSION, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct D3D10_TEX1D_DSV
    property mip_slice : UInt32
    def initialize(@mip_slice : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TEX1D_ARRAY_DSV
    property mip_slice : UInt32
    property first_array_slice : UInt32
    property array_size : UInt32
    def initialize(@mip_slice : UInt32, @first_array_slice : UInt32, @array_size : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TEX2D_DSV
    property mip_slice : UInt32
    def initialize(@mip_slice : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TEX2D_ARRAY_DSV
    property mip_slice : UInt32
    property first_array_slice : UInt32
    property array_size : UInt32
    def initialize(@mip_slice : UInt32, @first_array_slice : UInt32, @array_size : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TEX2DMS_DSV
    property unused_field_nothing_to_define : UInt32
    def initialize(@unused_field_nothing_to_define : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TEX2DMS_ARRAY_DSV
    property first_array_slice : UInt32
    property array_size : UInt32
    def initialize(@first_array_slice : UInt32, @array_size : UInt32)
    end
  end

  @[Extern]
  struct D3D10_DEPTH_STENCIL_VIEW_DESC
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property view_dimension : Win32cr::Graphics::Direct3D10::D3D10_DSV_DIMENSION
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property texture1_d : Win32cr::Graphics::Direct3D10::D3D10_TEX1D_DSV
    property texture1_d_array : Win32cr::Graphics::Direct3D10::D3D10_TEX1D_ARRAY_DSV
    property texture2_d : Win32cr::Graphics::Direct3D10::D3D10_TEX2D_DSV
    property texture2_d_array : Win32cr::Graphics::Direct3D10::D3D10_TEX2D_ARRAY_DSV
    property texture2_dms : Win32cr::Graphics::Direct3D10::D3D10_TEX2DMS_DSV
    property texture2_dms_array : Win32cr::Graphics::Direct3D10::D3D10_TEX2DMS_ARRAY_DSV
    def initialize(@texture1_d : Win32cr::Graphics::Direct3D10::D3D10_TEX1D_DSV, @texture1_d_array : Win32cr::Graphics::Direct3D10::D3D10_TEX1D_ARRAY_DSV, @texture2_d : Win32cr::Graphics::Direct3D10::D3D10_TEX2D_DSV, @texture2_d_array : Win32cr::Graphics::Direct3D10::D3D10_TEX2D_ARRAY_DSV, @texture2_dms : Win32cr::Graphics::Direct3D10::D3D10_TEX2DMS_DSV, @texture2_dms_array : Win32cr::Graphics::Direct3D10::D3D10_TEX2DMS_ARRAY_DSV)
    end
    end

    def initialize(@format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @view_dimension : Win32cr::Graphics::Direct3D10::D3D10_DSV_DIMENSION, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct D3D10_SAMPLER_DESC
    property filter : Win32cr::Graphics::Direct3D10::D3D10_FILTER
    property address_u : Win32cr::Graphics::Direct3D10::D3D10_TEXTURE_ADDRESS_MODE
    property address_v : Win32cr::Graphics::Direct3D10::D3D10_TEXTURE_ADDRESS_MODE
    property address_w : Win32cr::Graphics::Direct3D10::D3D10_TEXTURE_ADDRESS_MODE
    property mip_lod_bias : Float32
    property max_anisotropy : UInt32
    property comparison_func : Win32cr::Graphics::Direct3D10::D3D10_COMPARISON_FUNC
    property border_color : Float32[4]
    property min_lod : Float32
    property max_lod : Float32
    def initialize(@filter : Win32cr::Graphics::Direct3D10::D3D10_FILTER, @address_u : Win32cr::Graphics::Direct3D10::D3D10_TEXTURE_ADDRESS_MODE, @address_v : Win32cr::Graphics::Direct3D10::D3D10_TEXTURE_ADDRESS_MODE, @address_w : Win32cr::Graphics::Direct3D10::D3D10_TEXTURE_ADDRESS_MODE, @mip_lod_bias : Float32, @max_anisotropy : UInt32, @comparison_func : Win32cr::Graphics::Direct3D10::D3D10_COMPARISON_FUNC, @border_color : Float32[4], @min_lod : Float32, @max_lod : Float32)
    end
  end

  @[Extern]
  struct D3D10_QUERY_DESC
    property query : Win32cr::Graphics::Direct3D10::D3D10_QUERY
    property misc_flags : UInt32
    def initialize(@query : Win32cr::Graphics::Direct3D10::D3D10_QUERY, @misc_flags : UInt32)
    end
  end

  @[Extern]
  struct D3D10_QUERY_DATA_TIMESTAMP_DISJOINT
    property frequency : UInt64
    property disjoint : Win32cr::Foundation::BOOL
    def initialize(@frequency : UInt64, @disjoint : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D3D10_QUERY_DATA_PIPELINE_STATISTICS
    property ia_vertices : UInt64
    property ia_primitives : UInt64
    property vs_invocations : UInt64
    property gs_invocations : UInt64
    property gs_primitives : UInt64
    property c_invocations : UInt64
    property c_primitives : UInt64
    property ps_invocations : UInt64
    def initialize(@ia_vertices : UInt64, @ia_primitives : UInt64, @vs_invocations : UInt64, @gs_invocations : UInt64, @gs_primitives : UInt64, @c_invocations : UInt64, @c_primitives : UInt64, @ps_invocations : UInt64)
    end
  end

  @[Extern]
  struct D3D10_QUERY_DATA_SO_STATISTICS
    property num_primitives_written : UInt64
    property primitives_storage_needed : UInt64
    def initialize(@num_primitives_written : UInt64, @primitives_storage_needed : UInt64)
    end
  end

  @[Extern]
  struct D3D10_COUNTER_DESC
    property counter : Win32cr::Graphics::Direct3D10::D3D10_COUNTER
    property misc_flags : UInt32
    def initialize(@counter : Win32cr::Graphics::Direct3D10::D3D10_COUNTER, @misc_flags : UInt32)
    end
  end

  @[Extern]
  struct D3D10_COUNTER_INFO
    property last_device_dependent_counter : Win32cr::Graphics::Direct3D10::D3D10_COUNTER
    property num_simultaneous_counters : UInt32
    property num_detectable_parallel_units : UInt8
    def initialize(@last_device_dependent_counter : Win32cr::Graphics::Direct3D10::D3D10_COUNTER, @num_simultaneous_counters : UInt32, @num_detectable_parallel_units : UInt8)
    end
  end

  @[Extern]
  struct D3D10_MESSAGE
    property category : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_CATEGORY
    property severity : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_SEVERITY
    property id : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_ID
    property pDescription : UInt8*
    property description_byte_length : LibC::UIntPtrT
    def initialize(@category : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_CATEGORY, @severity : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_SEVERITY, @id : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_ID, @pDescription : UInt8*, @description_byte_length : LibC::UIntPtrT)
    end
  end

  @[Extern]
  struct D3D10_INFO_QUEUE_FILTER_DESC
    property num_categories : UInt32
    property pCategoryList : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_CATEGORY*
    property num_severities : UInt32
    property pSeverityList : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_SEVERITY*
    property num_i_ds : UInt32
    property pIDList : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_ID*
    def initialize(@num_categories : UInt32, @pCategoryList : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_CATEGORY*, @num_severities : UInt32, @pSeverityList : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_SEVERITY*, @num_i_ds : UInt32, @pIDList : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_ID*)
    end
  end

  @[Extern]
  struct D3D10_INFO_QUEUE_FILTER
    property allow_list : Win32cr::Graphics::Direct3D10::D3D10_INFO_QUEUE_FILTER_DESC
    property deny_list : Win32cr::Graphics::Direct3D10::D3D10_INFO_QUEUE_FILTER_DESC
    def initialize(@allow_list : Win32cr::Graphics::Direct3D10::D3D10_INFO_QUEUE_FILTER_DESC, @deny_list : Win32cr::Graphics::Direct3D10::D3D10_INFO_QUEUE_FILTER_DESC)
    end
  end

  @[Extern]
  struct D3D10_SHADER_DESC
    property version : UInt32
    property creator : Win32cr::Foundation::PSTR
    property flags : UInt32
    property constant_buffers : UInt32
    property bound_resources : UInt32
    property input_parameters : UInt32
    property output_parameters : UInt32
    property instruction_count : UInt32
    property temp_register_count : UInt32
    property temp_array_count : UInt32
    property def_count : UInt32
    property dcl_count : UInt32
    property texture_normal_instructions : UInt32
    property texture_load_instructions : UInt32
    property texture_comp_instructions : UInt32
    property texture_bias_instructions : UInt32
    property texture_gradient_instructions : UInt32
    property float_instruction_count : UInt32
    property int_instruction_count : UInt32
    property uint_instruction_count : UInt32
    property static_flow_control_count : UInt32
    property dynamic_flow_control_count : UInt32
    property macro_instruction_count : UInt32
    property array_instruction_count : UInt32
    property cut_instruction_count : UInt32
    property emit_instruction_count : UInt32
    property gs_output_topology : Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY
    property gs_max_output_vertex_count : UInt32
    def initialize(@version : UInt32, @creator : Win32cr::Foundation::PSTR, @flags : UInt32, @constant_buffers : UInt32, @bound_resources : UInt32, @input_parameters : UInt32, @output_parameters : UInt32, @instruction_count : UInt32, @temp_register_count : UInt32, @temp_array_count : UInt32, @def_count : UInt32, @dcl_count : UInt32, @texture_normal_instructions : UInt32, @texture_load_instructions : UInt32, @texture_comp_instructions : UInt32, @texture_bias_instructions : UInt32, @texture_gradient_instructions : UInt32, @float_instruction_count : UInt32, @int_instruction_count : UInt32, @uint_instruction_count : UInt32, @static_flow_control_count : UInt32, @dynamic_flow_control_count : UInt32, @macro_instruction_count : UInt32, @array_instruction_count : UInt32, @cut_instruction_count : UInt32, @emit_instruction_count : UInt32, @gs_output_topology : Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY, @gs_max_output_vertex_count : UInt32)
    end
  end

  @[Extern]
  struct D3D10_SHADER_BUFFER_DESC
    property name : Win32cr::Foundation::PSTR
    property type__ : Win32cr::Graphics::Direct3D::D3D_CBUFFER_TYPE
    property variables : UInt32
    property size : UInt32
    property uFlags : UInt32
    def initialize(@name : Win32cr::Foundation::PSTR, @type__ : Win32cr::Graphics::Direct3D::D3D_CBUFFER_TYPE, @variables : UInt32, @size : UInt32, @uFlags : UInt32)
    end
  end

  @[Extern]
  struct D3D10_SHADER_VARIABLE_DESC
    property name : Win32cr::Foundation::PSTR
    property start_offset : UInt32
    property size : UInt32
    property uFlags : UInt32
    property default_value : Void*
    def initialize(@name : Win32cr::Foundation::PSTR, @start_offset : UInt32, @size : UInt32, @uFlags : UInt32, @default_value : Void*)
    end
  end

  @[Extern]
  struct D3D10_SHADER_TYPE_DESC
    property class__ : Win32cr::Graphics::Direct3D::D3D_SHADER_VARIABLE_CLASS
    property type__ : Win32cr::Graphics::Direct3D::D3D_SHADER_VARIABLE_TYPE
    property rows : UInt32
    property columns : UInt32
    property elements : UInt32
    property members : UInt32
    property offset : UInt32
    def initialize(@class__ : Win32cr::Graphics::Direct3D::D3D_SHADER_VARIABLE_CLASS, @type__ : Win32cr::Graphics::Direct3D::D3D_SHADER_VARIABLE_TYPE, @rows : UInt32, @columns : UInt32, @elements : UInt32, @members : UInt32, @offset : UInt32)
    end
  end

  @[Extern]
  struct D3D10_SHADER_INPUT_BIND_DESC
    property name : Win32cr::Foundation::PSTR
    property type__ : Win32cr::Graphics::Direct3D::D3D_SHADER_INPUT_TYPE
    property bind_point : UInt32
    property bind_count : UInt32
    property uFlags : UInt32
    property return_type : Win32cr::Graphics::Direct3D::D3D_RESOURCE_RETURN_TYPE
    property dimension : Win32cr::Graphics::Direct3D::D3D_SRV_DIMENSION
    property num_samples : UInt32
    def initialize(@name : Win32cr::Foundation::PSTR, @type__ : Win32cr::Graphics::Direct3D::D3D_SHADER_INPUT_TYPE, @bind_point : UInt32, @bind_count : UInt32, @uFlags : UInt32, @return_type : Win32cr::Graphics::Direct3D::D3D_RESOURCE_RETURN_TYPE, @dimension : Win32cr::Graphics::Direct3D::D3D_SRV_DIMENSION, @num_samples : UInt32)
    end
  end

  @[Extern]
  struct D3D10_SIGNATURE_PARAMETER_DESC
    property semantic_name : Win32cr::Foundation::PSTR
    property semantic_index : UInt32
    property register : UInt32
    property system_value_type : Win32cr::Graphics::Direct3D::D3D_NAME
    property component_type : Win32cr::Graphics::Direct3D::D3D_REGISTER_COMPONENT_TYPE
    property mask : UInt8
    property read_write_mask : UInt8
    def initialize(@semantic_name : Win32cr::Foundation::PSTR, @semantic_index : UInt32, @register : UInt32, @system_value_type : Win32cr::Graphics::Direct3D::D3D_NAME, @component_type : Win32cr::Graphics::Direct3D::D3D_REGISTER_COMPONENT_TYPE, @mask : UInt8, @read_write_mask : UInt8)
    end
  end

  @[Extern]
  struct D3D10_STATE_BLOCK_MASK
    property vs : UInt8
    property vs_samplers : UInt8[2]
    property vs_shader_resources : UInt8[16]
    property vs_constant_buffers : UInt8[2]
    property gs : UInt8
    property gs_samplers : UInt8[2]
    property gs_shader_resources : UInt8[16]
    property gs_constant_buffers : UInt8[2]
    property ps : UInt8
    property ps_samplers : UInt8[2]
    property ps_shader_resources : UInt8[16]
    property ps_constant_buffers : UInt8[2]
    property ia_vertex_buffers : UInt8[2]
    property ia_index_buffer : UInt8
    property ia_input_layout : UInt8
    property ia_primitive_topology : UInt8
    property om_render_targets : UInt8
    property om_depth_stencil_state : UInt8
    property om_blend_state : UInt8
    property rs_viewports : UInt8
    property rs_scissor_rects : UInt8
    property rs_rasterizer_state : UInt8
    property so_buffers : UInt8
    property predication : UInt8
    def initialize(@vs : UInt8, @vs_samplers : UInt8[2], @vs_shader_resources : UInt8[16], @vs_constant_buffers : UInt8[2], @gs : UInt8, @gs_samplers : UInt8[2], @gs_shader_resources : UInt8[16], @gs_constant_buffers : UInt8[2], @ps : UInt8, @ps_samplers : UInt8[2], @ps_shader_resources : UInt8[16], @ps_constant_buffers : UInt8[2], @ia_vertex_buffers : UInt8[2], @ia_index_buffer : UInt8, @ia_input_layout : UInt8, @ia_primitive_topology : UInt8, @om_render_targets : UInt8, @om_depth_stencil_state : UInt8, @om_blend_state : UInt8, @rs_viewports : UInt8, @rs_scissor_rects : UInt8, @rs_rasterizer_state : UInt8, @so_buffers : UInt8, @predication : UInt8)
    end
  end

  @[Extern]
  struct D3D10_EFFECT_TYPE_DESC
    property type_name : Win32cr::Foundation::PSTR
    property class__ : Win32cr::Graphics::Direct3D::D3D_SHADER_VARIABLE_CLASS
    property type__ : Win32cr::Graphics::Direct3D::D3D_SHADER_VARIABLE_TYPE
    property elements : UInt32
    property members : UInt32
    property rows : UInt32
    property columns : UInt32
    property packed_size : UInt32
    property unpacked_size : UInt32
    property stride : UInt32
    def initialize(@type_name : Win32cr::Foundation::PSTR, @class__ : Win32cr::Graphics::Direct3D::D3D_SHADER_VARIABLE_CLASS, @type__ : Win32cr::Graphics::Direct3D::D3D_SHADER_VARIABLE_TYPE, @elements : UInt32, @members : UInt32, @rows : UInt32, @columns : UInt32, @packed_size : UInt32, @unpacked_size : UInt32, @stride : UInt32)
    end
  end

  @[Extern]
  struct D3D10_EFFECT_VARIABLE_DESC
    property name : Win32cr::Foundation::PSTR
    property semantic : Win32cr::Foundation::PSTR
    property flags : UInt32
    property annotations : UInt32
    property buffer_offset : UInt32
    property explicit_bind_point : UInt32
    def initialize(@name : Win32cr::Foundation::PSTR, @semantic : Win32cr::Foundation::PSTR, @flags : UInt32, @annotations : UInt32, @buffer_offset : UInt32, @explicit_bind_point : UInt32)
    end
  end

  @[Extern]
  struct D3D10_EFFECT_SHADER_DESC
    property pInputSignature : UInt8*
    property is_inline : Win32cr::Foundation::BOOL
    property pBytecode : UInt8*
    property bytecode_length : UInt32
    property so_decl : Win32cr::Foundation::PSTR
    property num_input_signature_entries : UInt32
    property num_output_signature_entries : UInt32
    def initialize(@pInputSignature : UInt8*, @is_inline : Win32cr::Foundation::BOOL, @pBytecode : UInt8*, @bytecode_length : UInt32, @so_decl : Win32cr::Foundation::PSTR, @num_input_signature_entries : UInt32, @num_output_signature_entries : UInt32)
    end
  end

  @[Extern]
  struct D3D10_PASS_DESC
    property name : Win32cr::Foundation::PSTR
    property annotations : UInt32
    property pIAInputSignature : UInt8*
    property ia_input_signature_size : LibC::UIntPtrT
    property stencil_ref : UInt32
    property sample_mask : UInt32
    property blend_factor : Float32[4]
    def initialize(@name : Win32cr::Foundation::PSTR, @annotations : UInt32, @pIAInputSignature : UInt8*, @ia_input_signature_size : LibC::UIntPtrT, @stencil_ref : UInt32, @sample_mask : UInt32, @blend_factor : Float32[4])
    end
  end

  @[Extern]
  struct D3D10_PASS_SHADER_DESC
    property pShaderVariable : Void*
    property shader_index : UInt32
    def initialize(@pShaderVariable : Void*, @shader_index : UInt32)
    end
  end

  @[Extern]
  struct D3D10_TECHNIQUE_DESC
    property name : Win32cr::Foundation::PSTR
    property passes : UInt32
    property annotations : UInt32
    def initialize(@name : Win32cr::Foundation::PSTR, @passes : UInt32, @annotations : UInt32)
    end
  end

  @[Extern]
  struct D3D10_EFFECT_DESC
    property is_child_effect : Win32cr::Foundation::BOOL
    property constant_buffers : UInt32
    property shared_constant_buffers : UInt32
    property global_variables : UInt32
    property shared_global_variables : UInt32
    property techniques : UInt32
    def initialize(@is_child_effect : Win32cr::Foundation::BOOL, @constant_buffers : UInt32, @shared_constant_buffers : UInt32, @global_variables : UInt32, @shared_global_variables : UInt32, @techniques : UInt32)
    end
  end

  @[Extern]
  struct D3D10_RENDER_TARGET_BLEND_DESC1
    property blend_enable : Win32cr::Foundation::BOOL
    property src_blend : Win32cr::Graphics::Direct3D10::D3D10_BLEND
    property dest_blend : Win32cr::Graphics::Direct3D10::D3D10_BLEND
    property blend_op : Win32cr::Graphics::Direct3D10::D3D10_BLEND_OP
    property src_blend_alpha : Win32cr::Graphics::Direct3D10::D3D10_BLEND
    property dest_blend_alpha : Win32cr::Graphics::Direct3D10::D3D10_BLEND
    property blend_op_alpha : Win32cr::Graphics::Direct3D10::D3D10_BLEND_OP
    property render_target_write_mask : UInt8
    def initialize(@blend_enable : Win32cr::Foundation::BOOL, @src_blend : Win32cr::Graphics::Direct3D10::D3D10_BLEND, @dest_blend : Win32cr::Graphics::Direct3D10::D3D10_BLEND, @blend_op : Win32cr::Graphics::Direct3D10::D3D10_BLEND_OP, @src_blend_alpha : Win32cr::Graphics::Direct3D10::D3D10_BLEND, @dest_blend_alpha : Win32cr::Graphics::Direct3D10::D3D10_BLEND, @blend_op_alpha : Win32cr::Graphics::Direct3D10::D3D10_BLEND_OP, @render_target_write_mask : UInt8)
    end
  end

  @[Extern]
  struct D3D10_BLEND_DESC1
    property alpha_to_coverage_enable : Win32cr::Foundation::BOOL
    property independent_blend_enable : Win32cr::Foundation::BOOL
    property render_target : Win32cr::Graphics::Direct3D10::D3D10_RENDER_TARGET_BLEND_DESC1[8]
    def initialize(@alpha_to_coverage_enable : Win32cr::Foundation::BOOL, @independent_blend_enable : Win32cr::Foundation::BOOL, @render_target : Win32cr::Graphics::Direct3D10::D3D10_RENDER_TARGET_BLEND_DESC1[8])
    end
  end

  @[Extern]
  struct D3D10_TEXCUBE_ARRAY_SRV1
    property most_detailed_mip : UInt32
    property mip_levels : UInt32
    property first2_d_array_face : UInt32
    property num_cubes : UInt32
    def initialize(@most_detailed_mip : UInt32, @mip_levels : UInt32, @first2_d_array_face : UInt32, @num_cubes : UInt32)
    end
  end

  @[Extern]
  struct D3D10_SHADER_RESOURCE_VIEW_DESC1
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property view_dimension : Win32cr::Graphics::Direct3D::D3D_SRV_DIMENSION
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property buffer : Win32cr::Graphics::Direct3D10::D3D10_BUFFER_SRV
    property texture1_d : Win32cr::Graphics::Direct3D10::D3D10_TEX1D_SRV
    property texture1_d_array : Win32cr::Graphics::Direct3D10::D3D10_TEX1D_ARRAY_SRV
    property texture2_d : Win32cr::Graphics::Direct3D10::D3D10_TEX2D_SRV
    property texture2_d_array : Win32cr::Graphics::Direct3D10::D3D10_TEX2D_ARRAY_SRV
    property texture2_dms : Win32cr::Graphics::Direct3D10::D3D10_TEX2DMS_SRV
    property texture2_dms_array : Win32cr::Graphics::Direct3D10::D3D10_TEX2DMS_ARRAY_SRV
    property texture3_d : Win32cr::Graphics::Direct3D10::D3D10_TEX3D_SRV
    property texture_cube : Win32cr::Graphics::Direct3D10::D3D10_TEXCUBE_SRV
    property texture_cube_array : Win32cr::Graphics::Direct3D10::D3D10_TEXCUBE_ARRAY_SRV1
    def initialize(@buffer : Win32cr::Graphics::Direct3D10::D3D10_BUFFER_SRV, @texture1_d : Win32cr::Graphics::Direct3D10::D3D10_TEX1D_SRV, @texture1_d_array : Win32cr::Graphics::Direct3D10::D3D10_TEX1D_ARRAY_SRV, @texture2_d : Win32cr::Graphics::Direct3D10::D3D10_TEX2D_SRV, @texture2_d_array : Win32cr::Graphics::Direct3D10::D3D10_TEX2D_ARRAY_SRV, @texture2_dms : Win32cr::Graphics::Direct3D10::D3D10_TEX2DMS_SRV, @texture2_dms_array : Win32cr::Graphics::Direct3D10::D3D10_TEX2DMS_ARRAY_SRV, @texture3_d : Win32cr::Graphics::Direct3D10::D3D10_TEX3D_SRV, @texture_cube : Win32cr::Graphics::Direct3D10::D3D10_TEXCUBE_SRV, @texture_cube_array : Win32cr::Graphics::Direct3D10::D3D10_TEXCUBE_ARRAY_SRV1)
    end
    end

    def initialize(@format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @view_dimension : Win32cr::Graphics::Direct3D::D3D_SRV_DIMENSION, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct D3D10_SHADER_DEBUG_TOKEN_INFO
    property file : UInt32
    property line : UInt32
    property column : UInt32
    property token_length : UInt32
    property token_id : UInt32
    def initialize(@file : UInt32, @line : UInt32, @column : UInt32, @token_length : UInt32, @token_id : UInt32)
    end
  end

  @[Extern]
  struct D3D10_SHADER_DEBUG_VAR_INFO
    property token_id : UInt32
    property type__ : Win32cr::Graphics::Direct3D::D3D_SHADER_VARIABLE_TYPE
    property register : UInt32
    property component : UInt32
    property scope_var : UInt32
    property scope_var_offset : UInt32
    def initialize(@token_id : UInt32, @type__ : Win32cr::Graphics::Direct3D::D3D_SHADER_VARIABLE_TYPE, @register : UInt32, @component : UInt32, @scope_var : UInt32, @scope_var_offset : UInt32)
    end
  end

  @[Extern]
  struct D3D10_SHADER_DEBUG_INPUT_INFO
    property var : UInt32
    property initial_register_set : Win32cr::Graphics::Direct3D10::D3D10_SHADER_DEBUG_REGTYPE
    property initial_bank : UInt32
    property initial_register : UInt32
    property initial_component : UInt32
    property initial_value : UInt32
    def initialize(@var : UInt32, @initial_register_set : Win32cr::Graphics::Direct3D10::D3D10_SHADER_DEBUG_REGTYPE, @initial_bank : UInt32, @initial_register : UInt32, @initial_component : UInt32, @initial_value : UInt32)
    end
  end

  @[Extern]
  struct D3D10_SHADER_DEBUG_SCOPEVAR_INFO
    property token_id : UInt32
    property var_type : Win32cr::Graphics::Direct3D10::D3D10_SHADER_DEBUG_VARTYPE
    property class__ : Win32cr::Graphics::Direct3D::D3D_SHADER_VARIABLE_CLASS
    property rows : UInt32
    property columns : UInt32
    property struct_member_scope : UInt32
    property uArrayIndices : UInt32
    property array_elements : UInt32
    property array_strides : UInt32
    property uVariables : UInt32
    property uFirstVariable : UInt32
    def initialize(@token_id : UInt32, @var_type : Win32cr::Graphics::Direct3D10::D3D10_SHADER_DEBUG_VARTYPE, @class__ : Win32cr::Graphics::Direct3D::D3D_SHADER_VARIABLE_CLASS, @rows : UInt32, @columns : UInt32, @struct_member_scope : UInt32, @uArrayIndices : UInt32, @array_elements : UInt32, @array_strides : UInt32, @uVariables : UInt32, @uFirstVariable : UInt32)
    end
  end

  @[Extern]
  struct D3D10_SHADER_DEBUG_SCOPE_INFO
    property scope_type : Win32cr::Graphics::Direct3D10::D3D10_SHADER_DEBUG_SCOPETYPE
    property name : UInt32
    property uNameLen : UInt32
    property uVariables : UInt32
    property variable_data : UInt32
    def initialize(@scope_type : Win32cr::Graphics::Direct3D10::D3D10_SHADER_DEBUG_SCOPETYPE, @name : UInt32, @uNameLen : UInt32, @uVariables : UInt32, @variable_data : UInt32)
    end
  end

  @[Extern]
  struct D3D10_SHADER_DEBUG_OUTPUTVAR
    property var : UInt32
    property uValueMin : UInt32
    property uValueMax : UInt32
    property iValueMin : Int32
    property iValueMax : Int32
    property fValueMin : Float32
    property fValueMax : Float32
    property bNaNPossible : Win32cr::Foundation::BOOL
    property bInfPossible : Win32cr::Foundation::BOOL
    def initialize(@var : UInt32, @uValueMin : UInt32, @uValueMax : UInt32, @iValueMin : Int32, @iValueMax : Int32, @fValueMin : Float32, @fValueMax : Float32, @bNaNPossible : Win32cr::Foundation::BOOL, @bInfPossible : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D3D10_SHADER_DEBUG_OUTPUTREG_INFO
    property output_register_set : Win32cr::Graphics::Direct3D10::D3D10_SHADER_DEBUG_REGTYPE
    property output_reg : UInt32
    property temp_array_reg : UInt32
    property output_components : UInt32[4]
    property output_vars : Win32cr::Graphics::Direct3D10::D3D10_SHADER_DEBUG_OUTPUTVAR[4]
    property index_reg : UInt32
    property index_comp : UInt32
    def initialize(@output_register_set : Win32cr::Graphics::Direct3D10::D3D10_SHADER_DEBUG_REGTYPE, @output_reg : UInt32, @temp_array_reg : UInt32, @output_components : UInt32[4], @output_vars : Win32cr::Graphics::Direct3D10::D3D10_SHADER_DEBUG_OUTPUTVAR[4], @index_reg : UInt32, @index_comp : UInt32)
    end
  end

  @[Extern]
  struct D3D10_SHADER_DEBUG_INST_INFO
    property id : UInt32
    property opcode : UInt32
    property uOutputs : UInt32
    property pOutputs : Win32cr::Graphics::Direct3D10::D3D10_SHADER_DEBUG_OUTPUTREG_INFO[2]
    property token_id : UInt32
    property nesting_level : UInt32
    property scopes : UInt32
    property scope_info : UInt32
    property accessed_vars : UInt32
    property accessed_vars_info : UInt32
    def initialize(@id : UInt32, @opcode : UInt32, @uOutputs : UInt32, @pOutputs : Win32cr::Graphics::Direct3D10::D3D10_SHADER_DEBUG_OUTPUTREG_INFO[2], @token_id : UInt32, @nesting_level : UInt32, @scopes : UInt32, @scope_info : UInt32, @accessed_vars : UInt32, @accessed_vars_info : UInt32)
    end
  end

  @[Extern]
  struct D3D10_SHADER_DEBUG_FILE_INFO
    property file_name : UInt32
    property file_name_len : UInt32
    property file_data : UInt32
    property file_len : UInt32
    def initialize(@file_name : UInt32, @file_name_len : UInt32, @file_data : UInt32, @file_len : UInt32)
    end
  end

  @[Extern]
  struct D3D10_SHADER_DEBUG_INFO
    property size : UInt32
    property creator : UInt32
    property entrypoint_name : UInt32
    property shader_target : UInt32
    property compile_flags : UInt32
    property files : UInt32
    property file_info : UInt32
    property instructions : UInt32
    property instruction_info : UInt32
    property variables : UInt32
    property variable_info : UInt32
    property input_variables : UInt32
    property input_variable_info : UInt32
    property tokens : UInt32
    property token_info : UInt32
    property scopes : UInt32
    property scope_info : UInt32
    property scope_variables : UInt32
    property scope_variable_info : UInt32
    property uint_offset : UInt32
    property string_offset : UInt32
    def initialize(@size : UInt32, @creator : UInt32, @entrypoint_name : UInt32, @shader_target : UInt32, @compile_flags : UInt32, @files : UInt32, @file_info : UInt32, @instructions : UInt32, @instruction_info : UInt32, @variables : UInt32, @variable_info : UInt32, @input_variables : UInt32, @input_variable_info : UInt32, @tokens : UInt32, @token_info : UInt32, @scopes : UInt32, @scope_info : UInt32, @scope_variables : UInt32, @scope_variable_info : UInt32, @uint_offset : UInt32, @string_offset : UInt32)
    end
  end

  @[Extern]
  record ID3D10DeviceChildVtbl,
    query_interface : Proc(ID3D10DeviceChild*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10DeviceChild*, UInt32),
    release : Proc(ID3D10DeviceChild*, UInt32),
    get_device : Proc(ID3D10DeviceChild*, Void**, Void),
    get_private_data : Proc(ID3D10DeviceChild*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10DeviceChild*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10DeviceChild*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10DeviceChild, lpVtbl : ID3D10DeviceChildVtbl* do
    GUID = LibC::GUID.new(0x9b7e4c00_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10DeviceChild*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10DeviceChild*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10DeviceChild*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10DeviceChild*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10DeviceChild*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10DeviceChild*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10DeviceChild*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end

  end

  @[Extern]
  record ID3D10DepthStencilStateVtbl,
    query_interface : Proc(ID3D10DepthStencilState*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10DepthStencilState*, UInt32),
    release : Proc(ID3D10DepthStencilState*, UInt32),
    get_device : Proc(ID3D10DepthStencilState*, Void**, Void),
    get_private_data : Proc(ID3D10DepthStencilState*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10DepthStencilState*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10DepthStencilState*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    get_desc : Proc(ID3D10DepthStencilState*, Win32cr::Graphics::Direct3D10::D3D10_DEPTH_STENCIL_DESC*, Void)


  @[Extern]
  record ID3D10DepthStencilState, lpVtbl : ID3D10DepthStencilStateVtbl* do
    GUID = LibC::GUID.new(0x2b4b1cc8_u32, 0xa4ad_u16, 0x41f8_u16, StaticArray[0x83_u8, 0x22_u8, 0xca_u8, 0x86_u8, 0xfc_u8, 0x3e_u8, 0xc6_u8, 0x75_u8])
    def query_interface(this : ID3D10DepthStencilState*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10DepthStencilState*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10DepthStencilState*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10DepthStencilState*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10DepthStencilState*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10DepthStencilState*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10DepthStencilState*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def get_desc(this : ID3D10DepthStencilState*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_DEPTH_STENCIL_DESC*) : Void
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end

  end

  @[Extern]
  record ID3D10BlendStateVtbl,
    query_interface : Proc(ID3D10BlendState*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10BlendState*, UInt32),
    release : Proc(ID3D10BlendState*, UInt32),
    get_device : Proc(ID3D10BlendState*, Void**, Void),
    get_private_data : Proc(ID3D10BlendState*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10BlendState*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10BlendState*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    get_desc : Proc(ID3D10BlendState*, Win32cr::Graphics::Direct3D10::D3D10_BLEND_DESC*, Void)


  @[Extern]
  record ID3D10BlendState, lpVtbl : ID3D10BlendStateVtbl* do
    GUID = LibC::GUID.new(0xedad8d19_u32, 0x8a35_u16, 0x4d6d_u16, StaticArray[0x85_u8, 0x66_u8, 0x2e_u8, 0xa2_u8, 0x76_u8, 0xcd_u8, 0xe1_u8, 0x61_u8])
    def query_interface(this : ID3D10BlendState*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10BlendState*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10BlendState*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10BlendState*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10BlendState*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10BlendState*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10BlendState*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def get_desc(this : ID3D10BlendState*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_BLEND_DESC*) : Void
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end

  end

  @[Extern]
  record ID3D10RasterizerStateVtbl,
    query_interface : Proc(ID3D10RasterizerState*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10RasterizerState*, UInt32),
    release : Proc(ID3D10RasterizerState*, UInt32),
    get_device : Proc(ID3D10RasterizerState*, Void**, Void),
    get_private_data : Proc(ID3D10RasterizerState*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10RasterizerState*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10RasterizerState*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    get_desc : Proc(ID3D10RasterizerState*, Win32cr::Graphics::Direct3D10::D3D10_RASTERIZER_DESC*, Void)


  @[Extern]
  record ID3D10RasterizerState, lpVtbl : ID3D10RasterizerStateVtbl* do
    GUID = LibC::GUID.new(0xa2a07292_u32, 0x89af_u16, 0x4345_u16, StaticArray[0xbe_u8, 0x2e_u8, 0xc5_u8, 0x3d_u8, 0x9f_u8, 0xbb_u8, 0x6e_u8, 0x9f_u8])
    def query_interface(this : ID3D10RasterizerState*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10RasterizerState*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10RasterizerState*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10RasterizerState*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10RasterizerState*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10RasterizerState*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10RasterizerState*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def get_desc(this : ID3D10RasterizerState*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_RASTERIZER_DESC*) : Void
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end

  end

  @[Extern]
  record ID3D10ResourceVtbl,
    query_interface : Proc(ID3D10Resource*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10Resource*, UInt32),
    release : Proc(ID3D10Resource*, UInt32),
    get_device : Proc(ID3D10Resource*, Void**, Void),
    get_private_data : Proc(ID3D10Resource*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10Resource*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10Resource*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D10Resource*, Win32cr::Graphics::Direct3D10::D3D10_RESOURCE_DIMENSION*, Void),
    set_eviction_priority : Proc(ID3D10Resource*, UInt32, Void),
    get_eviction_priority : Proc(ID3D10Resource*, UInt32)


  @[Extern]
  record ID3D10Resource, lpVtbl : ID3D10ResourceVtbl* do
    GUID = LibC::GUID.new(0x9b7e4c01_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10Resource*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10Resource*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10Resource*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10Resource*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10Resource*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10Resource*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10Resource*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def get_type(this : ID3D10Resource*, rType : Win32cr::Graphics::Direct3D10::D3D10_RESOURCE_DIMENSION*) : Void
      @lpVtbl.try &.value.get_type.call(this, rType)
    end
    def set_eviction_priority(this : ID3D10Resource*, eviction_priority : UInt32) : Void
      @lpVtbl.try &.value.set_eviction_priority.call(this, eviction_priority)
    end
    def get_eviction_priority(this : ID3D10Resource*) : UInt32
      @lpVtbl.try &.value.get_eviction_priority.call(this)
    end

  end

  @[Extern]
  record ID3D10BufferVtbl,
    query_interface : Proc(ID3D10Buffer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10Buffer*, UInt32),
    release : Proc(ID3D10Buffer*, UInt32),
    get_device : Proc(ID3D10Buffer*, Void**, Void),
    get_private_data : Proc(ID3D10Buffer*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10Buffer*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10Buffer*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D10Buffer*, Win32cr::Graphics::Direct3D10::D3D10_RESOURCE_DIMENSION*, Void),
    set_eviction_priority : Proc(ID3D10Buffer*, UInt32, Void),
    get_eviction_priority : Proc(ID3D10Buffer*, UInt32),
    map : Proc(ID3D10Buffer*, Win32cr::Graphics::Direct3D10::D3D10_MAP, UInt32, Void**, Win32cr::Foundation::HRESULT),
    unmap : Proc(ID3D10Buffer*, Void),
    get_desc : Proc(ID3D10Buffer*, Win32cr::Graphics::Direct3D10::D3D10_BUFFER_DESC*, Void)


  @[Extern]
  record ID3D10Buffer, lpVtbl : ID3D10BufferVtbl* do
    GUID = LibC::GUID.new(0x9b7e4c02_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10Buffer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10Buffer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10Buffer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10Buffer*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10Buffer*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10Buffer*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10Buffer*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def get_type(this : ID3D10Buffer*, rType : Win32cr::Graphics::Direct3D10::D3D10_RESOURCE_DIMENSION*) : Void
      @lpVtbl.try &.value.get_type.call(this, rType)
    end
    def set_eviction_priority(this : ID3D10Buffer*, eviction_priority : UInt32) : Void
      @lpVtbl.try &.value.set_eviction_priority.call(this, eviction_priority)
    end
    def get_eviction_priority(this : ID3D10Buffer*) : UInt32
      @lpVtbl.try &.value.get_eviction_priority.call(this)
    end
    def map(this : ID3D10Buffer*, map_type : Win32cr::Graphics::Direct3D10::D3D10_MAP, map_flags : UInt32, ppData : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map.call(this, map_type, map_flags, ppData)
    end
    def unmap(this : ID3D10Buffer*) : Void
      @lpVtbl.try &.value.unmap.call(this)
    end
    def get_desc(this : ID3D10Buffer*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_BUFFER_DESC*) : Void
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end

  end

  @[Extern]
  record ID3D10Texture1DVtbl,
    query_interface : Proc(ID3D10Texture1D*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10Texture1D*, UInt32),
    release : Proc(ID3D10Texture1D*, UInt32),
    get_device : Proc(ID3D10Texture1D*, Void**, Void),
    get_private_data : Proc(ID3D10Texture1D*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10Texture1D*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10Texture1D*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D10Texture1D*, Win32cr::Graphics::Direct3D10::D3D10_RESOURCE_DIMENSION*, Void),
    set_eviction_priority : Proc(ID3D10Texture1D*, UInt32, Void),
    get_eviction_priority : Proc(ID3D10Texture1D*, UInt32),
    map : Proc(ID3D10Texture1D*, UInt32, Win32cr::Graphics::Direct3D10::D3D10_MAP, UInt32, Void**, Win32cr::Foundation::HRESULT),
    unmap : Proc(ID3D10Texture1D*, UInt32, Void),
    get_desc : Proc(ID3D10Texture1D*, Win32cr::Graphics::Direct3D10::D3D10_TEXTURE1D_DESC*, Void)


  @[Extern]
  record ID3D10Texture1D, lpVtbl : ID3D10Texture1DVtbl* do
    GUID = LibC::GUID.new(0x9b7e4c03_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10Texture1D*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10Texture1D*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10Texture1D*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10Texture1D*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10Texture1D*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10Texture1D*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10Texture1D*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def get_type(this : ID3D10Texture1D*, rType : Win32cr::Graphics::Direct3D10::D3D10_RESOURCE_DIMENSION*) : Void
      @lpVtbl.try &.value.get_type.call(this, rType)
    end
    def set_eviction_priority(this : ID3D10Texture1D*, eviction_priority : UInt32) : Void
      @lpVtbl.try &.value.set_eviction_priority.call(this, eviction_priority)
    end
    def get_eviction_priority(this : ID3D10Texture1D*) : UInt32
      @lpVtbl.try &.value.get_eviction_priority.call(this)
    end
    def map(this : ID3D10Texture1D*, subresource : UInt32, map_type : Win32cr::Graphics::Direct3D10::D3D10_MAP, map_flags : UInt32, ppData : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map.call(this, subresource, map_type, map_flags, ppData)
    end
    def unmap(this : ID3D10Texture1D*, subresource : UInt32) : Void
      @lpVtbl.try &.value.unmap.call(this, subresource)
    end
    def get_desc(this : ID3D10Texture1D*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_TEXTURE1D_DESC*) : Void
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end

  end

  @[Extern]
  record ID3D10Texture2DVtbl,
    query_interface : Proc(ID3D10Texture2D*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10Texture2D*, UInt32),
    release : Proc(ID3D10Texture2D*, UInt32),
    get_device : Proc(ID3D10Texture2D*, Void**, Void),
    get_private_data : Proc(ID3D10Texture2D*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10Texture2D*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10Texture2D*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D10Texture2D*, Win32cr::Graphics::Direct3D10::D3D10_RESOURCE_DIMENSION*, Void),
    set_eviction_priority : Proc(ID3D10Texture2D*, UInt32, Void),
    get_eviction_priority : Proc(ID3D10Texture2D*, UInt32),
    map : Proc(ID3D10Texture2D*, UInt32, Win32cr::Graphics::Direct3D10::D3D10_MAP, UInt32, Win32cr::Graphics::Direct3D10::D3D10_MAPPED_TEXTURE2D*, Win32cr::Foundation::HRESULT),
    unmap : Proc(ID3D10Texture2D*, UInt32, Void),
    get_desc : Proc(ID3D10Texture2D*, Win32cr::Graphics::Direct3D10::D3D10_TEXTURE2D_DESC*, Void)


  @[Extern]
  record ID3D10Texture2D, lpVtbl : ID3D10Texture2DVtbl* do
    GUID = LibC::GUID.new(0x9b7e4c04_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10Texture2D*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10Texture2D*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10Texture2D*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10Texture2D*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10Texture2D*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10Texture2D*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10Texture2D*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def get_type(this : ID3D10Texture2D*, rType : Win32cr::Graphics::Direct3D10::D3D10_RESOURCE_DIMENSION*) : Void
      @lpVtbl.try &.value.get_type.call(this, rType)
    end
    def set_eviction_priority(this : ID3D10Texture2D*, eviction_priority : UInt32) : Void
      @lpVtbl.try &.value.set_eviction_priority.call(this, eviction_priority)
    end
    def get_eviction_priority(this : ID3D10Texture2D*) : UInt32
      @lpVtbl.try &.value.get_eviction_priority.call(this)
    end
    def map(this : ID3D10Texture2D*, subresource : UInt32, map_type : Win32cr::Graphics::Direct3D10::D3D10_MAP, map_flags : UInt32, pMappedTex2D : Win32cr::Graphics::Direct3D10::D3D10_MAPPED_TEXTURE2D*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map.call(this, subresource, map_type, map_flags, pMappedTex2D)
    end
    def unmap(this : ID3D10Texture2D*, subresource : UInt32) : Void
      @lpVtbl.try &.value.unmap.call(this, subresource)
    end
    def get_desc(this : ID3D10Texture2D*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_TEXTURE2D_DESC*) : Void
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end

  end

  @[Extern]
  record ID3D10Texture3DVtbl,
    query_interface : Proc(ID3D10Texture3D*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10Texture3D*, UInt32),
    release : Proc(ID3D10Texture3D*, UInt32),
    get_device : Proc(ID3D10Texture3D*, Void**, Void),
    get_private_data : Proc(ID3D10Texture3D*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10Texture3D*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10Texture3D*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D10Texture3D*, Win32cr::Graphics::Direct3D10::D3D10_RESOURCE_DIMENSION*, Void),
    set_eviction_priority : Proc(ID3D10Texture3D*, UInt32, Void),
    get_eviction_priority : Proc(ID3D10Texture3D*, UInt32),
    map : Proc(ID3D10Texture3D*, UInt32, Win32cr::Graphics::Direct3D10::D3D10_MAP, UInt32, Win32cr::Graphics::Direct3D10::D3D10_MAPPED_TEXTURE3D*, Win32cr::Foundation::HRESULT),
    unmap : Proc(ID3D10Texture3D*, UInt32, Void),
    get_desc : Proc(ID3D10Texture3D*, Win32cr::Graphics::Direct3D10::D3D10_TEXTURE3D_DESC*, Void)


  @[Extern]
  record ID3D10Texture3D, lpVtbl : ID3D10Texture3DVtbl* do
    GUID = LibC::GUID.new(0x9b7e4c05_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10Texture3D*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10Texture3D*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10Texture3D*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10Texture3D*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10Texture3D*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10Texture3D*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10Texture3D*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def get_type(this : ID3D10Texture3D*, rType : Win32cr::Graphics::Direct3D10::D3D10_RESOURCE_DIMENSION*) : Void
      @lpVtbl.try &.value.get_type.call(this, rType)
    end
    def set_eviction_priority(this : ID3D10Texture3D*, eviction_priority : UInt32) : Void
      @lpVtbl.try &.value.set_eviction_priority.call(this, eviction_priority)
    end
    def get_eviction_priority(this : ID3D10Texture3D*) : UInt32
      @lpVtbl.try &.value.get_eviction_priority.call(this)
    end
    def map(this : ID3D10Texture3D*, subresource : UInt32, map_type : Win32cr::Graphics::Direct3D10::D3D10_MAP, map_flags : UInt32, pMappedTex3D : Win32cr::Graphics::Direct3D10::D3D10_MAPPED_TEXTURE3D*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map.call(this, subresource, map_type, map_flags, pMappedTex3D)
    end
    def unmap(this : ID3D10Texture3D*, subresource : UInt32) : Void
      @lpVtbl.try &.value.unmap.call(this, subresource)
    end
    def get_desc(this : ID3D10Texture3D*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_TEXTURE3D_DESC*) : Void
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end

  end

  @[Extern]
  record ID3D10ViewVtbl,
    query_interface : Proc(ID3D10View*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10View*, UInt32),
    release : Proc(ID3D10View*, UInt32),
    get_device : Proc(ID3D10View*, Void**, Void),
    get_private_data : Proc(ID3D10View*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10View*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10View*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    get_resource : Proc(ID3D10View*, Void**, Void)


  @[Extern]
  record ID3D10View, lpVtbl : ID3D10ViewVtbl* do
    GUID = LibC::GUID.new(0xc902b03f_u32, 0x60a7_u16, 0x49ba_u16, StaticArray[0x99_u8, 0x36_u8, 0x2a_u8, 0x3a_u8, 0xb3_u8, 0x7a_u8, 0x7e_u8, 0x33_u8])
    def query_interface(this : ID3D10View*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10View*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10View*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10View*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10View*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10View*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10View*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def get_resource(this : ID3D10View*, ppResource : Void**) : Void
      @lpVtbl.try &.value.get_resource.call(this, ppResource)
    end

  end

  @[Extern]
  record ID3D10ShaderResourceViewVtbl,
    query_interface : Proc(ID3D10ShaderResourceView*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10ShaderResourceView*, UInt32),
    release : Proc(ID3D10ShaderResourceView*, UInt32),
    get_device : Proc(ID3D10ShaderResourceView*, Void**, Void),
    get_private_data : Proc(ID3D10ShaderResourceView*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10ShaderResourceView*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10ShaderResourceView*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    get_resource : Proc(ID3D10ShaderResourceView*, Void**, Void),
    get_desc : Proc(ID3D10ShaderResourceView*, Win32cr::Graphics::Direct3D10::D3D10_SHADER_RESOURCE_VIEW_DESC*, Void)


  @[Extern]
  record ID3D10ShaderResourceView, lpVtbl : ID3D10ShaderResourceViewVtbl* do
    GUID = LibC::GUID.new(0x9b7e4c07_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10ShaderResourceView*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10ShaderResourceView*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10ShaderResourceView*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10ShaderResourceView*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10ShaderResourceView*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10ShaderResourceView*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10ShaderResourceView*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def get_resource(this : ID3D10ShaderResourceView*, ppResource : Void**) : Void
      @lpVtbl.try &.value.get_resource.call(this, ppResource)
    end
    def get_desc(this : ID3D10ShaderResourceView*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_SHADER_RESOURCE_VIEW_DESC*) : Void
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end

  end

  @[Extern]
  record ID3D10RenderTargetViewVtbl,
    query_interface : Proc(ID3D10RenderTargetView*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10RenderTargetView*, UInt32),
    release : Proc(ID3D10RenderTargetView*, UInt32),
    get_device : Proc(ID3D10RenderTargetView*, Void**, Void),
    get_private_data : Proc(ID3D10RenderTargetView*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10RenderTargetView*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10RenderTargetView*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    get_resource : Proc(ID3D10RenderTargetView*, Void**, Void),
    get_desc : Proc(ID3D10RenderTargetView*, Win32cr::Graphics::Direct3D10::D3D10_RENDER_TARGET_VIEW_DESC*, Void)


  @[Extern]
  record ID3D10RenderTargetView, lpVtbl : ID3D10RenderTargetViewVtbl* do
    GUID = LibC::GUID.new(0x9b7e4c08_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10RenderTargetView*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10RenderTargetView*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10RenderTargetView*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10RenderTargetView*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10RenderTargetView*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10RenderTargetView*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10RenderTargetView*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def get_resource(this : ID3D10RenderTargetView*, ppResource : Void**) : Void
      @lpVtbl.try &.value.get_resource.call(this, ppResource)
    end
    def get_desc(this : ID3D10RenderTargetView*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_RENDER_TARGET_VIEW_DESC*) : Void
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end

  end

  @[Extern]
  record ID3D10DepthStencilViewVtbl,
    query_interface : Proc(ID3D10DepthStencilView*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10DepthStencilView*, UInt32),
    release : Proc(ID3D10DepthStencilView*, UInt32),
    get_device : Proc(ID3D10DepthStencilView*, Void**, Void),
    get_private_data : Proc(ID3D10DepthStencilView*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10DepthStencilView*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10DepthStencilView*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    get_resource : Proc(ID3D10DepthStencilView*, Void**, Void),
    get_desc : Proc(ID3D10DepthStencilView*, Win32cr::Graphics::Direct3D10::D3D10_DEPTH_STENCIL_VIEW_DESC*, Void)


  @[Extern]
  record ID3D10DepthStencilView, lpVtbl : ID3D10DepthStencilViewVtbl* do
    GUID = LibC::GUID.new(0x9b7e4c09_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10DepthStencilView*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10DepthStencilView*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10DepthStencilView*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10DepthStencilView*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10DepthStencilView*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10DepthStencilView*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10DepthStencilView*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def get_resource(this : ID3D10DepthStencilView*, ppResource : Void**) : Void
      @lpVtbl.try &.value.get_resource.call(this, ppResource)
    end
    def get_desc(this : ID3D10DepthStencilView*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_DEPTH_STENCIL_VIEW_DESC*) : Void
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end

  end

  @[Extern]
  record ID3D10VertexShaderVtbl,
    query_interface : Proc(ID3D10VertexShader*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10VertexShader*, UInt32),
    release : Proc(ID3D10VertexShader*, UInt32),
    get_device : Proc(ID3D10VertexShader*, Void**, Void),
    get_private_data : Proc(ID3D10VertexShader*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10VertexShader*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10VertexShader*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10VertexShader, lpVtbl : ID3D10VertexShaderVtbl* do
    GUID = LibC::GUID.new(0x9b7e4c0a_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10VertexShader*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10VertexShader*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10VertexShader*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10VertexShader*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10VertexShader*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10VertexShader*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10VertexShader*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end

  end

  @[Extern]
  record ID3D10GeometryShaderVtbl,
    query_interface : Proc(ID3D10GeometryShader*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10GeometryShader*, UInt32),
    release : Proc(ID3D10GeometryShader*, UInt32),
    get_device : Proc(ID3D10GeometryShader*, Void**, Void),
    get_private_data : Proc(ID3D10GeometryShader*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10GeometryShader*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10GeometryShader*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10GeometryShader, lpVtbl : ID3D10GeometryShaderVtbl* do
    GUID = LibC::GUID.new(0x6316be88_u32, 0x54cd_u16, 0x4040_u16, StaticArray[0xab_u8, 0x44_u8, 0x20_u8, 0x46_u8, 0x1b_u8, 0xc8_u8, 0x1f_u8, 0x68_u8])
    def query_interface(this : ID3D10GeometryShader*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10GeometryShader*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10GeometryShader*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10GeometryShader*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10GeometryShader*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10GeometryShader*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10GeometryShader*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end

  end

  @[Extern]
  record ID3D10PixelShaderVtbl,
    query_interface : Proc(ID3D10PixelShader*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10PixelShader*, UInt32),
    release : Proc(ID3D10PixelShader*, UInt32),
    get_device : Proc(ID3D10PixelShader*, Void**, Void),
    get_private_data : Proc(ID3D10PixelShader*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10PixelShader*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10PixelShader*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10PixelShader, lpVtbl : ID3D10PixelShaderVtbl* do
    GUID = LibC::GUID.new(0x4968b601_u32, 0x9d00_u16, 0x4cde_u16, StaticArray[0x83_u8, 0x46_u8, 0x8e_u8, 0x7f_u8, 0x67_u8, 0x58_u8, 0x19_u8, 0xb6_u8])
    def query_interface(this : ID3D10PixelShader*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10PixelShader*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10PixelShader*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10PixelShader*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10PixelShader*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10PixelShader*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10PixelShader*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end

  end

  @[Extern]
  record ID3D10InputLayoutVtbl,
    query_interface : Proc(ID3D10InputLayout*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10InputLayout*, UInt32),
    release : Proc(ID3D10InputLayout*, UInt32),
    get_device : Proc(ID3D10InputLayout*, Void**, Void),
    get_private_data : Proc(ID3D10InputLayout*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10InputLayout*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10InputLayout*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10InputLayout, lpVtbl : ID3D10InputLayoutVtbl* do
    GUID = LibC::GUID.new(0x9b7e4c0b_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10InputLayout*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10InputLayout*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10InputLayout*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10InputLayout*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10InputLayout*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10InputLayout*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10InputLayout*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end

  end

  @[Extern]
  record ID3D10SamplerStateVtbl,
    query_interface : Proc(ID3D10SamplerState*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10SamplerState*, UInt32),
    release : Proc(ID3D10SamplerState*, UInt32),
    get_device : Proc(ID3D10SamplerState*, Void**, Void),
    get_private_data : Proc(ID3D10SamplerState*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10SamplerState*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10SamplerState*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    get_desc : Proc(ID3D10SamplerState*, Win32cr::Graphics::Direct3D10::D3D10_SAMPLER_DESC*, Void)


  @[Extern]
  record ID3D10SamplerState, lpVtbl : ID3D10SamplerStateVtbl* do
    GUID = LibC::GUID.new(0x9b7e4c0c_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10SamplerState*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10SamplerState*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10SamplerState*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10SamplerState*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10SamplerState*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10SamplerState*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10SamplerState*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def get_desc(this : ID3D10SamplerState*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_SAMPLER_DESC*) : Void
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end

  end

  @[Extern]
  record ID3D10AsynchronousVtbl,
    query_interface : Proc(ID3D10Asynchronous*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10Asynchronous*, UInt32),
    release : Proc(ID3D10Asynchronous*, UInt32),
    get_device : Proc(ID3D10Asynchronous*, Void**, Void),
    get_private_data : Proc(ID3D10Asynchronous*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10Asynchronous*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10Asynchronous*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    begin__ : Proc(ID3D10Asynchronous*, Void),
    end__ : Proc(ID3D10Asynchronous*, Void),
    get_data : Proc(ID3D10Asynchronous*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_data_size : Proc(ID3D10Asynchronous*, UInt32)


  @[Extern]
  record ID3D10Asynchronous, lpVtbl : ID3D10AsynchronousVtbl* do
    GUID = LibC::GUID.new(0x9b7e4c0d_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10Asynchronous*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10Asynchronous*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10Asynchronous*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10Asynchronous*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10Asynchronous*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10Asynchronous*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10Asynchronous*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def begin__(this : ID3D10Asynchronous*) : Void
      @lpVtbl.try &.value.begin__.call(this)
    end
    def end__(this : ID3D10Asynchronous*) : Void
      @lpVtbl.try &.value.end__.call(this)
    end
    def get_data(this : ID3D10Asynchronous*, pData : Void*, data_size : UInt32, get_data_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, pData, data_size, get_data_flags)
    end
    def get_data_size(this : ID3D10Asynchronous*) : UInt32
      @lpVtbl.try &.value.get_data_size.call(this)
    end

  end

  @[Extern]
  record ID3D10QueryVtbl,
    query_interface : Proc(ID3D10Query*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10Query*, UInt32),
    release : Proc(ID3D10Query*, UInt32),
    get_device : Proc(ID3D10Query*, Void**, Void),
    get_private_data : Proc(ID3D10Query*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10Query*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10Query*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    begin__ : Proc(ID3D10Query*, Void),
    end__ : Proc(ID3D10Query*, Void),
    get_data : Proc(ID3D10Query*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_data_size : Proc(ID3D10Query*, UInt32),
    get_desc : Proc(ID3D10Query*, Win32cr::Graphics::Direct3D10::D3D10_QUERY_DESC*, Void)


  @[Extern]
  record ID3D10Query, lpVtbl : ID3D10QueryVtbl* do
    GUID = LibC::GUID.new(0x9b7e4c0e_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10Query*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10Query*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10Query*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10Query*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10Query*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10Query*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10Query*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def begin__(this : ID3D10Query*) : Void
      @lpVtbl.try &.value.begin__.call(this)
    end
    def end__(this : ID3D10Query*) : Void
      @lpVtbl.try &.value.end__.call(this)
    end
    def get_data(this : ID3D10Query*, pData : Void*, data_size : UInt32, get_data_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, pData, data_size, get_data_flags)
    end
    def get_data_size(this : ID3D10Query*) : UInt32
      @lpVtbl.try &.value.get_data_size.call(this)
    end
    def get_desc(this : ID3D10Query*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_QUERY_DESC*) : Void
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end

  end

  @[Extern]
  record ID3D10PredicateVtbl,
    query_interface : Proc(ID3D10Predicate*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10Predicate*, UInt32),
    release : Proc(ID3D10Predicate*, UInt32),
    get_device : Proc(ID3D10Predicate*, Void**, Void),
    get_private_data : Proc(ID3D10Predicate*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10Predicate*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10Predicate*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    begin__ : Proc(ID3D10Predicate*, Void),
    end__ : Proc(ID3D10Predicate*, Void),
    get_data : Proc(ID3D10Predicate*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_data_size : Proc(ID3D10Predicate*, UInt32),
    get_desc : Proc(ID3D10Predicate*, Win32cr::Graphics::Direct3D10::D3D10_QUERY_DESC*, Void)


  @[Extern]
  record ID3D10Predicate, lpVtbl : ID3D10PredicateVtbl* do
    GUID = LibC::GUID.new(0x9b7e4c10_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10Predicate*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10Predicate*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10Predicate*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10Predicate*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10Predicate*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10Predicate*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10Predicate*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def begin__(this : ID3D10Predicate*) : Void
      @lpVtbl.try &.value.begin__.call(this)
    end
    def end__(this : ID3D10Predicate*) : Void
      @lpVtbl.try &.value.end__.call(this)
    end
    def get_data(this : ID3D10Predicate*, pData : Void*, data_size : UInt32, get_data_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, pData, data_size, get_data_flags)
    end
    def get_data_size(this : ID3D10Predicate*) : UInt32
      @lpVtbl.try &.value.get_data_size.call(this)
    end
    def get_desc(this : ID3D10Predicate*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_QUERY_DESC*) : Void
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end

  end

  @[Extern]
  record ID3D10CounterVtbl,
    query_interface : Proc(ID3D10Counter*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10Counter*, UInt32),
    release : Proc(ID3D10Counter*, UInt32),
    get_device : Proc(ID3D10Counter*, Void**, Void),
    get_private_data : Proc(ID3D10Counter*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10Counter*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10Counter*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    begin__ : Proc(ID3D10Counter*, Void),
    end__ : Proc(ID3D10Counter*, Void),
    get_data : Proc(ID3D10Counter*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_data_size : Proc(ID3D10Counter*, UInt32),
    get_desc : Proc(ID3D10Counter*, Win32cr::Graphics::Direct3D10::D3D10_COUNTER_DESC*, Void)


  @[Extern]
  record ID3D10Counter, lpVtbl : ID3D10CounterVtbl* do
    GUID = LibC::GUID.new(0x9b7e4c11_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10Counter*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10Counter*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10Counter*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10Counter*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10Counter*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10Counter*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10Counter*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def begin__(this : ID3D10Counter*) : Void
      @lpVtbl.try &.value.begin__.call(this)
    end
    def end__(this : ID3D10Counter*) : Void
      @lpVtbl.try &.value.end__.call(this)
    end
    def get_data(this : ID3D10Counter*, pData : Void*, data_size : UInt32, get_data_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_data.call(this, pData, data_size, get_data_flags)
    end
    def get_data_size(this : ID3D10Counter*) : UInt32
      @lpVtbl.try &.value.get_data_size.call(this)
    end
    def get_desc(this : ID3D10Counter*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_COUNTER_DESC*) : Void
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end

  end

  @[Extern]
  record ID3D10DeviceVtbl,
    query_interface : Proc(ID3D10Device*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10Device*, UInt32),
    release : Proc(ID3D10Device*, UInt32),
    vs_set_constant_buffers : Proc(ID3D10Device*, UInt32, UInt32, Void**, Void),
    ps_set_shader_resources : Proc(ID3D10Device*, UInt32, UInt32, Void**, Void),
    ps_set_shader : Proc(ID3D10Device*, Void*, Void),
    ps_set_samplers : Proc(ID3D10Device*, UInt32, UInt32, Void**, Void),
    vs_set_shader : Proc(ID3D10Device*, Void*, Void),
    draw_indexed : Proc(ID3D10Device*, UInt32, UInt32, Int32, Void),
    draw : Proc(ID3D10Device*, UInt32, UInt32, Void),
    ps_set_constant_buffers : Proc(ID3D10Device*, UInt32, UInt32, Void**, Void),
    ia_set_input_layout : Proc(ID3D10Device*, Void*, Void),
    ia_set_vertex_buffers : Proc(ID3D10Device*, UInt32, UInt32, Void**, UInt32*, UInt32*, Void),
    ia_set_index_buffer : Proc(ID3D10Device*, Void*, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, UInt32, Void),
    draw_indexed_instanced : Proc(ID3D10Device*, UInt32, UInt32, UInt32, Int32, UInt32, Void),
    draw_instanced : Proc(ID3D10Device*, UInt32, UInt32, UInt32, UInt32, Void),
    gs_set_constant_buffers : Proc(ID3D10Device*, UInt32, UInt32, Void**, Void),
    gs_set_shader : Proc(ID3D10Device*, Void*, Void),
    ia_set_primitive_topology : Proc(ID3D10Device*, Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY, Void),
    vs_set_shader_resources : Proc(ID3D10Device*, UInt32, UInt32, Void**, Void),
    vs_set_samplers : Proc(ID3D10Device*, UInt32, UInt32, Void**, Void),
    set_predication : Proc(ID3D10Device*, Void*, Win32cr::Foundation::BOOL, Void),
    gs_set_shader_resources : Proc(ID3D10Device*, UInt32, UInt32, Void**, Void),
    gs_set_samplers : Proc(ID3D10Device*, UInt32, UInt32, Void**, Void),
    om_set_render_targets : Proc(ID3D10Device*, UInt32, Void**, Void*, Void),
    om_set_blend_state : Proc(ID3D10Device*, Void*, Float32*, UInt32, Void),
    om_set_depth_stencil_state : Proc(ID3D10Device*, Void*, UInt32, Void),
    so_set_targets : Proc(ID3D10Device*, UInt32, Void**, UInt32*, Void),
    draw_auto : Proc(ID3D10Device*, Void),
    rs_set_state : Proc(ID3D10Device*, Void*, Void),
    rs_set_viewports : Proc(ID3D10Device*, UInt32, Win32cr::Graphics::Direct3D10::D3D10_VIEWPORT*, Void),
    rs_set_scissor_rects : Proc(ID3D10Device*, UInt32, Win32cr::Foundation::RECT*, Void),
    copy_subresource_region : Proc(ID3D10Device*, Void*, UInt32, UInt32, UInt32, UInt32, Void*, UInt32, Win32cr::Graphics::Direct3D10::D3D10_BOX*, Void),
    copy_resource : Proc(ID3D10Device*, Void*, Void*, Void),
    update_subresource : Proc(ID3D10Device*, Void*, UInt32, Win32cr::Graphics::Direct3D10::D3D10_BOX*, Void*, UInt32, UInt32, Void),
    clear_render_target_view : Proc(ID3D10Device*, Void*, Float32*, Void),
    clear_depth_stencil_view : Proc(ID3D10Device*, Void*, UInt32, Float32, UInt8, Void),
    generate_mips : Proc(ID3D10Device*, Void*, Void),
    resolve_subresource : Proc(ID3D10Device*, Void*, UInt32, Void*, UInt32, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Void),
    vs_get_constant_buffers : Proc(ID3D10Device*, UInt32, UInt32, Void**, Void),
    ps_get_shader_resources : Proc(ID3D10Device*, UInt32, UInt32, Void**, Void),
    ps_get_shader : Proc(ID3D10Device*, Void**, Void),
    ps_get_samplers : Proc(ID3D10Device*, UInt32, UInt32, Void**, Void),
    vs_get_shader : Proc(ID3D10Device*, Void**, Void),
    ps_get_constant_buffers : Proc(ID3D10Device*, UInt32, UInt32, Void**, Void),
    ia_get_input_layout : Proc(ID3D10Device*, Void**, Void),
    ia_get_vertex_buffers : Proc(ID3D10Device*, UInt32, UInt32, Void**, UInt32*, UInt32*, Void),
    ia_get_index_buffer : Proc(ID3D10Device*, Void**, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT*, UInt32*, Void),
    gs_get_constant_buffers : Proc(ID3D10Device*, UInt32, UInt32, Void**, Void),
    gs_get_shader : Proc(ID3D10Device*, Void**, Void),
    ia_get_primitive_topology : Proc(ID3D10Device*, Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY*, Void),
    vs_get_shader_resources : Proc(ID3D10Device*, UInt32, UInt32, Void**, Void),
    vs_get_samplers : Proc(ID3D10Device*, UInt32, UInt32, Void**, Void),
    get_predication : Proc(ID3D10Device*, Void**, Win32cr::Foundation::BOOL*, Void),
    gs_get_shader_resources : Proc(ID3D10Device*, UInt32, UInt32, Void**, Void),
    gs_get_samplers : Proc(ID3D10Device*, UInt32, UInt32, Void**, Void),
    om_get_render_targets : Proc(ID3D10Device*, UInt32, Void**, Void**, Void),
    om_get_blend_state : Proc(ID3D10Device*, Void**, Float32*, UInt32*, Void),
    om_get_depth_stencil_state : Proc(ID3D10Device*, Void**, UInt32*, Void),
    so_get_targets : Proc(ID3D10Device*, UInt32, Void**, UInt32*, Void),
    rs_get_state : Proc(ID3D10Device*, Void**, Void),
    rs_get_viewports : Proc(ID3D10Device*, UInt32*, Win32cr::Graphics::Direct3D10::D3D10_VIEWPORT*, Void),
    rs_get_scissor_rects : Proc(ID3D10Device*, UInt32*, Win32cr::Foundation::RECT*, Void),
    get_device_removed_reason : Proc(ID3D10Device*, Win32cr::Foundation::HRESULT),
    set_exception_mode : Proc(ID3D10Device*, UInt32, Win32cr::Foundation::HRESULT),
    get_exception_mode : Proc(ID3D10Device*, UInt32),
    get_private_data : Proc(ID3D10Device*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10Device*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10Device*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    clear_state : Proc(ID3D10Device*, Void),
    flush : Proc(ID3D10Device*, Void),
    create_buffer : Proc(ID3D10Device*, Win32cr::Graphics::Direct3D10::D3D10_BUFFER_DESC*, Win32cr::Graphics::Direct3D10::D3D10_SUBRESOURCE_DATA*, Void**, Win32cr::Foundation::HRESULT),
    create_texture1_d : Proc(ID3D10Device*, Win32cr::Graphics::Direct3D10::D3D10_TEXTURE1D_DESC*, Win32cr::Graphics::Direct3D10::D3D10_SUBRESOURCE_DATA*, Void**, Win32cr::Foundation::HRESULT),
    create_texture2_d : Proc(ID3D10Device*, Win32cr::Graphics::Direct3D10::D3D10_TEXTURE2D_DESC*, Win32cr::Graphics::Direct3D10::D3D10_SUBRESOURCE_DATA*, Void**, Win32cr::Foundation::HRESULT),
    create_texture3_d : Proc(ID3D10Device*, Win32cr::Graphics::Direct3D10::D3D10_TEXTURE3D_DESC*, Win32cr::Graphics::Direct3D10::D3D10_SUBRESOURCE_DATA*, Void**, Win32cr::Foundation::HRESULT),
    create_shader_resource_view : Proc(ID3D10Device*, Void*, Win32cr::Graphics::Direct3D10::D3D10_SHADER_RESOURCE_VIEW_DESC*, Void**, Win32cr::Foundation::HRESULT),
    create_render_target_view : Proc(ID3D10Device*, Void*, Win32cr::Graphics::Direct3D10::D3D10_RENDER_TARGET_VIEW_DESC*, Void**, Win32cr::Foundation::HRESULT),
    create_depth_stencil_view : Proc(ID3D10Device*, Void*, Win32cr::Graphics::Direct3D10::D3D10_DEPTH_STENCIL_VIEW_DESC*, Void**, Win32cr::Foundation::HRESULT),
    create_input_layout : Proc(ID3D10Device*, Win32cr::Graphics::Direct3D10::D3D10_INPUT_ELEMENT_DESC*, UInt32, Void*, LibC::UIntPtrT, Void**, Win32cr::Foundation::HRESULT),
    create_vertex_shader : Proc(ID3D10Device*, Void*, LibC::UIntPtrT, Void**, Win32cr::Foundation::HRESULT),
    create_geometry_shader : Proc(ID3D10Device*, Void*, LibC::UIntPtrT, Void**, Win32cr::Foundation::HRESULT),
    create_geometry_shader_with_stream_output : Proc(ID3D10Device*, Void*, LibC::UIntPtrT, Win32cr::Graphics::Direct3D10::D3D10_SO_DECLARATION_ENTRY*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_pixel_shader : Proc(ID3D10Device*, Void*, LibC::UIntPtrT, Void**, Win32cr::Foundation::HRESULT),
    create_blend_state : Proc(ID3D10Device*, Win32cr::Graphics::Direct3D10::D3D10_BLEND_DESC*, Void**, Win32cr::Foundation::HRESULT),
    create_depth_stencil_state : Proc(ID3D10Device*, Win32cr::Graphics::Direct3D10::D3D10_DEPTH_STENCIL_DESC*, Void**, Win32cr::Foundation::HRESULT),
    create_rasterizer_state : Proc(ID3D10Device*, Win32cr::Graphics::Direct3D10::D3D10_RASTERIZER_DESC*, Void**, Win32cr::Foundation::HRESULT),
    create_sampler_state : Proc(ID3D10Device*, Win32cr::Graphics::Direct3D10::D3D10_SAMPLER_DESC*, Void**, Win32cr::Foundation::HRESULT),
    create_query : Proc(ID3D10Device*, Win32cr::Graphics::Direct3D10::D3D10_QUERY_DESC*, Void**, Win32cr::Foundation::HRESULT),
    create_predicate : Proc(ID3D10Device*, Win32cr::Graphics::Direct3D10::D3D10_QUERY_DESC*, Void**, Win32cr::Foundation::HRESULT),
    create_counter : Proc(ID3D10Device*, Win32cr::Graphics::Direct3D10::D3D10_COUNTER_DESC*, Void**, Win32cr::Foundation::HRESULT),
    check_format_support : Proc(ID3D10Device*, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, UInt32*, Win32cr::Foundation::HRESULT),
    check_multisample_quality_levels : Proc(ID3D10Device*, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    check_counter_info : Proc(ID3D10Device*, Win32cr::Graphics::Direct3D10::D3D10_COUNTER_INFO*, Void),
    check_counter : Proc(ID3D10Device*, Win32cr::Graphics::Direct3D10::D3D10_COUNTER_DESC*, Win32cr::Graphics::Direct3D10::D3D10_COUNTER_TYPE*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, Win32cr::Foundation::HRESULT),
    get_creation_flags : Proc(ID3D10Device*, UInt32),
    open_shared_resource : Proc(ID3D10Device*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_text_filter_size : Proc(ID3D10Device*, UInt32, UInt32, Void),
    get_text_filter_size : Proc(ID3D10Device*, UInt32*, UInt32*, Void)


  @[Extern]
  record ID3D10Device, lpVtbl : ID3D10DeviceVtbl* do
    GUID = LibC::GUID.new(0x9b7e4c0f_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10Device*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10Device*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10Device*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def vs_set_constant_buffers(this : ID3D10Device*, start_slot : UInt32, num_buffers : UInt32, ppConstantBuffers : Void**) : Void
      @lpVtbl.try &.value.vs_set_constant_buffers.call(this, start_slot, num_buffers, ppConstantBuffers)
    end
    def ps_set_shader_resources(this : ID3D10Device*, start_slot : UInt32, num_views : UInt32, ppShaderResourceViews : Void**) : Void
      @lpVtbl.try &.value.ps_set_shader_resources.call(this, start_slot, num_views, ppShaderResourceViews)
    end
    def ps_set_shader(this : ID3D10Device*, pPixelShader : Void*) : Void
      @lpVtbl.try &.value.ps_set_shader.call(this, pPixelShader)
    end
    def ps_set_samplers(this : ID3D10Device*, start_slot : UInt32, num_samplers : UInt32, ppSamplers : Void**) : Void
      @lpVtbl.try &.value.ps_set_samplers.call(this, start_slot, num_samplers, ppSamplers)
    end
    def vs_set_shader(this : ID3D10Device*, pVertexShader : Void*) : Void
      @lpVtbl.try &.value.vs_set_shader.call(this, pVertexShader)
    end
    def draw_indexed(this : ID3D10Device*, index_count : UInt32, start_index_location : UInt32, base_vertex_location : Int32) : Void
      @lpVtbl.try &.value.draw_indexed.call(this, index_count, start_index_location, base_vertex_location)
    end
    def draw(this : ID3D10Device*, vertex_count : UInt32, start_vertex_location : UInt32) : Void
      @lpVtbl.try &.value.draw.call(this, vertex_count, start_vertex_location)
    end
    def ps_set_constant_buffers(this : ID3D10Device*, start_slot : UInt32, num_buffers : UInt32, ppConstantBuffers : Void**) : Void
      @lpVtbl.try &.value.ps_set_constant_buffers.call(this, start_slot, num_buffers, ppConstantBuffers)
    end
    def ia_set_input_layout(this : ID3D10Device*, pInputLayout : Void*) : Void
      @lpVtbl.try &.value.ia_set_input_layout.call(this, pInputLayout)
    end
    def ia_set_vertex_buffers(this : ID3D10Device*, start_slot : UInt32, num_buffers : UInt32, ppVertexBuffers : Void**, pStrides : UInt32*, pOffsets : UInt32*) : Void
      @lpVtbl.try &.value.ia_set_vertex_buffers.call(this, start_slot, num_buffers, ppVertexBuffers, pStrides, pOffsets)
    end
    def ia_set_index_buffer(this : ID3D10Device*, pIndexBuffer : Void*, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, offset : UInt32) : Void
      @lpVtbl.try &.value.ia_set_index_buffer.call(this, pIndexBuffer, format, offset)
    end
    def draw_indexed_instanced(this : ID3D10Device*, index_count_per_instance : UInt32, instance_count : UInt32, start_index_location : UInt32, base_vertex_location : Int32, start_instance_location : UInt32) : Void
      @lpVtbl.try &.value.draw_indexed_instanced.call(this, index_count_per_instance, instance_count, start_index_location, base_vertex_location, start_instance_location)
    end
    def draw_instanced(this : ID3D10Device*, vertex_count_per_instance : UInt32, instance_count : UInt32, start_vertex_location : UInt32, start_instance_location : UInt32) : Void
      @lpVtbl.try &.value.draw_instanced.call(this, vertex_count_per_instance, instance_count, start_vertex_location, start_instance_location)
    end
    def gs_set_constant_buffers(this : ID3D10Device*, start_slot : UInt32, num_buffers : UInt32, ppConstantBuffers : Void**) : Void
      @lpVtbl.try &.value.gs_set_constant_buffers.call(this, start_slot, num_buffers, ppConstantBuffers)
    end
    def gs_set_shader(this : ID3D10Device*, pShader : Void*) : Void
      @lpVtbl.try &.value.gs_set_shader.call(this, pShader)
    end
    def ia_set_primitive_topology(this : ID3D10Device*, topology : Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY) : Void
      @lpVtbl.try &.value.ia_set_primitive_topology.call(this, topology)
    end
    def vs_set_shader_resources(this : ID3D10Device*, start_slot : UInt32, num_views : UInt32, ppShaderResourceViews : Void**) : Void
      @lpVtbl.try &.value.vs_set_shader_resources.call(this, start_slot, num_views, ppShaderResourceViews)
    end
    def vs_set_samplers(this : ID3D10Device*, start_slot : UInt32, num_samplers : UInt32, ppSamplers : Void**) : Void
      @lpVtbl.try &.value.vs_set_samplers.call(this, start_slot, num_samplers, ppSamplers)
    end
    def set_predication(this : ID3D10Device*, pPredicate : Void*, predicate_value : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.set_predication.call(this, pPredicate, predicate_value)
    end
    def gs_set_shader_resources(this : ID3D10Device*, start_slot : UInt32, num_views : UInt32, ppShaderResourceViews : Void**) : Void
      @lpVtbl.try &.value.gs_set_shader_resources.call(this, start_slot, num_views, ppShaderResourceViews)
    end
    def gs_set_samplers(this : ID3D10Device*, start_slot : UInt32, num_samplers : UInt32, ppSamplers : Void**) : Void
      @lpVtbl.try &.value.gs_set_samplers.call(this, start_slot, num_samplers, ppSamplers)
    end
    def om_set_render_targets(this : ID3D10Device*, num_views : UInt32, ppRenderTargetViews : Void**, pDepthStencilView : Void*) : Void
      @lpVtbl.try &.value.om_set_render_targets.call(this, num_views, ppRenderTargetViews, pDepthStencilView)
    end
    def om_set_blend_state(this : ID3D10Device*, pBlendState : Void*, blend_factor : Float32*, sample_mask : UInt32) : Void
      @lpVtbl.try &.value.om_set_blend_state.call(this, pBlendState, blend_factor, sample_mask)
    end
    def om_set_depth_stencil_state(this : ID3D10Device*, pDepthStencilState : Void*, stencil_ref : UInt32) : Void
      @lpVtbl.try &.value.om_set_depth_stencil_state.call(this, pDepthStencilState, stencil_ref)
    end
    def so_set_targets(this : ID3D10Device*, num_buffers : UInt32, ppSOTargets : Void**, pOffsets : UInt32*) : Void
      @lpVtbl.try &.value.so_set_targets.call(this, num_buffers, ppSOTargets, pOffsets)
    end
    def draw_auto(this : ID3D10Device*) : Void
      @lpVtbl.try &.value.draw_auto.call(this)
    end
    def rs_set_state(this : ID3D10Device*, pRasterizerState : Void*) : Void
      @lpVtbl.try &.value.rs_set_state.call(this, pRasterizerState)
    end
    def rs_set_viewports(this : ID3D10Device*, num_viewports : UInt32, pViewports : Win32cr::Graphics::Direct3D10::D3D10_VIEWPORT*) : Void
      @lpVtbl.try &.value.rs_set_viewports.call(this, num_viewports, pViewports)
    end
    def rs_set_scissor_rects(this : ID3D10Device*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.rs_set_scissor_rects.call(this, num_rects, pRects)
    end
    def copy_subresource_region(this : ID3D10Device*, pDstResource : Void*, dst_subresource : UInt32, dst_x : UInt32, dst_y : UInt32, dst_z : UInt32, pSrcResource : Void*, src_subresource : UInt32, pSrcBox : Win32cr::Graphics::Direct3D10::D3D10_BOX*) : Void
      @lpVtbl.try &.value.copy_subresource_region.call(this, pDstResource, dst_subresource, dst_x, dst_y, dst_z, pSrcResource, src_subresource, pSrcBox)
    end
    def copy_resource(this : ID3D10Device*, pDstResource : Void*, pSrcResource : Void*) : Void
      @lpVtbl.try &.value.copy_resource.call(this, pDstResource, pSrcResource)
    end
    def update_subresource(this : ID3D10Device*, pDstResource : Void*, dst_subresource : UInt32, pDstBox : Win32cr::Graphics::Direct3D10::D3D10_BOX*, pSrcData : Void*, src_row_pitch : UInt32, src_depth_pitch : UInt32) : Void
      @lpVtbl.try &.value.update_subresource.call(this, pDstResource, dst_subresource, pDstBox, pSrcData, src_row_pitch, src_depth_pitch)
    end
    def clear_render_target_view(this : ID3D10Device*, pRenderTargetView : Void*, color_rgba : Float32*) : Void
      @lpVtbl.try &.value.clear_render_target_view.call(this, pRenderTargetView, color_rgba)
    end
    def clear_depth_stencil_view(this : ID3D10Device*, pDepthStencilView : Void*, clear_flags : UInt32, depth : Float32, stencil : UInt8) : Void
      @lpVtbl.try &.value.clear_depth_stencil_view.call(this, pDepthStencilView, clear_flags, depth, stencil)
    end
    def generate_mips(this : ID3D10Device*, pShaderResourceView : Void*) : Void
      @lpVtbl.try &.value.generate_mips.call(this, pShaderResourceView)
    end
    def resolve_subresource(this : ID3D10Device*, pDstResource : Void*, dst_subresource : UInt32, pSrcResource : Void*, src_subresource : UInt32, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT) : Void
      @lpVtbl.try &.value.resolve_subresource.call(this, pDstResource, dst_subresource, pSrcResource, src_subresource, format)
    end
    def vs_get_constant_buffers(this : ID3D10Device*, start_slot : UInt32, num_buffers : UInt32, ppConstantBuffers : Void**) : Void
      @lpVtbl.try &.value.vs_get_constant_buffers.call(this, start_slot, num_buffers, ppConstantBuffers)
    end
    def ps_get_shader_resources(this : ID3D10Device*, start_slot : UInt32, num_views : UInt32, ppShaderResourceViews : Void**) : Void
      @lpVtbl.try &.value.ps_get_shader_resources.call(this, start_slot, num_views, ppShaderResourceViews)
    end
    def ps_get_shader(this : ID3D10Device*, ppPixelShader : Void**) : Void
      @lpVtbl.try &.value.ps_get_shader.call(this, ppPixelShader)
    end
    def ps_get_samplers(this : ID3D10Device*, start_slot : UInt32, num_samplers : UInt32, ppSamplers : Void**) : Void
      @lpVtbl.try &.value.ps_get_samplers.call(this, start_slot, num_samplers, ppSamplers)
    end
    def vs_get_shader(this : ID3D10Device*, ppVertexShader : Void**) : Void
      @lpVtbl.try &.value.vs_get_shader.call(this, ppVertexShader)
    end
    def ps_get_constant_buffers(this : ID3D10Device*, start_slot : UInt32, num_buffers : UInt32, ppConstantBuffers : Void**) : Void
      @lpVtbl.try &.value.ps_get_constant_buffers.call(this, start_slot, num_buffers, ppConstantBuffers)
    end
    def ia_get_input_layout(this : ID3D10Device*, ppInputLayout : Void**) : Void
      @lpVtbl.try &.value.ia_get_input_layout.call(this, ppInputLayout)
    end
    def ia_get_vertex_buffers(this : ID3D10Device*, start_slot : UInt32, num_buffers : UInt32, ppVertexBuffers : Void**, pStrides : UInt32*, pOffsets : UInt32*) : Void
      @lpVtbl.try &.value.ia_get_vertex_buffers.call(this, start_slot, num_buffers, ppVertexBuffers, pStrides, pOffsets)
    end
    def ia_get_index_buffer(this : ID3D10Device*, pIndexBuffer : Void**, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT*, offset : UInt32*) : Void
      @lpVtbl.try &.value.ia_get_index_buffer.call(this, pIndexBuffer, format, offset)
    end
    def gs_get_constant_buffers(this : ID3D10Device*, start_slot : UInt32, num_buffers : UInt32, ppConstantBuffers : Void**) : Void
      @lpVtbl.try &.value.gs_get_constant_buffers.call(this, start_slot, num_buffers, ppConstantBuffers)
    end
    def gs_get_shader(this : ID3D10Device*, ppGeometryShader : Void**) : Void
      @lpVtbl.try &.value.gs_get_shader.call(this, ppGeometryShader)
    end
    def ia_get_primitive_topology(this : ID3D10Device*, pTopology : Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY*) : Void
      @lpVtbl.try &.value.ia_get_primitive_topology.call(this, pTopology)
    end
    def vs_get_shader_resources(this : ID3D10Device*, start_slot : UInt32, num_views : UInt32, ppShaderResourceViews : Void**) : Void
      @lpVtbl.try &.value.vs_get_shader_resources.call(this, start_slot, num_views, ppShaderResourceViews)
    end
    def vs_get_samplers(this : ID3D10Device*, start_slot : UInt32, num_samplers : UInt32, ppSamplers : Void**) : Void
      @lpVtbl.try &.value.vs_get_samplers.call(this, start_slot, num_samplers, ppSamplers)
    end
    def get_predication(this : ID3D10Device*, ppPredicate : Void**, pPredicateValue : Win32cr::Foundation::BOOL*) : Void
      @lpVtbl.try &.value.get_predication.call(this, ppPredicate, pPredicateValue)
    end
    def gs_get_shader_resources(this : ID3D10Device*, start_slot : UInt32, num_views : UInt32, ppShaderResourceViews : Void**) : Void
      @lpVtbl.try &.value.gs_get_shader_resources.call(this, start_slot, num_views, ppShaderResourceViews)
    end
    def gs_get_samplers(this : ID3D10Device*, start_slot : UInt32, num_samplers : UInt32, ppSamplers : Void**) : Void
      @lpVtbl.try &.value.gs_get_samplers.call(this, start_slot, num_samplers, ppSamplers)
    end
    def om_get_render_targets(this : ID3D10Device*, num_views : UInt32, ppRenderTargetViews : Void**, ppDepthStencilView : Void**) : Void
      @lpVtbl.try &.value.om_get_render_targets.call(this, num_views, ppRenderTargetViews, ppDepthStencilView)
    end
    def om_get_blend_state(this : ID3D10Device*, ppBlendState : Void**, blend_factor : Float32*, pSampleMask : UInt32*) : Void
      @lpVtbl.try &.value.om_get_blend_state.call(this, ppBlendState, blend_factor, pSampleMask)
    end
    def om_get_depth_stencil_state(this : ID3D10Device*, ppDepthStencilState : Void**, pStencilRef : UInt32*) : Void
      @lpVtbl.try &.value.om_get_depth_stencil_state.call(this, ppDepthStencilState, pStencilRef)
    end
    def so_get_targets(this : ID3D10Device*, num_buffers : UInt32, ppSOTargets : Void**, pOffsets : UInt32*) : Void
      @lpVtbl.try &.value.so_get_targets.call(this, num_buffers, ppSOTargets, pOffsets)
    end
    def rs_get_state(this : ID3D10Device*, ppRasterizerState : Void**) : Void
      @lpVtbl.try &.value.rs_get_state.call(this, ppRasterizerState)
    end
    def rs_get_viewports(this : ID3D10Device*, num_viewports : UInt32*, pViewports : Win32cr::Graphics::Direct3D10::D3D10_VIEWPORT*) : Void
      @lpVtbl.try &.value.rs_get_viewports.call(this, num_viewports, pViewports)
    end
    def rs_get_scissor_rects(this : ID3D10Device*, num_rects : UInt32*, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.rs_get_scissor_rects.call(this, num_rects, pRects)
    end
    def get_device_removed_reason(this : ID3D10Device*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_removed_reason.call(this)
    end
    def set_exception_mode(this : ID3D10Device*, raise_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_exception_mode.call(this, raise_flags)
    end
    def get_exception_mode(this : ID3D10Device*) : UInt32
      @lpVtbl.try &.value.get_exception_mode.call(this)
    end
    def get_private_data(this : ID3D10Device*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10Device*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10Device*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def clear_state(this : ID3D10Device*) : Void
      @lpVtbl.try &.value.clear_state.call(this)
    end
    def flush(this : ID3D10Device*) : Void
      @lpVtbl.try &.value.flush.call(this)
    end
    def create_buffer(this : ID3D10Device*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_BUFFER_DESC*, pInitialData : Win32cr::Graphics::Direct3D10::D3D10_SUBRESOURCE_DATA*, ppBuffer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_buffer.call(this, pDesc, pInitialData, ppBuffer)
    end
    def create_texture1_d(this : ID3D10Device*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_TEXTURE1D_DESC*, pInitialData : Win32cr::Graphics::Direct3D10::D3D10_SUBRESOURCE_DATA*, ppTexture1D : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_texture1_d.call(this, pDesc, pInitialData, ppTexture1D)
    end
    def create_texture2_d(this : ID3D10Device*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_TEXTURE2D_DESC*, pInitialData : Win32cr::Graphics::Direct3D10::D3D10_SUBRESOURCE_DATA*, ppTexture2D : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_texture2_d.call(this, pDesc, pInitialData, ppTexture2D)
    end
    def create_texture3_d(this : ID3D10Device*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_TEXTURE3D_DESC*, pInitialData : Win32cr::Graphics::Direct3D10::D3D10_SUBRESOURCE_DATA*, ppTexture3D : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_texture3_d.call(this, pDesc, pInitialData, ppTexture3D)
    end
    def create_shader_resource_view(this : ID3D10Device*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_SHADER_RESOURCE_VIEW_DESC*, ppSRView : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shader_resource_view.call(this, pResource, pDesc, ppSRView)
    end
    def create_render_target_view(this : ID3D10Device*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_RENDER_TARGET_VIEW_DESC*, ppRTView : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_render_target_view.call(this, pResource, pDesc, ppRTView)
    end
    def create_depth_stencil_view(this : ID3D10Device*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_DEPTH_STENCIL_VIEW_DESC*, ppDepthStencilView : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_depth_stencil_view.call(this, pResource, pDesc, ppDepthStencilView)
    end
    def create_input_layout(this : ID3D10Device*, pInputElementDescs : Win32cr::Graphics::Direct3D10::D3D10_INPUT_ELEMENT_DESC*, num_elements : UInt32, pShaderBytecodeWithInputSignature : Void*, bytecode_length : LibC::UIntPtrT, ppInputLayout : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_input_layout.call(this, pInputElementDescs, num_elements, pShaderBytecodeWithInputSignature, bytecode_length, ppInputLayout)
    end
    def create_vertex_shader(this : ID3D10Device*, pShaderBytecode : Void*, bytecode_length : LibC::UIntPtrT, ppVertexShader : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_vertex_shader.call(this, pShaderBytecode, bytecode_length, ppVertexShader)
    end
    def create_geometry_shader(this : ID3D10Device*, pShaderBytecode : Void*, bytecode_length : LibC::UIntPtrT, ppGeometryShader : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_geometry_shader.call(this, pShaderBytecode, bytecode_length, ppGeometryShader)
    end
    def create_geometry_shader_with_stream_output(this : ID3D10Device*, pShaderBytecode : Void*, bytecode_length : LibC::UIntPtrT, pSODeclaration : Win32cr::Graphics::Direct3D10::D3D10_SO_DECLARATION_ENTRY*, num_entries : UInt32, output_stream_stride : UInt32, ppGeometryShader : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_geometry_shader_with_stream_output.call(this, pShaderBytecode, bytecode_length, pSODeclaration, num_entries, output_stream_stride, ppGeometryShader)
    end
    def create_pixel_shader(this : ID3D10Device*, pShaderBytecode : Void*, bytecode_length : LibC::UIntPtrT, ppPixelShader : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pixel_shader.call(this, pShaderBytecode, bytecode_length, ppPixelShader)
    end
    def create_blend_state(this : ID3D10Device*, pBlendStateDesc : Win32cr::Graphics::Direct3D10::D3D10_BLEND_DESC*, ppBlendState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_blend_state.call(this, pBlendStateDesc, ppBlendState)
    end
    def create_depth_stencil_state(this : ID3D10Device*, pDepthStencilDesc : Win32cr::Graphics::Direct3D10::D3D10_DEPTH_STENCIL_DESC*, ppDepthStencilState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_depth_stencil_state.call(this, pDepthStencilDesc, ppDepthStencilState)
    end
    def create_rasterizer_state(this : ID3D10Device*, pRasterizerDesc : Win32cr::Graphics::Direct3D10::D3D10_RASTERIZER_DESC*, ppRasterizerState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_rasterizer_state.call(this, pRasterizerDesc, ppRasterizerState)
    end
    def create_sampler_state(this : ID3D10Device*, pSamplerDesc : Win32cr::Graphics::Direct3D10::D3D10_SAMPLER_DESC*, ppSamplerState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_sampler_state.call(this, pSamplerDesc, ppSamplerState)
    end
    def create_query(this : ID3D10Device*, pQueryDesc : Win32cr::Graphics::Direct3D10::D3D10_QUERY_DESC*, ppQuery : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_query.call(this, pQueryDesc, ppQuery)
    end
    def create_predicate(this : ID3D10Device*, pPredicateDesc : Win32cr::Graphics::Direct3D10::D3D10_QUERY_DESC*, ppPredicate : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_predicate.call(this, pPredicateDesc, ppPredicate)
    end
    def create_counter(this : ID3D10Device*, pCounterDesc : Win32cr::Graphics::Direct3D10::D3D10_COUNTER_DESC*, ppCounter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_counter.call(this, pCounterDesc, ppCounter)
    end
    def check_format_support(this : ID3D10Device*, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, pFormatSupport : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_format_support.call(this, format, pFormatSupport)
    end
    def check_multisample_quality_levels(this : ID3D10Device*, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, sample_count : UInt32, pNumQualityLevels : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_multisample_quality_levels.call(this, format, sample_count, pNumQualityLevels)
    end
    def check_counter_info(this : ID3D10Device*, pCounterInfo : Win32cr::Graphics::Direct3D10::D3D10_COUNTER_INFO*) : Void
      @lpVtbl.try &.value.check_counter_info.call(this, pCounterInfo)
    end
    def check_counter(this : ID3D10Device*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_COUNTER_DESC*, pType : Win32cr::Graphics::Direct3D10::D3D10_COUNTER_TYPE*, pActiveCounters : UInt32*, szName : UInt8*, pNameLength : UInt32*, szUnits : UInt8*, pUnitsLength : UInt32*, szDescription : UInt8*, pDescriptionLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_counter.call(this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength)
    end
    def get_creation_flags(this : ID3D10Device*) : UInt32
      @lpVtbl.try &.value.get_creation_flags.call(this)
    end
    def open_shared_resource(this : ID3D10Device*, hResource : Win32cr::Foundation::HANDLE, returned_interface : LibC::GUID*, ppResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_resource.call(this, hResource, returned_interface, ppResource)
    end
    def set_text_filter_size(this : ID3D10Device*, width : UInt32, height : UInt32) : Void
      @lpVtbl.try &.value.set_text_filter_size.call(this, width, height)
    end
    def get_text_filter_size(this : ID3D10Device*, pWidth : UInt32*, pHeight : UInt32*) : Void
      @lpVtbl.try &.value.get_text_filter_size.call(this, pWidth, pHeight)
    end

  end

  @[Extern]
  record ID3D10MultithreadVtbl,
    query_interface : Proc(ID3D10Multithread*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10Multithread*, UInt32),
    release : Proc(ID3D10Multithread*, UInt32),
    enter : Proc(ID3D10Multithread*, Void),
    leave : Proc(ID3D10Multithread*, Void),
    set_multithread_protected : Proc(ID3D10Multithread*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL),
    get_multithread_protected : Proc(ID3D10Multithread*, Win32cr::Foundation::BOOL)


  @[Extern]
  record ID3D10Multithread, lpVtbl : ID3D10MultithreadVtbl* do
    GUID = LibC::GUID.new(0x9b7e4e00_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10Multithread*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10Multithread*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10Multithread*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def enter(this : ID3D10Multithread*) : Void
      @lpVtbl.try &.value.enter.call(this)
    end
    def leave(this : ID3D10Multithread*) : Void
      @lpVtbl.try &.value.leave.call(this)
    end
    def set_multithread_protected(this : ID3D10Multithread*, bMTProtect : Win32cr::Foundation::BOOL) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.set_multithread_protected.call(this, bMTProtect)
    end
    def get_multithread_protected(this : ID3D10Multithread*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_multithread_protected.call(this)
    end

  end

  @[Extern]
  record ID3D10DebugVtbl,
    query_interface : Proc(ID3D10Debug*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10Debug*, UInt32),
    release : Proc(ID3D10Debug*, UInt32),
    set_feature_mask : Proc(ID3D10Debug*, UInt32, Win32cr::Foundation::HRESULT),
    get_feature_mask : Proc(ID3D10Debug*, UInt32),
    set_present_per_render_op_delay : Proc(ID3D10Debug*, UInt32, Win32cr::Foundation::HRESULT),
    get_present_per_render_op_delay : Proc(ID3D10Debug*, UInt32),
    set_swap_chain : Proc(ID3D10Debug*, Void*, Win32cr::Foundation::HRESULT),
    get_swap_chain : Proc(ID3D10Debug*, Void**, Win32cr::Foundation::HRESULT),
    validate : Proc(ID3D10Debug*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10Debug, lpVtbl : ID3D10DebugVtbl* do
    GUID = LibC::GUID.new(0x9b7e4e01_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10Debug*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10Debug*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10Debug*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_feature_mask(this : ID3D10Debug*, mask : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_feature_mask.call(this, mask)
    end
    def get_feature_mask(this : ID3D10Debug*) : UInt32
      @lpVtbl.try &.value.get_feature_mask.call(this)
    end
    def set_present_per_render_op_delay(this : ID3D10Debug*, milliseconds : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_present_per_render_op_delay.call(this, milliseconds)
    end
    def get_present_per_render_op_delay(this : ID3D10Debug*) : UInt32
      @lpVtbl.try &.value.get_present_per_render_op_delay.call(this)
    end
    def set_swap_chain(this : ID3D10Debug*, pSwapChain : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_swap_chain.call(this, pSwapChain)
    end
    def get_swap_chain(this : ID3D10Debug*, ppSwapChain : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_swap_chain.call(this, ppSwapChain)
    end
    def validate(this : ID3D10Debug*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.validate.call(this)
    end

  end

  @[Extern]
  record ID3D10SwitchToRefVtbl,
    query_interface : Proc(ID3D10SwitchToRef*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10SwitchToRef*, UInt32),
    release : Proc(ID3D10SwitchToRef*, UInt32),
    set_use_ref : Proc(ID3D10SwitchToRef*, Win32cr::Foundation::BOOL, Win32cr::Foundation::BOOL),
    get_use_ref : Proc(ID3D10SwitchToRef*, Win32cr::Foundation::BOOL)


  @[Extern]
  record ID3D10SwitchToRef, lpVtbl : ID3D10SwitchToRefVtbl* do
    GUID = LibC::GUID.new(0x9b7e4e02_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10SwitchToRef*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10SwitchToRef*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10SwitchToRef*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_use_ref(this : ID3D10SwitchToRef*, use_ref : Win32cr::Foundation::BOOL) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.set_use_ref.call(this, use_ref)
    end
    def get_use_ref(this : ID3D10SwitchToRef*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_use_ref.call(this)
    end

  end

  @[Extern]
  record ID3D10InfoQueueVtbl,
    query_interface : Proc(ID3D10InfoQueue*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10InfoQueue*, UInt32),
    release : Proc(ID3D10InfoQueue*, UInt32),
    set_message_count_limit : Proc(ID3D10InfoQueue*, UInt64, Win32cr::Foundation::HRESULT),
    clear_stored_messages : Proc(ID3D10InfoQueue*, Void),
    get_message : Proc(ID3D10InfoQueue*, UInt64, Win32cr::Graphics::Direct3D10::D3D10_MESSAGE*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    get_num_messages_allowed_by_storage_filter : Proc(ID3D10InfoQueue*, UInt64),
    get_num_messages_denied_by_storage_filter : Proc(ID3D10InfoQueue*, UInt64),
    get_num_stored_messages : Proc(ID3D10InfoQueue*, UInt64),
    get_num_stored_messages_allowed_by_retrieval_filter : Proc(ID3D10InfoQueue*, UInt64),
    get_num_messages_discarded_by_message_count_limit : Proc(ID3D10InfoQueue*, UInt64),
    get_message_count_limit : Proc(ID3D10InfoQueue*, UInt64),
    add_storage_filter_entries : Proc(ID3D10InfoQueue*, Win32cr::Graphics::Direct3D10::D3D10_INFO_QUEUE_FILTER*, Win32cr::Foundation::HRESULT),
    get_storage_filter : Proc(ID3D10InfoQueue*, Win32cr::Graphics::Direct3D10::D3D10_INFO_QUEUE_FILTER*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    clear_storage_filter : Proc(ID3D10InfoQueue*, Void),
    push_empty_storage_filter : Proc(ID3D10InfoQueue*, Win32cr::Foundation::HRESULT),
    push_copy_of_storage_filter : Proc(ID3D10InfoQueue*, Win32cr::Foundation::HRESULT),
    push_storage_filter : Proc(ID3D10InfoQueue*, Win32cr::Graphics::Direct3D10::D3D10_INFO_QUEUE_FILTER*, Win32cr::Foundation::HRESULT),
    pop_storage_filter : Proc(ID3D10InfoQueue*, Void),
    get_storage_filter_stack_size : Proc(ID3D10InfoQueue*, UInt32),
    add_retrieval_filter_entries : Proc(ID3D10InfoQueue*, Win32cr::Graphics::Direct3D10::D3D10_INFO_QUEUE_FILTER*, Win32cr::Foundation::HRESULT),
    get_retrieval_filter : Proc(ID3D10InfoQueue*, Win32cr::Graphics::Direct3D10::D3D10_INFO_QUEUE_FILTER*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    clear_retrieval_filter : Proc(ID3D10InfoQueue*, Void),
    push_empty_retrieval_filter : Proc(ID3D10InfoQueue*, Win32cr::Foundation::HRESULT),
    push_copy_of_retrieval_filter : Proc(ID3D10InfoQueue*, Win32cr::Foundation::HRESULT),
    push_retrieval_filter : Proc(ID3D10InfoQueue*, Win32cr::Graphics::Direct3D10::D3D10_INFO_QUEUE_FILTER*, Win32cr::Foundation::HRESULT),
    pop_retrieval_filter : Proc(ID3D10InfoQueue*, Void),
    get_retrieval_filter_stack_size : Proc(ID3D10InfoQueue*, UInt32),
    add_message : Proc(ID3D10InfoQueue*, Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_CATEGORY, Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_SEVERITY, Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_ID, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    add_application_message : Proc(ID3D10InfoQueue*, Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_SEVERITY, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    set_break_on_category : Proc(ID3D10InfoQueue*, Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_CATEGORY, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_break_on_severity : Proc(ID3D10InfoQueue*, Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_SEVERITY, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_break_on_id : Proc(ID3D10InfoQueue*, Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_ID, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_break_on_category : Proc(ID3D10InfoQueue*, Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_CATEGORY, Win32cr::Foundation::BOOL),
    get_break_on_severity : Proc(ID3D10InfoQueue*, Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_SEVERITY, Win32cr::Foundation::BOOL),
    get_break_on_id : Proc(ID3D10InfoQueue*, Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_ID, Win32cr::Foundation::BOOL),
    set_mute_debug_output : Proc(ID3D10InfoQueue*, Win32cr::Foundation::BOOL, Void),
    get_mute_debug_output : Proc(ID3D10InfoQueue*, Win32cr::Foundation::BOOL)


  @[Extern]
  record ID3D10InfoQueue, lpVtbl : ID3D10InfoQueueVtbl* do
    GUID = LibC::GUID.new(0x1b940b17_u32, 0x2642_u16, 0x4d1f_u16, StaticArray[0xab_u8, 0x1f_u8, 0xb9_u8, 0x9b_u8, 0xad_u8, 0xc_u8, 0x39_u8, 0x5f_u8])
    def query_interface(this : ID3D10InfoQueue*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10InfoQueue*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10InfoQueue*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_message_count_limit(this : ID3D10InfoQueue*, message_count_limit : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_message_count_limit.call(this, message_count_limit)
    end
    def clear_stored_messages(this : ID3D10InfoQueue*) : Void
      @lpVtbl.try &.value.clear_stored_messages.call(this)
    end
    def get_message(this : ID3D10InfoQueue*, message_index : UInt64, pMessage : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE*, pMessageByteLength : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_message.call(this, message_index, pMessage, pMessageByteLength)
    end
    def get_num_messages_allowed_by_storage_filter(this : ID3D10InfoQueue*) : UInt64
      @lpVtbl.try &.value.get_num_messages_allowed_by_storage_filter.call(this)
    end
    def get_num_messages_denied_by_storage_filter(this : ID3D10InfoQueue*) : UInt64
      @lpVtbl.try &.value.get_num_messages_denied_by_storage_filter.call(this)
    end
    def get_num_stored_messages(this : ID3D10InfoQueue*) : UInt64
      @lpVtbl.try &.value.get_num_stored_messages.call(this)
    end
    def get_num_stored_messages_allowed_by_retrieval_filter(this : ID3D10InfoQueue*) : UInt64
      @lpVtbl.try &.value.get_num_stored_messages_allowed_by_retrieval_filter.call(this)
    end
    def get_num_messages_discarded_by_message_count_limit(this : ID3D10InfoQueue*) : UInt64
      @lpVtbl.try &.value.get_num_messages_discarded_by_message_count_limit.call(this)
    end
    def get_message_count_limit(this : ID3D10InfoQueue*) : UInt64
      @lpVtbl.try &.value.get_message_count_limit.call(this)
    end
    def add_storage_filter_entries(this : ID3D10InfoQueue*, pFilter : Win32cr::Graphics::Direct3D10::D3D10_INFO_QUEUE_FILTER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_storage_filter_entries.call(this, pFilter)
    end
    def get_storage_filter(this : ID3D10InfoQueue*, pFilter : Win32cr::Graphics::Direct3D10::D3D10_INFO_QUEUE_FILTER*, pFilterByteLength : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_storage_filter.call(this, pFilter, pFilterByteLength)
    end
    def clear_storage_filter(this : ID3D10InfoQueue*) : Void
      @lpVtbl.try &.value.clear_storage_filter.call(this)
    end
    def push_empty_storage_filter(this : ID3D10InfoQueue*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_empty_storage_filter.call(this)
    end
    def push_copy_of_storage_filter(this : ID3D10InfoQueue*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_copy_of_storage_filter.call(this)
    end
    def push_storage_filter(this : ID3D10InfoQueue*, pFilter : Win32cr::Graphics::Direct3D10::D3D10_INFO_QUEUE_FILTER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_storage_filter.call(this, pFilter)
    end
    def pop_storage_filter(this : ID3D10InfoQueue*) : Void
      @lpVtbl.try &.value.pop_storage_filter.call(this)
    end
    def get_storage_filter_stack_size(this : ID3D10InfoQueue*) : UInt32
      @lpVtbl.try &.value.get_storage_filter_stack_size.call(this)
    end
    def add_retrieval_filter_entries(this : ID3D10InfoQueue*, pFilter : Win32cr::Graphics::Direct3D10::D3D10_INFO_QUEUE_FILTER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_retrieval_filter_entries.call(this, pFilter)
    end
    def get_retrieval_filter(this : ID3D10InfoQueue*, pFilter : Win32cr::Graphics::Direct3D10::D3D10_INFO_QUEUE_FILTER*, pFilterByteLength : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_retrieval_filter.call(this, pFilter, pFilterByteLength)
    end
    def clear_retrieval_filter(this : ID3D10InfoQueue*) : Void
      @lpVtbl.try &.value.clear_retrieval_filter.call(this)
    end
    def push_empty_retrieval_filter(this : ID3D10InfoQueue*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_empty_retrieval_filter.call(this)
    end
    def push_copy_of_retrieval_filter(this : ID3D10InfoQueue*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_copy_of_retrieval_filter.call(this)
    end
    def push_retrieval_filter(this : ID3D10InfoQueue*, pFilter : Win32cr::Graphics::Direct3D10::D3D10_INFO_QUEUE_FILTER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_retrieval_filter.call(this, pFilter)
    end
    def pop_retrieval_filter(this : ID3D10InfoQueue*) : Void
      @lpVtbl.try &.value.pop_retrieval_filter.call(this)
    end
    def get_retrieval_filter_stack_size(this : ID3D10InfoQueue*) : UInt32
      @lpVtbl.try &.value.get_retrieval_filter_stack_size.call(this)
    end
    def add_message(this : ID3D10InfoQueue*, category : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_CATEGORY, severity : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_SEVERITY, id : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_ID, pDescription : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_message.call(this, category, severity, id, pDescription)
    end
    def add_application_message(this : ID3D10InfoQueue*, severity : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_SEVERITY, pDescription : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_application_message.call(this, severity, pDescription)
    end
    def set_break_on_category(this : ID3D10InfoQueue*, category : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_CATEGORY, bEnable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_break_on_category.call(this, category, bEnable)
    end
    def set_break_on_severity(this : ID3D10InfoQueue*, severity : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_SEVERITY, bEnable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_break_on_severity.call(this, severity, bEnable)
    end
    def set_break_on_id(this : ID3D10InfoQueue*, id : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_ID, bEnable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_break_on_id.call(this, id, bEnable)
    end
    def get_break_on_category(this : ID3D10InfoQueue*, category : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_CATEGORY) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_break_on_category.call(this, category)
    end
    def get_break_on_severity(this : ID3D10InfoQueue*, severity : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_SEVERITY) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_break_on_severity.call(this, severity)
    end
    def get_break_on_id(this : ID3D10InfoQueue*, id : Win32cr::Graphics::Direct3D10::D3D10_MESSAGE_ID) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_break_on_id.call(this, id)
    end
    def set_mute_debug_output(this : ID3D10InfoQueue*, bMute : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.set_mute_debug_output.call(this, bMute)
    end
    def get_mute_debug_output(this : ID3D10InfoQueue*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_mute_debug_output.call(this)
    end

  end

  @[Extern]
  record ID3D10ShaderReflectionTypeVtbl,
    get_desc : Proc(ID3D10ShaderReflectionType*, Win32cr::Graphics::Direct3D10::D3D10_SHADER_TYPE_DESC*, Win32cr::Foundation::HRESULT),
    get_member_type_by_index : Proc(ID3D10ShaderReflectionType*, UInt32, Void*),
    get_member_type_by_name : Proc(ID3D10ShaderReflectionType*, Win32cr::Foundation::PSTR, Void*),
    get_member_type_name : Proc(ID3D10ShaderReflectionType*, UInt32, Win32cr::Foundation::PSTR)


  @[Extern]
  record ID3D10ShaderReflectionType, lpVtbl : ID3D10ShaderReflectionTypeVtbl* do
    GUID = LibC::GUID.new(0xc530ad7d_u32, 0x9b16_u16, 0x4395_u16, StaticArray[0xa9_u8, 0x79_u8, 0xba_u8, 0x2e_u8, 0xcf_u8, 0xf8_u8, 0x3a_u8, 0xdd_u8])
    def get_desc(this : ID3D10ShaderReflectionType*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_SHADER_TYPE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_member_type_by_index(this : ID3D10ShaderReflectionType*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_member_type_by_index.call(this, index)
    end
    def get_member_type_by_name(this : ID3D10ShaderReflectionType*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_type_by_name.call(this, name)
    end
    def get_member_type_name(this : ID3D10ShaderReflectionType*, index : UInt32) : Win32cr::Foundation::PSTR
      @lpVtbl.try &.value.get_member_type_name.call(this, index)
    end

  end

  @[Extern]
  record ID3D10ShaderReflectionVariableVtbl,
    get_desc : Proc(ID3D10ShaderReflectionVariable*, Win32cr::Graphics::Direct3D10::D3D10_SHADER_VARIABLE_DESC*, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D10ShaderReflectionVariable*, Void*)


  @[Extern]
  record ID3D10ShaderReflectionVariable, lpVtbl : ID3D10ShaderReflectionVariableVtbl* do
    GUID = LibC::GUID.new(0x1bf63c95_u32, 0x2650_u16, 0x405d_u16, StaticArray[0x99_u8, 0xc1_u8, 0x36_u8, 0x36_u8, 0xbd_u8, 0x1d_u8, 0xa0_u8, 0xa1_u8])
    def get_desc(this : ID3D10ShaderReflectionVariable*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_SHADER_VARIABLE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_type(this : ID3D10ShaderReflectionVariable*) : Void*
      @lpVtbl.try &.value.get_type.call(this)
    end

  end

  @[Extern]
  record ID3D10ShaderReflectionConstantBufferVtbl,
    get_desc : Proc(ID3D10ShaderReflectionConstantBuffer*, Win32cr::Graphics::Direct3D10::D3D10_SHADER_BUFFER_DESC*, Win32cr::Foundation::HRESULT),
    get_variable_by_index : Proc(ID3D10ShaderReflectionConstantBuffer*, UInt32, Void*),
    get_variable_by_name : Proc(ID3D10ShaderReflectionConstantBuffer*, Win32cr::Foundation::PSTR, Void*)


  @[Extern]
  record ID3D10ShaderReflectionConstantBuffer, lpVtbl : ID3D10ShaderReflectionConstantBufferVtbl* do
    GUID = LibC::GUID.new(0x66c66a94_u32, 0xdddd_u16, 0x4b62_u16, StaticArray[0xa6_u8, 0x6a_u8, 0xf0_u8, 0xda_u8, 0x33_u8, 0xc2_u8, 0xb4_u8, 0xd0_u8])
    def get_desc(this : ID3D10ShaderReflectionConstantBuffer*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_SHADER_BUFFER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_variable_by_index(this : ID3D10ShaderReflectionConstantBuffer*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_variable_by_index.call(this, index)
    end
    def get_variable_by_name(this : ID3D10ShaderReflectionConstantBuffer*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_variable_by_name.call(this, name)
    end

  end

  @[Extern]
  record ID3D10ShaderReflectionVtbl,
    query_interface : Proc(ID3D10ShaderReflection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10ShaderReflection*, UInt32),
    release : Proc(ID3D10ShaderReflection*, UInt32),
    get_desc : Proc(ID3D10ShaderReflection*, Win32cr::Graphics::Direct3D10::D3D10_SHADER_DESC*, Win32cr::Foundation::HRESULT),
    get_constant_buffer_by_index : Proc(ID3D10ShaderReflection*, UInt32, Void*),
    get_constant_buffer_by_name : Proc(ID3D10ShaderReflection*, Win32cr::Foundation::PSTR, Void*),
    get_resource_binding_desc : Proc(ID3D10ShaderReflection*, UInt32, Win32cr::Graphics::Direct3D10::D3D10_SHADER_INPUT_BIND_DESC*, Win32cr::Foundation::HRESULT),
    get_input_parameter_desc : Proc(ID3D10ShaderReflection*, UInt32, Win32cr::Graphics::Direct3D10::D3D10_SIGNATURE_PARAMETER_DESC*, Win32cr::Foundation::HRESULT),
    get_output_parameter_desc : Proc(ID3D10ShaderReflection*, UInt32, Win32cr::Graphics::Direct3D10::D3D10_SIGNATURE_PARAMETER_DESC*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10ShaderReflection, lpVtbl : ID3D10ShaderReflectionVtbl* do
    GUID = LibC::GUID.new(0xd40e20b6_u32, 0xf8f7_u16, 0x42ad_u16, StaticArray[0xab_u8, 0x20_u8, 0x4b_u8, 0xaf_u8, 0x8f_u8, 0x15_u8, 0xdf_u8, 0xaa_u8])
    def query_interface(this : ID3D10ShaderReflection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10ShaderReflection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10ShaderReflection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_desc(this : ID3D10ShaderReflection*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_SHADER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_constant_buffer_by_index(this : ID3D10ShaderReflection*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_constant_buffer_by_index.call(this, index)
    end
    def get_constant_buffer_by_name(this : ID3D10ShaderReflection*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_constant_buffer_by_name.call(this, name)
    end
    def get_resource_binding_desc(this : ID3D10ShaderReflection*, resource_index : UInt32, pDesc : Win32cr::Graphics::Direct3D10::D3D10_SHADER_INPUT_BIND_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_resource_binding_desc.call(this, resource_index, pDesc)
    end
    def get_input_parameter_desc(this : ID3D10ShaderReflection*, parameter_index : UInt32, pDesc : Win32cr::Graphics::Direct3D10::D3D10_SIGNATURE_PARAMETER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_parameter_desc.call(this, parameter_index, pDesc)
    end
    def get_output_parameter_desc(this : ID3D10ShaderReflection*, parameter_index : UInt32, pDesc : Win32cr::Graphics::Direct3D10::D3D10_SIGNATURE_PARAMETER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_parameter_desc.call(this, parameter_index, pDesc)
    end

  end

  @[Extern]
  record ID3D10StateBlockVtbl,
    query_interface : Proc(ID3D10StateBlock*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10StateBlock*, UInt32),
    release : Proc(ID3D10StateBlock*, UInt32),
    capture : Proc(ID3D10StateBlock*, Win32cr::Foundation::HRESULT),
    apply : Proc(ID3D10StateBlock*, Win32cr::Foundation::HRESULT),
    release_all_device_objects : Proc(ID3D10StateBlock*, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D10StateBlock*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10StateBlock, lpVtbl : ID3D10StateBlockVtbl* do
    GUID = LibC::GUID.new(0x803425a_u32, 0x57f5_u16, 0x4dd6_u16, StaticArray[0x94_u8, 0x65_u8, 0xa8_u8, 0x75_u8, 0x70_u8, 0x83_u8, 0x4a_u8, 0x8_u8])
    def query_interface(this : ID3D10StateBlock*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10StateBlock*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10StateBlock*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def capture(this : ID3D10StateBlock*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.capture.call(this)
    end
    def apply(this : ID3D10StateBlock*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.apply.call(this)
    end
    def release_all_device_objects(this : ID3D10StateBlock*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.release_all_device_objects.call(this)
    end
    def get_device(this : ID3D10StateBlock*, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end

  end

  @[Extern]
  record ID3D10EffectTypeVtbl,
    is_valid : Proc(ID3D10EffectType*, Win32cr::Foundation::BOOL),
    get_desc : Proc(ID3D10EffectType*, Win32cr::Graphics::Direct3D10::D3D10_EFFECT_TYPE_DESC*, Win32cr::Foundation::HRESULT),
    get_member_type_by_index : Proc(ID3D10EffectType*, UInt32, Void*),
    get_member_type_by_name : Proc(ID3D10EffectType*, Win32cr::Foundation::PSTR, Void*),
    get_member_type_by_semantic : Proc(ID3D10EffectType*, Win32cr::Foundation::PSTR, Void*),
    get_member_name : Proc(ID3D10EffectType*, UInt32, Win32cr::Foundation::PSTR),
    get_member_semantic : Proc(ID3D10EffectType*, UInt32, Win32cr::Foundation::PSTR)


  @[Extern]
  record ID3D10EffectType, lpVtbl : ID3D10EffectTypeVtbl* do
    GUID = LibC::GUID.new(0x4e9e1ddc_u32, 0xcd9d_u16, 0x4772_u16, StaticArray[0xa8_u8, 0x37_u8, 0x0_u8, 0x18_u8, 0xb_u8, 0x9b_u8, 0x88_u8, 0xfd_u8])
    def is_valid(this : ID3D10EffectType*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_valid.call(this)
    end
    def get_desc(this : ID3D10EffectType*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_EFFECT_TYPE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_member_type_by_index(this : ID3D10EffectType*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_member_type_by_index.call(this, index)
    end
    def get_member_type_by_name(this : ID3D10EffectType*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_type_by_name.call(this, name)
    end
    def get_member_type_by_semantic(this : ID3D10EffectType*, semantic : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_type_by_semantic.call(this, semantic)
    end
    def get_member_name(this : ID3D10EffectType*, index : UInt32) : Win32cr::Foundation::PSTR
      @lpVtbl.try &.value.get_member_name.call(this, index)
    end
    def get_member_semantic(this : ID3D10EffectType*, index : UInt32) : Win32cr::Foundation::PSTR
      @lpVtbl.try &.value.get_member_semantic.call(this, index)
    end

  end

  @[Extern]
  record ID3D10EffectVariableVtbl,
    is_valid : Proc(ID3D10EffectVariable*, Win32cr::Foundation::BOOL),
    get_type : Proc(ID3D10EffectVariable*, Void*),
    get_desc : Proc(ID3D10EffectVariable*, Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*, Win32cr::Foundation::HRESULT),
    get_annotation_by_index : Proc(ID3D10EffectVariable*, UInt32, Void*),
    get_annotation_by_name : Proc(ID3D10EffectVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_index : Proc(ID3D10EffectVariable*, UInt32, Void*),
    get_member_by_name : Proc(ID3D10EffectVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_semantic : Proc(ID3D10EffectVariable*, Win32cr::Foundation::PSTR, Void*),
    get_element : Proc(ID3D10EffectVariable*, UInt32, Void*),
    get_parent_constant_buffer : Proc(ID3D10EffectVariable*, Void*),
    as_scalar : Proc(ID3D10EffectVariable*, Void*),
    as_vector : Proc(ID3D10EffectVariable*, Void*),
    as_matrix : Proc(ID3D10EffectVariable*, Void*),
    as_string : Proc(ID3D10EffectVariable*, Void*),
    as_shader_resource : Proc(ID3D10EffectVariable*, Void*),
    as_render_target_view : Proc(ID3D10EffectVariable*, Void*),
    as_depth_stencil_view : Proc(ID3D10EffectVariable*, Void*),
    as_constant_buffer : Proc(ID3D10EffectVariable*, Void*),
    as_shader : Proc(ID3D10EffectVariable*, Void*),
    as_blend : Proc(ID3D10EffectVariable*, Void*),
    as_depth_stencil : Proc(ID3D10EffectVariable*, Void*),
    as_rasterizer : Proc(ID3D10EffectVariable*, Void*),
    as_sampler : Proc(ID3D10EffectVariable*, Void*),
    set_raw_value : Proc(ID3D10EffectVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_raw_value : Proc(ID3D10EffectVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10EffectVariable, lpVtbl : ID3D10EffectVariableVtbl* do
    GUID = LibC::GUID.new(0xae897105_u32, 0xe6_u16, 0x45bf_u16, StaticArray[0xbb_u8, 0x8e_u8, 0x28_u8, 0x1d_u8, 0xd6_u8, 0xdb_u8, 0x8e_u8, 0x1b_u8])
    def is_valid(this : ID3D10EffectVariable*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_valid.call(this)
    end
    def get_type(this : ID3D10EffectVariable*) : Void*
      @lpVtbl.try &.value.get_type.call(this)
    end
    def get_desc(this : ID3D10EffectVariable*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_annotation_by_index(this : ID3D10EffectVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_annotation_by_index.call(this, index)
    end
    def get_annotation_by_name(this : ID3D10EffectVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_annotation_by_name.call(this, name)
    end
    def get_member_by_index(this : ID3D10EffectVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_member_by_index.call(this, index)
    end
    def get_member_by_name(this : ID3D10EffectVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_name.call(this, name)
    end
    def get_member_by_semantic(this : ID3D10EffectVariable*, semantic : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_semantic.call(this, semantic)
    end
    def get_element(this : ID3D10EffectVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_element.call(this, index)
    end
    def get_parent_constant_buffer(this : ID3D10EffectVariable*) : Void*
      @lpVtbl.try &.value.get_parent_constant_buffer.call(this)
    end
    def as_scalar(this : ID3D10EffectVariable*) : Void*
      @lpVtbl.try &.value.as_scalar.call(this)
    end
    def as_vector(this : ID3D10EffectVariable*) : Void*
      @lpVtbl.try &.value.as_vector.call(this)
    end
    def as_matrix(this : ID3D10EffectVariable*) : Void*
      @lpVtbl.try &.value.as_matrix.call(this)
    end
    def as_string(this : ID3D10EffectVariable*) : Void*
      @lpVtbl.try &.value.as_string.call(this)
    end
    def as_shader_resource(this : ID3D10EffectVariable*) : Void*
      @lpVtbl.try &.value.as_shader_resource.call(this)
    end
    def as_render_target_view(this : ID3D10EffectVariable*) : Void*
      @lpVtbl.try &.value.as_render_target_view.call(this)
    end
    def as_depth_stencil_view(this : ID3D10EffectVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil_view.call(this)
    end
    def as_constant_buffer(this : ID3D10EffectVariable*) : Void*
      @lpVtbl.try &.value.as_constant_buffer.call(this)
    end
    def as_shader(this : ID3D10EffectVariable*) : Void*
      @lpVtbl.try &.value.as_shader.call(this)
    end
    def as_blend(this : ID3D10EffectVariable*) : Void*
      @lpVtbl.try &.value.as_blend.call(this)
    end
    def as_depth_stencil(this : ID3D10EffectVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil.call(this)
    end
    def as_rasterizer(this : ID3D10EffectVariable*) : Void*
      @lpVtbl.try &.value.as_rasterizer.call(this)
    end
    def as_sampler(this : ID3D10EffectVariable*) : Void*
      @lpVtbl.try &.value.as_sampler.call(this)
    end
    def set_raw_value(this : ID3D10EffectVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_raw_value.call(this, pData, offset, byte_count)
    end
    def get_raw_value(this : ID3D10EffectVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raw_value.call(this, pData, offset, byte_count)
    end

  end

  @[Extern]
  record ID3D10EffectScalarVariableVtbl,
    is_valid : Proc(ID3D10EffectScalarVariable*, Win32cr::Foundation::BOOL),
    get_type : Proc(ID3D10EffectScalarVariable*, Void*),
    get_desc : Proc(ID3D10EffectScalarVariable*, Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*, Win32cr::Foundation::HRESULT),
    get_annotation_by_index : Proc(ID3D10EffectScalarVariable*, UInt32, Void*),
    get_annotation_by_name : Proc(ID3D10EffectScalarVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_index : Proc(ID3D10EffectScalarVariable*, UInt32, Void*),
    get_member_by_name : Proc(ID3D10EffectScalarVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_semantic : Proc(ID3D10EffectScalarVariable*, Win32cr::Foundation::PSTR, Void*),
    get_element : Proc(ID3D10EffectScalarVariable*, UInt32, Void*),
    get_parent_constant_buffer : Proc(ID3D10EffectScalarVariable*, Void*),
    as_scalar : Proc(ID3D10EffectScalarVariable*, Void*),
    as_vector : Proc(ID3D10EffectScalarVariable*, Void*),
    as_matrix : Proc(ID3D10EffectScalarVariable*, Void*),
    as_string : Proc(ID3D10EffectScalarVariable*, Void*),
    as_shader_resource : Proc(ID3D10EffectScalarVariable*, Void*),
    as_render_target_view : Proc(ID3D10EffectScalarVariable*, Void*),
    as_depth_stencil_view : Proc(ID3D10EffectScalarVariable*, Void*),
    as_constant_buffer : Proc(ID3D10EffectScalarVariable*, Void*),
    as_shader : Proc(ID3D10EffectScalarVariable*, Void*),
    as_blend : Proc(ID3D10EffectScalarVariable*, Void*),
    as_depth_stencil : Proc(ID3D10EffectScalarVariable*, Void*),
    as_rasterizer : Proc(ID3D10EffectScalarVariable*, Void*),
    as_sampler : Proc(ID3D10EffectScalarVariable*, Void*),
    set_raw_value : Proc(ID3D10EffectScalarVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_raw_value : Proc(ID3D10EffectScalarVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_float : Proc(ID3D10EffectScalarVariable*, Float32, Win32cr::Foundation::HRESULT),
    get_float : Proc(ID3D10EffectScalarVariable*, Float32*, Win32cr::Foundation::HRESULT),
    set_float_array : Proc(ID3D10EffectScalarVariable*, Float32*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_float_array : Proc(ID3D10EffectScalarVariable*, Float32*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_int : Proc(ID3D10EffectScalarVariable*, Int32, Win32cr::Foundation::HRESULT),
    get_int : Proc(ID3D10EffectScalarVariable*, Int32*, Win32cr::Foundation::HRESULT),
    set_int_array : Proc(ID3D10EffectScalarVariable*, Int32*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_int_array : Proc(ID3D10EffectScalarVariable*, Int32*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_bool : Proc(ID3D10EffectScalarVariable*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_bool : Proc(ID3D10EffectScalarVariable*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_bool_array : Proc(ID3D10EffectScalarVariable*, Win32cr::Foundation::BOOL*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_bool_array : Proc(ID3D10EffectScalarVariable*, Win32cr::Foundation::BOOL*, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10EffectScalarVariable, lpVtbl : ID3D10EffectScalarVariableVtbl* do
    GUID = LibC::GUID.new(0xe48f7b_u32, 0xd2c8_u16, 0x49e8_u16, StaticArray[0xa8_u8, 0x6c_u8, 0x2_u8, 0x2d_u8, 0xee_u8, 0x53_u8, 0x43_u8, 0x1f_u8])
    def is_valid(this : ID3D10EffectScalarVariable*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_valid.call(this)
    end
    def get_type(this : ID3D10EffectScalarVariable*) : Void*
      @lpVtbl.try &.value.get_type.call(this)
    end
    def get_desc(this : ID3D10EffectScalarVariable*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_annotation_by_index(this : ID3D10EffectScalarVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_annotation_by_index.call(this, index)
    end
    def get_annotation_by_name(this : ID3D10EffectScalarVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_annotation_by_name.call(this, name)
    end
    def get_member_by_index(this : ID3D10EffectScalarVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_member_by_index.call(this, index)
    end
    def get_member_by_name(this : ID3D10EffectScalarVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_name.call(this, name)
    end
    def get_member_by_semantic(this : ID3D10EffectScalarVariable*, semantic : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_semantic.call(this, semantic)
    end
    def get_element(this : ID3D10EffectScalarVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_element.call(this, index)
    end
    def get_parent_constant_buffer(this : ID3D10EffectScalarVariable*) : Void*
      @lpVtbl.try &.value.get_parent_constant_buffer.call(this)
    end
    def as_scalar(this : ID3D10EffectScalarVariable*) : Void*
      @lpVtbl.try &.value.as_scalar.call(this)
    end
    def as_vector(this : ID3D10EffectScalarVariable*) : Void*
      @lpVtbl.try &.value.as_vector.call(this)
    end
    def as_matrix(this : ID3D10EffectScalarVariable*) : Void*
      @lpVtbl.try &.value.as_matrix.call(this)
    end
    def as_string(this : ID3D10EffectScalarVariable*) : Void*
      @lpVtbl.try &.value.as_string.call(this)
    end
    def as_shader_resource(this : ID3D10EffectScalarVariable*) : Void*
      @lpVtbl.try &.value.as_shader_resource.call(this)
    end
    def as_render_target_view(this : ID3D10EffectScalarVariable*) : Void*
      @lpVtbl.try &.value.as_render_target_view.call(this)
    end
    def as_depth_stencil_view(this : ID3D10EffectScalarVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil_view.call(this)
    end
    def as_constant_buffer(this : ID3D10EffectScalarVariable*) : Void*
      @lpVtbl.try &.value.as_constant_buffer.call(this)
    end
    def as_shader(this : ID3D10EffectScalarVariable*) : Void*
      @lpVtbl.try &.value.as_shader.call(this)
    end
    def as_blend(this : ID3D10EffectScalarVariable*) : Void*
      @lpVtbl.try &.value.as_blend.call(this)
    end
    def as_depth_stencil(this : ID3D10EffectScalarVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil.call(this)
    end
    def as_rasterizer(this : ID3D10EffectScalarVariable*) : Void*
      @lpVtbl.try &.value.as_rasterizer.call(this)
    end
    def as_sampler(this : ID3D10EffectScalarVariable*) : Void*
      @lpVtbl.try &.value.as_sampler.call(this)
    end
    def set_raw_value(this : ID3D10EffectScalarVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_raw_value.call(this, pData, offset, byte_count)
    end
    def get_raw_value(this : ID3D10EffectScalarVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raw_value.call(this, pData, offset, byte_count)
    end
    def set_float(this : ID3D10EffectScalarVariable*, value : Float32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_float.call(this, value)
    end
    def get_float(this : ID3D10EffectScalarVariable*, pValue : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_float.call(this, pValue)
    end
    def set_float_array(this : ID3D10EffectScalarVariable*, pData : Float32*, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_float_array.call(this, pData, offset, count)
    end
    def get_float_array(this : ID3D10EffectScalarVariable*, pData : Float32*, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_float_array.call(this, pData, offset, count)
    end
    def set_int(this : ID3D10EffectScalarVariable*, value : Int32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_int.call(this, value)
    end
    def get_int(this : ID3D10EffectScalarVariable*, pValue : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_int.call(this, pValue)
    end
    def set_int_array(this : ID3D10EffectScalarVariable*, pData : Int32*, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_int_array.call(this, pData, offset, count)
    end
    def get_int_array(this : ID3D10EffectScalarVariable*, pData : Int32*, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_int_array.call(this, pData, offset, count)
    end
    def set_bool(this : ID3D10EffectScalarVariable*, value : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_bool.call(this, value)
    end
    def get_bool(this : ID3D10EffectScalarVariable*, pValue : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bool.call(this, pValue)
    end
    def set_bool_array(this : ID3D10EffectScalarVariable*, pData : Win32cr::Foundation::BOOL*, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_bool_array.call(this, pData, offset, count)
    end
    def get_bool_array(this : ID3D10EffectScalarVariable*, pData : Win32cr::Foundation::BOOL*, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bool_array.call(this, pData, offset, count)
    end

  end

  @[Extern]
  record ID3D10EffectVectorVariableVtbl,
    is_valid : Proc(ID3D10EffectVectorVariable*, Win32cr::Foundation::BOOL),
    get_type : Proc(ID3D10EffectVectorVariable*, Void*),
    get_desc : Proc(ID3D10EffectVectorVariable*, Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*, Win32cr::Foundation::HRESULT),
    get_annotation_by_index : Proc(ID3D10EffectVectorVariable*, UInt32, Void*),
    get_annotation_by_name : Proc(ID3D10EffectVectorVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_index : Proc(ID3D10EffectVectorVariable*, UInt32, Void*),
    get_member_by_name : Proc(ID3D10EffectVectorVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_semantic : Proc(ID3D10EffectVectorVariable*, Win32cr::Foundation::PSTR, Void*),
    get_element : Proc(ID3D10EffectVectorVariable*, UInt32, Void*),
    get_parent_constant_buffer : Proc(ID3D10EffectVectorVariable*, Void*),
    as_scalar : Proc(ID3D10EffectVectorVariable*, Void*),
    as_vector : Proc(ID3D10EffectVectorVariable*, Void*),
    as_matrix : Proc(ID3D10EffectVectorVariable*, Void*),
    as_string : Proc(ID3D10EffectVectorVariable*, Void*),
    as_shader_resource : Proc(ID3D10EffectVectorVariable*, Void*),
    as_render_target_view : Proc(ID3D10EffectVectorVariable*, Void*),
    as_depth_stencil_view : Proc(ID3D10EffectVectorVariable*, Void*),
    as_constant_buffer : Proc(ID3D10EffectVectorVariable*, Void*),
    as_shader : Proc(ID3D10EffectVectorVariable*, Void*),
    as_blend : Proc(ID3D10EffectVectorVariable*, Void*),
    as_depth_stencil : Proc(ID3D10EffectVectorVariable*, Void*),
    as_rasterizer : Proc(ID3D10EffectVectorVariable*, Void*),
    as_sampler : Proc(ID3D10EffectVectorVariable*, Void*),
    set_raw_value : Proc(ID3D10EffectVectorVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_raw_value : Proc(ID3D10EffectVectorVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_bool_vector : Proc(ID3D10EffectVectorVariable*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    set_int_vector : Proc(ID3D10EffectVectorVariable*, Int32*, Win32cr::Foundation::HRESULT),
    set_float_vector : Proc(ID3D10EffectVectorVariable*, Float32*, Win32cr::Foundation::HRESULT),
    get_bool_vector : Proc(ID3D10EffectVectorVariable*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    get_int_vector : Proc(ID3D10EffectVectorVariable*, Int32*, Win32cr::Foundation::HRESULT),
    get_float_vector : Proc(ID3D10EffectVectorVariable*, Float32*, Win32cr::Foundation::HRESULT),
    set_bool_vector_array : Proc(ID3D10EffectVectorVariable*, Win32cr::Foundation::BOOL*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_int_vector_array : Proc(ID3D10EffectVectorVariable*, Int32*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_float_vector_array : Proc(ID3D10EffectVectorVariable*, Float32*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_bool_vector_array : Proc(ID3D10EffectVectorVariable*, Win32cr::Foundation::BOOL*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_int_vector_array : Proc(ID3D10EffectVectorVariable*, Int32*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_float_vector_array : Proc(ID3D10EffectVectorVariable*, Float32*, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10EffectVectorVariable, lpVtbl : ID3D10EffectVectorVariableVtbl* do
    GUID = LibC::GUID.new(0x62b98c44_u32, 0x1f82_u16, 0x4c67_u16, StaticArray[0xbc_u8, 0xd0_u8, 0x72_u8, 0xcf_u8, 0x8f_u8, 0x21_u8, 0x7e_u8, 0x81_u8])
    def is_valid(this : ID3D10EffectVectorVariable*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_valid.call(this)
    end
    def get_type(this : ID3D10EffectVectorVariable*) : Void*
      @lpVtbl.try &.value.get_type.call(this)
    end
    def get_desc(this : ID3D10EffectVectorVariable*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_annotation_by_index(this : ID3D10EffectVectorVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_annotation_by_index.call(this, index)
    end
    def get_annotation_by_name(this : ID3D10EffectVectorVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_annotation_by_name.call(this, name)
    end
    def get_member_by_index(this : ID3D10EffectVectorVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_member_by_index.call(this, index)
    end
    def get_member_by_name(this : ID3D10EffectVectorVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_name.call(this, name)
    end
    def get_member_by_semantic(this : ID3D10EffectVectorVariable*, semantic : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_semantic.call(this, semantic)
    end
    def get_element(this : ID3D10EffectVectorVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_element.call(this, index)
    end
    def get_parent_constant_buffer(this : ID3D10EffectVectorVariable*) : Void*
      @lpVtbl.try &.value.get_parent_constant_buffer.call(this)
    end
    def as_scalar(this : ID3D10EffectVectorVariable*) : Void*
      @lpVtbl.try &.value.as_scalar.call(this)
    end
    def as_vector(this : ID3D10EffectVectorVariable*) : Void*
      @lpVtbl.try &.value.as_vector.call(this)
    end
    def as_matrix(this : ID3D10EffectVectorVariable*) : Void*
      @lpVtbl.try &.value.as_matrix.call(this)
    end
    def as_string(this : ID3D10EffectVectorVariable*) : Void*
      @lpVtbl.try &.value.as_string.call(this)
    end
    def as_shader_resource(this : ID3D10EffectVectorVariable*) : Void*
      @lpVtbl.try &.value.as_shader_resource.call(this)
    end
    def as_render_target_view(this : ID3D10EffectVectorVariable*) : Void*
      @lpVtbl.try &.value.as_render_target_view.call(this)
    end
    def as_depth_stencil_view(this : ID3D10EffectVectorVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil_view.call(this)
    end
    def as_constant_buffer(this : ID3D10EffectVectorVariable*) : Void*
      @lpVtbl.try &.value.as_constant_buffer.call(this)
    end
    def as_shader(this : ID3D10EffectVectorVariable*) : Void*
      @lpVtbl.try &.value.as_shader.call(this)
    end
    def as_blend(this : ID3D10EffectVectorVariable*) : Void*
      @lpVtbl.try &.value.as_blend.call(this)
    end
    def as_depth_stencil(this : ID3D10EffectVectorVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil.call(this)
    end
    def as_rasterizer(this : ID3D10EffectVectorVariable*) : Void*
      @lpVtbl.try &.value.as_rasterizer.call(this)
    end
    def as_sampler(this : ID3D10EffectVectorVariable*) : Void*
      @lpVtbl.try &.value.as_sampler.call(this)
    end
    def set_raw_value(this : ID3D10EffectVectorVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_raw_value.call(this, pData, offset, byte_count)
    end
    def get_raw_value(this : ID3D10EffectVectorVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raw_value.call(this, pData, offset, byte_count)
    end
    def set_bool_vector(this : ID3D10EffectVectorVariable*, pData : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_bool_vector.call(this, pData)
    end
    def set_int_vector(this : ID3D10EffectVectorVariable*, pData : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_int_vector.call(this, pData)
    end
    def set_float_vector(this : ID3D10EffectVectorVariable*, pData : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_float_vector.call(this, pData)
    end
    def get_bool_vector(this : ID3D10EffectVectorVariable*, pData : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bool_vector.call(this, pData)
    end
    def get_int_vector(this : ID3D10EffectVectorVariable*, pData : Int32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_int_vector.call(this, pData)
    end
    def get_float_vector(this : ID3D10EffectVectorVariable*, pData : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_float_vector.call(this, pData)
    end
    def set_bool_vector_array(this : ID3D10EffectVectorVariable*, pData : Win32cr::Foundation::BOOL*, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_bool_vector_array.call(this, pData, offset, count)
    end
    def set_int_vector_array(this : ID3D10EffectVectorVariable*, pData : Int32*, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_int_vector_array.call(this, pData, offset, count)
    end
    def set_float_vector_array(this : ID3D10EffectVectorVariable*, pData : Float32*, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_float_vector_array.call(this, pData, offset, count)
    end
    def get_bool_vector_array(this : ID3D10EffectVectorVariable*, pData : Win32cr::Foundation::BOOL*, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bool_vector_array.call(this, pData, offset, count)
    end
    def get_int_vector_array(this : ID3D10EffectVectorVariable*, pData : Int32*, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_int_vector_array.call(this, pData, offset, count)
    end
    def get_float_vector_array(this : ID3D10EffectVectorVariable*, pData : Float32*, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_float_vector_array.call(this, pData, offset, count)
    end

  end

  @[Extern]
  record ID3D10EffectMatrixVariableVtbl,
    is_valid : Proc(ID3D10EffectMatrixVariable*, Win32cr::Foundation::BOOL),
    get_type : Proc(ID3D10EffectMatrixVariable*, Void*),
    get_desc : Proc(ID3D10EffectMatrixVariable*, Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*, Win32cr::Foundation::HRESULT),
    get_annotation_by_index : Proc(ID3D10EffectMatrixVariable*, UInt32, Void*),
    get_annotation_by_name : Proc(ID3D10EffectMatrixVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_index : Proc(ID3D10EffectMatrixVariable*, UInt32, Void*),
    get_member_by_name : Proc(ID3D10EffectMatrixVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_semantic : Proc(ID3D10EffectMatrixVariable*, Win32cr::Foundation::PSTR, Void*),
    get_element : Proc(ID3D10EffectMatrixVariable*, UInt32, Void*),
    get_parent_constant_buffer : Proc(ID3D10EffectMatrixVariable*, Void*),
    as_scalar : Proc(ID3D10EffectMatrixVariable*, Void*),
    as_vector : Proc(ID3D10EffectMatrixVariable*, Void*),
    as_matrix : Proc(ID3D10EffectMatrixVariable*, Void*),
    as_string : Proc(ID3D10EffectMatrixVariable*, Void*),
    as_shader_resource : Proc(ID3D10EffectMatrixVariable*, Void*),
    as_render_target_view : Proc(ID3D10EffectMatrixVariable*, Void*),
    as_depth_stencil_view : Proc(ID3D10EffectMatrixVariable*, Void*),
    as_constant_buffer : Proc(ID3D10EffectMatrixVariable*, Void*),
    as_shader : Proc(ID3D10EffectMatrixVariable*, Void*),
    as_blend : Proc(ID3D10EffectMatrixVariable*, Void*),
    as_depth_stencil : Proc(ID3D10EffectMatrixVariable*, Void*),
    as_rasterizer : Proc(ID3D10EffectMatrixVariable*, Void*),
    as_sampler : Proc(ID3D10EffectMatrixVariable*, Void*),
    set_raw_value : Proc(ID3D10EffectMatrixVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_raw_value : Proc(ID3D10EffectMatrixVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_matrix : Proc(ID3D10EffectMatrixVariable*, Float32*, Win32cr::Foundation::HRESULT),
    get_matrix : Proc(ID3D10EffectMatrixVariable*, Float32*, Win32cr::Foundation::HRESULT),
    set_matrix_array : Proc(ID3D10EffectMatrixVariable*, Float32*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_matrix_array : Proc(ID3D10EffectMatrixVariable*, Float32*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_matrix_transpose : Proc(ID3D10EffectMatrixVariable*, Float32*, Win32cr::Foundation::HRESULT),
    get_matrix_transpose : Proc(ID3D10EffectMatrixVariable*, Float32*, Win32cr::Foundation::HRESULT),
    set_matrix_transpose_array : Proc(ID3D10EffectMatrixVariable*, Float32*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_matrix_transpose_array : Proc(ID3D10EffectMatrixVariable*, Float32*, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10EffectMatrixVariable, lpVtbl : ID3D10EffectMatrixVariableVtbl* do
    GUID = LibC::GUID.new(0x50666c24_u32, 0xb82f_u16, 0x4eed_u16, StaticArray[0xa1_u8, 0x72_u8, 0x5b_u8, 0x6e_u8, 0x7e_u8, 0x85_u8, 0x22_u8, 0xe0_u8])
    def is_valid(this : ID3D10EffectMatrixVariable*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_valid.call(this)
    end
    def get_type(this : ID3D10EffectMatrixVariable*) : Void*
      @lpVtbl.try &.value.get_type.call(this)
    end
    def get_desc(this : ID3D10EffectMatrixVariable*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_annotation_by_index(this : ID3D10EffectMatrixVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_annotation_by_index.call(this, index)
    end
    def get_annotation_by_name(this : ID3D10EffectMatrixVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_annotation_by_name.call(this, name)
    end
    def get_member_by_index(this : ID3D10EffectMatrixVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_member_by_index.call(this, index)
    end
    def get_member_by_name(this : ID3D10EffectMatrixVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_name.call(this, name)
    end
    def get_member_by_semantic(this : ID3D10EffectMatrixVariable*, semantic : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_semantic.call(this, semantic)
    end
    def get_element(this : ID3D10EffectMatrixVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_element.call(this, index)
    end
    def get_parent_constant_buffer(this : ID3D10EffectMatrixVariable*) : Void*
      @lpVtbl.try &.value.get_parent_constant_buffer.call(this)
    end
    def as_scalar(this : ID3D10EffectMatrixVariable*) : Void*
      @lpVtbl.try &.value.as_scalar.call(this)
    end
    def as_vector(this : ID3D10EffectMatrixVariable*) : Void*
      @lpVtbl.try &.value.as_vector.call(this)
    end
    def as_matrix(this : ID3D10EffectMatrixVariable*) : Void*
      @lpVtbl.try &.value.as_matrix.call(this)
    end
    def as_string(this : ID3D10EffectMatrixVariable*) : Void*
      @lpVtbl.try &.value.as_string.call(this)
    end
    def as_shader_resource(this : ID3D10EffectMatrixVariable*) : Void*
      @lpVtbl.try &.value.as_shader_resource.call(this)
    end
    def as_render_target_view(this : ID3D10EffectMatrixVariable*) : Void*
      @lpVtbl.try &.value.as_render_target_view.call(this)
    end
    def as_depth_stencil_view(this : ID3D10EffectMatrixVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil_view.call(this)
    end
    def as_constant_buffer(this : ID3D10EffectMatrixVariable*) : Void*
      @lpVtbl.try &.value.as_constant_buffer.call(this)
    end
    def as_shader(this : ID3D10EffectMatrixVariable*) : Void*
      @lpVtbl.try &.value.as_shader.call(this)
    end
    def as_blend(this : ID3D10EffectMatrixVariable*) : Void*
      @lpVtbl.try &.value.as_blend.call(this)
    end
    def as_depth_stencil(this : ID3D10EffectMatrixVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil.call(this)
    end
    def as_rasterizer(this : ID3D10EffectMatrixVariable*) : Void*
      @lpVtbl.try &.value.as_rasterizer.call(this)
    end
    def as_sampler(this : ID3D10EffectMatrixVariable*) : Void*
      @lpVtbl.try &.value.as_sampler.call(this)
    end
    def set_raw_value(this : ID3D10EffectMatrixVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_raw_value.call(this, pData, offset, byte_count)
    end
    def get_raw_value(this : ID3D10EffectMatrixVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raw_value.call(this, pData, offset, byte_count)
    end
    def set_matrix(this : ID3D10EffectMatrixVariable*, pData : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_matrix.call(this, pData)
    end
    def get_matrix(this : ID3D10EffectMatrixVariable*, pData : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_matrix.call(this, pData)
    end
    def set_matrix_array(this : ID3D10EffectMatrixVariable*, pData : Float32*, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_matrix_array.call(this, pData, offset, count)
    end
    def get_matrix_array(this : ID3D10EffectMatrixVariable*, pData : Float32*, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_matrix_array.call(this, pData, offset, count)
    end
    def set_matrix_transpose(this : ID3D10EffectMatrixVariable*, pData : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_matrix_transpose.call(this, pData)
    end
    def get_matrix_transpose(this : ID3D10EffectMatrixVariable*, pData : Float32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_matrix_transpose.call(this, pData)
    end
    def set_matrix_transpose_array(this : ID3D10EffectMatrixVariable*, pData : Float32*, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_matrix_transpose_array.call(this, pData, offset, count)
    end
    def get_matrix_transpose_array(this : ID3D10EffectMatrixVariable*, pData : Float32*, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_matrix_transpose_array.call(this, pData, offset, count)
    end

  end

  @[Extern]
  record ID3D10EffectStringVariableVtbl,
    is_valid : Proc(ID3D10EffectStringVariable*, Win32cr::Foundation::BOOL),
    get_type : Proc(ID3D10EffectStringVariable*, Void*),
    get_desc : Proc(ID3D10EffectStringVariable*, Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*, Win32cr::Foundation::HRESULT),
    get_annotation_by_index : Proc(ID3D10EffectStringVariable*, UInt32, Void*),
    get_annotation_by_name : Proc(ID3D10EffectStringVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_index : Proc(ID3D10EffectStringVariable*, UInt32, Void*),
    get_member_by_name : Proc(ID3D10EffectStringVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_semantic : Proc(ID3D10EffectStringVariable*, Win32cr::Foundation::PSTR, Void*),
    get_element : Proc(ID3D10EffectStringVariable*, UInt32, Void*),
    get_parent_constant_buffer : Proc(ID3D10EffectStringVariable*, Void*),
    as_scalar : Proc(ID3D10EffectStringVariable*, Void*),
    as_vector : Proc(ID3D10EffectStringVariable*, Void*),
    as_matrix : Proc(ID3D10EffectStringVariable*, Void*),
    as_string : Proc(ID3D10EffectStringVariable*, Void*),
    as_shader_resource : Proc(ID3D10EffectStringVariable*, Void*),
    as_render_target_view : Proc(ID3D10EffectStringVariable*, Void*),
    as_depth_stencil_view : Proc(ID3D10EffectStringVariable*, Void*),
    as_constant_buffer : Proc(ID3D10EffectStringVariable*, Void*),
    as_shader : Proc(ID3D10EffectStringVariable*, Void*),
    as_blend : Proc(ID3D10EffectStringVariable*, Void*),
    as_depth_stencil : Proc(ID3D10EffectStringVariable*, Void*),
    as_rasterizer : Proc(ID3D10EffectStringVariable*, Void*),
    as_sampler : Proc(ID3D10EffectStringVariable*, Void*),
    set_raw_value : Proc(ID3D10EffectStringVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_raw_value : Proc(ID3D10EffectStringVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_string : Proc(ID3D10EffectStringVariable*, Win32cr::Foundation::PSTR*, Win32cr::Foundation::HRESULT),
    get_string_array : Proc(ID3D10EffectStringVariable*, Win32cr::Foundation::PSTR*, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10EffectStringVariable, lpVtbl : ID3D10EffectStringVariableVtbl* do
    GUID = LibC::GUID.new(0x71417501_u32, 0x8df9_u16, 0x4e0a_u16, StaticArray[0xa7_u8, 0x8a_u8, 0x25_u8, 0x5f_u8, 0x97_u8, 0x56_u8, 0xba_u8, 0xff_u8])
    def is_valid(this : ID3D10EffectStringVariable*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_valid.call(this)
    end
    def get_type(this : ID3D10EffectStringVariable*) : Void*
      @lpVtbl.try &.value.get_type.call(this)
    end
    def get_desc(this : ID3D10EffectStringVariable*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_annotation_by_index(this : ID3D10EffectStringVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_annotation_by_index.call(this, index)
    end
    def get_annotation_by_name(this : ID3D10EffectStringVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_annotation_by_name.call(this, name)
    end
    def get_member_by_index(this : ID3D10EffectStringVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_member_by_index.call(this, index)
    end
    def get_member_by_name(this : ID3D10EffectStringVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_name.call(this, name)
    end
    def get_member_by_semantic(this : ID3D10EffectStringVariable*, semantic : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_semantic.call(this, semantic)
    end
    def get_element(this : ID3D10EffectStringVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_element.call(this, index)
    end
    def get_parent_constant_buffer(this : ID3D10EffectStringVariable*) : Void*
      @lpVtbl.try &.value.get_parent_constant_buffer.call(this)
    end
    def as_scalar(this : ID3D10EffectStringVariable*) : Void*
      @lpVtbl.try &.value.as_scalar.call(this)
    end
    def as_vector(this : ID3D10EffectStringVariable*) : Void*
      @lpVtbl.try &.value.as_vector.call(this)
    end
    def as_matrix(this : ID3D10EffectStringVariable*) : Void*
      @lpVtbl.try &.value.as_matrix.call(this)
    end
    def as_string(this : ID3D10EffectStringVariable*) : Void*
      @lpVtbl.try &.value.as_string.call(this)
    end
    def as_shader_resource(this : ID3D10EffectStringVariable*) : Void*
      @lpVtbl.try &.value.as_shader_resource.call(this)
    end
    def as_render_target_view(this : ID3D10EffectStringVariable*) : Void*
      @lpVtbl.try &.value.as_render_target_view.call(this)
    end
    def as_depth_stencil_view(this : ID3D10EffectStringVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil_view.call(this)
    end
    def as_constant_buffer(this : ID3D10EffectStringVariable*) : Void*
      @lpVtbl.try &.value.as_constant_buffer.call(this)
    end
    def as_shader(this : ID3D10EffectStringVariable*) : Void*
      @lpVtbl.try &.value.as_shader.call(this)
    end
    def as_blend(this : ID3D10EffectStringVariable*) : Void*
      @lpVtbl.try &.value.as_blend.call(this)
    end
    def as_depth_stencil(this : ID3D10EffectStringVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil.call(this)
    end
    def as_rasterizer(this : ID3D10EffectStringVariable*) : Void*
      @lpVtbl.try &.value.as_rasterizer.call(this)
    end
    def as_sampler(this : ID3D10EffectStringVariable*) : Void*
      @lpVtbl.try &.value.as_sampler.call(this)
    end
    def set_raw_value(this : ID3D10EffectStringVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_raw_value.call(this, pData, offset, byte_count)
    end
    def get_raw_value(this : ID3D10EffectStringVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raw_value.call(this, pData, offset, byte_count)
    end
    def get_string(this : ID3D10EffectStringVariable*, ppString : Win32cr::Foundation::PSTR*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string.call(this, ppString)
    end
    def get_string_array(this : ID3D10EffectStringVariable*, ppStrings : Win32cr::Foundation::PSTR*, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_string_array.call(this, ppStrings, offset, count)
    end

  end

  @[Extern]
  record ID3D10EffectShaderResourceVariableVtbl,
    is_valid : Proc(ID3D10EffectShaderResourceVariable*, Win32cr::Foundation::BOOL),
    get_type : Proc(ID3D10EffectShaderResourceVariable*, Void*),
    get_desc : Proc(ID3D10EffectShaderResourceVariable*, Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*, Win32cr::Foundation::HRESULT),
    get_annotation_by_index : Proc(ID3D10EffectShaderResourceVariable*, UInt32, Void*),
    get_annotation_by_name : Proc(ID3D10EffectShaderResourceVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_index : Proc(ID3D10EffectShaderResourceVariable*, UInt32, Void*),
    get_member_by_name : Proc(ID3D10EffectShaderResourceVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_semantic : Proc(ID3D10EffectShaderResourceVariable*, Win32cr::Foundation::PSTR, Void*),
    get_element : Proc(ID3D10EffectShaderResourceVariable*, UInt32, Void*),
    get_parent_constant_buffer : Proc(ID3D10EffectShaderResourceVariable*, Void*),
    as_scalar : Proc(ID3D10EffectShaderResourceVariable*, Void*),
    as_vector : Proc(ID3D10EffectShaderResourceVariable*, Void*),
    as_matrix : Proc(ID3D10EffectShaderResourceVariable*, Void*),
    as_string : Proc(ID3D10EffectShaderResourceVariable*, Void*),
    as_shader_resource : Proc(ID3D10EffectShaderResourceVariable*, Void*),
    as_render_target_view : Proc(ID3D10EffectShaderResourceVariable*, Void*),
    as_depth_stencil_view : Proc(ID3D10EffectShaderResourceVariable*, Void*),
    as_constant_buffer : Proc(ID3D10EffectShaderResourceVariable*, Void*),
    as_shader : Proc(ID3D10EffectShaderResourceVariable*, Void*),
    as_blend : Proc(ID3D10EffectShaderResourceVariable*, Void*),
    as_depth_stencil : Proc(ID3D10EffectShaderResourceVariable*, Void*),
    as_rasterizer : Proc(ID3D10EffectShaderResourceVariable*, Void*),
    as_sampler : Proc(ID3D10EffectShaderResourceVariable*, Void*),
    set_raw_value : Proc(ID3D10EffectShaderResourceVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_raw_value : Proc(ID3D10EffectShaderResourceVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_resource : Proc(ID3D10EffectShaderResourceVariable*, Void*, Win32cr::Foundation::HRESULT),
    get_resource : Proc(ID3D10EffectShaderResourceVariable*, Void**, Win32cr::Foundation::HRESULT),
    set_resource_array : Proc(ID3D10EffectShaderResourceVariable*, Void**, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_resource_array : Proc(ID3D10EffectShaderResourceVariable*, Void**, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10EffectShaderResourceVariable, lpVtbl : ID3D10EffectShaderResourceVariableVtbl* do
    GUID = LibC::GUID.new(0xc0a7157b_u32, 0xd872_u16, 0x4b1d_u16, StaticArray[0x80_u8, 0x73_u8, 0xef_u8, 0xc2_u8, 0xac_u8, 0xd4_u8, 0xb1_u8, 0xfc_u8])
    def is_valid(this : ID3D10EffectShaderResourceVariable*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_valid.call(this)
    end
    def get_type(this : ID3D10EffectShaderResourceVariable*) : Void*
      @lpVtbl.try &.value.get_type.call(this)
    end
    def get_desc(this : ID3D10EffectShaderResourceVariable*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_annotation_by_index(this : ID3D10EffectShaderResourceVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_annotation_by_index.call(this, index)
    end
    def get_annotation_by_name(this : ID3D10EffectShaderResourceVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_annotation_by_name.call(this, name)
    end
    def get_member_by_index(this : ID3D10EffectShaderResourceVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_member_by_index.call(this, index)
    end
    def get_member_by_name(this : ID3D10EffectShaderResourceVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_name.call(this, name)
    end
    def get_member_by_semantic(this : ID3D10EffectShaderResourceVariable*, semantic : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_semantic.call(this, semantic)
    end
    def get_element(this : ID3D10EffectShaderResourceVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_element.call(this, index)
    end
    def get_parent_constant_buffer(this : ID3D10EffectShaderResourceVariable*) : Void*
      @lpVtbl.try &.value.get_parent_constant_buffer.call(this)
    end
    def as_scalar(this : ID3D10EffectShaderResourceVariable*) : Void*
      @lpVtbl.try &.value.as_scalar.call(this)
    end
    def as_vector(this : ID3D10EffectShaderResourceVariable*) : Void*
      @lpVtbl.try &.value.as_vector.call(this)
    end
    def as_matrix(this : ID3D10EffectShaderResourceVariable*) : Void*
      @lpVtbl.try &.value.as_matrix.call(this)
    end
    def as_string(this : ID3D10EffectShaderResourceVariable*) : Void*
      @lpVtbl.try &.value.as_string.call(this)
    end
    def as_shader_resource(this : ID3D10EffectShaderResourceVariable*) : Void*
      @lpVtbl.try &.value.as_shader_resource.call(this)
    end
    def as_render_target_view(this : ID3D10EffectShaderResourceVariable*) : Void*
      @lpVtbl.try &.value.as_render_target_view.call(this)
    end
    def as_depth_stencil_view(this : ID3D10EffectShaderResourceVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil_view.call(this)
    end
    def as_constant_buffer(this : ID3D10EffectShaderResourceVariable*) : Void*
      @lpVtbl.try &.value.as_constant_buffer.call(this)
    end
    def as_shader(this : ID3D10EffectShaderResourceVariable*) : Void*
      @lpVtbl.try &.value.as_shader.call(this)
    end
    def as_blend(this : ID3D10EffectShaderResourceVariable*) : Void*
      @lpVtbl.try &.value.as_blend.call(this)
    end
    def as_depth_stencil(this : ID3D10EffectShaderResourceVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil.call(this)
    end
    def as_rasterizer(this : ID3D10EffectShaderResourceVariable*) : Void*
      @lpVtbl.try &.value.as_rasterizer.call(this)
    end
    def as_sampler(this : ID3D10EffectShaderResourceVariable*) : Void*
      @lpVtbl.try &.value.as_sampler.call(this)
    end
    def set_raw_value(this : ID3D10EffectShaderResourceVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_raw_value.call(this, pData, offset, byte_count)
    end
    def get_raw_value(this : ID3D10EffectShaderResourceVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raw_value.call(this, pData, offset, byte_count)
    end
    def set_resource(this : ID3D10EffectShaderResourceVariable*, pResource : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_resource.call(this, pResource)
    end
    def get_resource(this : ID3D10EffectShaderResourceVariable*, ppResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_resource.call(this, ppResource)
    end
    def set_resource_array(this : ID3D10EffectShaderResourceVariable*, ppResources : Void**, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_resource_array.call(this, ppResources, offset, count)
    end
    def get_resource_array(this : ID3D10EffectShaderResourceVariable*, ppResources : Void**, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_resource_array.call(this, ppResources, offset, count)
    end

  end

  @[Extern]
  record ID3D10EffectRenderTargetViewVariableVtbl,
    is_valid : Proc(ID3D10EffectRenderTargetViewVariable*, Win32cr::Foundation::BOOL),
    get_type : Proc(ID3D10EffectRenderTargetViewVariable*, Void*),
    get_desc : Proc(ID3D10EffectRenderTargetViewVariable*, Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*, Win32cr::Foundation::HRESULT),
    get_annotation_by_index : Proc(ID3D10EffectRenderTargetViewVariable*, UInt32, Void*),
    get_annotation_by_name : Proc(ID3D10EffectRenderTargetViewVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_index : Proc(ID3D10EffectRenderTargetViewVariable*, UInt32, Void*),
    get_member_by_name : Proc(ID3D10EffectRenderTargetViewVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_semantic : Proc(ID3D10EffectRenderTargetViewVariable*, Win32cr::Foundation::PSTR, Void*),
    get_element : Proc(ID3D10EffectRenderTargetViewVariable*, UInt32, Void*),
    get_parent_constant_buffer : Proc(ID3D10EffectRenderTargetViewVariable*, Void*),
    as_scalar : Proc(ID3D10EffectRenderTargetViewVariable*, Void*),
    as_vector : Proc(ID3D10EffectRenderTargetViewVariable*, Void*),
    as_matrix : Proc(ID3D10EffectRenderTargetViewVariable*, Void*),
    as_string : Proc(ID3D10EffectRenderTargetViewVariable*, Void*),
    as_shader_resource : Proc(ID3D10EffectRenderTargetViewVariable*, Void*),
    as_render_target_view : Proc(ID3D10EffectRenderTargetViewVariable*, Void*),
    as_depth_stencil_view : Proc(ID3D10EffectRenderTargetViewVariable*, Void*),
    as_constant_buffer : Proc(ID3D10EffectRenderTargetViewVariable*, Void*),
    as_shader : Proc(ID3D10EffectRenderTargetViewVariable*, Void*),
    as_blend : Proc(ID3D10EffectRenderTargetViewVariable*, Void*),
    as_depth_stencil : Proc(ID3D10EffectRenderTargetViewVariable*, Void*),
    as_rasterizer : Proc(ID3D10EffectRenderTargetViewVariable*, Void*),
    as_sampler : Proc(ID3D10EffectRenderTargetViewVariable*, Void*),
    set_raw_value : Proc(ID3D10EffectRenderTargetViewVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_raw_value : Proc(ID3D10EffectRenderTargetViewVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_render_target : Proc(ID3D10EffectRenderTargetViewVariable*, Void*, Win32cr::Foundation::HRESULT),
    get_render_target : Proc(ID3D10EffectRenderTargetViewVariable*, Void**, Win32cr::Foundation::HRESULT),
    set_render_target_array : Proc(ID3D10EffectRenderTargetViewVariable*, Void**, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_render_target_array : Proc(ID3D10EffectRenderTargetViewVariable*, Void**, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10EffectRenderTargetViewVariable, lpVtbl : ID3D10EffectRenderTargetViewVariableVtbl* do
    GUID = LibC::GUID.new(0x28ca0cc3_u32, 0xc2c9_u16, 0x40bb_u16, StaticArray[0xb5_u8, 0x7f_u8, 0x67_u8, 0xb7_u8, 0x37_u8, 0x12_u8, 0x2b_u8, 0x17_u8])
    def is_valid(this : ID3D10EffectRenderTargetViewVariable*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_valid.call(this)
    end
    def get_type(this : ID3D10EffectRenderTargetViewVariable*) : Void*
      @lpVtbl.try &.value.get_type.call(this)
    end
    def get_desc(this : ID3D10EffectRenderTargetViewVariable*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_annotation_by_index(this : ID3D10EffectRenderTargetViewVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_annotation_by_index.call(this, index)
    end
    def get_annotation_by_name(this : ID3D10EffectRenderTargetViewVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_annotation_by_name.call(this, name)
    end
    def get_member_by_index(this : ID3D10EffectRenderTargetViewVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_member_by_index.call(this, index)
    end
    def get_member_by_name(this : ID3D10EffectRenderTargetViewVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_name.call(this, name)
    end
    def get_member_by_semantic(this : ID3D10EffectRenderTargetViewVariable*, semantic : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_semantic.call(this, semantic)
    end
    def get_element(this : ID3D10EffectRenderTargetViewVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_element.call(this, index)
    end
    def get_parent_constant_buffer(this : ID3D10EffectRenderTargetViewVariable*) : Void*
      @lpVtbl.try &.value.get_parent_constant_buffer.call(this)
    end
    def as_scalar(this : ID3D10EffectRenderTargetViewVariable*) : Void*
      @lpVtbl.try &.value.as_scalar.call(this)
    end
    def as_vector(this : ID3D10EffectRenderTargetViewVariable*) : Void*
      @lpVtbl.try &.value.as_vector.call(this)
    end
    def as_matrix(this : ID3D10EffectRenderTargetViewVariable*) : Void*
      @lpVtbl.try &.value.as_matrix.call(this)
    end
    def as_string(this : ID3D10EffectRenderTargetViewVariable*) : Void*
      @lpVtbl.try &.value.as_string.call(this)
    end
    def as_shader_resource(this : ID3D10EffectRenderTargetViewVariable*) : Void*
      @lpVtbl.try &.value.as_shader_resource.call(this)
    end
    def as_render_target_view(this : ID3D10EffectRenderTargetViewVariable*) : Void*
      @lpVtbl.try &.value.as_render_target_view.call(this)
    end
    def as_depth_stencil_view(this : ID3D10EffectRenderTargetViewVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil_view.call(this)
    end
    def as_constant_buffer(this : ID3D10EffectRenderTargetViewVariable*) : Void*
      @lpVtbl.try &.value.as_constant_buffer.call(this)
    end
    def as_shader(this : ID3D10EffectRenderTargetViewVariable*) : Void*
      @lpVtbl.try &.value.as_shader.call(this)
    end
    def as_blend(this : ID3D10EffectRenderTargetViewVariable*) : Void*
      @lpVtbl.try &.value.as_blend.call(this)
    end
    def as_depth_stencil(this : ID3D10EffectRenderTargetViewVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil.call(this)
    end
    def as_rasterizer(this : ID3D10EffectRenderTargetViewVariable*) : Void*
      @lpVtbl.try &.value.as_rasterizer.call(this)
    end
    def as_sampler(this : ID3D10EffectRenderTargetViewVariable*) : Void*
      @lpVtbl.try &.value.as_sampler.call(this)
    end
    def set_raw_value(this : ID3D10EffectRenderTargetViewVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_raw_value.call(this, pData, offset, byte_count)
    end
    def get_raw_value(this : ID3D10EffectRenderTargetViewVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raw_value.call(this, pData, offset, byte_count)
    end
    def set_render_target(this : ID3D10EffectRenderTargetViewVariable*, pResource : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_render_target.call(this, pResource)
    end
    def get_render_target(this : ID3D10EffectRenderTargetViewVariable*, ppResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_render_target.call(this, ppResource)
    end
    def set_render_target_array(this : ID3D10EffectRenderTargetViewVariable*, ppResources : Void**, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_render_target_array.call(this, ppResources, offset, count)
    end
    def get_render_target_array(this : ID3D10EffectRenderTargetViewVariable*, ppResources : Void**, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_render_target_array.call(this, ppResources, offset, count)
    end

  end

  @[Extern]
  record ID3D10EffectDepthStencilViewVariableVtbl,
    is_valid : Proc(ID3D10EffectDepthStencilViewVariable*, Win32cr::Foundation::BOOL),
    get_type : Proc(ID3D10EffectDepthStencilViewVariable*, Void*),
    get_desc : Proc(ID3D10EffectDepthStencilViewVariable*, Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*, Win32cr::Foundation::HRESULT),
    get_annotation_by_index : Proc(ID3D10EffectDepthStencilViewVariable*, UInt32, Void*),
    get_annotation_by_name : Proc(ID3D10EffectDepthStencilViewVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_index : Proc(ID3D10EffectDepthStencilViewVariable*, UInt32, Void*),
    get_member_by_name : Proc(ID3D10EffectDepthStencilViewVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_semantic : Proc(ID3D10EffectDepthStencilViewVariable*, Win32cr::Foundation::PSTR, Void*),
    get_element : Proc(ID3D10EffectDepthStencilViewVariable*, UInt32, Void*),
    get_parent_constant_buffer : Proc(ID3D10EffectDepthStencilViewVariable*, Void*),
    as_scalar : Proc(ID3D10EffectDepthStencilViewVariable*, Void*),
    as_vector : Proc(ID3D10EffectDepthStencilViewVariable*, Void*),
    as_matrix : Proc(ID3D10EffectDepthStencilViewVariable*, Void*),
    as_string : Proc(ID3D10EffectDepthStencilViewVariable*, Void*),
    as_shader_resource : Proc(ID3D10EffectDepthStencilViewVariable*, Void*),
    as_render_target_view : Proc(ID3D10EffectDepthStencilViewVariable*, Void*),
    as_depth_stencil_view : Proc(ID3D10EffectDepthStencilViewVariable*, Void*),
    as_constant_buffer : Proc(ID3D10EffectDepthStencilViewVariable*, Void*),
    as_shader : Proc(ID3D10EffectDepthStencilViewVariable*, Void*),
    as_blend : Proc(ID3D10EffectDepthStencilViewVariable*, Void*),
    as_depth_stencil : Proc(ID3D10EffectDepthStencilViewVariable*, Void*),
    as_rasterizer : Proc(ID3D10EffectDepthStencilViewVariable*, Void*),
    as_sampler : Proc(ID3D10EffectDepthStencilViewVariable*, Void*),
    set_raw_value : Proc(ID3D10EffectDepthStencilViewVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_raw_value : Proc(ID3D10EffectDepthStencilViewVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_depth_stencil : Proc(ID3D10EffectDepthStencilViewVariable*, Void*, Win32cr::Foundation::HRESULT),
    get_depth_stencil : Proc(ID3D10EffectDepthStencilViewVariable*, Void**, Win32cr::Foundation::HRESULT),
    set_depth_stencil_array : Proc(ID3D10EffectDepthStencilViewVariable*, Void**, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_depth_stencil_array : Proc(ID3D10EffectDepthStencilViewVariable*, Void**, UInt32, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10EffectDepthStencilViewVariable, lpVtbl : ID3D10EffectDepthStencilViewVariableVtbl* do
    GUID = LibC::GUID.new(0x3e02c918_u32, 0xcc79_u16, 0x4985_u16, StaticArray[0xb6_u8, 0x22_u8, 0x2d_u8, 0x92_u8, 0xad_u8, 0x70_u8, 0x16_u8, 0x23_u8])
    def is_valid(this : ID3D10EffectDepthStencilViewVariable*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_valid.call(this)
    end
    def get_type(this : ID3D10EffectDepthStencilViewVariable*) : Void*
      @lpVtbl.try &.value.get_type.call(this)
    end
    def get_desc(this : ID3D10EffectDepthStencilViewVariable*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_annotation_by_index(this : ID3D10EffectDepthStencilViewVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_annotation_by_index.call(this, index)
    end
    def get_annotation_by_name(this : ID3D10EffectDepthStencilViewVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_annotation_by_name.call(this, name)
    end
    def get_member_by_index(this : ID3D10EffectDepthStencilViewVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_member_by_index.call(this, index)
    end
    def get_member_by_name(this : ID3D10EffectDepthStencilViewVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_name.call(this, name)
    end
    def get_member_by_semantic(this : ID3D10EffectDepthStencilViewVariable*, semantic : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_semantic.call(this, semantic)
    end
    def get_element(this : ID3D10EffectDepthStencilViewVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_element.call(this, index)
    end
    def get_parent_constant_buffer(this : ID3D10EffectDepthStencilViewVariable*) : Void*
      @lpVtbl.try &.value.get_parent_constant_buffer.call(this)
    end
    def as_scalar(this : ID3D10EffectDepthStencilViewVariable*) : Void*
      @lpVtbl.try &.value.as_scalar.call(this)
    end
    def as_vector(this : ID3D10EffectDepthStencilViewVariable*) : Void*
      @lpVtbl.try &.value.as_vector.call(this)
    end
    def as_matrix(this : ID3D10EffectDepthStencilViewVariable*) : Void*
      @lpVtbl.try &.value.as_matrix.call(this)
    end
    def as_string(this : ID3D10EffectDepthStencilViewVariable*) : Void*
      @lpVtbl.try &.value.as_string.call(this)
    end
    def as_shader_resource(this : ID3D10EffectDepthStencilViewVariable*) : Void*
      @lpVtbl.try &.value.as_shader_resource.call(this)
    end
    def as_render_target_view(this : ID3D10EffectDepthStencilViewVariable*) : Void*
      @lpVtbl.try &.value.as_render_target_view.call(this)
    end
    def as_depth_stencil_view(this : ID3D10EffectDepthStencilViewVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil_view.call(this)
    end
    def as_constant_buffer(this : ID3D10EffectDepthStencilViewVariable*) : Void*
      @lpVtbl.try &.value.as_constant_buffer.call(this)
    end
    def as_shader(this : ID3D10EffectDepthStencilViewVariable*) : Void*
      @lpVtbl.try &.value.as_shader.call(this)
    end
    def as_blend(this : ID3D10EffectDepthStencilViewVariable*) : Void*
      @lpVtbl.try &.value.as_blend.call(this)
    end
    def as_depth_stencil(this : ID3D10EffectDepthStencilViewVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil.call(this)
    end
    def as_rasterizer(this : ID3D10EffectDepthStencilViewVariable*) : Void*
      @lpVtbl.try &.value.as_rasterizer.call(this)
    end
    def as_sampler(this : ID3D10EffectDepthStencilViewVariable*) : Void*
      @lpVtbl.try &.value.as_sampler.call(this)
    end
    def set_raw_value(this : ID3D10EffectDepthStencilViewVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_raw_value.call(this, pData, offset, byte_count)
    end
    def get_raw_value(this : ID3D10EffectDepthStencilViewVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raw_value.call(this, pData, offset, byte_count)
    end
    def set_depth_stencil(this : ID3D10EffectDepthStencilViewVariable*, pResource : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_depth_stencil.call(this, pResource)
    end
    def get_depth_stencil(this : ID3D10EffectDepthStencilViewVariable*, ppResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_depth_stencil.call(this, ppResource)
    end
    def set_depth_stencil_array(this : ID3D10EffectDepthStencilViewVariable*, ppResources : Void**, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_depth_stencil_array.call(this, ppResources, offset, count)
    end
    def get_depth_stencil_array(this : ID3D10EffectDepthStencilViewVariable*, ppResources : Void**, offset : UInt32, count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_depth_stencil_array.call(this, ppResources, offset, count)
    end

  end

  @[Extern]
  record ID3D10EffectConstantBufferVtbl,
    is_valid : Proc(ID3D10EffectConstantBuffer*, Win32cr::Foundation::BOOL),
    get_type : Proc(ID3D10EffectConstantBuffer*, Void*),
    get_desc : Proc(ID3D10EffectConstantBuffer*, Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*, Win32cr::Foundation::HRESULT),
    get_annotation_by_index : Proc(ID3D10EffectConstantBuffer*, UInt32, Void*),
    get_annotation_by_name : Proc(ID3D10EffectConstantBuffer*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_index : Proc(ID3D10EffectConstantBuffer*, UInt32, Void*),
    get_member_by_name : Proc(ID3D10EffectConstantBuffer*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_semantic : Proc(ID3D10EffectConstantBuffer*, Win32cr::Foundation::PSTR, Void*),
    get_element : Proc(ID3D10EffectConstantBuffer*, UInt32, Void*),
    get_parent_constant_buffer : Proc(ID3D10EffectConstantBuffer*, Void*),
    as_scalar : Proc(ID3D10EffectConstantBuffer*, Void*),
    as_vector : Proc(ID3D10EffectConstantBuffer*, Void*),
    as_matrix : Proc(ID3D10EffectConstantBuffer*, Void*),
    as_string : Proc(ID3D10EffectConstantBuffer*, Void*),
    as_shader_resource : Proc(ID3D10EffectConstantBuffer*, Void*),
    as_render_target_view : Proc(ID3D10EffectConstantBuffer*, Void*),
    as_depth_stencil_view : Proc(ID3D10EffectConstantBuffer*, Void*),
    as_constant_buffer : Proc(ID3D10EffectConstantBuffer*, Void*),
    as_shader : Proc(ID3D10EffectConstantBuffer*, Void*),
    as_blend : Proc(ID3D10EffectConstantBuffer*, Void*),
    as_depth_stencil : Proc(ID3D10EffectConstantBuffer*, Void*),
    as_rasterizer : Proc(ID3D10EffectConstantBuffer*, Void*),
    as_sampler : Proc(ID3D10EffectConstantBuffer*, Void*),
    set_raw_value : Proc(ID3D10EffectConstantBuffer*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_raw_value : Proc(ID3D10EffectConstantBuffer*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    set_constant_buffer : Proc(ID3D10EffectConstantBuffer*, Void*, Win32cr::Foundation::HRESULT),
    get_constant_buffer : Proc(ID3D10EffectConstantBuffer*, Void**, Win32cr::Foundation::HRESULT),
    set_texture_buffer : Proc(ID3D10EffectConstantBuffer*, Void*, Win32cr::Foundation::HRESULT),
    get_texture_buffer : Proc(ID3D10EffectConstantBuffer*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10EffectConstantBuffer, lpVtbl : ID3D10EffectConstantBufferVtbl* do
    GUID = LibC::GUID.new(0x56648f4d_u32, 0xcc8b_u16, 0x4444_u16, StaticArray[0xa5_u8, 0xad_u8, 0xb5_u8, 0xa3_u8, 0xd7_u8, 0x6e_u8, 0x91_u8, 0xb3_u8])
    def is_valid(this : ID3D10EffectConstantBuffer*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_valid.call(this)
    end
    def get_type(this : ID3D10EffectConstantBuffer*) : Void*
      @lpVtbl.try &.value.get_type.call(this)
    end
    def get_desc(this : ID3D10EffectConstantBuffer*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_annotation_by_index(this : ID3D10EffectConstantBuffer*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_annotation_by_index.call(this, index)
    end
    def get_annotation_by_name(this : ID3D10EffectConstantBuffer*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_annotation_by_name.call(this, name)
    end
    def get_member_by_index(this : ID3D10EffectConstantBuffer*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_member_by_index.call(this, index)
    end
    def get_member_by_name(this : ID3D10EffectConstantBuffer*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_name.call(this, name)
    end
    def get_member_by_semantic(this : ID3D10EffectConstantBuffer*, semantic : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_semantic.call(this, semantic)
    end
    def get_element(this : ID3D10EffectConstantBuffer*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_element.call(this, index)
    end
    def get_parent_constant_buffer(this : ID3D10EffectConstantBuffer*) : Void*
      @lpVtbl.try &.value.get_parent_constant_buffer.call(this)
    end
    def as_scalar(this : ID3D10EffectConstantBuffer*) : Void*
      @lpVtbl.try &.value.as_scalar.call(this)
    end
    def as_vector(this : ID3D10EffectConstantBuffer*) : Void*
      @lpVtbl.try &.value.as_vector.call(this)
    end
    def as_matrix(this : ID3D10EffectConstantBuffer*) : Void*
      @lpVtbl.try &.value.as_matrix.call(this)
    end
    def as_string(this : ID3D10EffectConstantBuffer*) : Void*
      @lpVtbl.try &.value.as_string.call(this)
    end
    def as_shader_resource(this : ID3D10EffectConstantBuffer*) : Void*
      @lpVtbl.try &.value.as_shader_resource.call(this)
    end
    def as_render_target_view(this : ID3D10EffectConstantBuffer*) : Void*
      @lpVtbl.try &.value.as_render_target_view.call(this)
    end
    def as_depth_stencil_view(this : ID3D10EffectConstantBuffer*) : Void*
      @lpVtbl.try &.value.as_depth_stencil_view.call(this)
    end
    def as_constant_buffer(this : ID3D10EffectConstantBuffer*) : Void*
      @lpVtbl.try &.value.as_constant_buffer.call(this)
    end
    def as_shader(this : ID3D10EffectConstantBuffer*) : Void*
      @lpVtbl.try &.value.as_shader.call(this)
    end
    def as_blend(this : ID3D10EffectConstantBuffer*) : Void*
      @lpVtbl.try &.value.as_blend.call(this)
    end
    def as_depth_stencil(this : ID3D10EffectConstantBuffer*) : Void*
      @lpVtbl.try &.value.as_depth_stencil.call(this)
    end
    def as_rasterizer(this : ID3D10EffectConstantBuffer*) : Void*
      @lpVtbl.try &.value.as_rasterizer.call(this)
    end
    def as_sampler(this : ID3D10EffectConstantBuffer*) : Void*
      @lpVtbl.try &.value.as_sampler.call(this)
    end
    def set_raw_value(this : ID3D10EffectConstantBuffer*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_raw_value.call(this, pData, offset, byte_count)
    end
    def get_raw_value(this : ID3D10EffectConstantBuffer*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raw_value.call(this, pData, offset, byte_count)
    end
    def set_constant_buffer(this : ID3D10EffectConstantBuffer*, pConstantBuffer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_constant_buffer.call(this, pConstantBuffer)
    end
    def get_constant_buffer(this : ID3D10EffectConstantBuffer*, ppConstantBuffer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_constant_buffer.call(this, ppConstantBuffer)
    end
    def set_texture_buffer(this : ID3D10EffectConstantBuffer*, pTextureBuffer : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_texture_buffer.call(this, pTextureBuffer)
    end
    def get_texture_buffer(this : ID3D10EffectConstantBuffer*, ppTextureBuffer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_texture_buffer.call(this, ppTextureBuffer)
    end

  end

  @[Extern]
  record ID3D10EffectShaderVariableVtbl,
    is_valid : Proc(ID3D10EffectShaderVariable*, Win32cr::Foundation::BOOL),
    get_type : Proc(ID3D10EffectShaderVariable*, Void*),
    get_desc : Proc(ID3D10EffectShaderVariable*, Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*, Win32cr::Foundation::HRESULT),
    get_annotation_by_index : Proc(ID3D10EffectShaderVariable*, UInt32, Void*),
    get_annotation_by_name : Proc(ID3D10EffectShaderVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_index : Proc(ID3D10EffectShaderVariable*, UInt32, Void*),
    get_member_by_name : Proc(ID3D10EffectShaderVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_semantic : Proc(ID3D10EffectShaderVariable*, Win32cr::Foundation::PSTR, Void*),
    get_element : Proc(ID3D10EffectShaderVariable*, UInt32, Void*),
    get_parent_constant_buffer : Proc(ID3D10EffectShaderVariable*, Void*),
    as_scalar : Proc(ID3D10EffectShaderVariable*, Void*),
    as_vector : Proc(ID3D10EffectShaderVariable*, Void*),
    as_matrix : Proc(ID3D10EffectShaderVariable*, Void*),
    as_string : Proc(ID3D10EffectShaderVariable*, Void*),
    as_shader_resource : Proc(ID3D10EffectShaderVariable*, Void*),
    as_render_target_view : Proc(ID3D10EffectShaderVariable*, Void*),
    as_depth_stencil_view : Proc(ID3D10EffectShaderVariable*, Void*),
    as_constant_buffer : Proc(ID3D10EffectShaderVariable*, Void*),
    as_shader : Proc(ID3D10EffectShaderVariable*, Void*),
    as_blend : Proc(ID3D10EffectShaderVariable*, Void*),
    as_depth_stencil : Proc(ID3D10EffectShaderVariable*, Void*),
    as_rasterizer : Proc(ID3D10EffectShaderVariable*, Void*),
    as_sampler : Proc(ID3D10EffectShaderVariable*, Void*),
    set_raw_value : Proc(ID3D10EffectShaderVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_raw_value : Proc(ID3D10EffectShaderVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_shader_desc : Proc(ID3D10EffectShaderVariable*, UInt32, Win32cr::Graphics::Direct3D10::D3D10_EFFECT_SHADER_DESC*, Win32cr::Foundation::HRESULT),
    get_vertex_shader : Proc(ID3D10EffectShaderVariable*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_geometry_shader : Proc(ID3D10EffectShaderVariable*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_pixel_shader : Proc(ID3D10EffectShaderVariable*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_input_signature_element_desc : Proc(ID3D10EffectShaderVariable*, UInt32, UInt32, Win32cr::Graphics::Direct3D10::D3D10_SIGNATURE_PARAMETER_DESC*, Win32cr::Foundation::HRESULT),
    get_output_signature_element_desc : Proc(ID3D10EffectShaderVariable*, UInt32, UInt32, Win32cr::Graphics::Direct3D10::D3D10_SIGNATURE_PARAMETER_DESC*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10EffectShaderVariable, lpVtbl : ID3D10EffectShaderVariableVtbl* do
    GUID = LibC::GUID.new(0x80849279_u32, 0xc799_u16, 0x4797_u16, StaticArray[0x8c_u8, 0x33_u8, 0x4_u8, 0x7_u8, 0xa0_u8, 0x7d_u8, 0x9e_u8, 0x6_u8])
    def is_valid(this : ID3D10EffectShaderVariable*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_valid.call(this)
    end
    def get_type(this : ID3D10EffectShaderVariable*) : Void*
      @lpVtbl.try &.value.get_type.call(this)
    end
    def get_desc(this : ID3D10EffectShaderVariable*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_annotation_by_index(this : ID3D10EffectShaderVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_annotation_by_index.call(this, index)
    end
    def get_annotation_by_name(this : ID3D10EffectShaderVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_annotation_by_name.call(this, name)
    end
    def get_member_by_index(this : ID3D10EffectShaderVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_member_by_index.call(this, index)
    end
    def get_member_by_name(this : ID3D10EffectShaderVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_name.call(this, name)
    end
    def get_member_by_semantic(this : ID3D10EffectShaderVariable*, semantic : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_semantic.call(this, semantic)
    end
    def get_element(this : ID3D10EffectShaderVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_element.call(this, index)
    end
    def get_parent_constant_buffer(this : ID3D10EffectShaderVariable*) : Void*
      @lpVtbl.try &.value.get_parent_constant_buffer.call(this)
    end
    def as_scalar(this : ID3D10EffectShaderVariable*) : Void*
      @lpVtbl.try &.value.as_scalar.call(this)
    end
    def as_vector(this : ID3D10EffectShaderVariable*) : Void*
      @lpVtbl.try &.value.as_vector.call(this)
    end
    def as_matrix(this : ID3D10EffectShaderVariable*) : Void*
      @lpVtbl.try &.value.as_matrix.call(this)
    end
    def as_string(this : ID3D10EffectShaderVariable*) : Void*
      @lpVtbl.try &.value.as_string.call(this)
    end
    def as_shader_resource(this : ID3D10EffectShaderVariable*) : Void*
      @lpVtbl.try &.value.as_shader_resource.call(this)
    end
    def as_render_target_view(this : ID3D10EffectShaderVariable*) : Void*
      @lpVtbl.try &.value.as_render_target_view.call(this)
    end
    def as_depth_stencil_view(this : ID3D10EffectShaderVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil_view.call(this)
    end
    def as_constant_buffer(this : ID3D10EffectShaderVariable*) : Void*
      @lpVtbl.try &.value.as_constant_buffer.call(this)
    end
    def as_shader(this : ID3D10EffectShaderVariable*) : Void*
      @lpVtbl.try &.value.as_shader.call(this)
    end
    def as_blend(this : ID3D10EffectShaderVariable*) : Void*
      @lpVtbl.try &.value.as_blend.call(this)
    end
    def as_depth_stencil(this : ID3D10EffectShaderVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil.call(this)
    end
    def as_rasterizer(this : ID3D10EffectShaderVariable*) : Void*
      @lpVtbl.try &.value.as_rasterizer.call(this)
    end
    def as_sampler(this : ID3D10EffectShaderVariable*) : Void*
      @lpVtbl.try &.value.as_sampler.call(this)
    end
    def set_raw_value(this : ID3D10EffectShaderVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_raw_value.call(this, pData, offset, byte_count)
    end
    def get_raw_value(this : ID3D10EffectShaderVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raw_value.call(this, pData, offset, byte_count)
    end
    def get_shader_desc(this : ID3D10EffectShaderVariable*, shader_index : UInt32, pDesc : Win32cr::Graphics::Direct3D10::D3D10_EFFECT_SHADER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_shader_desc.call(this, shader_index, pDesc)
    end
    def get_vertex_shader(this : ID3D10EffectShaderVariable*, shader_index : UInt32, ppVS : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_vertex_shader.call(this, shader_index, ppVS)
    end
    def get_geometry_shader(this : ID3D10EffectShaderVariable*, shader_index : UInt32, ppGS : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_geometry_shader.call(this, shader_index, ppGS)
    end
    def get_pixel_shader(this : ID3D10EffectShaderVariable*, shader_index : UInt32, ppPS : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pixel_shader.call(this, shader_index, ppPS)
    end
    def get_input_signature_element_desc(this : ID3D10EffectShaderVariable*, shader_index : UInt32, element : UInt32, pDesc : Win32cr::Graphics::Direct3D10::D3D10_SIGNATURE_PARAMETER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_signature_element_desc.call(this, shader_index, element, pDesc)
    end
    def get_output_signature_element_desc(this : ID3D10EffectShaderVariable*, shader_index : UInt32, element : UInt32, pDesc : Win32cr::Graphics::Direct3D10::D3D10_SIGNATURE_PARAMETER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_signature_element_desc.call(this, shader_index, element, pDesc)
    end

  end

  @[Extern]
  record ID3D10EffectBlendVariableVtbl,
    is_valid : Proc(ID3D10EffectBlendVariable*, Win32cr::Foundation::BOOL),
    get_type : Proc(ID3D10EffectBlendVariable*, Void*),
    get_desc : Proc(ID3D10EffectBlendVariable*, Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*, Win32cr::Foundation::HRESULT),
    get_annotation_by_index : Proc(ID3D10EffectBlendVariable*, UInt32, Void*),
    get_annotation_by_name : Proc(ID3D10EffectBlendVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_index : Proc(ID3D10EffectBlendVariable*, UInt32, Void*),
    get_member_by_name : Proc(ID3D10EffectBlendVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_semantic : Proc(ID3D10EffectBlendVariable*, Win32cr::Foundation::PSTR, Void*),
    get_element : Proc(ID3D10EffectBlendVariable*, UInt32, Void*),
    get_parent_constant_buffer : Proc(ID3D10EffectBlendVariable*, Void*),
    as_scalar : Proc(ID3D10EffectBlendVariable*, Void*),
    as_vector : Proc(ID3D10EffectBlendVariable*, Void*),
    as_matrix : Proc(ID3D10EffectBlendVariable*, Void*),
    as_string : Proc(ID3D10EffectBlendVariable*, Void*),
    as_shader_resource : Proc(ID3D10EffectBlendVariable*, Void*),
    as_render_target_view : Proc(ID3D10EffectBlendVariable*, Void*),
    as_depth_stencil_view : Proc(ID3D10EffectBlendVariable*, Void*),
    as_constant_buffer : Proc(ID3D10EffectBlendVariable*, Void*),
    as_shader : Proc(ID3D10EffectBlendVariable*, Void*),
    as_blend : Proc(ID3D10EffectBlendVariable*, Void*),
    as_depth_stencil : Proc(ID3D10EffectBlendVariable*, Void*),
    as_rasterizer : Proc(ID3D10EffectBlendVariable*, Void*),
    as_sampler : Proc(ID3D10EffectBlendVariable*, Void*),
    set_raw_value : Proc(ID3D10EffectBlendVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_raw_value : Proc(ID3D10EffectBlendVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_blend_state : Proc(ID3D10EffectBlendVariable*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_backing_store : Proc(ID3D10EffectBlendVariable*, UInt32, Win32cr::Graphics::Direct3D10::D3D10_BLEND_DESC*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10EffectBlendVariable, lpVtbl : ID3D10EffectBlendVariableVtbl* do
    GUID = LibC::GUID.new(0x1fcd2294_u32, 0xdf6d_u16, 0x4eae_u16, StaticArray[0x86_u8, 0xb3_u8, 0xe_u8, 0x91_u8, 0x60_u8, 0xcf_u8, 0xb0_u8, 0x7b_u8])
    def is_valid(this : ID3D10EffectBlendVariable*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_valid.call(this)
    end
    def get_type(this : ID3D10EffectBlendVariable*) : Void*
      @lpVtbl.try &.value.get_type.call(this)
    end
    def get_desc(this : ID3D10EffectBlendVariable*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_annotation_by_index(this : ID3D10EffectBlendVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_annotation_by_index.call(this, index)
    end
    def get_annotation_by_name(this : ID3D10EffectBlendVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_annotation_by_name.call(this, name)
    end
    def get_member_by_index(this : ID3D10EffectBlendVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_member_by_index.call(this, index)
    end
    def get_member_by_name(this : ID3D10EffectBlendVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_name.call(this, name)
    end
    def get_member_by_semantic(this : ID3D10EffectBlendVariable*, semantic : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_semantic.call(this, semantic)
    end
    def get_element(this : ID3D10EffectBlendVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_element.call(this, index)
    end
    def get_parent_constant_buffer(this : ID3D10EffectBlendVariable*) : Void*
      @lpVtbl.try &.value.get_parent_constant_buffer.call(this)
    end
    def as_scalar(this : ID3D10EffectBlendVariable*) : Void*
      @lpVtbl.try &.value.as_scalar.call(this)
    end
    def as_vector(this : ID3D10EffectBlendVariable*) : Void*
      @lpVtbl.try &.value.as_vector.call(this)
    end
    def as_matrix(this : ID3D10EffectBlendVariable*) : Void*
      @lpVtbl.try &.value.as_matrix.call(this)
    end
    def as_string(this : ID3D10EffectBlendVariable*) : Void*
      @lpVtbl.try &.value.as_string.call(this)
    end
    def as_shader_resource(this : ID3D10EffectBlendVariable*) : Void*
      @lpVtbl.try &.value.as_shader_resource.call(this)
    end
    def as_render_target_view(this : ID3D10EffectBlendVariable*) : Void*
      @lpVtbl.try &.value.as_render_target_view.call(this)
    end
    def as_depth_stencil_view(this : ID3D10EffectBlendVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil_view.call(this)
    end
    def as_constant_buffer(this : ID3D10EffectBlendVariable*) : Void*
      @lpVtbl.try &.value.as_constant_buffer.call(this)
    end
    def as_shader(this : ID3D10EffectBlendVariable*) : Void*
      @lpVtbl.try &.value.as_shader.call(this)
    end
    def as_blend(this : ID3D10EffectBlendVariable*) : Void*
      @lpVtbl.try &.value.as_blend.call(this)
    end
    def as_depth_stencil(this : ID3D10EffectBlendVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil.call(this)
    end
    def as_rasterizer(this : ID3D10EffectBlendVariable*) : Void*
      @lpVtbl.try &.value.as_rasterizer.call(this)
    end
    def as_sampler(this : ID3D10EffectBlendVariable*) : Void*
      @lpVtbl.try &.value.as_sampler.call(this)
    end
    def set_raw_value(this : ID3D10EffectBlendVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_raw_value.call(this, pData, offset, byte_count)
    end
    def get_raw_value(this : ID3D10EffectBlendVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raw_value.call(this, pData, offset, byte_count)
    end
    def get_blend_state(this : ID3D10EffectBlendVariable*, index : UInt32, ppBlendState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_blend_state.call(this, index, ppBlendState)
    end
    def get_backing_store(this : ID3D10EffectBlendVariable*, index : UInt32, pBlendDesc : Win32cr::Graphics::Direct3D10::D3D10_BLEND_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_backing_store.call(this, index, pBlendDesc)
    end

  end

  @[Extern]
  record ID3D10EffectDepthStencilVariableVtbl,
    is_valid : Proc(ID3D10EffectDepthStencilVariable*, Win32cr::Foundation::BOOL),
    get_type : Proc(ID3D10EffectDepthStencilVariable*, Void*),
    get_desc : Proc(ID3D10EffectDepthStencilVariable*, Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*, Win32cr::Foundation::HRESULT),
    get_annotation_by_index : Proc(ID3D10EffectDepthStencilVariable*, UInt32, Void*),
    get_annotation_by_name : Proc(ID3D10EffectDepthStencilVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_index : Proc(ID3D10EffectDepthStencilVariable*, UInt32, Void*),
    get_member_by_name : Proc(ID3D10EffectDepthStencilVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_semantic : Proc(ID3D10EffectDepthStencilVariable*, Win32cr::Foundation::PSTR, Void*),
    get_element : Proc(ID3D10EffectDepthStencilVariable*, UInt32, Void*),
    get_parent_constant_buffer : Proc(ID3D10EffectDepthStencilVariable*, Void*),
    as_scalar : Proc(ID3D10EffectDepthStencilVariable*, Void*),
    as_vector : Proc(ID3D10EffectDepthStencilVariable*, Void*),
    as_matrix : Proc(ID3D10EffectDepthStencilVariable*, Void*),
    as_string : Proc(ID3D10EffectDepthStencilVariable*, Void*),
    as_shader_resource : Proc(ID3D10EffectDepthStencilVariable*, Void*),
    as_render_target_view : Proc(ID3D10EffectDepthStencilVariable*, Void*),
    as_depth_stencil_view : Proc(ID3D10EffectDepthStencilVariable*, Void*),
    as_constant_buffer : Proc(ID3D10EffectDepthStencilVariable*, Void*),
    as_shader : Proc(ID3D10EffectDepthStencilVariable*, Void*),
    as_blend : Proc(ID3D10EffectDepthStencilVariable*, Void*),
    as_depth_stencil : Proc(ID3D10EffectDepthStencilVariable*, Void*),
    as_rasterizer : Proc(ID3D10EffectDepthStencilVariable*, Void*),
    as_sampler : Proc(ID3D10EffectDepthStencilVariable*, Void*),
    set_raw_value : Proc(ID3D10EffectDepthStencilVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_raw_value : Proc(ID3D10EffectDepthStencilVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_depth_stencil_state : Proc(ID3D10EffectDepthStencilVariable*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_backing_store : Proc(ID3D10EffectDepthStencilVariable*, UInt32, Win32cr::Graphics::Direct3D10::D3D10_DEPTH_STENCIL_DESC*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10EffectDepthStencilVariable, lpVtbl : ID3D10EffectDepthStencilVariableVtbl* do
    GUID = LibC::GUID.new(0xaf482368_u32, 0x330a_u16, 0x46a5_u16, StaticArray[0x9a_u8, 0x5c_u8, 0x1_u8, 0xc7_u8, 0x1a_u8, 0xf2_u8, 0x4c_u8, 0x8d_u8])
    def is_valid(this : ID3D10EffectDepthStencilVariable*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_valid.call(this)
    end
    def get_type(this : ID3D10EffectDepthStencilVariable*) : Void*
      @lpVtbl.try &.value.get_type.call(this)
    end
    def get_desc(this : ID3D10EffectDepthStencilVariable*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_annotation_by_index(this : ID3D10EffectDepthStencilVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_annotation_by_index.call(this, index)
    end
    def get_annotation_by_name(this : ID3D10EffectDepthStencilVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_annotation_by_name.call(this, name)
    end
    def get_member_by_index(this : ID3D10EffectDepthStencilVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_member_by_index.call(this, index)
    end
    def get_member_by_name(this : ID3D10EffectDepthStencilVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_name.call(this, name)
    end
    def get_member_by_semantic(this : ID3D10EffectDepthStencilVariable*, semantic : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_semantic.call(this, semantic)
    end
    def get_element(this : ID3D10EffectDepthStencilVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_element.call(this, index)
    end
    def get_parent_constant_buffer(this : ID3D10EffectDepthStencilVariable*) : Void*
      @lpVtbl.try &.value.get_parent_constant_buffer.call(this)
    end
    def as_scalar(this : ID3D10EffectDepthStencilVariable*) : Void*
      @lpVtbl.try &.value.as_scalar.call(this)
    end
    def as_vector(this : ID3D10EffectDepthStencilVariable*) : Void*
      @lpVtbl.try &.value.as_vector.call(this)
    end
    def as_matrix(this : ID3D10EffectDepthStencilVariable*) : Void*
      @lpVtbl.try &.value.as_matrix.call(this)
    end
    def as_string(this : ID3D10EffectDepthStencilVariable*) : Void*
      @lpVtbl.try &.value.as_string.call(this)
    end
    def as_shader_resource(this : ID3D10EffectDepthStencilVariable*) : Void*
      @lpVtbl.try &.value.as_shader_resource.call(this)
    end
    def as_render_target_view(this : ID3D10EffectDepthStencilVariable*) : Void*
      @lpVtbl.try &.value.as_render_target_view.call(this)
    end
    def as_depth_stencil_view(this : ID3D10EffectDepthStencilVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil_view.call(this)
    end
    def as_constant_buffer(this : ID3D10EffectDepthStencilVariable*) : Void*
      @lpVtbl.try &.value.as_constant_buffer.call(this)
    end
    def as_shader(this : ID3D10EffectDepthStencilVariable*) : Void*
      @lpVtbl.try &.value.as_shader.call(this)
    end
    def as_blend(this : ID3D10EffectDepthStencilVariable*) : Void*
      @lpVtbl.try &.value.as_blend.call(this)
    end
    def as_depth_stencil(this : ID3D10EffectDepthStencilVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil.call(this)
    end
    def as_rasterizer(this : ID3D10EffectDepthStencilVariable*) : Void*
      @lpVtbl.try &.value.as_rasterizer.call(this)
    end
    def as_sampler(this : ID3D10EffectDepthStencilVariable*) : Void*
      @lpVtbl.try &.value.as_sampler.call(this)
    end
    def set_raw_value(this : ID3D10EffectDepthStencilVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_raw_value.call(this, pData, offset, byte_count)
    end
    def get_raw_value(this : ID3D10EffectDepthStencilVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raw_value.call(this, pData, offset, byte_count)
    end
    def get_depth_stencil_state(this : ID3D10EffectDepthStencilVariable*, index : UInt32, ppDepthStencilState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_depth_stencil_state.call(this, index, ppDepthStencilState)
    end
    def get_backing_store(this : ID3D10EffectDepthStencilVariable*, index : UInt32, pDepthStencilDesc : Win32cr::Graphics::Direct3D10::D3D10_DEPTH_STENCIL_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_backing_store.call(this, index, pDepthStencilDesc)
    end

  end

  @[Extern]
  record ID3D10EffectRasterizerVariableVtbl,
    is_valid : Proc(ID3D10EffectRasterizerVariable*, Win32cr::Foundation::BOOL),
    get_type : Proc(ID3D10EffectRasterizerVariable*, Void*),
    get_desc : Proc(ID3D10EffectRasterizerVariable*, Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*, Win32cr::Foundation::HRESULT),
    get_annotation_by_index : Proc(ID3D10EffectRasterizerVariable*, UInt32, Void*),
    get_annotation_by_name : Proc(ID3D10EffectRasterizerVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_index : Proc(ID3D10EffectRasterizerVariable*, UInt32, Void*),
    get_member_by_name : Proc(ID3D10EffectRasterizerVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_semantic : Proc(ID3D10EffectRasterizerVariable*, Win32cr::Foundation::PSTR, Void*),
    get_element : Proc(ID3D10EffectRasterizerVariable*, UInt32, Void*),
    get_parent_constant_buffer : Proc(ID3D10EffectRasterizerVariable*, Void*),
    as_scalar : Proc(ID3D10EffectRasterizerVariable*, Void*),
    as_vector : Proc(ID3D10EffectRasterizerVariable*, Void*),
    as_matrix : Proc(ID3D10EffectRasterizerVariable*, Void*),
    as_string : Proc(ID3D10EffectRasterizerVariable*, Void*),
    as_shader_resource : Proc(ID3D10EffectRasterizerVariable*, Void*),
    as_render_target_view : Proc(ID3D10EffectRasterizerVariable*, Void*),
    as_depth_stencil_view : Proc(ID3D10EffectRasterizerVariable*, Void*),
    as_constant_buffer : Proc(ID3D10EffectRasterizerVariable*, Void*),
    as_shader : Proc(ID3D10EffectRasterizerVariable*, Void*),
    as_blend : Proc(ID3D10EffectRasterizerVariable*, Void*),
    as_depth_stencil : Proc(ID3D10EffectRasterizerVariable*, Void*),
    as_rasterizer : Proc(ID3D10EffectRasterizerVariable*, Void*),
    as_sampler : Proc(ID3D10EffectRasterizerVariable*, Void*),
    set_raw_value : Proc(ID3D10EffectRasterizerVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_raw_value : Proc(ID3D10EffectRasterizerVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_rasterizer_state : Proc(ID3D10EffectRasterizerVariable*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_backing_store : Proc(ID3D10EffectRasterizerVariable*, UInt32, Win32cr::Graphics::Direct3D10::D3D10_RASTERIZER_DESC*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10EffectRasterizerVariable, lpVtbl : ID3D10EffectRasterizerVariableVtbl* do
    GUID = LibC::GUID.new(0x21af9f0e_u32, 0x4d94_u16, 0x4ea9_u16, StaticArray[0x97_u8, 0x85_u8, 0x2c_u8, 0xb7_u8, 0x6b_u8, 0x8c_u8, 0xb_u8, 0x34_u8])
    def is_valid(this : ID3D10EffectRasterizerVariable*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_valid.call(this)
    end
    def get_type(this : ID3D10EffectRasterizerVariable*) : Void*
      @lpVtbl.try &.value.get_type.call(this)
    end
    def get_desc(this : ID3D10EffectRasterizerVariable*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_annotation_by_index(this : ID3D10EffectRasterizerVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_annotation_by_index.call(this, index)
    end
    def get_annotation_by_name(this : ID3D10EffectRasterizerVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_annotation_by_name.call(this, name)
    end
    def get_member_by_index(this : ID3D10EffectRasterizerVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_member_by_index.call(this, index)
    end
    def get_member_by_name(this : ID3D10EffectRasterizerVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_name.call(this, name)
    end
    def get_member_by_semantic(this : ID3D10EffectRasterizerVariable*, semantic : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_semantic.call(this, semantic)
    end
    def get_element(this : ID3D10EffectRasterizerVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_element.call(this, index)
    end
    def get_parent_constant_buffer(this : ID3D10EffectRasterizerVariable*) : Void*
      @lpVtbl.try &.value.get_parent_constant_buffer.call(this)
    end
    def as_scalar(this : ID3D10EffectRasterizerVariable*) : Void*
      @lpVtbl.try &.value.as_scalar.call(this)
    end
    def as_vector(this : ID3D10EffectRasterizerVariable*) : Void*
      @lpVtbl.try &.value.as_vector.call(this)
    end
    def as_matrix(this : ID3D10EffectRasterizerVariable*) : Void*
      @lpVtbl.try &.value.as_matrix.call(this)
    end
    def as_string(this : ID3D10EffectRasterizerVariable*) : Void*
      @lpVtbl.try &.value.as_string.call(this)
    end
    def as_shader_resource(this : ID3D10EffectRasterizerVariable*) : Void*
      @lpVtbl.try &.value.as_shader_resource.call(this)
    end
    def as_render_target_view(this : ID3D10EffectRasterizerVariable*) : Void*
      @lpVtbl.try &.value.as_render_target_view.call(this)
    end
    def as_depth_stencil_view(this : ID3D10EffectRasterizerVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil_view.call(this)
    end
    def as_constant_buffer(this : ID3D10EffectRasterizerVariable*) : Void*
      @lpVtbl.try &.value.as_constant_buffer.call(this)
    end
    def as_shader(this : ID3D10EffectRasterizerVariable*) : Void*
      @lpVtbl.try &.value.as_shader.call(this)
    end
    def as_blend(this : ID3D10EffectRasterizerVariable*) : Void*
      @lpVtbl.try &.value.as_blend.call(this)
    end
    def as_depth_stencil(this : ID3D10EffectRasterizerVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil.call(this)
    end
    def as_rasterizer(this : ID3D10EffectRasterizerVariable*) : Void*
      @lpVtbl.try &.value.as_rasterizer.call(this)
    end
    def as_sampler(this : ID3D10EffectRasterizerVariable*) : Void*
      @lpVtbl.try &.value.as_sampler.call(this)
    end
    def set_raw_value(this : ID3D10EffectRasterizerVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_raw_value.call(this, pData, offset, byte_count)
    end
    def get_raw_value(this : ID3D10EffectRasterizerVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raw_value.call(this, pData, offset, byte_count)
    end
    def get_rasterizer_state(this : ID3D10EffectRasterizerVariable*, index : UInt32, ppRasterizerState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_rasterizer_state.call(this, index, ppRasterizerState)
    end
    def get_backing_store(this : ID3D10EffectRasterizerVariable*, index : UInt32, pRasterizerDesc : Win32cr::Graphics::Direct3D10::D3D10_RASTERIZER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_backing_store.call(this, index, pRasterizerDesc)
    end

  end

  @[Extern]
  record ID3D10EffectSamplerVariableVtbl,
    is_valid : Proc(ID3D10EffectSamplerVariable*, Win32cr::Foundation::BOOL),
    get_type : Proc(ID3D10EffectSamplerVariable*, Void*),
    get_desc : Proc(ID3D10EffectSamplerVariable*, Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*, Win32cr::Foundation::HRESULT),
    get_annotation_by_index : Proc(ID3D10EffectSamplerVariable*, UInt32, Void*),
    get_annotation_by_name : Proc(ID3D10EffectSamplerVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_index : Proc(ID3D10EffectSamplerVariable*, UInt32, Void*),
    get_member_by_name : Proc(ID3D10EffectSamplerVariable*, Win32cr::Foundation::PSTR, Void*),
    get_member_by_semantic : Proc(ID3D10EffectSamplerVariable*, Win32cr::Foundation::PSTR, Void*),
    get_element : Proc(ID3D10EffectSamplerVariable*, UInt32, Void*),
    get_parent_constant_buffer : Proc(ID3D10EffectSamplerVariable*, Void*),
    as_scalar : Proc(ID3D10EffectSamplerVariable*, Void*),
    as_vector : Proc(ID3D10EffectSamplerVariable*, Void*),
    as_matrix : Proc(ID3D10EffectSamplerVariable*, Void*),
    as_string : Proc(ID3D10EffectSamplerVariable*, Void*),
    as_shader_resource : Proc(ID3D10EffectSamplerVariable*, Void*),
    as_render_target_view : Proc(ID3D10EffectSamplerVariable*, Void*),
    as_depth_stencil_view : Proc(ID3D10EffectSamplerVariable*, Void*),
    as_constant_buffer : Proc(ID3D10EffectSamplerVariable*, Void*),
    as_shader : Proc(ID3D10EffectSamplerVariable*, Void*),
    as_blend : Proc(ID3D10EffectSamplerVariable*, Void*),
    as_depth_stencil : Proc(ID3D10EffectSamplerVariable*, Void*),
    as_rasterizer : Proc(ID3D10EffectSamplerVariable*, Void*),
    as_sampler : Proc(ID3D10EffectSamplerVariable*, Void*),
    set_raw_value : Proc(ID3D10EffectSamplerVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_raw_value : Proc(ID3D10EffectSamplerVariable*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    get_sampler : Proc(ID3D10EffectSamplerVariable*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    get_backing_store : Proc(ID3D10EffectSamplerVariable*, UInt32, Win32cr::Graphics::Direct3D10::D3D10_SAMPLER_DESC*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10EffectSamplerVariable, lpVtbl : ID3D10EffectSamplerVariableVtbl* do
    GUID = LibC::GUID.new(0x6530d5c7_u32, 0x7e9_u16, 0x4271_u16, StaticArray[0xa4_u8, 0x18_u8, 0xe7_u8, 0xce_u8, 0x4b_u8, 0xd1_u8, 0xe4_u8, 0x80_u8])
    def is_valid(this : ID3D10EffectSamplerVariable*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_valid.call(this)
    end
    def get_type(this : ID3D10EffectSamplerVariable*) : Void*
      @lpVtbl.try &.value.get_type.call(this)
    end
    def get_desc(this : ID3D10EffectSamplerVariable*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_EFFECT_VARIABLE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_annotation_by_index(this : ID3D10EffectSamplerVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_annotation_by_index.call(this, index)
    end
    def get_annotation_by_name(this : ID3D10EffectSamplerVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_annotation_by_name.call(this, name)
    end
    def get_member_by_index(this : ID3D10EffectSamplerVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_member_by_index.call(this, index)
    end
    def get_member_by_name(this : ID3D10EffectSamplerVariable*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_name.call(this, name)
    end
    def get_member_by_semantic(this : ID3D10EffectSamplerVariable*, semantic : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_by_semantic.call(this, semantic)
    end
    def get_element(this : ID3D10EffectSamplerVariable*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_element.call(this, index)
    end
    def get_parent_constant_buffer(this : ID3D10EffectSamplerVariable*) : Void*
      @lpVtbl.try &.value.get_parent_constant_buffer.call(this)
    end
    def as_scalar(this : ID3D10EffectSamplerVariable*) : Void*
      @lpVtbl.try &.value.as_scalar.call(this)
    end
    def as_vector(this : ID3D10EffectSamplerVariable*) : Void*
      @lpVtbl.try &.value.as_vector.call(this)
    end
    def as_matrix(this : ID3D10EffectSamplerVariable*) : Void*
      @lpVtbl.try &.value.as_matrix.call(this)
    end
    def as_string(this : ID3D10EffectSamplerVariable*) : Void*
      @lpVtbl.try &.value.as_string.call(this)
    end
    def as_shader_resource(this : ID3D10EffectSamplerVariable*) : Void*
      @lpVtbl.try &.value.as_shader_resource.call(this)
    end
    def as_render_target_view(this : ID3D10EffectSamplerVariable*) : Void*
      @lpVtbl.try &.value.as_render_target_view.call(this)
    end
    def as_depth_stencil_view(this : ID3D10EffectSamplerVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil_view.call(this)
    end
    def as_constant_buffer(this : ID3D10EffectSamplerVariable*) : Void*
      @lpVtbl.try &.value.as_constant_buffer.call(this)
    end
    def as_shader(this : ID3D10EffectSamplerVariable*) : Void*
      @lpVtbl.try &.value.as_shader.call(this)
    end
    def as_blend(this : ID3D10EffectSamplerVariable*) : Void*
      @lpVtbl.try &.value.as_blend.call(this)
    end
    def as_depth_stencil(this : ID3D10EffectSamplerVariable*) : Void*
      @lpVtbl.try &.value.as_depth_stencil.call(this)
    end
    def as_rasterizer(this : ID3D10EffectSamplerVariable*) : Void*
      @lpVtbl.try &.value.as_rasterizer.call(this)
    end
    def as_sampler(this : ID3D10EffectSamplerVariable*) : Void*
      @lpVtbl.try &.value.as_sampler.call(this)
    end
    def set_raw_value(this : ID3D10EffectSamplerVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_raw_value.call(this, pData, offset, byte_count)
    end
    def get_raw_value(this : ID3D10EffectSamplerVariable*, pData : Void*, offset : UInt32, byte_count : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_raw_value.call(this, pData, offset, byte_count)
    end
    def get_sampler(this : ID3D10EffectSamplerVariable*, index : UInt32, ppSampler : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_sampler.call(this, index, ppSampler)
    end
    def get_backing_store(this : ID3D10EffectSamplerVariable*, index : UInt32, pSamplerDesc : Win32cr::Graphics::Direct3D10::D3D10_SAMPLER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_backing_store.call(this, index, pSamplerDesc)
    end

  end

  @[Extern]
  record ID3D10EffectPassVtbl,
    is_valid : Proc(ID3D10EffectPass*, Win32cr::Foundation::BOOL),
    get_desc : Proc(ID3D10EffectPass*, Win32cr::Graphics::Direct3D10::D3D10_PASS_DESC*, Win32cr::Foundation::HRESULT),
    get_vertex_shader_desc : Proc(ID3D10EffectPass*, Win32cr::Graphics::Direct3D10::D3D10_PASS_SHADER_DESC*, Win32cr::Foundation::HRESULT),
    get_geometry_shader_desc : Proc(ID3D10EffectPass*, Win32cr::Graphics::Direct3D10::D3D10_PASS_SHADER_DESC*, Win32cr::Foundation::HRESULT),
    get_pixel_shader_desc : Proc(ID3D10EffectPass*, Win32cr::Graphics::Direct3D10::D3D10_PASS_SHADER_DESC*, Win32cr::Foundation::HRESULT),
    get_annotation_by_index : Proc(ID3D10EffectPass*, UInt32, Void*),
    get_annotation_by_name : Proc(ID3D10EffectPass*, Win32cr::Foundation::PSTR, Void*),
    apply : Proc(ID3D10EffectPass*, UInt32, Win32cr::Foundation::HRESULT),
    compute_state_block_mask : Proc(ID3D10EffectPass*, Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10EffectPass, lpVtbl : ID3D10EffectPassVtbl* do
    GUID = LibC::GUID.new(0x5cfbeb89_u32, 0x1a06_u16, 0x46e0_u16, StaticArray[0xb2_u8, 0x82_u8, 0xe3_u8, 0xf9_u8, 0xbf_u8, 0xa3_u8, 0x6a_u8, 0x54_u8])
    def is_valid(this : ID3D10EffectPass*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_valid.call(this)
    end
    def get_desc(this : ID3D10EffectPass*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_PASS_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_vertex_shader_desc(this : ID3D10EffectPass*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_PASS_SHADER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_vertex_shader_desc.call(this, pDesc)
    end
    def get_geometry_shader_desc(this : ID3D10EffectPass*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_PASS_SHADER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_geometry_shader_desc.call(this, pDesc)
    end
    def get_pixel_shader_desc(this : ID3D10EffectPass*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_PASS_SHADER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_pixel_shader_desc.call(this, pDesc)
    end
    def get_annotation_by_index(this : ID3D10EffectPass*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_annotation_by_index.call(this, index)
    end
    def get_annotation_by_name(this : ID3D10EffectPass*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_annotation_by_name.call(this, name)
    end
    def apply(this : ID3D10EffectPass*, flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.apply.call(this, flags)
    end
    def compute_state_block_mask(this : ID3D10EffectPass*, pStateBlockMask : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_state_block_mask.call(this, pStateBlockMask)
    end

  end

  @[Extern]
  record ID3D10EffectTechniqueVtbl,
    is_valid : Proc(ID3D10EffectTechnique*, Win32cr::Foundation::BOOL),
    get_desc : Proc(ID3D10EffectTechnique*, Win32cr::Graphics::Direct3D10::D3D10_TECHNIQUE_DESC*, Win32cr::Foundation::HRESULT),
    get_annotation_by_index : Proc(ID3D10EffectTechnique*, UInt32, Void*),
    get_annotation_by_name : Proc(ID3D10EffectTechnique*, Win32cr::Foundation::PSTR, Void*),
    get_pass_by_index : Proc(ID3D10EffectTechnique*, UInt32, Void*),
    get_pass_by_name : Proc(ID3D10EffectTechnique*, Win32cr::Foundation::PSTR, Void*),
    compute_state_block_mask : Proc(ID3D10EffectTechnique*, Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10EffectTechnique, lpVtbl : ID3D10EffectTechniqueVtbl* do
    GUID = LibC::GUID.new(0xdb122ce8_u32, 0xd1c9_u16, 0x4292_u16, StaticArray[0xb2_u8, 0x37_u8, 0x24_u8, 0xed_u8, 0x3d_u8, 0xe8_u8, 0xb1_u8, 0x75_u8])
    def is_valid(this : ID3D10EffectTechnique*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_valid.call(this)
    end
    def get_desc(this : ID3D10EffectTechnique*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_TECHNIQUE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_annotation_by_index(this : ID3D10EffectTechnique*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_annotation_by_index.call(this, index)
    end
    def get_annotation_by_name(this : ID3D10EffectTechnique*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_annotation_by_name.call(this, name)
    end
    def get_pass_by_index(this : ID3D10EffectTechnique*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_pass_by_index.call(this, index)
    end
    def get_pass_by_name(this : ID3D10EffectTechnique*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_pass_by_name.call(this, name)
    end
    def compute_state_block_mask(this : ID3D10EffectTechnique*, pStateBlockMask : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.compute_state_block_mask.call(this, pStateBlockMask)
    end

  end

  @[Extern]
  record ID3D10EffectVtbl,
    query_interface : Proc(ID3D10Effect*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10Effect*, UInt32),
    release : Proc(ID3D10Effect*, UInt32),
    is_valid : Proc(ID3D10Effect*, Win32cr::Foundation::BOOL),
    is_pool : Proc(ID3D10Effect*, Win32cr::Foundation::BOOL),
    get_device : Proc(ID3D10Effect*, Void**, Win32cr::Foundation::HRESULT),
    get_desc : Proc(ID3D10Effect*, Win32cr::Graphics::Direct3D10::D3D10_EFFECT_DESC*, Win32cr::Foundation::HRESULT),
    get_constant_buffer_by_index : Proc(ID3D10Effect*, UInt32, Void*),
    get_constant_buffer_by_name : Proc(ID3D10Effect*, Win32cr::Foundation::PSTR, Void*),
    get_variable_by_index : Proc(ID3D10Effect*, UInt32, Void*),
    get_variable_by_name : Proc(ID3D10Effect*, Win32cr::Foundation::PSTR, Void*),
    get_variable_by_semantic : Proc(ID3D10Effect*, Win32cr::Foundation::PSTR, Void*),
    get_technique_by_index : Proc(ID3D10Effect*, UInt32, Void*),
    get_technique_by_name : Proc(ID3D10Effect*, Win32cr::Foundation::PSTR, Void*),
    optimize : Proc(ID3D10Effect*, Win32cr::Foundation::HRESULT),
    is_optimized : Proc(ID3D10Effect*, Win32cr::Foundation::BOOL)


  @[Extern]
  record ID3D10Effect, lpVtbl : ID3D10EffectVtbl* do
    GUID = LibC::GUID.new(0x51b0ca8b_u32, 0xec0b_u16, 0x4519_u16, StaticArray[0x87_u8, 0xd_u8, 0x8e_u8, 0xe1_u8, 0xcb_u8, 0x50_u8, 0x17_u8, 0xc7_u8])
    def query_interface(this : ID3D10Effect*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10Effect*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10Effect*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def is_valid(this : ID3D10Effect*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_valid.call(this)
    end
    def is_pool(this : ID3D10Effect*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_pool.call(this)
    end
    def get_device(this : ID3D10Effect*, ppDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_desc(this : ID3D10Effect*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_EFFECT_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_constant_buffer_by_index(this : ID3D10Effect*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_constant_buffer_by_index.call(this, index)
    end
    def get_constant_buffer_by_name(this : ID3D10Effect*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_constant_buffer_by_name.call(this, name)
    end
    def get_variable_by_index(this : ID3D10Effect*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_variable_by_index.call(this, index)
    end
    def get_variable_by_name(this : ID3D10Effect*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_variable_by_name.call(this, name)
    end
    def get_variable_by_semantic(this : ID3D10Effect*, semantic : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_variable_by_semantic.call(this, semantic)
    end
    def get_technique_by_index(this : ID3D10Effect*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_technique_by_index.call(this, index)
    end
    def get_technique_by_name(this : ID3D10Effect*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_technique_by_name.call(this, name)
    end
    def optimize(this : ID3D10Effect*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.optimize.call(this)
    end
    def is_optimized(this : ID3D10Effect*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_optimized.call(this)
    end

  end

  @[Extern]
  record ID3D10EffectPoolVtbl,
    query_interface : Proc(ID3D10EffectPool*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10EffectPool*, UInt32),
    release : Proc(ID3D10EffectPool*, UInt32),
    as_effect : Proc(ID3D10EffectPool*, Void*)


  @[Extern]
  record ID3D10EffectPool, lpVtbl : ID3D10EffectPoolVtbl* do
    GUID = LibC::GUID.new(0x9537ab04_u32, 0x3250_u16, 0x412e_u16, StaticArray[0x82_u8, 0x13_u8, 0xfc_u8, 0xd2_u8, 0xf8_u8, 0x67_u8, 0x79_u8, 0x33_u8])
    def query_interface(this : ID3D10EffectPool*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10EffectPool*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10EffectPool*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def as_effect(this : ID3D10EffectPool*) : Void*
      @lpVtbl.try &.value.as_effect.call(this)
    end

  end

  @[Extern]
  record ID3D10BlendState1Vtbl,
    query_interface : Proc(ID3D10BlendState1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10BlendState1*, UInt32),
    release : Proc(ID3D10BlendState1*, UInt32),
    get_device : Proc(ID3D10BlendState1*, Void**, Void),
    get_private_data : Proc(ID3D10BlendState1*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10BlendState1*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10BlendState1*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    get_desc : Proc(ID3D10BlendState1*, Win32cr::Graphics::Direct3D10::D3D10_BLEND_DESC*, Void),
    get_desc1 : Proc(ID3D10BlendState1*, Win32cr::Graphics::Direct3D10::D3D10_BLEND_DESC1*, Void)


  @[Extern]
  record ID3D10BlendState1, lpVtbl : ID3D10BlendState1Vtbl* do
    GUID = LibC::GUID.new(0xedad8d99_u32, 0x8a35_u16, 0x4d6d_u16, StaticArray[0x85_u8, 0x66_u8, 0x2e_u8, 0xa2_u8, 0x76_u8, 0xcd_u8, 0xe1_u8, 0x61_u8])
    def query_interface(this : ID3D10BlendState1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10BlendState1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10BlendState1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10BlendState1*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10BlendState1*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10BlendState1*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10BlendState1*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def get_desc(this : ID3D10BlendState1*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_BLEND_DESC*) : Void
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_desc1(this : ID3D10BlendState1*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_BLEND_DESC1*) : Void
      @lpVtbl.try &.value.get_desc1.call(this, pDesc)
    end

  end

  @[Extern]
  record ID3D10ShaderResourceView1Vtbl,
    query_interface : Proc(ID3D10ShaderResourceView1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10ShaderResourceView1*, UInt32),
    release : Proc(ID3D10ShaderResourceView1*, UInt32),
    get_device : Proc(ID3D10ShaderResourceView1*, Void**, Void),
    get_private_data : Proc(ID3D10ShaderResourceView1*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10ShaderResourceView1*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10ShaderResourceView1*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    get_resource : Proc(ID3D10ShaderResourceView1*, Void**, Void),
    get_desc : Proc(ID3D10ShaderResourceView1*, Win32cr::Graphics::Direct3D10::D3D10_SHADER_RESOURCE_VIEW_DESC*, Void),
    get_desc1 : Proc(ID3D10ShaderResourceView1*, Win32cr::Graphics::Direct3D10::D3D10_SHADER_RESOURCE_VIEW_DESC1*, Void)


  @[Extern]
  record ID3D10ShaderResourceView1, lpVtbl : ID3D10ShaderResourceView1Vtbl* do
    GUID = LibC::GUID.new(0x9b7e4c87_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10ShaderResourceView1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10ShaderResourceView1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10ShaderResourceView1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_device(this : ID3D10ShaderResourceView1*, ppDevice : Void**) : Void
      @lpVtbl.try &.value.get_device.call(this, ppDevice)
    end
    def get_private_data(this : ID3D10ShaderResourceView1*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10ShaderResourceView1*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10ShaderResourceView1*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def get_resource(this : ID3D10ShaderResourceView1*, ppResource : Void**) : Void
      @lpVtbl.try &.value.get_resource.call(this, ppResource)
    end
    def get_desc(this : ID3D10ShaderResourceView1*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_SHADER_RESOURCE_VIEW_DESC*) : Void
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_desc1(this : ID3D10ShaderResourceView1*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_SHADER_RESOURCE_VIEW_DESC1*) : Void
      @lpVtbl.try &.value.get_desc1.call(this, pDesc)
    end

  end

  @[Extern]
  record ID3D10Device1Vtbl,
    query_interface : Proc(ID3D10Device1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10Device1*, UInt32),
    release : Proc(ID3D10Device1*, UInt32),
    vs_set_constant_buffers : Proc(ID3D10Device1*, UInt32, UInt32, Void**, Void),
    ps_set_shader_resources : Proc(ID3D10Device1*, UInt32, UInt32, Void**, Void),
    ps_set_shader : Proc(ID3D10Device1*, Void*, Void),
    ps_set_samplers : Proc(ID3D10Device1*, UInt32, UInt32, Void**, Void),
    vs_set_shader : Proc(ID3D10Device1*, Void*, Void),
    draw_indexed : Proc(ID3D10Device1*, UInt32, UInt32, Int32, Void),
    draw : Proc(ID3D10Device1*, UInt32, UInt32, Void),
    ps_set_constant_buffers : Proc(ID3D10Device1*, UInt32, UInt32, Void**, Void),
    ia_set_input_layout : Proc(ID3D10Device1*, Void*, Void),
    ia_set_vertex_buffers : Proc(ID3D10Device1*, UInt32, UInt32, Void**, UInt32*, UInt32*, Void),
    ia_set_index_buffer : Proc(ID3D10Device1*, Void*, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, UInt32, Void),
    draw_indexed_instanced : Proc(ID3D10Device1*, UInt32, UInt32, UInt32, Int32, UInt32, Void),
    draw_instanced : Proc(ID3D10Device1*, UInt32, UInt32, UInt32, UInt32, Void),
    gs_set_constant_buffers : Proc(ID3D10Device1*, UInt32, UInt32, Void**, Void),
    gs_set_shader : Proc(ID3D10Device1*, Void*, Void),
    ia_set_primitive_topology : Proc(ID3D10Device1*, Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY, Void),
    vs_set_shader_resources : Proc(ID3D10Device1*, UInt32, UInt32, Void**, Void),
    vs_set_samplers : Proc(ID3D10Device1*, UInt32, UInt32, Void**, Void),
    set_predication : Proc(ID3D10Device1*, Void*, Win32cr::Foundation::BOOL, Void),
    gs_set_shader_resources : Proc(ID3D10Device1*, UInt32, UInt32, Void**, Void),
    gs_set_samplers : Proc(ID3D10Device1*, UInt32, UInt32, Void**, Void),
    om_set_render_targets : Proc(ID3D10Device1*, UInt32, Void**, Void*, Void),
    om_set_blend_state : Proc(ID3D10Device1*, Void*, Float32*, UInt32, Void),
    om_set_depth_stencil_state : Proc(ID3D10Device1*, Void*, UInt32, Void),
    so_set_targets : Proc(ID3D10Device1*, UInt32, Void**, UInt32*, Void),
    draw_auto : Proc(ID3D10Device1*, Void),
    rs_set_state : Proc(ID3D10Device1*, Void*, Void),
    rs_set_viewports : Proc(ID3D10Device1*, UInt32, Win32cr::Graphics::Direct3D10::D3D10_VIEWPORT*, Void),
    rs_set_scissor_rects : Proc(ID3D10Device1*, UInt32, Win32cr::Foundation::RECT*, Void),
    copy_subresource_region : Proc(ID3D10Device1*, Void*, UInt32, UInt32, UInt32, UInt32, Void*, UInt32, Win32cr::Graphics::Direct3D10::D3D10_BOX*, Void),
    copy_resource : Proc(ID3D10Device1*, Void*, Void*, Void),
    update_subresource : Proc(ID3D10Device1*, Void*, UInt32, Win32cr::Graphics::Direct3D10::D3D10_BOX*, Void*, UInt32, UInt32, Void),
    clear_render_target_view : Proc(ID3D10Device1*, Void*, Float32*, Void),
    clear_depth_stencil_view : Proc(ID3D10Device1*, Void*, UInt32, Float32, UInt8, Void),
    generate_mips : Proc(ID3D10Device1*, Void*, Void),
    resolve_subresource : Proc(ID3D10Device1*, Void*, UInt32, Void*, UInt32, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Void),
    vs_get_constant_buffers : Proc(ID3D10Device1*, UInt32, UInt32, Void**, Void),
    ps_get_shader_resources : Proc(ID3D10Device1*, UInt32, UInt32, Void**, Void),
    ps_get_shader : Proc(ID3D10Device1*, Void**, Void),
    ps_get_samplers : Proc(ID3D10Device1*, UInt32, UInt32, Void**, Void),
    vs_get_shader : Proc(ID3D10Device1*, Void**, Void),
    ps_get_constant_buffers : Proc(ID3D10Device1*, UInt32, UInt32, Void**, Void),
    ia_get_input_layout : Proc(ID3D10Device1*, Void**, Void),
    ia_get_vertex_buffers : Proc(ID3D10Device1*, UInt32, UInt32, Void**, UInt32*, UInt32*, Void),
    ia_get_index_buffer : Proc(ID3D10Device1*, Void**, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT*, UInt32*, Void),
    gs_get_constant_buffers : Proc(ID3D10Device1*, UInt32, UInt32, Void**, Void),
    gs_get_shader : Proc(ID3D10Device1*, Void**, Void),
    ia_get_primitive_topology : Proc(ID3D10Device1*, Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY*, Void),
    vs_get_shader_resources : Proc(ID3D10Device1*, UInt32, UInt32, Void**, Void),
    vs_get_samplers : Proc(ID3D10Device1*, UInt32, UInt32, Void**, Void),
    get_predication : Proc(ID3D10Device1*, Void**, Win32cr::Foundation::BOOL*, Void),
    gs_get_shader_resources : Proc(ID3D10Device1*, UInt32, UInt32, Void**, Void),
    gs_get_samplers : Proc(ID3D10Device1*, UInt32, UInt32, Void**, Void),
    om_get_render_targets : Proc(ID3D10Device1*, UInt32, Void**, Void**, Void),
    om_get_blend_state : Proc(ID3D10Device1*, Void**, Float32*, UInt32*, Void),
    om_get_depth_stencil_state : Proc(ID3D10Device1*, Void**, UInt32*, Void),
    so_get_targets : Proc(ID3D10Device1*, UInt32, Void**, UInt32*, Void),
    rs_get_state : Proc(ID3D10Device1*, Void**, Void),
    rs_get_viewports : Proc(ID3D10Device1*, UInt32*, Win32cr::Graphics::Direct3D10::D3D10_VIEWPORT*, Void),
    rs_get_scissor_rects : Proc(ID3D10Device1*, UInt32*, Win32cr::Foundation::RECT*, Void),
    get_device_removed_reason : Proc(ID3D10Device1*, Win32cr::Foundation::HRESULT),
    set_exception_mode : Proc(ID3D10Device1*, UInt32, Win32cr::Foundation::HRESULT),
    get_exception_mode : Proc(ID3D10Device1*, UInt32),
    get_private_data : Proc(ID3D10Device1*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D10Device1*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D10Device1*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    clear_state : Proc(ID3D10Device1*, Void),
    flush : Proc(ID3D10Device1*, Void),
    create_buffer : Proc(ID3D10Device1*, Win32cr::Graphics::Direct3D10::D3D10_BUFFER_DESC*, Win32cr::Graphics::Direct3D10::D3D10_SUBRESOURCE_DATA*, Void**, Win32cr::Foundation::HRESULT),
    create_texture1_d : Proc(ID3D10Device1*, Win32cr::Graphics::Direct3D10::D3D10_TEXTURE1D_DESC*, Win32cr::Graphics::Direct3D10::D3D10_SUBRESOURCE_DATA*, Void**, Win32cr::Foundation::HRESULT),
    create_texture2_d : Proc(ID3D10Device1*, Win32cr::Graphics::Direct3D10::D3D10_TEXTURE2D_DESC*, Win32cr::Graphics::Direct3D10::D3D10_SUBRESOURCE_DATA*, Void**, Win32cr::Foundation::HRESULT),
    create_texture3_d : Proc(ID3D10Device1*, Win32cr::Graphics::Direct3D10::D3D10_TEXTURE3D_DESC*, Win32cr::Graphics::Direct3D10::D3D10_SUBRESOURCE_DATA*, Void**, Win32cr::Foundation::HRESULT),
    create_shader_resource_view : Proc(ID3D10Device1*, Void*, Win32cr::Graphics::Direct3D10::D3D10_SHADER_RESOURCE_VIEW_DESC*, Void**, Win32cr::Foundation::HRESULT),
    create_render_target_view : Proc(ID3D10Device1*, Void*, Win32cr::Graphics::Direct3D10::D3D10_RENDER_TARGET_VIEW_DESC*, Void**, Win32cr::Foundation::HRESULT),
    create_depth_stencil_view : Proc(ID3D10Device1*, Void*, Win32cr::Graphics::Direct3D10::D3D10_DEPTH_STENCIL_VIEW_DESC*, Void**, Win32cr::Foundation::HRESULT),
    create_input_layout : Proc(ID3D10Device1*, Win32cr::Graphics::Direct3D10::D3D10_INPUT_ELEMENT_DESC*, UInt32, Void*, LibC::UIntPtrT, Void**, Win32cr::Foundation::HRESULT),
    create_vertex_shader : Proc(ID3D10Device1*, Void*, LibC::UIntPtrT, Void**, Win32cr::Foundation::HRESULT),
    create_geometry_shader : Proc(ID3D10Device1*, Void*, LibC::UIntPtrT, Void**, Win32cr::Foundation::HRESULT),
    create_geometry_shader_with_stream_output : Proc(ID3D10Device1*, Void*, LibC::UIntPtrT, Win32cr::Graphics::Direct3D10::D3D10_SO_DECLARATION_ENTRY*, UInt32, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_pixel_shader : Proc(ID3D10Device1*, Void*, LibC::UIntPtrT, Void**, Win32cr::Foundation::HRESULT),
    create_blend_state : Proc(ID3D10Device1*, Win32cr::Graphics::Direct3D10::D3D10_BLEND_DESC*, Void**, Win32cr::Foundation::HRESULT),
    create_depth_stencil_state : Proc(ID3D10Device1*, Win32cr::Graphics::Direct3D10::D3D10_DEPTH_STENCIL_DESC*, Void**, Win32cr::Foundation::HRESULT),
    create_rasterizer_state : Proc(ID3D10Device1*, Win32cr::Graphics::Direct3D10::D3D10_RASTERIZER_DESC*, Void**, Win32cr::Foundation::HRESULT),
    create_sampler_state : Proc(ID3D10Device1*, Win32cr::Graphics::Direct3D10::D3D10_SAMPLER_DESC*, Void**, Win32cr::Foundation::HRESULT),
    create_query : Proc(ID3D10Device1*, Win32cr::Graphics::Direct3D10::D3D10_QUERY_DESC*, Void**, Win32cr::Foundation::HRESULT),
    create_predicate : Proc(ID3D10Device1*, Win32cr::Graphics::Direct3D10::D3D10_QUERY_DESC*, Void**, Win32cr::Foundation::HRESULT),
    create_counter : Proc(ID3D10Device1*, Win32cr::Graphics::Direct3D10::D3D10_COUNTER_DESC*, Void**, Win32cr::Foundation::HRESULT),
    check_format_support : Proc(ID3D10Device1*, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, UInt32*, Win32cr::Foundation::HRESULT),
    check_multisample_quality_levels : Proc(ID3D10Device1*, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, UInt32, UInt32*, Win32cr::Foundation::HRESULT),
    check_counter_info : Proc(ID3D10Device1*, Win32cr::Graphics::Direct3D10::D3D10_COUNTER_INFO*, Void),
    check_counter : Proc(ID3D10Device1*, Win32cr::Graphics::Direct3D10::D3D10_COUNTER_DESC*, Win32cr::Graphics::Direct3D10::D3D10_COUNTER_TYPE*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, UInt8*, UInt32*, Win32cr::Foundation::HRESULT),
    get_creation_flags : Proc(ID3D10Device1*, UInt32),
    open_shared_resource : Proc(ID3D10Device1*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_text_filter_size : Proc(ID3D10Device1*, UInt32, UInt32, Void),
    get_text_filter_size : Proc(ID3D10Device1*, UInt32*, UInt32*, Void),
    create_shader_resource_view1 : Proc(ID3D10Device1*, Void*, Win32cr::Graphics::Direct3D10::D3D10_SHADER_RESOURCE_VIEW_DESC1*, Void**, Win32cr::Foundation::HRESULT),
    create_blend_state1 : Proc(ID3D10Device1*, Win32cr::Graphics::Direct3D10::D3D10_BLEND_DESC1*, Void**, Win32cr::Foundation::HRESULT),
    get_feature_level : Proc(ID3D10Device1*, Win32cr::Graphics::Direct3D10::D3D10_FEATURE_LEVEL1)


  @[Extern]
  record ID3D10Device1, lpVtbl : ID3D10Device1Vtbl* do
    GUID = LibC::GUID.new(0x9b7e4c8f_u32, 0x342c_u16, 0x4106_u16, StaticArray[0xa1_u8, 0x9f_u8, 0x4f_u8, 0x27_u8, 0x4_u8, 0xf6_u8, 0x89_u8, 0xf0_u8])
    def query_interface(this : ID3D10Device1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10Device1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10Device1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def vs_set_constant_buffers(this : ID3D10Device1*, start_slot : UInt32, num_buffers : UInt32, ppConstantBuffers : Void**) : Void
      @lpVtbl.try &.value.vs_set_constant_buffers.call(this, start_slot, num_buffers, ppConstantBuffers)
    end
    def ps_set_shader_resources(this : ID3D10Device1*, start_slot : UInt32, num_views : UInt32, ppShaderResourceViews : Void**) : Void
      @lpVtbl.try &.value.ps_set_shader_resources.call(this, start_slot, num_views, ppShaderResourceViews)
    end
    def ps_set_shader(this : ID3D10Device1*, pPixelShader : Void*) : Void
      @lpVtbl.try &.value.ps_set_shader.call(this, pPixelShader)
    end
    def ps_set_samplers(this : ID3D10Device1*, start_slot : UInt32, num_samplers : UInt32, ppSamplers : Void**) : Void
      @lpVtbl.try &.value.ps_set_samplers.call(this, start_slot, num_samplers, ppSamplers)
    end
    def vs_set_shader(this : ID3D10Device1*, pVertexShader : Void*) : Void
      @lpVtbl.try &.value.vs_set_shader.call(this, pVertexShader)
    end
    def draw_indexed(this : ID3D10Device1*, index_count : UInt32, start_index_location : UInt32, base_vertex_location : Int32) : Void
      @lpVtbl.try &.value.draw_indexed.call(this, index_count, start_index_location, base_vertex_location)
    end
    def draw(this : ID3D10Device1*, vertex_count : UInt32, start_vertex_location : UInt32) : Void
      @lpVtbl.try &.value.draw.call(this, vertex_count, start_vertex_location)
    end
    def ps_set_constant_buffers(this : ID3D10Device1*, start_slot : UInt32, num_buffers : UInt32, ppConstantBuffers : Void**) : Void
      @lpVtbl.try &.value.ps_set_constant_buffers.call(this, start_slot, num_buffers, ppConstantBuffers)
    end
    def ia_set_input_layout(this : ID3D10Device1*, pInputLayout : Void*) : Void
      @lpVtbl.try &.value.ia_set_input_layout.call(this, pInputLayout)
    end
    def ia_set_vertex_buffers(this : ID3D10Device1*, start_slot : UInt32, num_buffers : UInt32, ppVertexBuffers : Void**, pStrides : UInt32*, pOffsets : UInt32*) : Void
      @lpVtbl.try &.value.ia_set_vertex_buffers.call(this, start_slot, num_buffers, ppVertexBuffers, pStrides, pOffsets)
    end
    def ia_set_index_buffer(this : ID3D10Device1*, pIndexBuffer : Void*, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, offset : UInt32) : Void
      @lpVtbl.try &.value.ia_set_index_buffer.call(this, pIndexBuffer, format, offset)
    end
    def draw_indexed_instanced(this : ID3D10Device1*, index_count_per_instance : UInt32, instance_count : UInt32, start_index_location : UInt32, base_vertex_location : Int32, start_instance_location : UInt32) : Void
      @lpVtbl.try &.value.draw_indexed_instanced.call(this, index_count_per_instance, instance_count, start_index_location, base_vertex_location, start_instance_location)
    end
    def draw_instanced(this : ID3D10Device1*, vertex_count_per_instance : UInt32, instance_count : UInt32, start_vertex_location : UInt32, start_instance_location : UInt32) : Void
      @lpVtbl.try &.value.draw_instanced.call(this, vertex_count_per_instance, instance_count, start_vertex_location, start_instance_location)
    end
    def gs_set_constant_buffers(this : ID3D10Device1*, start_slot : UInt32, num_buffers : UInt32, ppConstantBuffers : Void**) : Void
      @lpVtbl.try &.value.gs_set_constant_buffers.call(this, start_slot, num_buffers, ppConstantBuffers)
    end
    def gs_set_shader(this : ID3D10Device1*, pShader : Void*) : Void
      @lpVtbl.try &.value.gs_set_shader.call(this, pShader)
    end
    def ia_set_primitive_topology(this : ID3D10Device1*, topology : Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY) : Void
      @lpVtbl.try &.value.ia_set_primitive_topology.call(this, topology)
    end
    def vs_set_shader_resources(this : ID3D10Device1*, start_slot : UInt32, num_views : UInt32, ppShaderResourceViews : Void**) : Void
      @lpVtbl.try &.value.vs_set_shader_resources.call(this, start_slot, num_views, ppShaderResourceViews)
    end
    def vs_set_samplers(this : ID3D10Device1*, start_slot : UInt32, num_samplers : UInt32, ppSamplers : Void**) : Void
      @lpVtbl.try &.value.vs_set_samplers.call(this, start_slot, num_samplers, ppSamplers)
    end
    def set_predication(this : ID3D10Device1*, pPredicate : Void*, predicate_value : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.set_predication.call(this, pPredicate, predicate_value)
    end
    def gs_set_shader_resources(this : ID3D10Device1*, start_slot : UInt32, num_views : UInt32, ppShaderResourceViews : Void**) : Void
      @lpVtbl.try &.value.gs_set_shader_resources.call(this, start_slot, num_views, ppShaderResourceViews)
    end
    def gs_set_samplers(this : ID3D10Device1*, start_slot : UInt32, num_samplers : UInt32, ppSamplers : Void**) : Void
      @lpVtbl.try &.value.gs_set_samplers.call(this, start_slot, num_samplers, ppSamplers)
    end
    def om_set_render_targets(this : ID3D10Device1*, num_views : UInt32, ppRenderTargetViews : Void**, pDepthStencilView : Void*) : Void
      @lpVtbl.try &.value.om_set_render_targets.call(this, num_views, ppRenderTargetViews, pDepthStencilView)
    end
    def om_set_blend_state(this : ID3D10Device1*, pBlendState : Void*, blend_factor : Float32*, sample_mask : UInt32) : Void
      @lpVtbl.try &.value.om_set_blend_state.call(this, pBlendState, blend_factor, sample_mask)
    end
    def om_set_depth_stencil_state(this : ID3D10Device1*, pDepthStencilState : Void*, stencil_ref : UInt32) : Void
      @lpVtbl.try &.value.om_set_depth_stencil_state.call(this, pDepthStencilState, stencil_ref)
    end
    def so_set_targets(this : ID3D10Device1*, num_buffers : UInt32, ppSOTargets : Void**, pOffsets : UInt32*) : Void
      @lpVtbl.try &.value.so_set_targets.call(this, num_buffers, ppSOTargets, pOffsets)
    end
    def draw_auto(this : ID3D10Device1*) : Void
      @lpVtbl.try &.value.draw_auto.call(this)
    end
    def rs_set_state(this : ID3D10Device1*, pRasterizerState : Void*) : Void
      @lpVtbl.try &.value.rs_set_state.call(this, pRasterizerState)
    end
    def rs_set_viewports(this : ID3D10Device1*, num_viewports : UInt32, pViewports : Win32cr::Graphics::Direct3D10::D3D10_VIEWPORT*) : Void
      @lpVtbl.try &.value.rs_set_viewports.call(this, num_viewports, pViewports)
    end
    def rs_set_scissor_rects(this : ID3D10Device1*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.rs_set_scissor_rects.call(this, num_rects, pRects)
    end
    def copy_subresource_region(this : ID3D10Device1*, pDstResource : Void*, dst_subresource : UInt32, dst_x : UInt32, dst_y : UInt32, dst_z : UInt32, pSrcResource : Void*, src_subresource : UInt32, pSrcBox : Win32cr::Graphics::Direct3D10::D3D10_BOX*) : Void
      @lpVtbl.try &.value.copy_subresource_region.call(this, pDstResource, dst_subresource, dst_x, dst_y, dst_z, pSrcResource, src_subresource, pSrcBox)
    end
    def copy_resource(this : ID3D10Device1*, pDstResource : Void*, pSrcResource : Void*) : Void
      @lpVtbl.try &.value.copy_resource.call(this, pDstResource, pSrcResource)
    end
    def update_subresource(this : ID3D10Device1*, pDstResource : Void*, dst_subresource : UInt32, pDstBox : Win32cr::Graphics::Direct3D10::D3D10_BOX*, pSrcData : Void*, src_row_pitch : UInt32, src_depth_pitch : UInt32) : Void
      @lpVtbl.try &.value.update_subresource.call(this, pDstResource, dst_subresource, pDstBox, pSrcData, src_row_pitch, src_depth_pitch)
    end
    def clear_render_target_view(this : ID3D10Device1*, pRenderTargetView : Void*, color_rgba : Float32*) : Void
      @lpVtbl.try &.value.clear_render_target_view.call(this, pRenderTargetView, color_rgba)
    end
    def clear_depth_stencil_view(this : ID3D10Device1*, pDepthStencilView : Void*, clear_flags : UInt32, depth : Float32, stencil : UInt8) : Void
      @lpVtbl.try &.value.clear_depth_stencil_view.call(this, pDepthStencilView, clear_flags, depth, stencil)
    end
    def generate_mips(this : ID3D10Device1*, pShaderResourceView : Void*) : Void
      @lpVtbl.try &.value.generate_mips.call(this, pShaderResourceView)
    end
    def resolve_subresource(this : ID3D10Device1*, pDstResource : Void*, dst_subresource : UInt32, pSrcResource : Void*, src_subresource : UInt32, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT) : Void
      @lpVtbl.try &.value.resolve_subresource.call(this, pDstResource, dst_subresource, pSrcResource, src_subresource, format)
    end
    def vs_get_constant_buffers(this : ID3D10Device1*, start_slot : UInt32, num_buffers : UInt32, ppConstantBuffers : Void**) : Void
      @lpVtbl.try &.value.vs_get_constant_buffers.call(this, start_slot, num_buffers, ppConstantBuffers)
    end
    def ps_get_shader_resources(this : ID3D10Device1*, start_slot : UInt32, num_views : UInt32, ppShaderResourceViews : Void**) : Void
      @lpVtbl.try &.value.ps_get_shader_resources.call(this, start_slot, num_views, ppShaderResourceViews)
    end
    def ps_get_shader(this : ID3D10Device1*, ppPixelShader : Void**) : Void
      @lpVtbl.try &.value.ps_get_shader.call(this, ppPixelShader)
    end
    def ps_get_samplers(this : ID3D10Device1*, start_slot : UInt32, num_samplers : UInt32, ppSamplers : Void**) : Void
      @lpVtbl.try &.value.ps_get_samplers.call(this, start_slot, num_samplers, ppSamplers)
    end
    def vs_get_shader(this : ID3D10Device1*, ppVertexShader : Void**) : Void
      @lpVtbl.try &.value.vs_get_shader.call(this, ppVertexShader)
    end
    def ps_get_constant_buffers(this : ID3D10Device1*, start_slot : UInt32, num_buffers : UInt32, ppConstantBuffers : Void**) : Void
      @lpVtbl.try &.value.ps_get_constant_buffers.call(this, start_slot, num_buffers, ppConstantBuffers)
    end
    def ia_get_input_layout(this : ID3D10Device1*, ppInputLayout : Void**) : Void
      @lpVtbl.try &.value.ia_get_input_layout.call(this, ppInputLayout)
    end
    def ia_get_vertex_buffers(this : ID3D10Device1*, start_slot : UInt32, num_buffers : UInt32, ppVertexBuffers : Void**, pStrides : UInt32*, pOffsets : UInt32*) : Void
      @lpVtbl.try &.value.ia_get_vertex_buffers.call(this, start_slot, num_buffers, ppVertexBuffers, pStrides, pOffsets)
    end
    def ia_get_index_buffer(this : ID3D10Device1*, pIndexBuffer : Void**, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT*, offset : UInt32*) : Void
      @lpVtbl.try &.value.ia_get_index_buffer.call(this, pIndexBuffer, format, offset)
    end
    def gs_get_constant_buffers(this : ID3D10Device1*, start_slot : UInt32, num_buffers : UInt32, ppConstantBuffers : Void**) : Void
      @lpVtbl.try &.value.gs_get_constant_buffers.call(this, start_slot, num_buffers, ppConstantBuffers)
    end
    def gs_get_shader(this : ID3D10Device1*, ppGeometryShader : Void**) : Void
      @lpVtbl.try &.value.gs_get_shader.call(this, ppGeometryShader)
    end
    def ia_get_primitive_topology(this : ID3D10Device1*, pTopology : Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY*) : Void
      @lpVtbl.try &.value.ia_get_primitive_topology.call(this, pTopology)
    end
    def vs_get_shader_resources(this : ID3D10Device1*, start_slot : UInt32, num_views : UInt32, ppShaderResourceViews : Void**) : Void
      @lpVtbl.try &.value.vs_get_shader_resources.call(this, start_slot, num_views, ppShaderResourceViews)
    end
    def vs_get_samplers(this : ID3D10Device1*, start_slot : UInt32, num_samplers : UInt32, ppSamplers : Void**) : Void
      @lpVtbl.try &.value.vs_get_samplers.call(this, start_slot, num_samplers, ppSamplers)
    end
    def get_predication(this : ID3D10Device1*, ppPredicate : Void**, pPredicateValue : Win32cr::Foundation::BOOL*) : Void
      @lpVtbl.try &.value.get_predication.call(this, ppPredicate, pPredicateValue)
    end
    def gs_get_shader_resources(this : ID3D10Device1*, start_slot : UInt32, num_views : UInt32, ppShaderResourceViews : Void**) : Void
      @lpVtbl.try &.value.gs_get_shader_resources.call(this, start_slot, num_views, ppShaderResourceViews)
    end
    def gs_get_samplers(this : ID3D10Device1*, start_slot : UInt32, num_samplers : UInt32, ppSamplers : Void**) : Void
      @lpVtbl.try &.value.gs_get_samplers.call(this, start_slot, num_samplers, ppSamplers)
    end
    def om_get_render_targets(this : ID3D10Device1*, num_views : UInt32, ppRenderTargetViews : Void**, ppDepthStencilView : Void**) : Void
      @lpVtbl.try &.value.om_get_render_targets.call(this, num_views, ppRenderTargetViews, ppDepthStencilView)
    end
    def om_get_blend_state(this : ID3D10Device1*, ppBlendState : Void**, blend_factor : Float32*, pSampleMask : UInt32*) : Void
      @lpVtbl.try &.value.om_get_blend_state.call(this, ppBlendState, blend_factor, pSampleMask)
    end
    def om_get_depth_stencil_state(this : ID3D10Device1*, ppDepthStencilState : Void**, pStencilRef : UInt32*) : Void
      @lpVtbl.try &.value.om_get_depth_stencil_state.call(this, ppDepthStencilState, pStencilRef)
    end
    def so_get_targets(this : ID3D10Device1*, num_buffers : UInt32, ppSOTargets : Void**, pOffsets : UInt32*) : Void
      @lpVtbl.try &.value.so_get_targets.call(this, num_buffers, ppSOTargets, pOffsets)
    end
    def rs_get_state(this : ID3D10Device1*, ppRasterizerState : Void**) : Void
      @lpVtbl.try &.value.rs_get_state.call(this, ppRasterizerState)
    end
    def rs_get_viewports(this : ID3D10Device1*, num_viewports : UInt32*, pViewports : Win32cr::Graphics::Direct3D10::D3D10_VIEWPORT*) : Void
      @lpVtbl.try &.value.rs_get_viewports.call(this, num_viewports, pViewports)
    end
    def rs_get_scissor_rects(this : ID3D10Device1*, num_rects : UInt32*, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.rs_get_scissor_rects.call(this, num_rects, pRects)
    end
    def get_device_removed_reason(this : ID3D10Device1*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_removed_reason.call(this)
    end
    def set_exception_mode(this : ID3D10Device1*, raise_flags : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_exception_mode.call(this, raise_flags)
    end
    def get_exception_mode(this : ID3D10Device1*) : UInt32
      @lpVtbl.try &.value.get_exception_mode.call(this)
    end
    def get_private_data(this : ID3D10Device1*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D10Device1*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D10Device1*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def clear_state(this : ID3D10Device1*) : Void
      @lpVtbl.try &.value.clear_state.call(this)
    end
    def flush(this : ID3D10Device1*) : Void
      @lpVtbl.try &.value.flush.call(this)
    end
    def create_buffer(this : ID3D10Device1*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_BUFFER_DESC*, pInitialData : Win32cr::Graphics::Direct3D10::D3D10_SUBRESOURCE_DATA*, ppBuffer : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_buffer.call(this, pDesc, pInitialData, ppBuffer)
    end
    def create_texture1_d(this : ID3D10Device1*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_TEXTURE1D_DESC*, pInitialData : Win32cr::Graphics::Direct3D10::D3D10_SUBRESOURCE_DATA*, ppTexture1D : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_texture1_d.call(this, pDesc, pInitialData, ppTexture1D)
    end
    def create_texture2_d(this : ID3D10Device1*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_TEXTURE2D_DESC*, pInitialData : Win32cr::Graphics::Direct3D10::D3D10_SUBRESOURCE_DATA*, ppTexture2D : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_texture2_d.call(this, pDesc, pInitialData, ppTexture2D)
    end
    def create_texture3_d(this : ID3D10Device1*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_TEXTURE3D_DESC*, pInitialData : Win32cr::Graphics::Direct3D10::D3D10_SUBRESOURCE_DATA*, ppTexture3D : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_texture3_d.call(this, pDesc, pInitialData, ppTexture3D)
    end
    def create_shader_resource_view(this : ID3D10Device1*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_SHADER_RESOURCE_VIEW_DESC*, ppSRView : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shader_resource_view.call(this, pResource, pDesc, ppSRView)
    end
    def create_render_target_view(this : ID3D10Device1*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_RENDER_TARGET_VIEW_DESC*, ppRTView : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_render_target_view.call(this, pResource, pDesc, ppRTView)
    end
    def create_depth_stencil_view(this : ID3D10Device1*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_DEPTH_STENCIL_VIEW_DESC*, ppDepthStencilView : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_depth_stencil_view.call(this, pResource, pDesc, ppDepthStencilView)
    end
    def create_input_layout(this : ID3D10Device1*, pInputElementDescs : Win32cr::Graphics::Direct3D10::D3D10_INPUT_ELEMENT_DESC*, num_elements : UInt32, pShaderBytecodeWithInputSignature : Void*, bytecode_length : LibC::UIntPtrT, ppInputLayout : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_input_layout.call(this, pInputElementDescs, num_elements, pShaderBytecodeWithInputSignature, bytecode_length, ppInputLayout)
    end
    def create_vertex_shader(this : ID3D10Device1*, pShaderBytecode : Void*, bytecode_length : LibC::UIntPtrT, ppVertexShader : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_vertex_shader.call(this, pShaderBytecode, bytecode_length, ppVertexShader)
    end
    def create_geometry_shader(this : ID3D10Device1*, pShaderBytecode : Void*, bytecode_length : LibC::UIntPtrT, ppGeometryShader : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_geometry_shader.call(this, pShaderBytecode, bytecode_length, ppGeometryShader)
    end
    def create_geometry_shader_with_stream_output(this : ID3D10Device1*, pShaderBytecode : Void*, bytecode_length : LibC::UIntPtrT, pSODeclaration : Win32cr::Graphics::Direct3D10::D3D10_SO_DECLARATION_ENTRY*, num_entries : UInt32, output_stream_stride : UInt32, ppGeometryShader : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_geometry_shader_with_stream_output.call(this, pShaderBytecode, bytecode_length, pSODeclaration, num_entries, output_stream_stride, ppGeometryShader)
    end
    def create_pixel_shader(this : ID3D10Device1*, pShaderBytecode : Void*, bytecode_length : LibC::UIntPtrT, ppPixelShader : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pixel_shader.call(this, pShaderBytecode, bytecode_length, ppPixelShader)
    end
    def create_blend_state(this : ID3D10Device1*, pBlendStateDesc : Win32cr::Graphics::Direct3D10::D3D10_BLEND_DESC*, ppBlendState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_blend_state.call(this, pBlendStateDesc, ppBlendState)
    end
    def create_depth_stencil_state(this : ID3D10Device1*, pDepthStencilDesc : Win32cr::Graphics::Direct3D10::D3D10_DEPTH_STENCIL_DESC*, ppDepthStencilState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_depth_stencil_state.call(this, pDepthStencilDesc, ppDepthStencilState)
    end
    def create_rasterizer_state(this : ID3D10Device1*, pRasterizerDesc : Win32cr::Graphics::Direct3D10::D3D10_RASTERIZER_DESC*, ppRasterizerState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_rasterizer_state.call(this, pRasterizerDesc, ppRasterizerState)
    end
    def create_sampler_state(this : ID3D10Device1*, pSamplerDesc : Win32cr::Graphics::Direct3D10::D3D10_SAMPLER_DESC*, ppSamplerState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_sampler_state.call(this, pSamplerDesc, ppSamplerState)
    end
    def create_query(this : ID3D10Device1*, pQueryDesc : Win32cr::Graphics::Direct3D10::D3D10_QUERY_DESC*, ppQuery : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_query.call(this, pQueryDesc, ppQuery)
    end
    def create_predicate(this : ID3D10Device1*, pPredicateDesc : Win32cr::Graphics::Direct3D10::D3D10_QUERY_DESC*, ppPredicate : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_predicate.call(this, pPredicateDesc, ppPredicate)
    end
    def create_counter(this : ID3D10Device1*, pCounterDesc : Win32cr::Graphics::Direct3D10::D3D10_COUNTER_DESC*, ppCounter : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_counter.call(this, pCounterDesc, ppCounter)
    end
    def check_format_support(this : ID3D10Device1*, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, pFormatSupport : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_format_support.call(this, format, pFormatSupport)
    end
    def check_multisample_quality_levels(this : ID3D10Device1*, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, sample_count : UInt32, pNumQualityLevels : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_multisample_quality_levels.call(this, format, sample_count, pNumQualityLevels)
    end
    def check_counter_info(this : ID3D10Device1*, pCounterInfo : Win32cr::Graphics::Direct3D10::D3D10_COUNTER_INFO*) : Void
      @lpVtbl.try &.value.check_counter_info.call(this, pCounterInfo)
    end
    def check_counter(this : ID3D10Device1*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_COUNTER_DESC*, pType : Win32cr::Graphics::Direct3D10::D3D10_COUNTER_TYPE*, pActiveCounters : UInt32*, szName : UInt8*, pNameLength : UInt32*, szUnits : UInt8*, pUnitsLength : UInt32*, szDescription : UInt8*, pDescriptionLength : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_counter.call(this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength)
    end
    def get_creation_flags(this : ID3D10Device1*) : UInt32
      @lpVtbl.try &.value.get_creation_flags.call(this)
    end
    def open_shared_resource(this : ID3D10Device1*, hResource : Win32cr::Foundation::HANDLE, returned_interface : LibC::GUID*, ppResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_resource.call(this, hResource, returned_interface, ppResource)
    end
    def set_text_filter_size(this : ID3D10Device1*, width : UInt32, height : UInt32) : Void
      @lpVtbl.try &.value.set_text_filter_size.call(this, width, height)
    end
    def get_text_filter_size(this : ID3D10Device1*, pWidth : UInt32*, pHeight : UInt32*) : Void
      @lpVtbl.try &.value.get_text_filter_size.call(this, pWidth, pHeight)
    end
    def create_shader_resource_view1(this : ID3D10Device1*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_SHADER_RESOURCE_VIEW_DESC1*, ppSRView : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shader_resource_view1.call(this, pResource, pDesc, ppSRView)
    end
    def create_blend_state1(this : ID3D10Device1*, pBlendStateDesc : Win32cr::Graphics::Direct3D10::D3D10_BLEND_DESC1*, ppBlendState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_blend_state1.call(this, pBlendStateDesc, ppBlendState)
    end
    def get_feature_level(this : ID3D10Device1*) : Win32cr::Graphics::Direct3D10::D3D10_FEATURE_LEVEL1
      @lpVtbl.try &.value.get_feature_level.call(this)
    end

  end

  @[Extern]
  record ID3D10ShaderReflection1Vtbl,
    query_interface : Proc(ID3D10ShaderReflection1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D10ShaderReflection1*, UInt32),
    release : Proc(ID3D10ShaderReflection1*, UInt32),
    get_desc : Proc(ID3D10ShaderReflection1*, Win32cr::Graphics::Direct3D10::D3D10_SHADER_DESC*, Win32cr::Foundation::HRESULT),
    get_constant_buffer_by_index : Proc(ID3D10ShaderReflection1*, UInt32, Void*),
    get_constant_buffer_by_name : Proc(ID3D10ShaderReflection1*, Win32cr::Foundation::PSTR, Void*),
    get_resource_binding_desc : Proc(ID3D10ShaderReflection1*, UInt32, Win32cr::Graphics::Direct3D10::D3D10_SHADER_INPUT_BIND_DESC*, Win32cr::Foundation::HRESULT),
    get_input_parameter_desc : Proc(ID3D10ShaderReflection1*, UInt32, Win32cr::Graphics::Direct3D10::D3D10_SIGNATURE_PARAMETER_DESC*, Win32cr::Foundation::HRESULT),
    get_output_parameter_desc : Proc(ID3D10ShaderReflection1*, UInt32, Win32cr::Graphics::Direct3D10::D3D10_SIGNATURE_PARAMETER_DESC*, Win32cr::Foundation::HRESULT),
    get_variable_by_name : Proc(ID3D10ShaderReflection1*, Win32cr::Foundation::PSTR, Void*),
    get_resource_binding_desc_by_name : Proc(ID3D10ShaderReflection1*, Win32cr::Foundation::PSTR, Win32cr::Graphics::Direct3D10::D3D10_SHADER_INPUT_BIND_DESC*, Win32cr::Foundation::HRESULT),
    get_mov_instruction_count : Proc(ID3D10ShaderReflection1*, UInt32*, Win32cr::Foundation::HRESULT),
    get_movc_instruction_count : Proc(ID3D10ShaderReflection1*, UInt32*, Win32cr::Foundation::HRESULT),
    get_conversion_instruction_count : Proc(ID3D10ShaderReflection1*, UInt32*, Win32cr::Foundation::HRESULT),
    get_bitwise_instruction_count : Proc(ID3D10ShaderReflection1*, UInt32*, Win32cr::Foundation::HRESULT),
    get_gs_input_primitive : Proc(ID3D10ShaderReflection1*, Win32cr::Graphics::Direct3D::D3D_PRIMITIVE*, Win32cr::Foundation::HRESULT),
    is_level9_shader : Proc(ID3D10ShaderReflection1*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    is_sample_frequency_shader : Proc(ID3D10ShaderReflection1*, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D10ShaderReflection1, lpVtbl : ID3D10ShaderReflection1Vtbl* do
    GUID = LibC::GUID.new(0xc3457783_u32, 0xa846_u16, 0x47ce_u16, StaticArray[0x95_u8, 0x20_u8, 0xce_u8, 0xa6_u8, 0xf6_u8, 0x6e_u8, 0x74_u8, 0x47_u8])
    def query_interface(this : ID3D10ShaderReflection1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D10ShaderReflection1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D10ShaderReflection1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_desc(this : ID3D10ShaderReflection1*, pDesc : Win32cr::Graphics::Direct3D10::D3D10_SHADER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_constant_buffer_by_index(this : ID3D10ShaderReflection1*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_constant_buffer_by_index.call(this, index)
    end
    def get_constant_buffer_by_name(this : ID3D10ShaderReflection1*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_constant_buffer_by_name.call(this, name)
    end
    def get_resource_binding_desc(this : ID3D10ShaderReflection1*, resource_index : UInt32, pDesc : Win32cr::Graphics::Direct3D10::D3D10_SHADER_INPUT_BIND_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_resource_binding_desc.call(this, resource_index, pDesc)
    end
    def get_input_parameter_desc(this : ID3D10ShaderReflection1*, parameter_index : UInt32, pDesc : Win32cr::Graphics::Direct3D10::D3D10_SIGNATURE_PARAMETER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_parameter_desc.call(this, parameter_index, pDesc)
    end
    def get_output_parameter_desc(this : ID3D10ShaderReflection1*, parameter_index : UInt32, pDesc : Win32cr::Graphics::Direct3D10::D3D10_SIGNATURE_PARAMETER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_parameter_desc.call(this, parameter_index, pDesc)
    end
    def get_variable_by_name(this : ID3D10ShaderReflection1*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_variable_by_name.call(this, name)
    end
    def get_resource_binding_desc_by_name(this : ID3D10ShaderReflection1*, name : Win32cr::Foundation::PSTR, pDesc : Win32cr::Graphics::Direct3D10::D3D10_SHADER_INPUT_BIND_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_resource_binding_desc_by_name.call(this, name, pDesc)
    end
    def get_mov_instruction_count(this : ID3D10ShaderReflection1*, pCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_mov_instruction_count.call(this, pCount)
    end
    def get_movc_instruction_count(this : ID3D10ShaderReflection1*, pCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_movc_instruction_count.call(this, pCount)
    end
    def get_conversion_instruction_count(this : ID3D10ShaderReflection1*, pCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_conversion_instruction_count.call(this, pCount)
    end
    def get_bitwise_instruction_count(this : ID3D10ShaderReflection1*, pCount : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_bitwise_instruction_count.call(this, pCount)
    end
    def get_gs_input_primitive(this : ID3D10ShaderReflection1*, pPrim : Win32cr::Graphics::Direct3D::D3D_PRIMITIVE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_gs_input_primitive.call(this, pPrim)
    end
    def is_level9_shader(this : ID3D10ShaderReflection1*, pbLevel9Shader : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_level9_shader.call(this, pbLevel9Shader)
    end
    def is_sample_frequency_shader(this : ID3D10ShaderReflection1*, pbSampleFrequency : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_sample_frequency_shader.call(this, pbSampleFrequency)
    end

  end

  def d3D10CreateDevice(pAdapter : Void*, driver_type : Win32cr::Graphics::Direct3D10::D3D10_DRIVER_TYPE, software : Win32cr::Foundation::HINSTANCE, flags : UInt32, sdk_version : UInt32, ppDevice : Void**) : Win32cr::Foundation::HRESULT
    C.D3D10CreateDevice(pAdapter, driver_type, software, flags, sdk_version, ppDevice)
  end

  def d3D10CreateDeviceAndSwapChain(pAdapter : Void*, driver_type : Win32cr::Graphics::Direct3D10::D3D10_DRIVER_TYPE, software : Win32cr::Foundation::HINSTANCE, flags : UInt32, sdk_version : UInt32, pSwapChainDesc : Win32cr::Graphics::Dxgi::DXGI_SWAP_CHAIN_DESC*, ppSwapChain : Void**, ppDevice : Void**) : Win32cr::Foundation::HRESULT
    C.D3D10CreateDeviceAndSwapChain(pAdapter, driver_type, software, flags, sdk_version, pSwapChainDesc, ppSwapChain, ppDevice)
  end

  def d3D10CreateBlob(num_bytes : LibC::UIntPtrT, ppBuffer : Void**) : Win32cr::Foundation::HRESULT
    C.D3D10CreateBlob(num_bytes, ppBuffer)
  end

  def d3D10CompileShader(pSrcData : Win32cr::Foundation::PSTR, src_data_size : LibC::UIntPtrT, pFileName : Win32cr::Foundation::PSTR, pDefines : Win32cr::Graphics::Direct3D::D3D_SHADER_MACRO*, pInclude : Void*, pFunctionName : Win32cr::Foundation::PSTR, pProfile : Win32cr::Foundation::PSTR, flags : UInt32, ppShader : Void**, ppErrorMsgs : Void**) : Win32cr::Foundation::HRESULT
    C.D3D10CompileShader(pSrcData, src_data_size, pFileName, pDefines, pInclude, pFunctionName, pProfile, flags, ppShader, ppErrorMsgs)
  end

  def d3D10DisassembleShader(pShader : Void*, bytecode_length : LibC::UIntPtrT, enable_color_code : Win32cr::Foundation::BOOL, pComments : Win32cr::Foundation::PSTR, ppDisassembly : Void**) : Win32cr::Foundation::HRESULT
    C.D3D10DisassembleShader(pShader, bytecode_length, enable_color_code, pComments, ppDisassembly)
  end

  def d3D10GetPixelShaderProfile(pDevice : Void*) : Win32cr::Foundation::PSTR
    C.D3D10GetPixelShaderProfile(pDevice)
  end

  def d3D10GetVertexShaderProfile(pDevice : Void*) : Win32cr::Foundation::PSTR
    C.D3D10GetVertexShaderProfile(pDevice)
  end

  def d3D10GetGeometryShaderProfile(pDevice : Void*) : Win32cr::Foundation::PSTR
    C.D3D10GetGeometryShaderProfile(pDevice)
  end

  def d3D10ReflectShader(pShaderBytecode : Void*, bytecode_length : LibC::UIntPtrT, ppReflector : Void**) : Win32cr::Foundation::HRESULT
    C.D3D10ReflectShader(pShaderBytecode, bytecode_length, ppReflector)
  end

  def d3D10PreprocessShader(pSrcData : Win32cr::Foundation::PSTR, src_data_size : LibC::UIntPtrT, pFileName : Win32cr::Foundation::PSTR, pDefines : Win32cr::Graphics::Direct3D::D3D_SHADER_MACRO*, pInclude : Void*, ppShaderText : Void**, ppErrorMsgs : Void**) : Win32cr::Foundation::HRESULT
    C.D3D10PreprocessShader(pSrcData, src_data_size, pFileName, pDefines, pInclude, ppShaderText, ppErrorMsgs)
  end

  def d3D10GetInputSignatureBlob(pShaderBytecode : Void*, bytecode_length : LibC::UIntPtrT, ppSignatureBlob : Void**) : Win32cr::Foundation::HRESULT
    C.D3D10GetInputSignatureBlob(pShaderBytecode, bytecode_length, ppSignatureBlob)
  end

  def d3D10GetOutputSignatureBlob(pShaderBytecode : Void*, bytecode_length : LibC::UIntPtrT, ppSignatureBlob : Void**) : Win32cr::Foundation::HRESULT
    C.D3D10GetOutputSignatureBlob(pShaderBytecode, bytecode_length, ppSignatureBlob)
  end

  def d3D10GetInputAndOutputSignatureBlob(pShaderBytecode : Void*, bytecode_length : LibC::UIntPtrT, ppSignatureBlob : Void**) : Win32cr::Foundation::HRESULT
    C.D3D10GetInputAndOutputSignatureBlob(pShaderBytecode, bytecode_length, ppSignatureBlob)
  end

  def d3D10GetShaderDebugInfo(pShaderBytecode : Void*, bytecode_length : LibC::UIntPtrT, ppDebugInfo : Void**) : Win32cr::Foundation::HRESULT
    C.D3D10GetShaderDebugInfo(pShaderBytecode, bytecode_length, ppDebugInfo)
  end

  def d3D10StateBlockMaskUnion(pA : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, pB : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, pResult : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*) : Win32cr::Foundation::HRESULT
    C.D3D10StateBlockMaskUnion(pA, pB, pResult)
  end

  def d3D10StateBlockMaskIntersect(pA : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, pB : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, pResult : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*) : Win32cr::Foundation::HRESULT
    C.D3D10StateBlockMaskIntersect(pA, pB, pResult)
  end

  def d3D10StateBlockMaskDifference(pA : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, pB : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, pResult : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*) : Win32cr::Foundation::HRESULT
    C.D3D10StateBlockMaskDifference(pA, pB, pResult)
  end

  def d3D10StateBlockMaskEnableCapture(pMask : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, state_type : Win32cr::Graphics::Direct3D10::D3D10_DEVICE_STATE_TYPES, range_start : UInt32, range_length : UInt32) : Win32cr::Foundation::HRESULT
    C.D3D10StateBlockMaskEnableCapture(pMask, state_type, range_start, range_length)
  end

  def d3D10StateBlockMaskDisableCapture(pMask : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, state_type : Win32cr::Graphics::Direct3D10::D3D10_DEVICE_STATE_TYPES, range_start : UInt32, range_length : UInt32) : Win32cr::Foundation::HRESULT
    C.D3D10StateBlockMaskDisableCapture(pMask, state_type, range_start, range_length)
  end

  def d3D10StateBlockMaskEnableAll(pMask : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*) : Win32cr::Foundation::HRESULT
    C.D3D10StateBlockMaskEnableAll(pMask)
  end

  def d3D10StateBlockMaskDisableAll(pMask : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*) : Win32cr::Foundation::HRESULT
    C.D3D10StateBlockMaskDisableAll(pMask)
  end

  def d3D10StateBlockMaskGetSetting(pMask : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, state_type : Win32cr::Graphics::Direct3D10::D3D10_DEVICE_STATE_TYPES, entry : UInt32) : Win32cr::Foundation::BOOL
    C.D3D10StateBlockMaskGetSetting(pMask, state_type, entry)
  end

  def d3D10CreateStateBlock(pDevice : Void*, pStateBlockMask : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, ppStateBlock : Void**) : Win32cr::Foundation::HRESULT
    C.D3D10CreateStateBlock(pDevice, pStateBlockMask, ppStateBlock)
  end

  def d3D10CompileEffectFromMemory(pData : Void*, data_length : LibC::UIntPtrT, pSrcFileName : Win32cr::Foundation::PSTR, pDefines : Win32cr::Graphics::Direct3D::D3D_SHADER_MACRO*, pInclude : Void*, hlsl_flags : UInt32, fx_flags : UInt32, ppCompiledEffect : Void**, ppErrors : Void**) : Win32cr::Foundation::HRESULT
    C.D3D10CompileEffectFromMemory(pData, data_length, pSrcFileName, pDefines, pInclude, hlsl_flags, fx_flags, ppCompiledEffect, ppErrors)
  end

  def d3D10CreateEffectFromMemory(pData : Void*, data_length : LibC::UIntPtrT, fx_flags : UInt32, pDevice : Void*, pEffectPool : Void*, ppEffect : Void**) : Win32cr::Foundation::HRESULT
    C.D3D10CreateEffectFromMemory(pData, data_length, fx_flags, pDevice, pEffectPool, ppEffect)
  end

  def d3D10CreateEffectPoolFromMemory(pData : Void*, data_length : LibC::UIntPtrT, fx_flags : UInt32, pDevice : Void*, ppEffectPool : Void**) : Win32cr::Foundation::HRESULT
    C.D3D10CreateEffectPoolFromMemory(pData, data_length, fx_flags, pDevice, ppEffectPool)
  end

  def d3D10DisassembleEffect(pEffect : Void*, enable_color_code : Win32cr::Foundation::BOOL, ppDisassembly : Void**) : Win32cr::Foundation::HRESULT
    C.D3D10DisassembleEffect(pEffect, enable_color_code, ppDisassembly)
  end

  def d3D10CreateDevice1(pAdapter : Void*, driver_type : Win32cr::Graphics::Direct3D10::D3D10_DRIVER_TYPE, software : Win32cr::Foundation::HINSTANCE, flags : UInt32, hardware_level : Win32cr::Graphics::Direct3D10::D3D10_FEATURE_LEVEL1, sdk_version : UInt32, ppDevice : Void**) : Win32cr::Foundation::HRESULT
    C.D3D10CreateDevice1(pAdapter, driver_type, software, flags, hardware_level, sdk_version, ppDevice)
  end

  def d3D10CreateDeviceAndSwapChain1(pAdapter : Void*, driver_type : Win32cr::Graphics::Direct3D10::D3D10_DRIVER_TYPE, software : Win32cr::Foundation::HINSTANCE, flags : UInt32, hardware_level : Win32cr::Graphics::Direct3D10::D3D10_FEATURE_LEVEL1, sdk_version : UInt32, pSwapChainDesc : Win32cr::Graphics::Dxgi::DXGI_SWAP_CHAIN_DESC*, ppSwapChain : Void**, ppDevice : Void**) : Win32cr::Foundation::HRESULT
    C.D3D10CreateDeviceAndSwapChain1(pAdapter, driver_type, software, flags, hardware_level, sdk_version, pSwapChainDesc, ppSwapChain, ppDevice)
  end

  @[Link("d3d10")]
  @[Link("d3d10_1")]
  lib C
    # :nodoc:
    fun D3D10CreateDevice(pAdapter : Void*, driver_type : Win32cr::Graphics::Direct3D10::D3D10_DRIVER_TYPE, software : Win32cr::Foundation::HINSTANCE, flags : UInt32, sdk_version : UInt32, ppDevice : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10CreateDeviceAndSwapChain(pAdapter : Void*, driver_type : Win32cr::Graphics::Direct3D10::D3D10_DRIVER_TYPE, software : Win32cr::Foundation::HINSTANCE, flags : UInt32, sdk_version : UInt32, pSwapChainDesc : Win32cr::Graphics::Dxgi::DXGI_SWAP_CHAIN_DESC*, ppSwapChain : Void**, ppDevice : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10CreateBlob(num_bytes : LibC::UIntPtrT, ppBuffer : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10CompileShader(pSrcData : Win32cr::Foundation::PSTR, src_data_size : LibC::UIntPtrT, pFileName : Win32cr::Foundation::PSTR, pDefines : Win32cr::Graphics::Direct3D::D3D_SHADER_MACRO*, pInclude : Void*, pFunctionName : Win32cr::Foundation::PSTR, pProfile : Win32cr::Foundation::PSTR, flags : UInt32, ppShader : Void**, ppErrorMsgs : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10DisassembleShader(pShader : Void*, bytecode_length : LibC::UIntPtrT, enable_color_code : Win32cr::Foundation::BOOL, pComments : Win32cr::Foundation::PSTR, ppDisassembly : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10GetPixelShaderProfile(pDevice : Void*) : Win32cr::Foundation::PSTR

    # :nodoc:
    fun D3D10GetVertexShaderProfile(pDevice : Void*) : Win32cr::Foundation::PSTR

    # :nodoc:
    fun D3D10GetGeometryShaderProfile(pDevice : Void*) : Win32cr::Foundation::PSTR

    # :nodoc:
    fun D3D10ReflectShader(pShaderBytecode : Void*, bytecode_length : LibC::UIntPtrT, ppReflector : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10PreprocessShader(pSrcData : Win32cr::Foundation::PSTR, src_data_size : LibC::UIntPtrT, pFileName : Win32cr::Foundation::PSTR, pDefines : Win32cr::Graphics::Direct3D::D3D_SHADER_MACRO*, pInclude : Void*, ppShaderText : Void**, ppErrorMsgs : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10GetInputSignatureBlob(pShaderBytecode : Void*, bytecode_length : LibC::UIntPtrT, ppSignatureBlob : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10GetOutputSignatureBlob(pShaderBytecode : Void*, bytecode_length : LibC::UIntPtrT, ppSignatureBlob : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10GetInputAndOutputSignatureBlob(pShaderBytecode : Void*, bytecode_length : LibC::UIntPtrT, ppSignatureBlob : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10GetShaderDebugInfo(pShaderBytecode : Void*, bytecode_length : LibC::UIntPtrT, ppDebugInfo : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10StateBlockMaskUnion(pA : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, pB : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, pResult : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10StateBlockMaskIntersect(pA : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, pB : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, pResult : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10StateBlockMaskDifference(pA : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, pB : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, pResult : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10StateBlockMaskEnableCapture(pMask : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, state_type : Win32cr::Graphics::Direct3D10::D3D10_DEVICE_STATE_TYPES, range_start : UInt32, range_length : UInt32) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10StateBlockMaskDisableCapture(pMask : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, state_type : Win32cr::Graphics::Direct3D10::D3D10_DEVICE_STATE_TYPES, range_start : UInt32, range_length : UInt32) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10StateBlockMaskEnableAll(pMask : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10StateBlockMaskDisableAll(pMask : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10StateBlockMaskGetSetting(pMask : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, state_type : Win32cr::Graphics::Direct3D10::D3D10_DEVICE_STATE_TYPES, entry : UInt32) : Win32cr::Foundation::BOOL

    # :nodoc:
    fun D3D10CreateStateBlock(pDevice : Void*, pStateBlockMask : Win32cr::Graphics::Direct3D10::D3D10_STATE_BLOCK_MASK*, ppStateBlock : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10CompileEffectFromMemory(pData : Void*, data_length : LibC::UIntPtrT, pSrcFileName : Win32cr::Foundation::PSTR, pDefines : Win32cr::Graphics::Direct3D::D3D_SHADER_MACRO*, pInclude : Void*, hlsl_flags : UInt32, fx_flags : UInt32, ppCompiledEffect : Void**, ppErrors : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10CreateEffectFromMemory(pData : Void*, data_length : LibC::UIntPtrT, fx_flags : UInt32, pDevice : Void*, pEffectPool : Void*, ppEffect : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10CreateEffectPoolFromMemory(pData : Void*, data_length : LibC::UIntPtrT, fx_flags : UInt32, pDevice : Void*, ppEffectPool : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10DisassembleEffect(pEffect : Void*, enable_color_code : Win32cr::Foundation::BOOL, ppDisassembly : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10CreateDevice1(pAdapter : Void*, driver_type : Win32cr::Graphics::Direct3D10::D3D10_DRIVER_TYPE, software : Win32cr::Foundation::HINSTANCE, flags : UInt32, hardware_level : Win32cr::Graphics::Direct3D10::D3D10_FEATURE_LEVEL1, sdk_version : UInt32, ppDevice : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D10CreateDeviceAndSwapChain1(pAdapter : Void*, driver_type : Win32cr::Graphics::Direct3D10::D3D10_DRIVER_TYPE, software : Win32cr::Foundation::HINSTANCE, flags : UInt32, hardware_level : Win32cr::Graphics::Direct3D10::D3D10_FEATURE_LEVEL1, sdk_version : UInt32, pSwapChainDesc : Win32cr::Graphics::Dxgi::DXGI_SWAP_CHAIN_DESC*, ppSwapChain : Void**, ppDevice : Void**) : Win32cr::Foundation::HRESULT

  end
end