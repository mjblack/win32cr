require "./../foundation.cr"
require "./dxgi/common.cr"
require "./../system/com.cr"
require "./direct3_d.cr"
require "./../security.cr"

module Win32cr::Graphics::Direct3D12
  extend self
  alias PFN_D3D12_SERIALIZE_ROOT_SIGNATURE = Proc(Win32cr::Graphics::Direct3D12::D3D12_ROOT_SIGNATURE_DESC*, Win32cr::Graphics::Direct3D12::D3D_ROOT_SIGNATURE_VERSION, Void**, Void**, Win32cr::Foundation::HRESULT)

  alias PFN_D3D12_CREATE_ROOT_SIGNATURE_DESERIALIZER = Proc(Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)

  alias PFN_D3D12_SERIALIZE_VERSIONED_ROOT_SIGNATURE = Proc(Win32cr::Graphics::Direct3D12::D3D12_VERSIONED_ROOT_SIGNATURE_DESC*, Void**, Void**, Win32cr::Foundation::HRESULT)

  alias PFN_D3D12_CREATE_VERSIONED_ROOT_SIGNATURE_DESERIALIZER = Proc(Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)

  alias D3D12MessageFunc = Proc(Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_CATEGORY, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_SEVERITY, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_ID, Win32cr::Foundation::PSTR, Void*, Void)

  alias PFN_D3D12_CREATE_DEVICE = Proc(Void*, Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)

  alias PFN_D3D12_GET_DEBUG_INTERFACE = Proc(LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)

  alias PFN_D3D12_GET_INTERFACE = Proc(LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)

  D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES = 4096_u32
  D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING = 5768_u32
  D3D12_16BIT_INDEX_STRIP_CUT_VALUE = 65535_u32
  D3D12_32BIT_INDEX_STRIP_CUT_VALUE = 4294967295_u32
  D3D12_8BIT_INDEX_STRIP_CUT_VALUE = 255_u32
  D3D12_APPEND_ALIGNED_ELEMENT = 4294967295_u32
  D3D12_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9_u32
  D3D12_CLIP_OR_CULL_DISTANCE_COUNT = 8_u32
  D3D12_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2_u32
  D3D12_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14_u32
  D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4_u32
  D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15_u32
  D3D12_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = 16_u32
  D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4_u32
  D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15_u32
  D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1_u32
  D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1_u32
  D3D12_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64_u32
  D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4_u32
  D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1_u32
  D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1_u32
  D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1_u32
  D3D12_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32_u32
  D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1_u32
  D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128_u32
  D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1_u32
  D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1_u32
  D3D12_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128_u32
  D3D12_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1_u32
  D3D12_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16_u32
  D3D12_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1_u32
  D3D12_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1_u32
  D3D12_COMMONSHADER_SAMPLER_SLOT_COUNT = 16_u32
  D3D12_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32_u32
  D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4_u32
  D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_COMMONSHADER_TEMP_REGISTER_COUNT = 4096_u32
  D3D12_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3_u32
  D3D12_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3_u32
  D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10_u32
  D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = -10_i32
  D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = -8_i32
  D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7_u32
  D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT = 256_u32
  D3D12_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 256_u32
  D3D12_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = 64_u32
  D3D12_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 240_u32
  D3D12_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = 68_u32
  D3D12_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 224_u32
  D3D12_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = 72_u32
  D3D12_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 208_u32
  D3D12_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = 76_u32
  D3D12_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 192_u32
  D3D12_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = 84_u32
  D3D12_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 176_u32
  D3D12_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = 92_u32
  D3D12_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 160_u32
  D3D12_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = 100_u32
  D3D12_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 144_u32
  D3D12_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = 112_u32
  D3D12_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 128_u32
  D3D12_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = 128_u32
  D3D12_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 112_u32
  D3D12_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = 144_u32
  D3D12_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 96_u32
  D3D12_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = 168_u32
  D3D12_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 80_u32
  D3D12_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = 204_u32
  D3D12_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 64_u32
  D3D12_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = 256_u32
  D3D12_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 48_u32
  D3D12_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = 340_u32
  D3D12_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 32_u32
  D3D12_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = 512_u32
  D3D12_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 16_u32
  D3D12_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = 768_u32
  D3D12_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = 1_u32
  D3D12_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = 256_u32
  D3D12_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = 768_u32
  D3D12_CS_4_X_THREAD_GROUP_MAX_X = 768_u32
  D3D12_CS_4_X_THREAD_GROUP_MAX_Y = 768_u32
  D3D12_CS_4_X_UAV_REGISTER_COUNT = 1_u32
  D3D12_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = 65535_u32
  D3D12_CS_TGSM_REGISTER_COUNT = 8192_u32
  D3D12_CS_TGSM_REGISTER_READS_PER_INST = 1_u32
  D3D12_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = 1_u32
  D3D12_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = 1_u32
  D3D12_CS_THREADGROUPID_REGISTER_COMPONENTS = 3_u32
  D3D12_CS_THREADGROUPID_REGISTER_COUNT = 1_u32
  D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = 1_u32
  D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = 1_u32
  D3D12_CS_THREADIDINGROUP_REGISTER_COMPONENTS = 3_u32
  D3D12_CS_THREADIDINGROUP_REGISTER_COUNT = 1_u32
  D3D12_CS_THREADID_REGISTER_COMPONENTS = 3_u32
  D3D12_CS_THREADID_REGISTER_COUNT = 1_u32
  D3D12_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = 1024_u32
  D3D12_CS_THREAD_GROUP_MAX_X = 1024_u32
  D3D12_CS_THREAD_GROUP_MAX_Y = 1024_u32
  D3D12_CS_THREAD_GROUP_MAX_Z = 64_u32
  D3D12_CS_THREAD_GROUP_MIN_X = 1_u32
  D3D12_CS_THREAD_GROUP_MIN_Y = 1_u32
  D3D12_CS_THREAD_GROUP_MIN_Z = 1_u32
  D3D12_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = 16384_u32
  D3D12_DEFAULT_BLEND_FACTOR_ALPHA = 1
  D3D12_DEFAULT_BLEND_FACTOR_BLUE = 1
  D3D12_DEFAULT_BLEND_FACTOR_GREEN = 1
  D3D12_DEFAULT_BLEND_FACTOR_RED = 1
  D3D12_DEFAULT_BORDER_COLOR_COMPONENT = 0
  D3D12_DEFAULT_DEPTH_BIAS = 0_i32
  D3D12_DEFAULT_DEPTH_BIAS_CLAMP = 0
  D3D12_DEFAULT_MAX_ANISOTROPY = 16_u32
  D3D12_DEFAULT_MIP_LOD_BIAS = 0
  D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 4194304_u32
  D3D12_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0_u32
  D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT = 65536_u32
  D3D12_DEFAULT_SAMPLE_MASK = 4294967295_u32
  D3D12_DEFAULT_SCISSOR_ENDX = 0_u32
  D3D12_DEFAULT_SCISSOR_ENDY = 0_u32
  D3D12_DEFAULT_SCISSOR_STARTX = 0_u32
  D3D12_DEFAULT_SCISSOR_STARTY = 0_u32
  D3D12_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0
  D3D12_DEFAULT_STENCIL_READ_MASK = 255_u32
  D3D12_DEFAULT_STENCIL_REFERENCE = 0_u32
  D3D12_DEFAULT_STENCIL_WRITE_MASK = 255_u32
  D3D12_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0_u32
  D3D12_DEFAULT_VIEWPORT_HEIGHT = 0_u32
  D3D12_DEFAULT_VIEWPORT_MAX_DEPTH = 0
  D3D12_DEFAULT_VIEWPORT_MIN_DEPTH = 0
  D3D12_DEFAULT_VIEWPORT_TOPLEFTX = 0_u32
  D3D12_DEFAULT_VIEWPORT_TOPLEFTY = 0_u32
  D3D12_DEFAULT_VIEWPORT_WIDTH = 0_u32
  D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND = 4294967295_u32
  D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_END = 4294967287_u32
  D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_START = 4294967280_u32
  D3D12_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968_u32
  D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = 4_u32
  D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = 32_u32
  D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = 2_u32
  D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = 1_u32
  D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = 3_u32
  D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = 1_u32
  D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = 2_u32
  D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = 1_u32
  D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4_u32
  D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = 32_u32
  D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2_u32
  D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1_u32
  D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1_u32
  D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1_u32
  D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2_u32
  D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1_u32
  D3D12_DS_OUTPUT_REGISTER_COMPONENTS = 4_u32
  D3D12_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_DS_OUTPUT_REGISTER_COUNT = 32_u32
  D3D12_FLOAT16_FUSED_TOLERANCE_IN_ULP = 0.6
  D3D12_FLOAT32_MAX = 3.4028235E+38
  D3D12_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = 0.6
  D3D12_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = 2.4
  D3D12_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = 1
  D3D12_FLOAT_TO_SRGB_OFFSET = 0.055
  D3D12_FLOAT_TO_SRGB_SCALE_1 = 12.92
  D3D12_FLOAT_TO_SRGB_SCALE_2 = 1.055
  D3D12_FLOAT_TO_SRGB_THRESHOLD = 0.0031308
  D3D12_FTOI_INSTRUCTION_MAX_INPUT = 2.1474836E+09
  D3D12_FTOI_INSTRUCTION_MIN_INPUT = -2.1474836E+09
  D3D12_FTOU_INSTRUCTION_MAX_INPUT = 4.2949673E+09
  D3D12_FTOU_INSTRUCTION_MIN_INPUT = 0
  D3D12_GS_INPUT_INSTANCE_ID_READS_PER_INST = 2_u32
  D3D12_GS_INPUT_INSTANCE_ID_READ_PORTS = 1_u32
  D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = 1_u32
  D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = 1_u32
  D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1_u32
  D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1_u32
  D3D12_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2_u32
  D3D12_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1_u32
  D3D12_GS_INPUT_REGISTER_COMPONENTS = 4_u32
  D3D12_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_GS_INPUT_REGISTER_COUNT = 32_u32
  D3D12_GS_INPUT_REGISTER_READS_PER_INST = 2_u32
  D3D12_GS_INPUT_REGISTER_READ_PORTS = 1_u32
  D3D12_GS_INPUT_REGISTER_VERTICES = 32_u32
  D3D12_GS_MAX_INSTANCE_COUNT = 32_u32
  D3D12_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = 1024_u32
  D3D12_GS_OUTPUT_ELEMENTS = 32_u32
  D3D12_GS_OUTPUT_REGISTER_COMPONENTS = 4_u32
  D3D12_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_GS_OUTPUT_REGISTER_COUNT = 32_u32
  D3D12_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = 32_u32
  D3D12_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = 32_u32
  D3D12_HS_CONTROL_POINT_REGISTER_COMPONENTS = 4_u32
  D3D12_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_HS_CONTROL_POINT_REGISTER_READS_PER_INST = 2_u32
  D3D12_HS_CONTROL_POINT_REGISTER_READ_PORTS = 1_u32
  D3D12_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = 4294967295_u32
  D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = 1_u32
  D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = 1_u32
  D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = 2_u32
  D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = 1_u32
  D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = 1_u32
  D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = 1_u32
  D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = 2_u32
  D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = 1_u32
  D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1_u32
  D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1_u32
  D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2_u32
  D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1_u32
  D3D12_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = 4294967295_u32
  D3D12_HS_MAXTESSFACTOR_LOWER_BOUND = 1
  D3D12_HS_MAXTESSFACTOR_UPPER_BOUND = 64
  D3D12_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968_u32
  D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = 1_u32
  D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = 1_u32
  D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = 2_u32
  D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = 1_u32
  D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4_u32
  D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = 32_u32
  D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2_u32
  D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1_u32
  D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = 128_u32
  D3D12_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0_u32
  D3D12_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0_u32
  D3D12_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0_u32
  D3D12_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1_u32
  D3D12_IA_INSTANCE_ID_BIT_COUNT = 32_u32
  D3D12_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32_u32
  D3D12_IA_PATCH_MAX_CONTROL_POINT_COUNT = 32_u32
  D3D12_IA_PRIMITIVE_ID_BIT_COUNT = 32_u32
  D3D12_IA_VERTEX_ID_BIT_COUNT = 32_u32
  D3D12_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 32_u32
  D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128_u32
  D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 32_u32
  D3D12_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 4294967295_u32
  D3D12_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 4294967295_u32
  D3D12_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = 4294967295_u32
  D3D12_KEEP_UNORDERED_ACCESS_VIEWS = 4294967295_u32
  D3D12_LINEAR_GAMMA = 1
  D3D12_MAJOR_VERSION = 12_u32
  D3D12_MAX_BORDER_COLOR_COMPONENT = 1
  D3D12_MAX_DEPTH = 1
  D3D12_MAX_LIVE_STATIC_SAMPLERS = 2032_u32
  D3D12_MAX_MAXANISOTROPY = 16_u32
  D3D12_MAX_MULTISAMPLE_SAMPLE_COUNT = 32_u32
  D3D12_MAX_POSITION_VALUE = 3.4028236E+34
  D3D12_MAX_ROOT_COST = 64_u32
  D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_1 = 1000000_u32
  D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_2 = 1000000_u32
  D3D12_MAX_SHADER_VISIBLE_SAMPLER_HEAP_SIZE = 2048_u32
  D3D12_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17_u32
  D3D12_MAX_VIEW_INSTANCE_COUNT = 4_u32
  D3D12_MINOR_VERSION = 0_u32
  D3D12_MIN_BORDER_COLOR_COMPONENT = 0
  D3D12_MIN_DEPTH = 0
  D3D12_MIN_MAXANISOTROPY = 0_u32
  D3D12_MIP_LOD_BIAS_MAX = 15.99
  D3D12_MIP_LOD_BIAS_MIN = -16
  D3D12_MIP_LOD_FRACTIONAL_BIT_COUNT = 8_u32
  D3D12_MIP_LOD_RANGE_BIT_COUNT = 8_u32
  D3D12_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = 1.4
  D3D12_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0_u32
  D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_END = 4294967295_u32
  D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_START = 4294967288_u32
  D3D12_PACKED_TILE = 4294967295_u32
  D3D12_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15_u32
  D3D12_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 16_u32
  D3D12_PS_CS_UAV_REGISTER_COMPONENTS = 1_u32
  D3D12_PS_CS_UAV_REGISTER_COUNT = 8_u32
  D3D12_PS_CS_UAV_REGISTER_READS_PER_INST = 1_u32
  D3D12_PS_CS_UAV_REGISTER_READ_PORTS = 1_u32
  D3D12_PS_FRONTFACING_DEFAULT_VALUE = 4294967295_u32
  D3D12_PS_FRONTFACING_FALSE_VALUE = 0_u32
  D3D12_PS_FRONTFACING_TRUE_VALUE = 4294967295_u32
  D3D12_PS_INPUT_REGISTER_COMPONENTS = 4_u32
  D3D12_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_PS_INPUT_REGISTER_COUNT = 32_u32
  D3D12_PS_INPUT_REGISTER_READS_PER_INST = 2_u32
  D3D12_PS_INPUT_REGISTER_READ_PORTS = 1_u32
  D3D12_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0
  D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1_u32
  D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1_u32
  D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1_u32
  D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_PS_OUTPUT_MASK_REGISTER_COUNT = 1_u32
  D3D12_PS_OUTPUT_REGISTER_COMPONENTS = 4_u32
  D3D12_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_PS_OUTPUT_REGISTER_COUNT = 8_u32
  D3D12_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.5
  D3D12_RAW_UAV_SRV_BYTE_ALIGNMENT = 16_u32
  D3D12_RAYTRACING_AABB_BYTE_ALIGNMENT = 8_u32
  D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BYTE_ALIGNMENT = 256_u32
  D3D12_RAYTRACING_INSTANCE_DESCS_BYTE_ALIGNMENT = 16_u32
  D3D12_RAYTRACING_MAX_ATTRIBUTE_SIZE_IN_BYTES = 32_u32
  D3D12_RAYTRACING_MAX_DECLARABLE_TRACE_RECURSION_DEPTH = 31_u32
  D3D12_RAYTRACING_MAX_GEOMETRIES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE = 16777216_u32
  D3D12_RAYTRACING_MAX_INSTANCES_PER_TOP_LEVEL_ACCELERATION_STRUCTURE = 16777216_u32
  D3D12_RAYTRACING_MAX_PRIMITIVES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE = 536870912_u32
  D3D12_RAYTRACING_MAX_RAY_GENERATION_SHADER_THREADS = 1073741824_u32
  D3D12_RAYTRACING_MAX_SHADER_RECORD_STRIDE = 4096_u32
  D3D12_RAYTRACING_SHADER_RECORD_BYTE_ALIGNMENT = 32_u32
  D3D12_RAYTRACING_SHADER_TABLE_BYTE_ALIGNMENT = 64_u32
  D3D12_RAYTRACING_TRANSFORM3X4_BYTE_ALIGNMENT = 16_u32
  D3D12_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = 4096_u32
  D3D12_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27_u32
  D3D12_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096_u32
  D3D12_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = 4096_u32
  D3D12_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32_u32
  D3D12_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32_u32
  D3D12_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 16384_u32
  D3D12_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024_u32
  D3D12_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096_u32
  D3D12_REQ_MAXANISOTROPY = 16_u32
  D3D12_REQ_MIP_LEVELS = 15_u32
  D3D12_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048_u32
  D3D12_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = 4096_u32
  D3D12_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 16384_u32
  D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = 128_u32
  D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = 0.25
  D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = 2048_u32
  D3D12_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = 20_u32
  D3D12_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = 4096_u32
  D3D12_REQ_SUBRESOURCES = 30720_u32
  D3D12_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 2048_u32
  D3D12_REQ_TEXTURE1D_U_DIMENSION = 16384_u32
  D3D12_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 2048_u32
  D3D12_REQ_TEXTURE2D_U_OR_V_DIMENSION = 16384_u32
  D3D12_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048_u32
  D3D12_REQ_TEXTURECUBE_DIMENSION = 16384_u32
  D3D12_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0_u32
  D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES = 4294967295_u32
  D3D12_RS_SET_SHADING_RATE_COMBINER_COUNT = 2_u32
  D3D12_SDK_VERSION = 5_u32
  D3D12_SHADER_IDENTIFIER_SIZE_IN_BYTES = 32_u32
  D3D12_SHADER_MAJOR_VERSION = 5_u32
  D3D12_SHADER_MAX_INSTANCES = 65535_u32
  D3D12_SHADER_MAX_INTERFACES = 253_u32
  D3D12_SHADER_MAX_INTERFACE_CALL_SITES = 4096_u32
  D3D12_SHADER_MAX_TYPES = 65535_u32
  D3D12_SHADER_MINOR_VERSION = 1_u32
  D3D12_SHIFT_INSTRUCTION_PAD_VALUE = 0_u32
  D3D12_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5_u32
  D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT = 8_u32
  D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 65536_u32
  D3D12_SMALL_RESOURCE_PLACEMENT_ALIGNMENT = 4096_u32
  D3D12_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048_u32
  D3D12_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 512_u32
  D3D12_SO_BUFFER_SLOT_COUNT = 4_u32
  D3D12_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 4294967295_u32
  D3D12_SO_NO_RASTERIZED_STREAM = 4294967295_u32
  D3D12_SO_OUTPUT_COMPONENT_COUNT = 128_u32
  D3D12_SO_STREAM_COUNT = 4_u32
  D3D12_SPEC_DATE_DAY = 14_u32
  D3D12_SPEC_DATE_MONTH = 11_u32
  D3D12_SPEC_DATE_YEAR = 2014_u32
  D3D12_SPEC_VERSION = 1.16
  D3D12_SRGB_GAMMA = 2.2
  D3D12_SRGB_TO_FLOAT_DENOMINATOR_1 = 12.92
  D3D12_SRGB_TO_FLOAT_DENOMINATOR_2 = 1.055
  D3D12_SRGB_TO_FLOAT_EXPONENT = 2.4
  D3D12_SRGB_TO_FLOAT_OFFSET = 0.055
  D3D12_SRGB_TO_FLOAT_THRESHOLD = 0.04045
  D3D12_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = 0.5
  D3D12_STANDARD_COMPONENT_BIT_COUNT = 32_u32
  D3D12_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64_u32
  D3D12_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4_u32
  D3D12_STANDARD_PIXEL_COMPONENT_COUNT = 128_u32
  D3D12_STANDARD_PIXEL_ELEMENT_COUNT = 32_u32
  D3D12_STANDARD_VECTOR_SIZE = 4_u32
  D3D12_STANDARD_VERTEX_ELEMENT_COUNT = 32_u32
  D3D12_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64_u32
  D3D12_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8_u32
  D3D12_SUBTEXEL_FRACTIONAL_BIT_COUNT = 8_u32
  D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_END = 4294967295_u32
  D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_START = 4294967280_u32
  D3D12_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = 64_u32
  D3D12_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = 64_u32
  D3D12_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = 63_u32
  D3D12_TESSELLATOR_MAX_TESSELLATION_FACTOR = 64_u32
  D3D12_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = 2_u32
  D3D12_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = 1_u32
  D3D12_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = 1_u32
  D3D12_TEXEL_ADDRESS_RANGE_BIT_COUNT = 16_u32
  D3D12_TEXTURE_DATA_PITCH_ALIGNMENT = 256_u32
  D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT = 512_u32
  D3D12_TILED_RESOURCE_TILE_SIZE_IN_BYTES = 65536_u32
  D3D12_TRACKED_WORKLOAD_MAX_INSTANCES = 32_u32
  D3D12_UAV_COUNTER_PLACEMENT_ALIGNMENT = 4096_u32
  D3D12_UAV_SLOT_COUNT = 64_u32
  D3D12_UNBOUND_MEMORY_ACCESS_RESULT = 0_u32
  D3D12_VIDEO_DECODE_MAX_ARGUMENTS = 10_u32
  D3D12_VIDEO_DECODE_MAX_HISTOGRAM_COMPONENTS = 4_u32
  D3D12_VIDEO_DECODE_MIN_BITSTREAM_OFFSET_ALIGNMENT = 256_u32
  D3D12_VIDEO_DECODE_MIN_HISTOGRAM_OFFSET_ALIGNMENT = 256_u32
  D3D12_VIDEO_DECODE_STATUS_MACROBLOCKS_AFFECTED_UNKNOWN = 4294967295_u32
  D3D12_VIDEO_PROCESS_MAX_FILTERS = 32_u32
  D3D12_VIDEO_PROCESS_STEREO_VIEWS = 2_u32
  D3D12_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15_u32
  D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16_u32
  D3D12_VIEWPORT_BOUNDS_MAX = 32767_u32
  D3D12_VIEWPORT_BOUNDS_MIN = -32768_i32
  D3D12_VS_INPUT_REGISTER_COMPONENTS = 4_u32
  D3D12_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_VS_INPUT_REGISTER_COUNT = 32_u32
  D3D12_VS_INPUT_REGISTER_READS_PER_INST = 2_u32
  D3D12_VS_INPUT_REGISTER_READ_PORTS = 1_u32
  D3D12_VS_OUTPUT_REGISTER_COMPONENTS = 4_u32
  D3D12_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32_u32
  D3D12_VS_OUTPUT_REGISTER_COUNT = 32_u32
  D3D12_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10_u32
  D3D12_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25_u32
  D3D12_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25_u32
  D3D12_SHADER_COMPONENT_MAPPING_MASK = 7_u32
  D3D12_SHADER_COMPONENT_MAPPING_SHIFT = 3_u32
  D3D12_FILTER_REDUCTION_TYPE_MASK = 3_u32
  D3D12_FILTER_REDUCTION_TYPE_SHIFT = 7_u32
  D3D12_FILTER_TYPE_MASK = 3_u32
  D3D12_MIN_FILTER_SHIFT = 4_u32
  D3D12_MAG_FILTER_SHIFT = 2_u32
  D3D12_MIP_FILTER_SHIFT = 0_u32
  D3D12_ANISOTROPIC_FILTERING_BIT = 64_u32
  LUID_DEFINED = 1_u32
  D3D12_PROTECTED_RESOURCES_SESSION_HARDWARE_PROTECTED = "62b0084e-c70e-4daa-a109-30ff8d5a0482"
  CLSID_D3D12Debug = "f2352aeb-dd84-49fe-b97b-a9dcfdcc1b4f"
  CLSID_D3D12Tools = "e38216b1-3c8c-4833-aa09-0a06b65d96c8"
  CLSID_D3D12DeviceRemovedExtendedData = "4a75bbc4-9ff4-4ad8-9f18-abae84dc5ff2"
  CLSID_D3D12SDKConfiguration = "7cda6aca-a03e-49c8-9458-0334d20e07ce"
  D3D12_SHADING_RATE_X_AXIS_SHIFT = 2_u32
  D3D12_SHADING_RATE_VALID_MASK = 3_u32
  WKPDID_D3DAutoDebugObjectNameW = "d4902e36-757a-4942-9594-b6769afa43cd"
  DXGI_DEBUG_D3D12 = "cf59a98c-a950-4326-91ef-9bbaa17bfd95"
  D3D12_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT = 1024_u32
  D3D_SHADER_REQUIRES_STENCIL_REF = 512_u32
  D3D_SHADER_REQUIRES_INNER_COVERAGE = 1024_u32
  D3D_SHADER_REQUIRES_TYPED_UAV_LOAD_ADDITIONAL_FORMATS = 2048_u32
  D3D_SHADER_REQUIRES_ROVS = 4096_u32
  D3D_SHADER_REQUIRES_VIEWPORT_AND_RT_ARRAY_INDEX_FROM_ANY_SHADER_FEEDING_RASTERIZER = 8192_u32
  D3D_SHADER_REQUIRES_WAVE_OPS = 16384_u32
  D3D_SHADER_REQUIRES_INT64_OPS = 32768_u32
  D3D_SHADER_REQUIRES_VIEW_ID = 65536_u32
  D3D_SHADER_REQUIRES_BARYCENTRICS = 131072_u32
  D3D_SHADER_REQUIRES_NATIVE_16BIT_OPS = 262144_u32
  D3D_SHADER_REQUIRES_SHADING_RATE = 524288_u32
  D3D_SHADER_REQUIRES_RAYTRACING_TIER_1_1 = 1048576_u32
  D3D_SHADER_REQUIRES_SAMPLER_FEEDBACK = 2097152_u32
  D3D_SHADER_REQUIRES_ATOMIC_INT64_ON_TYPED_RESOURCE = 4194304_u32
  D3D_SHADER_REQUIRES_ATOMIC_INT64_ON_GROUP_SHARED = 8388608_u32
  D3D_SHADER_REQUIRES_DERIVATIVES_IN_MESH_AND_AMPLIFICATION_SHADERS = 16777216_u32
  D3D_SHADER_REQUIRES_RESOURCE_DESCRIPTOR_HEAP_INDEXING = 33554432_u32
  D3D_SHADER_REQUIRES_SAMPLER_DESCRIPTOR_HEAP_INDEXING = 67108864_u32
  D3D_SHADER_REQUIRES_WAVE_MMA = 134217728_u32
  D3D_SHADER_REQUIRES_ATOMIC_INT64_ON_DESCRIPTOR_HEAP_RESOURCE = 268435456_u32
  D3D12ExperimentalShaderModels = "76f5573e-f13a-40f5-b297-81ce9e18933f"
  D3D12TiledResourceTier4 = "c9c4725f-a81a-4f56-8c5b-c51039d694fb"
  D3D12MetaCommand = "c734c97e-8077-48c8-9fdc-d9d1dd31dd77"

  enum D3D12_COMMAND_LIST_TYPE
    D3D12_COMMAND_LIST_TYPE_DIRECT = 0_i32
    D3D12_COMMAND_LIST_TYPE_BUNDLE = 1_i32
    D3D12_COMMAND_LIST_TYPE_COMPUTE = 2_i32
    D3D12_COMMAND_LIST_TYPE_COPY = 3_i32
    D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE = 4_i32
    D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS = 5_i32
    D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE = 6_i32
  end
  @[Flags]
  enum D3D12_COMMAND_QUEUE_FLAGS : UInt32
    D3D12_COMMAND_QUEUE_FLAG_NONE = 0_u32
    D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT = 1_u32
  end
  enum D3D12_COMMAND_QUEUE_PRIORITY
    D3D12_COMMAND_QUEUE_PRIORITY_NORMAL = 0_i32
    D3D12_COMMAND_QUEUE_PRIORITY_HIGH = 100_i32
    D3D12_COMMAND_QUEUE_PRIORITY_GLOBAL_REALTIME = 10000_i32
  end
  enum D3D12_PRIMITIVE_TOPOLOGY_TYPE
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED = 0_i32
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT = 1_i32
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE = 2_i32
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE = 3_i32
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH = 4_i32
  end
  enum D3D12_INPUT_CLASSIFICATION
    D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA = 0_i32
    D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA = 1_i32
  end
  enum D3D12_FILL_MODE
    D3D12_FILL_MODE_WIREFRAME = 2_i32
    D3D12_FILL_MODE_SOLID = 3_i32
  end
  enum D3D12_CULL_MODE
    D3D12_CULL_MODE_NONE = 1_i32
    D3D12_CULL_MODE_FRONT = 2_i32
    D3D12_CULL_MODE_BACK = 3_i32
  end
  enum D3D12_COMPARISON_FUNC
    D3D12_COMPARISON_FUNC_NEVER = 1_i32
    D3D12_COMPARISON_FUNC_LESS = 2_i32
    D3D12_COMPARISON_FUNC_EQUAL = 3_i32
    D3D12_COMPARISON_FUNC_LESS_EQUAL = 4_i32
    D3D12_COMPARISON_FUNC_GREATER = 5_i32
    D3D12_COMPARISON_FUNC_NOT_EQUAL = 6_i32
    D3D12_COMPARISON_FUNC_GREATER_EQUAL = 7_i32
    D3D12_COMPARISON_FUNC_ALWAYS = 8_i32
  end
  enum D3D12_DEPTH_WRITE_MASK
    D3D12_DEPTH_WRITE_MASK_ZERO = 0_i32
    D3D12_DEPTH_WRITE_MASK_ALL = 1_i32
  end
  enum D3D12_STENCIL_OP
    D3D12_STENCIL_OP_KEEP = 1_i32
    D3D12_STENCIL_OP_ZERO = 2_i32
    D3D12_STENCIL_OP_REPLACE = 3_i32
    D3D12_STENCIL_OP_INCR_SAT = 4_i32
    D3D12_STENCIL_OP_DECR_SAT = 5_i32
    D3D12_STENCIL_OP_INVERT = 6_i32
    D3D12_STENCIL_OP_INCR = 7_i32
    D3D12_STENCIL_OP_DECR = 8_i32
  end
  enum D3D12_BLEND
    D3D12_BLEND_ZERO = 1_i32
    D3D12_BLEND_ONE = 2_i32
    D3D12_BLEND_SRC_COLOR = 3_i32
    D3D12_BLEND_INV_SRC_COLOR = 4_i32
    D3D12_BLEND_SRC_ALPHA = 5_i32
    D3D12_BLEND_INV_SRC_ALPHA = 6_i32
    D3D12_BLEND_DEST_ALPHA = 7_i32
    D3D12_BLEND_INV_DEST_ALPHA = 8_i32
    D3D12_BLEND_DEST_COLOR = 9_i32
    D3D12_BLEND_INV_DEST_COLOR = 10_i32
    D3D12_BLEND_SRC_ALPHA_SAT = 11_i32
    D3D12_BLEND_BLEND_FACTOR = 14_i32
    D3D12_BLEND_INV_BLEND_FACTOR = 15_i32
    D3D12_BLEND_SRC1_COLOR = 16_i32
    D3D12_BLEND_INV_SRC1_COLOR = 17_i32
    D3D12_BLEND_SRC1_ALPHA = 18_i32
    D3D12_BLEND_INV_SRC1_ALPHA = 19_i32
  end
  enum D3D12_BLEND_OP
    D3D12_BLEND_OP_ADD = 1_i32
    D3D12_BLEND_OP_SUBTRACT = 2_i32
    D3D12_BLEND_OP_REV_SUBTRACT = 3_i32
    D3D12_BLEND_OP_MIN = 4_i32
    D3D12_BLEND_OP_MAX = 5_i32
  end
  enum D3D12_COLOR_WRITE_ENABLE
    D3D12_COLOR_WRITE_ENABLE_RED = 1_i32
    D3D12_COLOR_WRITE_ENABLE_GREEN = 2_i32
    D3D12_COLOR_WRITE_ENABLE_BLUE = 4_i32
    D3D12_COLOR_WRITE_ENABLE_ALPHA = 8_i32
    D3D12_COLOR_WRITE_ENABLE_ALL = 15_i32
  end
  enum D3D12_LOGIC_OP
    D3D12_LOGIC_OP_CLEAR = 0_i32
    D3D12_LOGIC_OP_SET = 1_i32
    D3D12_LOGIC_OP_COPY = 2_i32
    D3D12_LOGIC_OP_COPY_INVERTED = 3_i32
    D3D12_LOGIC_OP_NOOP = 4_i32
    D3D12_LOGIC_OP_INVERT = 5_i32
    D3D12_LOGIC_OP_AND = 6_i32
    D3D12_LOGIC_OP_NAND = 7_i32
    D3D12_LOGIC_OP_OR = 8_i32
    D3D12_LOGIC_OP_NOR = 9_i32
    D3D12_LOGIC_OP_XOR = 10_i32
    D3D12_LOGIC_OP_EQUIV = 11_i32
    D3D12_LOGIC_OP_AND_REVERSE = 12_i32
    D3D12_LOGIC_OP_AND_INVERTED = 13_i32
    D3D12_LOGIC_OP_OR_REVERSE = 14_i32
    D3D12_LOGIC_OP_OR_INVERTED = 15_i32
  end
  enum D3D12_CONSERVATIVE_RASTERIZATION_MODE
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF = 0_i32
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON = 1_i32
  end
  enum D3D12_INDEX_BUFFER_STRIP_CUT_VALUE
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED = 0_i32
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF = 1_i32
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF = 2_i32
  end
  @[Flags]
  enum D3D12_PIPELINE_STATE_FLAGS : UInt32
    D3D12_PIPELINE_STATE_FLAG_NONE = 0_u32
    D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG = 1_u32
  end
  enum D3D12_PIPELINE_STATE_SUBOBJECT_TYPE
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE = 0_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS = 1_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS = 2_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS = 3_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS = 4_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS = 5_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS = 6_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT = 7_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND = 8_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK = 9_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER = 10_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL = 11_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT = 12_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE = 13_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY = 14_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS = 15_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT = 16_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC = 17_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK = 18_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO = 19_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS = 20_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1 = 21_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING = 22_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_AS = 24_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS = 25_i32
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID = 26_i32
  end
  enum D3D12_FEATURE
    D3D12_FEATURE_D3D12_OPTIONS = 0_i32
    D3D12_FEATURE_ARCHITECTURE = 1_i32
    D3D12_FEATURE_FEATURE_LEVELS = 2_i32
    D3D12_FEATURE_FORMAT_SUPPORT = 3_i32
    D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS = 4_i32
    D3D12_FEATURE_FORMAT_INFO = 5_i32
    D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = 6_i32
    D3D12_FEATURE_SHADER_MODEL = 7_i32
    D3D12_FEATURE_D3D12_OPTIONS1 = 8_i32
    D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT = 10_i32
    D3D12_FEATURE_ROOT_SIGNATURE = 12_i32
    D3D12_FEATURE_ARCHITECTURE1 = 16_i32
    D3D12_FEATURE_D3D12_OPTIONS2 = 18_i32
    D3D12_FEATURE_SHADER_CACHE = 19_i32
    D3D12_FEATURE_COMMAND_QUEUE_PRIORITY = 20_i32
    D3D12_FEATURE_D3D12_OPTIONS3 = 21_i32
    D3D12_FEATURE_EXISTING_HEAPS = 22_i32
    D3D12_FEATURE_D3D12_OPTIONS4 = 23_i32
    D3D12_FEATURE_SERIALIZATION = 24_i32
    D3D12_FEATURE_CROSS_NODE = 25_i32
    D3D12_FEATURE_D3D12_OPTIONS5 = 27_i32
    D3D12_FEATURE_DISPLAYABLE = 28_i32
    D3D12_FEATURE_D3D12_OPTIONS6 = 30_i32
    D3D12_FEATURE_QUERY_META_COMMAND = 31_i32
    D3D12_FEATURE_D3D12_OPTIONS7 = 32_i32
    D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPE_COUNT = 33_i32
    D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPES = 34_i32
    D3D12_FEATURE_D3D12_OPTIONS8 = 36_i32
    D3D12_FEATURE_D3D12_OPTIONS9 = 37_i32
    D3D12_FEATURE_D3D12_OPTIONS10 = 39_i32
    D3D12_FEATURE_D3D12_OPTIONS11 = 40_i32
  end
  @[Flags]
  enum D3D12_SHADER_MIN_PRECISION_SUPPORT : UInt32
    D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE = 0_u32
    D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT = 1_u32
    D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT = 2_u32
  end
  enum D3D12_TILED_RESOURCES_TIER
    D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED = 0_i32
    D3D12_TILED_RESOURCES_TIER_1 = 1_i32
    D3D12_TILED_RESOURCES_TIER_2 = 2_i32
    D3D12_TILED_RESOURCES_TIER_3 = 3_i32
    D3D12_TILED_RESOURCES_TIER_4 = 4_i32
  end
  enum D3D12_RESOURCE_BINDING_TIER
    D3D12_RESOURCE_BINDING_TIER_1 = 1_i32
    D3D12_RESOURCE_BINDING_TIER_2 = 2_i32
    D3D12_RESOURCE_BINDING_TIER_3 = 3_i32
  end
  enum D3D12_CONSERVATIVE_RASTERIZATION_TIER
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED = 0_i32
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_1 = 1_i32
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_2 = 2_i32
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_3 = 3_i32
  end
  @[Flags]
  enum D3D12_FORMAT_SUPPORT1 : UInt32
    D3D12_FORMAT_SUPPORT1_NONE = 0_u32
    D3D12_FORMAT_SUPPORT1_BUFFER = 1_u32
    D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER = 2_u32
    D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER = 4_u32
    D3D12_FORMAT_SUPPORT1_SO_BUFFER = 8_u32
    D3D12_FORMAT_SUPPORT1_TEXTURE1D = 16_u32
    D3D12_FORMAT_SUPPORT1_TEXTURE2D = 32_u32
    D3D12_FORMAT_SUPPORT1_TEXTURE3D = 64_u32
    D3D12_FORMAT_SUPPORT1_TEXTURECUBE = 128_u32
    D3D12_FORMAT_SUPPORT1_SHADER_LOAD = 256_u32
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE = 512_u32
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON = 1024_u32
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT = 2048_u32
    D3D12_FORMAT_SUPPORT1_MIP = 4096_u32
    D3D12_FORMAT_SUPPORT1_RENDER_TARGET = 16384_u32
    D3D12_FORMAT_SUPPORT1_BLENDABLE = 32768_u32
    D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL = 65536_u32
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE = 262144_u32
    D3D12_FORMAT_SUPPORT1_DISPLAY = 524288_u32
    D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT = 1048576_u32
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET = 2097152_u32
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD = 4194304_u32
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER = 8388608_u32
    D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST = 16777216_u32
    D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW = 33554432_u32
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON = 67108864_u32
    D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT = 134217728_u32
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT = 268435456_u32
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT = 536870912_u32
    D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER = 1073741824_u32
  end
  @[Flags]
  enum D3D12_FORMAT_SUPPORT2 : UInt32
    D3D12_FORMAT_SUPPORT2_NONE = 0_u32
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 1_u32
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 2_u32
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 4_u32
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 8_u32
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 16_u32
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 32_u32
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 64_u32
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE = 128_u32
    D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = 256_u32
    D3D12_FORMAT_SUPPORT2_TILED = 512_u32
    D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY = 16384_u32
    D3D12_FORMAT_SUPPORT2_SAMPLER_FEEDBACK = 32768_u32
  end
  @[Flags]
  enum D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS : UInt32
    D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE = 0_u32
    D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE = 1_u32
  end
  enum D3D12_CROSS_NODE_SHARING_TIER
    D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED = 0_i32
    D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED = 1_i32
    D3D12_CROSS_NODE_SHARING_TIER_1 = 2_i32
    D3D12_CROSS_NODE_SHARING_TIER_2 = 3_i32
    D3D12_CROSS_NODE_SHARING_TIER_3 = 4_i32
  end
  enum D3D12_RESOURCE_HEAP_TIER
    D3D12_RESOURCE_HEAP_TIER_1 = 1_i32
    D3D12_RESOURCE_HEAP_TIER_2 = 2_i32
  end
  enum D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER
    D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_NOT_SUPPORTED = 0_i32
    D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_1 = 1_i32
    D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_2 = 2_i32
  end
  enum D3D12_VIEW_INSTANCING_TIER
    D3D12_VIEW_INSTANCING_TIER_NOT_SUPPORTED = 0_i32
    D3D12_VIEW_INSTANCING_TIER_1 = 1_i32
    D3D12_VIEW_INSTANCING_TIER_2 = 2_i32
    D3D12_VIEW_INSTANCING_TIER_3 = 3_i32
  end
  enum D3D_ROOT_SIGNATURE_VERSION
    D3D_ROOT_SIGNATURE_VERSION_1 = 1_i32
    D3D_ROOT_SIGNATURE_VERSION_1_0 = 1_i32
    D3D_ROOT_SIGNATURE_VERSION_1_1 = 2_i32
  end
  enum D3D_SHADER_MODEL
    D3D_SHADER_MODEL_5_1 = 81_i32
    D3D_SHADER_MODEL_6_0 = 96_i32
    D3D_SHADER_MODEL_6_1 = 97_i32
    D3D_SHADER_MODEL_6_2 = 98_i32
    D3D_SHADER_MODEL_6_3 = 99_i32
    D3D_SHADER_MODEL_6_4 = 100_i32
    D3D_SHADER_MODEL_6_5 = 101_i32
    D3D_SHADER_MODEL_6_6 = 102_i32
    D3D_SHADER_MODEL_6_7 = 103_i32
  end
  @[Flags]
  enum D3D12_SHADER_CACHE_SUPPORT_FLAGS : UInt32
    D3D12_SHADER_CACHE_SUPPORT_NONE = 0_u32
    D3D12_SHADER_CACHE_SUPPORT_SINGLE_PSO = 1_u32
    D3D12_SHADER_CACHE_SUPPORT_LIBRARY = 2_u32
    D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE = 4_u32
    D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE = 8_u32
    D3D12_SHADER_CACHE_SUPPORT_DRIVER_MANAGED_CACHE = 16_u32
    D3D12_SHADER_CACHE_SUPPORT_SHADER_CONTROL_CLEAR = 32_u32
    D3D12_SHADER_CACHE_SUPPORT_SHADER_SESSION_DELETE = 64_u32
  end
  @[Flags]
  enum D3D12_COMMAND_LIST_SUPPORT_FLAGS : UInt32
    D3D12_COMMAND_LIST_SUPPORT_FLAG_NONE = 0_u32
    D3D12_COMMAND_LIST_SUPPORT_FLAG_DIRECT = 1_u32
    D3D12_COMMAND_LIST_SUPPORT_FLAG_BUNDLE = 2_u32
    D3D12_COMMAND_LIST_SUPPORT_FLAG_COMPUTE = 4_u32
    D3D12_COMMAND_LIST_SUPPORT_FLAG_COPY = 8_u32
    D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE = 16_u32
    D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS = 32_u32
    D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_ENCODE = 64_u32
  end
  enum D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER
    D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0 = 0_i32
    D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_1 = 1_i32
    D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_2 = 2_i32
  end
  enum D3D12_HEAP_SERIALIZATION_TIER
    D3D12_HEAP_SERIALIZATION_TIER_0 = 0_i32
    D3D12_HEAP_SERIALIZATION_TIER_10 = 10_i32
  end
  enum D3D12_RENDER_PASS_TIER
    D3D12_RENDER_PASS_TIER_0 = 0_i32
    D3D12_RENDER_PASS_TIER_1 = 1_i32
    D3D12_RENDER_PASS_TIER_2 = 2_i32
  end
  enum D3D12_RAYTRACING_TIER
    D3D12_RAYTRACING_TIER_NOT_SUPPORTED = 0_i32
    D3D12_RAYTRACING_TIER_1_0 = 10_i32
    D3D12_RAYTRACING_TIER_1_1 = 11_i32
  end
  enum D3D12_VARIABLE_SHADING_RATE_TIER
    D3D12_VARIABLE_SHADING_RATE_TIER_NOT_SUPPORTED = 0_i32
    D3D12_VARIABLE_SHADING_RATE_TIER_1 = 1_i32
    D3D12_VARIABLE_SHADING_RATE_TIER_2 = 2_i32
  end
  enum D3D12_MESH_SHADER_TIER
    D3D12_MESH_SHADER_TIER_NOT_SUPPORTED = 0_i32
    D3D12_MESH_SHADER_TIER_1 = 10_i32
  end
  enum D3D12_SAMPLER_FEEDBACK_TIER
    D3D12_SAMPLER_FEEDBACK_TIER_NOT_SUPPORTED = 0_i32
    D3D12_SAMPLER_FEEDBACK_TIER_0_9 = 90_i32
    D3D12_SAMPLER_FEEDBACK_TIER_1_0 = 100_i32
  end
  enum D3D12_WAVE_MMA_TIER
    D3D12_WAVE_MMA_TIER_NOT_SUPPORTED = 0_i32
    D3D12_WAVE_MMA_TIER_1_0 = 10_i32
  end
  enum D3D12_HEAP_TYPE
    D3D12_HEAP_TYPE_DEFAULT = 1_i32
    D3D12_HEAP_TYPE_UPLOAD = 2_i32
    D3D12_HEAP_TYPE_READBACK = 3_i32
    D3D12_HEAP_TYPE_CUSTOM = 4_i32
  end
  enum D3D12_CPU_PAGE_PROPERTY
    D3D12_CPU_PAGE_PROPERTY_UNKNOWN = 0_i32
    D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE = 1_i32
    D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE = 2_i32
    D3D12_CPU_PAGE_PROPERTY_WRITE_BACK = 3_i32
  end
  enum D3D12_MEMORY_POOL
    D3D12_MEMORY_POOL_UNKNOWN = 0_i32
    D3D12_MEMORY_POOL_L0 = 1_i32
    D3D12_MEMORY_POOL_L1 = 2_i32
  end
  @[Flags]
  enum D3D12_HEAP_FLAGS : UInt32
    D3D12_HEAP_FLAG_NONE = 0_u32
    D3D12_HEAP_FLAG_SHARED = 1_u32
    D3D12_HEAP_FLAG_DENY_BUFFERS = 4_u32
    D3D12_HEAP_FLAG_ALLOW_DISPLAY = 8_u32
    D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER = 32_u32
    D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES = 64_u32
    D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES = 128_u32
    D3D12_HEAP_FLAG_HARDWARE_PROTECTED = 256_u32
    D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH = 512_u32
    D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS = 1024_u32
    D3D12_HEAP_FLAG_CREATE_NOT_RESIDENT = 2048_u32
    D3D12_HEAP_FLAG_CREATE_NOT_ZEROED = 4096_u32
    D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES = 0_u32
    D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS = 192_u32
    D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES = 68_u32
    D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES = 132_u32
  end
  enum D3D12_RESOURCE_DIMENSION
    D3D12_RESOURCE_DIMENSION_UNKNOWN = 0_i32
    D3D12_RESOURCE_DIMENSION_BUFFER = 1_i32
    D3D12_RESOURCE_DIMENSION_TEXTURE1D = 2_i32
    D3D12_RESOURCE_DIMENSION_TEXTURE2D = 3_i32
    D3D12_RESOURCE_DIMENSION_TEXTURE3D = 4_i32
  end
  enum D3D12_TEXTURE_LAYOUT
    D3D12_TEXTURE_LAYOUT_UNKNOWN = 0_i32
    D3D12_TEXTURE_LAYOUT_ROW_MAJOR = 1_i32
    D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE = 2_i32
    D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE = 3_i32
  end
  @[Flags]
  enum D3D12_RESOURCE_FLAGS : UInt32
    D3D12_RESOURCE_FLAG_NONE = 0_u32
    D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET = 1_u32
    D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL = 2_u32
    D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS = 4_u32
    D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE = 8_u32
    D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER = 16_u32
    D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS = 32_u32
    D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY = 64_u32
    D3D12_RESOURCE_FLAG_VIDEO_ENCODE_REFERENCE_ONLY = 128_u32
  end
  enum D3D12_TILE_RANGE_FLAGS
    D3D12_TILE_RANGE_FLAG_NONE = 0_i32
    D3D12_TILE_RANGE_FLAG_NULL = 1_i32
    D3D12_TILE_RANGE_FLAG_SKIP = 2_i32
    D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE = 4_i32
  end
  @[Flags]
  enum D3D12_TILE_MAPPING_FLAGS : UInt32
    D3D12_TILE_MAPPING_FLAG_NONE = 0_u32
    D3D12_TILE_MAPPING_FLAG_NO_HAZARD = 1_u32
  end
  @[Flags]
  enum D3D12_TILE_COPY_FLAGS : UInt32
    D3D12_TILE_COPY_FLAG_NONE = 0_u32
    D3D12_TILE_COPY_FLAG_NO_HAZARD = 1_u32
    D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 2_u32
    D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 4_u32
  end
  @[Flags]
  enum D3D12_RESOURCE_STATES : UInt32
    D3D12_RESOURCE_STATE_COMMON = 0_u32
    D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER = 1_u32
    D3D12_RESOURCE_STATE_INDEX_BUFFER = 2_u32
    D3D12_RESOURCE_STATE_RENDER_TARGET = 4_u32
    D3D12_RESOURCE_STATE_UNORDERED_ACCESS = 8_u32
    D3D12_RESOURCE_STATE_DEPTH_WRITE = 16_u32
    D3D12_RESOURCE_STATE_DEPTH_READ = 32_u32
    D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE = 64_u32
    D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE = 128_u32
    D3D12_RESOURCE_STATE_STREAM_OUT = 256_u32
    D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT = 512_u32
    D3D12_RESOURCE_STATE_COPY_DEST = 1024_u32
    D3D12_RESOURCE_STATE_COPY_SOURCE = 2048_u32
    D3D12_RESOURCE_STATE_RESOLVE_DEST = 4096_u32
    D3D12_RESOURCE_STATE_RESOLVE_SOURCE = 8192_u32
    D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE = 4194304_u32
    D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE = 16777216_u32
    D3D12_RESOURCE_STATE_GENERIC_READ = 2755_u32
    D3D12_RESOURCE_STATE_ALL_SHADER_RESOURCE = 192_u32
    D3D12_RESOURCE_STATE_PRESENT = 0_u32
    D3D12_RESOURCE_STATE_PREDICATION = 512_u32
    D3D12_RESOURCE_STATE_VIDEO_DECODE_READ = 65536_u32
    D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE = 131072_u32
    D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ = 262144_u32
    D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE = 524288_u32
    D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ = 2097152_u32
    D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE = 8388608_u32
  end
  enum D3D12_RESOURCE_BARRIER_TYPE
    D3D12_RESOURCE_BARRIER_TYPE_TRANSITION = 0_i32
    D3D12_RESOURCE_BARRIER_TYPE_ALIASING = 1_i32
    D3D12_RESOURCE_BARRIER_TYPE_UAV = 2_i32
  end
  @[Flags]
  enum D3D12_RESOURCE_BARRIER_FLAGS : UInt32
    D3D12_RESOURCE_BARRIER_FLAG_NONE = 0_u32
    D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY = 1_u32
    D3D12_RESOURCE_BARRIER_FLAG_END_ONLY = 2_u32
  end
  enum D3D12_TEXTURE_COPY_TYPE
    D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX = 0_i32
    D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT = 1_i32
  end
  enum D3D12_RESOLVE_MODE
    D3D12_RESOLVE_MODE_DECOMPRESS = 0_i32
    D3D12_RESOLVE_MODE_MIN = 1_i32
    D3D12_RESOLVE_MODE_MAX = 2_i32
    D3D12_RESOLVE_MODE_AVERAGE = 3_i32
    D3D12_RESOLVE_MODE_ENCODE_SAMPLER_FEEDBACK = 4_i32
    D3D12_RESOLVE_MODE_DECODE_SAMPLER_FEEDBACK = 5_i32
  end
  @[Flags]
  enum D3D12_VIEW_INSTANCING_FLAGS : UInt32
    D3D12_VIEW_INSTANCING_FLAG_NONE = 0_u32
    D3D12_VIEW_INSTANCING_FLAG_ENABLE_VIEW_INSTANCE_MASKING = 1_u32
  end
  enum D3D12_SHADER_COMPONENT_MAPPING
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0 = 0_i32
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1 = 1_i32
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2 = 2_i32
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3 = 3_i32
    D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0 = 4_i32
    D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1 = 5_i32
  end
  @[Flags]
  enum D3D12_BUFFER_SRV_FLAGS : UInt32
    D3D12_BUFFER_SRV_FLAG_NONE = 0_u32
    D3D12_BUFFER_SRV_FLAG_RAW = 1_u32
  end
  enum D3D12_SRV_DIMENSION
    D3D12_SRV_DIMENSION_UNKNOWN = 0_i32
    D3D12_SRV_DIMENSION_BUFFER = 1_i32
    D3D12_SRV_DIMENSION_TEXTURE1D = 2_i32
    D3D12_SRV_DIMENSION_TEXTURE1DARRAY = 3_i32
    D3D12_SRV_DIMENSION_TEXTURE2D = 4_i32
    D3D12_SRV_DIMENSION_TEXTURE2DARRAY = 5_i32
    D3D12_SRV_DIMENSION_TEXTURE2DMS = 6_i32
    D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY = 7_i32
    D3D12_SRV_DIMENSION_TEXTURE3D = 8_i32
    D3D12_SRV_DIMENSION_TEXTURECUBE = 9_i32
    D3D12_SRV_DIMENSION_TEXTURECUBEARRAY = 10_i32
    D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE = 11_i32
  end
  enum D3D12_FILTER
    D3D12_FILTER_MIN_MAG_MIP_POINT = 0_i32
    D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR = 1_i32
    D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4_i32
    D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5_i32
    D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT = 16_i32
    D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17_i32
    D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT = 20_i32
    D3D12_FILTER_MIN_MAG_MIP_LINEAR = 21_i32
    D3D12_FILTER_ANISOTROPIC = 85_i32
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 128_i32
    D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 129_i32
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 132_i32
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 133_i32
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 144_i32
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 145_i32
    D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 148_i32
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 149_i32
    D3D12_FILTER_COMPARISON_ANISOTROPIC = 213_i32
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 256_i32
    D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 257_i32
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 260_i32
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 261_i32
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 272_i32
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 273_i32
    D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 276_i32
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 277_i32
    D3D12_FILTER_MINIMUM_ANISOTROPIC = 341_i32
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 384_i32
    D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 385_i32
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 388_i32
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 389_i32
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 400_i32
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 401_i32
    D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 404_i32
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 405_i32
    D3D12_FILTER_MAXIMUM_ANISOTROPIC = 469_i32
  end
  enum D3D12_FILTER_TYPE
    D3D12_FILTER_TYPE_POINT = 0_i32
    D3D12_FILTER_TYPE_LINEAR = 1_i32
  end
  enum D3D12_FILTER_REDUCTION_TYPE
    D3D12_FILTER_REDUCTION_TYPE_STANDARD = 0_i32
    D3D12_FILTER_REDUCTION_TYPE_COMPARISON = 1_i32
    D3D12_FILTER_REDUCTION_TYPE_MINIMUM = 2_i32
    D3D12_FILTER_REDUCTION_TYPE_MAXIMUM = 3_i32
  end
  enum D3D12_TEXTURE_ADDRESS_MODE
    D3D12_TEXTURE_ADDRESS_MODE_WRAP = 1_i32
    D3D12_TEXTURE_ADDRESS_MODE_MIRROR = 2_i32
    D3D12_TEXTURE_ADDRESS_MODE_CLAMP = 3_i32
    D3D12_TEXTURE_ADDRESS_MODE_BORDER = 4_i32
    D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE = 5_i32
  end
  @[Flags]
  enum D3D12_BUFFER_UAV_FLAGS : UInt32
    D3D12_BUFFER_UAV_FLAG_NONE = 0_u32
    D3D12_BUFFER_UAV_FLAG_RAW = 1_u32
  end
  enum D3D12_UAV_DIMENSION
    D3D12_UAV_DIMENSION_UNKNOWN = 0_i32
    D3D12_UAV_DIMENSION_BUFFER = 1_i32
    D3D12_UAV_DIMENSION_TEXTURE1D = 2_i32
    D3D12_UAV_DIMENSION_TEXTURE1DARRAY = 3_i32
    D3D12_UAV_DIMENSION_TEXTURE2D = 4_i32
    D3D12_UAV_DIMENSION_TEXTURE2DARRAY = 5_i32
    D3D12_UAV_DIMENSION_TEXTURE3D = 8_i32
  end
  enum D3D12_RTV_DIMENSION
    D3D12_RTV_DIMENSION_UNKNOWN = 0_i32
    D3D12_RTV_DIMENSION_BUFFER = 1_i32
    D3D12_RTV_DIMENSION_TEXTURE1D = 2_i32
    D3D12_RTV_DIMENSION_TEXTURE1DARRAY = 3_i32
    D3D12_RTV_DIMENSION_TEXTURE2D = 4_i32
    D3D12_RTV_DIMENSION_TEXTURE2DARRAY = 5_i32
    D3D12_RTV_DIMENSION_TEXTURE2DMS = 6_i32
    D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY = 7_i32
    D3D12_RTV_DIMENSION_TEXTURE3D = 8_i32
  end
  @[Flags]
  enum D3D12_DSV_FLAGS : UInt32
    D3D12_DSV_FLAG_NONE = 0_u32
    D3D12_DSV_FLAG_READ_ONLY_DEPTH = 1_u32
    D3D12_DSV_FLAG_READ_ONLY_STENCIL = 2_u32
  end
  enum D3D12_DSV_DIMENSION
    D3D12_DSV_DIMENSION_UNKNOWN = 0_i32
    D3D12_DSV_DIMENSION_TEXTURE1D = 1_i32
    D3D12_DSV_DIMENSION_TEXTURE1DARRAY = 2_i32
    D3D12_DSV_DIMENSION_TEXTURE2D = 3_i32
    D3D12_DSV_DIMENSION_TEXTURE2DARRAY = 4_i32
    D3D12_DSV_DIMENSION_TEXTURE2DMS = 5_i32
    D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY = 6_i32
  end
  @[Flags]
  enum D3D12_CLEAR_FLAGS : UInt32
    D3D12_CLEAR_FLAG_DEPTH = 1_u32
    D3D12_CLEAR_FLAG_STENCIL = 2_u32
  end
  @[Flags]
  enum D3D12_FENCE_FLAGS : UInt32
    D3D12_FENCE_FLAG_NONE = 0_u32
    D3D12_FENCE_FLAG_SHARED = 1_u32
    D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER = 2_u32
    D3D12_FENCE_FLAG_NON_MONITORED = 4_u32
  end
  enum D3D12_DESCRIPTOR_HEAP_TYPE
    D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV = 0_i32
    D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER = 1_i32
    D3D12_DESCRIPTOR_HEAP_TYPE_RTV = 2_i32
    D3D12_DESCRIPTOR_HEAP_TYPE_DSV = 3_i32
    D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES = 4_i32
  end
  @[Flags]
  enum D3D12_DESCRIPTOR_HEAP_FLAGS : UInt32
    D3D12_DESCRIPTOR_HEAP_FLAG_NONE = 0_u32
    D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE = 1_u32
  end
  enum D3D12_DESCRIPTOR_RANGE_TYPE
    D3D12_DESCRIPTOR_RANGE_TYPE_SRV = 0_i32
    D3D12_DESCRIPTOR_RANGE_TYPE_UAV = 1_i32
    D3D12_DESCRIPTOR_RANGE_TYPE_CBV = 2_i32
    D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER = 3_i32
  end
  enum D3D12_SHADER_VISIBILITY
    D3D12_SHADER_VISIBILITY_ALL = 0_i32
    D3D12_SHADER_VISIBILITY_VERTEX = 1_i32
    D3D12_SHADER_VISIBILITY_HULL = 2_i32
    D3D12_SHADER_VISIBILITY_DOMAIN = 3_i32
    D3D12_SHADER_VISIBILITY_GEOMETRY = 4_i32
    D3D12_SHADER_VISIBILITY_PIXEL = 5_i32
    D3D12_SHADER_VISIBILITY_AMPLIFICATION = 6_i32
    D3D12_SHADER_VISIBILITY_MESH = 7_i32
  end
  enum D3D12_ROOT_PARAMETER_TYPE
    D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE = 0_i32
    D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS = 1_i32
    D3D12_ROOT_PARAMETER_TYPE_CBV = 2_i32
    D3D12_ROOT_PARAMETER_TYPE_SRV = 3_i32
    D3D12_ROOT_PARAMETER_TYPE_UAV = 4_i32
  end
  @[Flags]
  enum D3D12_ROOT_SIGNATURE_FLAGS : UInt32
    D3D12_ROOT_SIGNATURE_FLAG_NONE = 0_u32
    D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT = 1_u32
    D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS = 2_u32
    D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS = 4_u32
    D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS = 8_u32
    D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS = 16_u32
    D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS = 32_u32
    D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT = 64_u32
    D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE = 128_u32
    D3D12_ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS = 256_u32
    D3D12_ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS = 512_u32
    D3D12_ROOT_SIGNATURE_FLAG_CBV_SRV_UAV_HEAP_DIRECTLY_INDEXED = 1024_u32
    D3D12_ROOT_SIGNATURE_FLAG_SAMPLER_HEAP_DIRECTLY_INDEXED = 2048_u32
  end
  enum D3D12_STATIC_BORDER_COLOR
    D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK = 0_i32
    D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK = 1_i32
    D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE = 2_i32
  end
  @[Flags]
  enum D3D12_DESCRIPTOR_RANGE_FLAGS : UInt32
    D3D12_DESCRIPTOR_RANGE_FLAG_NONE = 0_u32
    D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE = 1_u32
    D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE = 2_u32
    D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE = 4_u32
    D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC = 8_u32
    D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS = 65536_u32
  end
  @[Flags]
  enum D3D12_ROOT_DESCRIPTOR_FLAGS : UInt32
    D3D12_ROOT_DESCRIPTOR_FLAG_NONE = 0_u32
    D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE = 2_u32
    D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE = 4_u32
    D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC = 8_u32
  end
  enum D3D12_QUERY_HEAP_TYPE
    D3D12_QUERY_HEAP_TYPE_OCCLUSION = 0_i32
    D3D12_QUERY_HEAP_TYPE_TIMESTAMP = 1_i32
    D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS = 2_i32
    D3D12_QUERY_HEAP_TYPE_SO_STATISTICS = 3_i32
    D3D12_QUERY_HEAP_TYPE_VIDEO_DECODE_STATISTICS = 4_i32
    D3D12_QUERY_HEAP_TYPE_COPY_QUEUE_TIMESTAMP = 5_i32
    D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS1 = 7_i32
  end
  enum D3D12_QUERY_TYPE
    D3D12_QUERY_TYPE_OCCLUSION = 0_i32
    D3D12_QUERY_TYPE_BINARY_OCCLUSION = 1_i32
    D3D12_QUERY_TYPE_TIMESTAMP = 2_i32
    D3D12_QUERY_TYPE_PIPELINE_STATISTICS = 3_i32
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0 = 4_i32
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1 = 5_i32
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2 = 6_i32
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3 = 7_i32
    D3D12_QUERY_TYPE_VIDEO_DECODE_STATISTICS = 8_i32
    D3D12_QUERY_TYPE_PIPELINE_STATISTICS1 = 10_i32
  end
  enum D3D12_PREDICATION_OP
    D3D12_PREDICATION_OP_EQUAL_ZERO = 0_i32
    D3D12_PREDICATION_OP_NOT_EQUAL_ZERO = 1_i32
  end
  enum D3D12_INDIRECT_ARGUMENT_TYPE
    D3D12_INDIRECT_ARGUMENT_TYPE_DRAW = 0_i32
    D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED = 1_i32
    D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH = 2_i32
    D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW = 3_i32
    D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW = 4_i32
    D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT = 5_i32
    D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW = 6_i32
    D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW = 7_i32
    D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW = 8_i32
    D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_RAYS = 9_i32
    D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_MESH = 10_i32
  end
  enum D3D12_WRITEBUFFERIMMEDIATE_MODE
    D3D12_WRITEBUFFERIMMEDIATE_MODE_DEFAULT = 0_i32
    D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN = 1_i32
    D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT = 2_i32
  end
  @[Flags]
  enum D3D12_MULTIPLE_FENCE_WAIT_FLAGS : UInt32
    D3D12_MULTIPLE_FENCE_WAIT_FLAG_NONE = 0_u32
    D3D12_MULTIPLE_FENCE_WAIT_FLAG_ANY = 1_u32
    D3D12_MULTIPLE_FENCE_WAIT_FLAG_ALL = 0_u32
  end
  enum D3D12_RESIDENCY_PRIORITY
    D3D12_RESIDENCY_PRIORITY_MINIMUM = 671088640_i32
    D3D12_RESIDENCY_PRIORITY_LOW = 1342177280_i32
    D3D12_RESIDENCY_PRIORITY_NORMAL = 2013265920_i32
    D3D12_RESIDENCY_PRIORITY_HIGH = -1610547200_i32
    D3D12_RESIDENCY_PRIORITY_MAXIMUM = -939524096_i32
  end
  @[Flags]
  enum D3D12_RESIDENCY_FLAGS : UInt32
    D3D12_RESIDENCY_FLAG_NONE = 0_u32
    D3D12_RESIDENCY_FLAG_DENY_OVERBUDGET = 1_u32
  end
  @[Flags]
  enum D3D12_COMMAND_LIST_FLAGS : UInt32
    D3D12_COMMAND_LIST_FLAG_NONE = 0_u32
  end
  @[Flags]
  enum D3D12_COMMAND_POOL_FLAGS : UInt32
    D3D12_COMMAND_POOL_FLAG_NONE = 0_u32
  end
  @[Flags]
  enum D3D12_COMMAND_RECORDER_FLAGS : UInt32
    D3D12_COMMAND_RECORDER_FLAG_NONE = 0_u32
  end
  enum D3D12_PROTECTED_SESSION_STATUS
    D3D12_PROTECTED_SESSION_STATUS_OK = 0_i32
    D3D12_PROTECTED_SESSION_STATUS_INVALID = 1_i32
  end
  @[Flags]
  enum D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS : UInt32
    D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_NONE = 0_u32
    D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_SUPPORTED = 1_u32
  end
  @[Flags]
  enum D3D12_PROTECTED_RESOURCE_SESSION_FLAGS : UInt32
    D3D12_PROTECTED_RESOURCE_SESSION_FLAG_NONE = 0_u32
  end
  enum D3D12_LIFETIME_STATE
    D3D12_LIFETIME_STATE_IN_USE = 0_i32
    D3D12_LIFETIME_STATE_NOT_IN_USE = 1_i32
  end
  enum D3D12_META_COMMAND_PARAMETER_TYPE
    D3D12_META_COMMAND_PARAMETER_TYPE_FLOAT = 0_i32
    D3D12_META_COMMAND_PARAMETER_TYPE_UINT64 = 1_i32
    D3D12_META_COMMAND_PARAMETER_TYPE_GPU_VIRTUAL_ADDRESS = 2_i32
    D3D12_META_COMMAND_PARAMETER_TYPE_CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 3_i32
    D3D12_META_COMMAND_PARAMETER_TYPE_GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 4_i32
  end
  @[Flags]
  enum D3D12_META_COMMAND_PARAMETER_FLAGS : UInt32
    D3D12_META_COMMAND_PARAMETER_FLAG_INPUT = 1_u32
    D3D12_META_COMMAND_PARAMETER_FLAG_OUTPUT = 2_u32
  end
  enum D3D12_META_COMMAND_PARAMETER_STAGE
    D3D12_META_COMMAND_PARAMETER_STAGE_CREATION = 0_i32
    D3D12_META_COMMAND_PARAMETER_STAGE_INITIALIZATION = 1_i32
    D3D12_META_COMMAND_PARAMETER_STAGE_EXECUTION = 2_i32
  end
  @[Flags]
  enum D3D12_GRAPHICS_STATES : UInt32
    D3D12_GRAPHICS_STATE_NONE = 0_u32
    D3D12_GRAPHICS_STATE_IA_VERTEX_BUFFERS = 1_u32
    D3D12_GRAPHICS_STATE_IA_INDEX_BUFFER = 2_u32
    D3D12_GRAPHICS_STATE_IA_PRIMITIVE_TOPOLOGY = 4_u32
    D3D12_GRAPHICS_STATE_DESCRIPTOR_HEAP = 8_u32
    D3D12_GRAPHICS_STATE_GRAPHICS_ROOT_SIGNATURE = 16_u32
    D3D12_GRAPHICS_STATE_COMPUTE_ROOT_SIGNATURE = 32_u32
    D3D12_GRAPHICS_STATE_RS_VIEWPORTS = 64_u32
    D3D12_GRAPHICS_STATE_RS_SCISSOR_RECTS = 128_u32
    D3D12_GRAPHICS_STATE_PREDICATION = 256_u32
    D3D12_GRAPHICS_STATE_OM_RENDER_TARGETS = 512_u32
    D3D12_GRAPHICS_STATE_OM_STENCIL_REF = 1024_u32
    D3D12_GRAPHICS_STATE_OM_BLEND_FACTOR = 2048_u32
    D3D12_GRAPHICS_STATE_PIPELINE_STATE = 4096_u32
    D3D12_GRAPHICS_STATE_SO_TARGETS = 8192_u32
    D3D12_GRAPHICS_STATE_OM_DEPTH_BOUNDS = 16384_u32
    D3D12_GRAPHICS_STATE_SAMPLE_POSITIONS = 32768_u32
    D3D12_GRAPHICS_STATE_VIEW_INSTANCE_MASK = 65536_u32
  end
  enum D3D12_STATE_SUBOBJECT_TYPE
    D3D12_STATE_SUBOBJECT_TYPE_STATE_OBJECT_CONFIG = 0_i32
    D3D12_STATE_SUBOBJECT_TYPE_GLOBAL_ROOT_SIGNATURE = 1_i32
    D3D12_STATE_SUBOBJECT_TYPE_LOCAL_ROOT_SIGNATURE = 2_i32
    D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK = 3_i32
    D3D12_STATE_SUBOBJECT_TYPE_DXIL_LIBRARY = 5_i32
    D3D12_STATE_SUBOBJECT_TYPE_EXISTING_COLLECTION = 6_i32
    D3D12_STATE_SUBOBJECT_TYPE_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 7_i32
    D3D12_STATE_SUBOBJECT_TYPE_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 8_i32
    D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_SHADER_CONFIG = 9_i32
    D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG = 10_i32
    D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP = 11_i32
    D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG1 = 12_i32
    D3D12_STATE_SUBOBJECT_TYPE_MAX_VALID = 13_i32
  end
  @[Flags]
  enum D3D12_STATE_OBJECT_FLAGS : UInt32
    D3D12_STATE_OBJECT_FLAG_NONE = 0_u32
    D3D12_STATE_OBJECT_FLAG_ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS = 1_u32
    D3D12_STATE_OBJECT_FLAG_ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS = 2_u32
    D3D12_STATE_OBJECT_FLAG_ALLOW_STATE_OBJECT_ADDITIONS = 4_u32
  end
  @[Flags]
  enum D3D12_EXPORT_FLAGS : UInt32
    D3D12_EXPORT_FLAG_NONE = 0_u32
  end
  enum D3D12_HIT_GROUP_TYPE
    D3D12_HIT_GROUP_TYPE_TRIANGLES = 0_i32
    D3D12_HIT_GROUP_TYPE_PROCEDURAL_PRIMITIVE = 1_i32
  end
  @[Flags]
  enum D3D12_RAYTRACING_PIPELINE_FLAGS : UInt32
    D3D12_RAYTRACING_PIPELINE_FLAG_NONE = 0_u32
    D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_TRIANGLES = 256_u32
    D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_PROCEDURAL_PRIMITIVES = 512_u32
  end
  enum D3D12_STATE_OBJECT_TYPE
    D3D12_STATE_OBJECT_TYPE_COLLECTION = 0_i32
    D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE = 3_i32
  end
  @[Flags]
  enum D3D12_RAYTRACING_GEOMETRY_FLAGS : UInt32
    D3D12_RAYTRACING_GEOMETRY_FLAG_NONE = 0_u32
    D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE = 1_u32
    D3D12_RAYTRACING_GEOMETRY_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION = 2_u32
  end
  enum D3D12_RAYTRACING_GEOMETRY_TYPE
    D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES = 0_i32
    D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS = 1_i32
  end
  @[Flags]
  enum D3D12_RAYTRACING_INSTANCE_FLAGS : UInt32
    D3D12_RAYTRACING_INSTANCE_FLAG_NONE = 0_u32
    D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE = 1_u32
    D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE = 2_u32
    D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE = 4_u32
    D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE = 8_u32
  end
  @[Flags]
  enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS : UInt32
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_NONE = 0_u32
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE = 1_u32
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION = 2_u32
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE = 4_u32
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD = 8_u32
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY = 16_u32
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE = 32_u32
  end
  enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_CLONE = 0_i32
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_COMPACT = 1_i32
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_VISUALIZATION_DECODE_FOR_TOOLS = 2_i32
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE = 3_i32
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_DESERIALIZE = 4_i32
  end
  enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL = 0_i32
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL = 1_i32
  end
  enum D3D12_ELEMENTS_LAYOUT
    D3D12_ELEMENTS_LAYOUT_ARRAY = 0_i32
    D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS = 1_i32
  end
  enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE = 0_i32
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION = 1_i32
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION = 2_i32
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE = 3_i32
  end
  enum D3D12_SERIALIZED_DATA_TYPE
    D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE = 0_i32
  end
  enum D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS
    D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE = 0_i32
    D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE = 1_i32
    D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED = 2_i32
    D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION = 3_i32
    D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE = 4_i32
  end
  @[Flags]
  enum D3D12_RAY_FLAGS : UInt32
    D3D12_RAY_FLAG_NONE = 0_u32
    D3D12_RAY_FLAG_FORCE_OPAQUE = 1_u32
    D3D12_RAY_FLAG_FORCE_NON_OPAQUE = 2_u32
    D3D12_RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH = 4_u32
    D3D12_RAY_FLAG_SKIP_CLOSEST_HIT_SHADER = 8_u32
    D3D12_RAY_FLAG_CULL_BACK_FACING_TRIANGLES = 16_u32
    D3D12_RAY_FLAG_CULL_FRONT_FACING_TRIANGLES = 32_u32
    D3D12_RAY_FLAG_CULL_OPAQUE = 64_u32
    D3D12_RAY_FLAG_CULL_NON_OPAQUE = 128_u32
    D3D12_RAY_FLAG_SKIP_TRIANGLES = 256_u32
    D3D12_RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES = 512_u32
  end
  enum D3D12_HIT_KIND
    D3D12_HIT_KIND_TRIANGLE_FRONT_FACE = 254_i32
    D3D12_HIT_KIND_TRIANGLE_BACK_FACE = 255_i32
  end
  enum D3D12_AUTO_BREADCRUMB_OP
    D3D12_AUTO_BREADCRUMB_OP_SETMARKER = 0_i32
    D3D12_AUTO_BREADCRUMB_OP_BEGINEVENT = 1_i32
    D3D12_AUTO_BREADCRUMB_OP_ENDEVENT = 2_i32
    D3D12_AUTO_BREADCRUMB_OP_DRAWINSTANCED = 3_i32
    D3D12_AUTO_BREADCRUMB_OP_DRAWINDEXEDINSTANCED = 4_i32
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEINDIRECT = 5_i32
    D3D12_AUTO_BREADCRUMB_OP_DISPATCH = 6_i32
    D3D12_AUTO_BREADCRUMB_OP_COPYBUFFERREGION = 7_i32
    D3D12_AUTO_BREADCRUMB_OP_COPYTEXTUREREGION = 8_i32
    D3D12_AUTO_BREADCRUMB_OP_COPYRESOURCE = 9_i32
    D3D12_AUTO_BREADCRUMB_OP_COPYTILES = 10_i32
    D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCE = 11_i32
    D3D12_AUTO_BREADCRUMB_OP_CLEARRENDERTARGETVIEW = 12_i32
    D3D12_AUTO_BREADCRUMB_OP_CLEARUNORDEREDACCESSVIEW = 13_i32
    D3D12_AUTO_BREADCRUMB_OP_CLEARDEPTHSTENCILVIEW = 14_i32
    D3D12_AUTO_BREADCRUMB_OP_RESOURCEBARRIER = 15_i32
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEBUNDLE = 16_i32
    D3D12_AUTO_BREADCRUMB_OP_PRESENT = 17_i32
    D3D12_AUTO_BREADCRUMB_OP_RESOLVEQUERYDATA = 18_i32
    D3D12_AUTO_BREADCRUMB_OP_BEGINSUBMISSION = 19_i32
    D3D12_AUTO_BREADCRUMB_OP_ENDSUBMISSION = 20_i32
    D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME = 21_i32
    D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES = 22_i32
    D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT = 23_i32
    D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT64 = 24_i32
    D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCEREGION = 25_i32
    D3D12_AUTO_BREADCRUMB_OP_WRITEBUFFERIMMEDIATE = 26_i32
    D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME1 = 27_i32
    D3D12_AUTO_BREADCRUMB_OP_SETPROTECTEDRESOURCESESSION = 28_i32
    D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME2 = 29_i32
    D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES1 = 30_i32
    D3D12_AUTO_BREADCRUMB_OP_BUILDRAYTRACINGACCELERATIONSTRUCTURE = 31_i32
    D3D12_AUTO_BREADCRUMB_OP_EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO = 32_i32
    D3D12_AUTO_BREADCRUMB_OP_COPYRAYTRACINGACCELERATIONSTRUCTURE = 33_i32
    D3D12_AUTO_BREADCRUMB_OP_DISPATCHRAYS = 34_i32
    D3D12_AUTO_BREADCRUMB_OP_INITIALIZEMETACOMMAND = 35_i32
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEMETACOMMAND = 36_i32
    D3D12_AUTO_BREADCRUMB_OP_ESTIMATEMOTION = 37_i32
    D3D12_AUTO_BREADCRUMB_OP_RESOLVEMOTIONVECTORHEAP = 38_i32
    D3D12_AUTO_BREADCRUMB_OP_SETPIPELINESTATE1 = 39_i32
    D3D12_AUTO_BREADCRUMB_OP_INITIALIZEEXTENSIONCOMMAND = 40_i32
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEEXTENSIONCOMMAND = 41_i32
    D3D12_AUTO_BREADCRUMB_OP_DISPATCHMESH = 42_i32
    D3D12_AUTO_BREADCRUMB_OP_ENCODEFRAME = 43_i32
    D3D12_AUTO_BREADCRUMB_OP_RESOLVEENCODEROUTPUTMETADATA = 44_i32
  end
  enum D3D12_DRED_VERSION
    D3D12_DRED_VERSION_1_0 = 1_i32
    D3D12_DRED_VERSION_1_1 = 2_i32
    D3D12_DRED_VERSION_1_2 = 3_i32
    D3D12_DRED_VERSION_1_3 = 4_i32
  end
  @[Flags]
  enum D3D12_DRED_FLAGS : UInt32
    D3D12_DRED_FLAG_NONE = 0_u32
    D3D12_DRED_FLAG_FORCE_ENABLE = 1_u32
    D3D12_DRED_FLAG_DISABLE_AUTOBREADCRUMBS = 2_u32
  end
  enum D3D12_DRED_ENABLEMENT
    D3D12_DRED_ENABLEMENT_SYSTEM_CONTROLLED = 0_i32
    D3D12_DRED_ENABLEMENT_FORCED_OFF = 1_i32
    D3D12_DRED_ENABLEMENT_FORCED_ON = 2_i32
  end
  enum D3D12_DRED_ALLOCATION_TYPE
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_QUEUE = 19_i32
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_ALLOCATOR = 20_i32
    D3D12_DRED_ALLOCATION_TYPE_PIPELINE_STATE = 21_i32
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_LIST = 22_i32
    D3D12_DRED_ALLOCATION_TYPE_FENCE = 23_i32
    D3D12_DRED_ALLOCATION_TYPE_DESCRIPTOR_HEAP = 24_i32
    D3D12_DRED_ALLOCATION_TYPE_HEAP = 25_i32
    D3D12_DRED_ALLOCATION_TYPE_QUERY_HEAP = 27_i32
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_SIGNATURE = 28_i32
    D3D12_DRED_ALLOCATION_TYPE_PIPELINE_LIBRARY = 29_i32
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER = 30_i32
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_PROCESSOR = 32_i32
    D3D12_DRED_ALLOCATION_TYPE_RESOURCE = 34_i32
    D3D12_DRED_ALLOCATION_TYPE_PASS = 35_i32
    D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSION = 36_i32
    D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSIONPOLICY = 37_i32
    D3D12_DRED_ALLOCATION_TYPE_PROTECTEDRESOURCESESSION = 38_i32
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER_HEAP = 39_i32
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_POOL = 40_i32
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_RECORDER = 41_i32
    D3D12_DRED_ALLOCATION_TYPE_STATE_OBJECT = 42_i32
    D3D12_DRED_ALLOCATION_TYPE_METACOMMAND = 43_i32
    D3D12_DRED_ALLOCATION_TYPE_SCHEDULINGGROUP = 44_i32
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_ESTIMATOR = 45_i32
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_VECTOR_HEAP = 46_i32
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_EXTENSION_COMMAND = 47_i32
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_ENCODER = 48_i32
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_ENCODER_HEAP = 49_i32
    D3D12_DRED_ALLOCATION_TYPE_INVALID = -1_i32
  end
  @[Flags]
  enum D3D12_DRED_PAGE_FAULT_FLAGS : UInt32
    D3D12_DRED_PAGE_FAULT_FLAGS_NONE = 0_u32
  end
  enum D3D12_DRED_DEVICE_STATE
    D3D12_DRED_DEVICE_STATE_UNKNOWN = 0_i32
    D3D12_DRED_DEVICE_STATE_HUNG = 3_i32
    D3D12_DRED_DEVICE_STATE_FAULT = 6_i32
    D3D12_DRED_DEVICE_STATE_PAGEFAULT = 7_i32
  end
  enum D3D12_BACKGROUND_PROCESSING_MODE
    D3D12_BACKGROUND_PROCESSING_MODE_ALLOWED = 0_i32
    D3D12_BACKGROUND_PROCESSING_MODE_ALLOW_INTRUSIVE_MEASUREMENTS = 1_i32
    D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_BACKGROUND_WORK = 2_i32
    D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_PROFILING_BY_SYSTEM = 3_i32
  end
  enum D3D12_MEASUREMENTS_ACTION
    D3D12_MEASUREMENTS_ACTION_KEEP_ALL = 0_i32
    D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS = 1_i32
    D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS_HIGH_PRIORITY = 2_i32
    D3D12_MEASUREMENTS_ACTION_DISCARD_PREVIOUS = 3_i32
  end
  enum D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD = 0_i32
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE = 1_i32
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR = 2_i32
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_NO_ACCESS = 3_i32
  end
  enum D3D12_RENDER_PASS_ENDING_ACCESS_TYPE
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD = 0_i32
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE = 1_i32
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE = 2_i32
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_NO_ACCESS = 3_i32
  end
  @[Flags]
  enum D3D12_RENDER_PASS_FLAGS : UInt32
    D3D12_RENDER_PASS_FLAG_NONE = 0_u32
    D3D12_RENDER_PASS_FLAG_ALLOW_UAV_WRITES = 1_u32
    D3D12_RENDER_PASS_FLAG_SUSPENDING_PASS = 2_u32
    D3D12_RENDER_PASS_FLAG_RESUMING_PASS = 4_u32
  end
  enum D3D12_SHADER_CACHE_MODE
    D3D12_SHADER_CACHE_MODE_MEMORY = 0_i32
    D3D12_SHADER_CACHE_MODE_DISK = 1_i32
  end
  @[Flags]
  enum D3D12_SHADER_CACHE_FLAGS : UInt32
    D3D12_SHADER_CACHE_FLAG_NONE = 0_u32
    D3D12_SHADER_CACHE_FLAG_DRIVER_VERSIONED = 1_u32
    D3D12_SHADER_CACHE_FLAG_USE_WORKING_DIR = 2_u32
  end
  @[Flags]
  enum D3D12_SHADER_CACHE_KIND_FLAGS : UInt32
    D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_D3D_CACHE_FOR_DRIVER = 1_u32
    D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_D3D_CONVERSIONS = 2_u32
    D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_DRIVER_MANAGED = 4_u32
    D3D12_SHADER_CACHE_KIND_FLAG_APPLICATION_MANAGED = 8_u32
  end
  @[Flags]
  enum D3D12_SHADER_CACHE_CONTROL_FLAGS : UInt32
    D3D12_SHADER_CACHE_CONTROL_FLAG_DISABLE = 1_u32
    D3D12_SHADER_CACHE_CONTROL_FLAG_ENABLE = 2_u32
    D3D12_SHADER_CACHE_CONTROL_FLAG_CLEAR = 4_u32
  end
  enum D3D12_GPU_BASED_VALIDATION_FLAGS
    D3D12_GPU_BASED_VALIDATION_FLAGS_NONE = 0_i32
    D3D12_GPU_BASED_VALIDATION_FLAGS_DISABLE_STATE_TRACKING = 1_i32
  end
  enum D3D12_RLDO_FLAGS
    D3D12_RLDO_NONE = 0_i32
    D3D12_RLDO_SUMMARY = 1_i32
    D3D12_RLDO_DETAIL = 2_i32
    D3D12_RLDO_IGNORE_INTERNAL = 4_i32
  end
  enum D3D12_DEBUG_DEVICE_PARAMETER_TYPE
    D3D12_DEBUG_DEVICE_PARAMETER_FEATURE_FLAGS = 0_i32
    D3D12_DEBUG_DEVICE_PARAMETER_GPU_BASED_VALIDATION_SETTINGS = 1_i32
    D3D12_DEBUG_DEVICE_PARAMETER_GPU_SLOWDOWN_PERFORMANCE_FACTOR = 2_i32
  end
  enum D3D12_DEBUG_FEATURE
    D3D12_DEBUG_FEATURE_NONE = 0_i32
    D3D12_DEBUG_FEATURE_ALLOW_BEHAVIOR_CHANGING_DEBUG_AIDS = 1_i32
    D3D12_DEBUG_FEATURE_CONSERVATIVE_RESOURCE_STATE_TRACKING = 2_i32
    D3D12_DEBUG_FEATURE_DISABLE_VIRTUALIZED_BUNDLES_VALIDATION = 4_i32
    D3D12_DEBUG_FEATURE_EMULATE_WINDOWS7 = 8_i32
  end
  enum D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE
    D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_NONE = 0_i32
    D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_STATE_TRACKING_ONLY = 1_i32
    D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_UNGUARDED_VALIDATION = 2_i32
    D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_GUARDED_VALIDATION = 3_i32
    NUM_D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODES = 4_i32
  end
  enum D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS
    D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_NONE = 0_i32
    D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_TRACKING_ONLY_SHADERS = 1_i32
    D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_UNGUARDED_VALIDATION_SHADERS = 2_i32
    D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_GUARDED_VALIDATION_SHADERS = 4_i32
    D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS_VALID_MASK = 7_i32
  end
  enum D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE
    D3D12_DEBUG_COMMAND_LIST_PARAMETER_GPU_BASED_VALIDATION_SETTINGS = 0_i32
  end
  enum D3D12_MESSAGE_CATEGORY
    D3D12_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0_i32
    D3D12_MESSAGE_CATEGORY_MISCELLANEOUS = 1_i32
    D3D12_MESSAGE_CATEGORY_INITIALIZATION = 2_i32
    D3D12_MESSAGE_CATEGORY_CLEANUP = 3_i32
    D3D12_MESSAGE_CATEGORY_COMPILATION = 4_i32
    D3D12_MESSAGE_CATEGORY_STATE_CREATION = 5_i32
    D3D12_MESSAGE_CATEGORY_STATE_SETTING = 6_i32
    D3D12_MESSAGE_CATEGORY_STATE_GETTING = 7_i32
    D3D12_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 8_i32
    D3D12_MESSAGE_CATEGORY_EXECUTION = 9_i32
    D3D12_MESSAGE_CATEGORY_SHADER = 10_i32
  end
  enum D3D12_MESSAGE_SEVERITY
    D3D12_MESSAGE_SEVERITY_CORRUPTION = 0_i32
    D3D12_MESSAGE_SEVERITY_ERROR = 1_i32
    D3D12_MESSAGE_SEVERITY_WARNING = 2_i32
    D3D12_MESSAGE_SEVERITY_INFO = 3_i32
    D3D12_MESSAGE_SEVERITY_MESSAGE = 4_i32
  end
  enum D3D12_MESSAGE_ID
    D3D12_MESSAGE_ID_UNKNOWN = 0_i32
    D3D12_MESSAGE_ID_STRING_FROM_APPLICATION = 1_i32
    D3D12_MESSAGE_ID_CORRUPTED_THIS = 2_i32
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER1 = 3_i32
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER2 = 4_i32
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER3 = 5_i32
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER4 = 6_i32
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER5 = 7_i32
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER6 = 8_i32
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER7 = 9_i32
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER8 = 10_i32
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER9 = 11_i32
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER10 = 12_i32
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER11 = 13_i32
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER12 = 14_i32
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER13 = 15_i32
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER14 = 16_i32
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER15 = 17_i32
    D3D12_MESSAGE_ID_CORRUPTED_MULTITHREADING = 18_i32
    D3D12_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 19_i32
    D3D12_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 20_i32
    D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 21_i32
    D3D12_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 24_i32
    D3D12_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 25_i32
    D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 26_i32
    D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 27_i32
    D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 28_i32
    D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANESLICE = 29_i32
    D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANESLICE = 30_i32
    D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 31_i32
    D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 32_i32
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 35_i32
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 36_i32
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 37_i32
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 38_i32
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANESLICE = 39_i32
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANESLICE = 40_i32
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 41_i32
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 42_i32
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 45_i32
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 46_i32
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 47_i32
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 48_i32
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 49_i32
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 52_i32
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 53_i32
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 54_i32
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 55_i32
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 56_i32
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 57_i32
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 58_i32
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 59_i32
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 60_i32
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 61_i32
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 62_i32
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 63_i32
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 64_i32
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 65_i32
    D3D12_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 66_i32
    D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 67_i32
    D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 68_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 69_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 70_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 71_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 72_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 73_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 74_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 75_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 76_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 79_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 80_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 81_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 82_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 83_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 84_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 85_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 86_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 87_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 88_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 89_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 90_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 91_i32
    D3D12_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 92_i32
    D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 93_i32
    D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 94_i32
    D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 95_i32
    D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 96_i32
    D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 97_i32
    D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 98_i32
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 100_i32
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 101_i32
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 102_i32
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 103_i32
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 104_i32
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 105_i32
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 106_i32
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 107_i32
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 108_i32
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 109_i32
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 111_i32
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 112_i32
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 113_i32
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 114_i32
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 115_i32
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 116_i32
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 117_i32
    D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 135_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_NOT_SET = 200_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_MISMATCH = 201_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_NOT_SET = 202_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 209_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_TOO_SMALL = 210_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_NOT_SET = 211_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_FORMAT_INVALID = 212_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_TOO_SMALL = 213_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INVALID_PRIMITIVETOPOLOGY = 219_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_STRIDE_UNALIGNED = 221_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_OFFSET_UNALIGNED = 222_i32
    D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 232_i32
    D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 233_i32
    D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 234_i32
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 239_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 240_i32
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 245_i32
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 253_i32
    D3D12_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 255_i32
    D3D12_MESSAGE_ID_LIVE_DEVICE = 274_i32
    D3D12_MESSAGE_ID_LIVE_SWAPCHAIN = 275_i32
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS = 276_i32
    D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE = 277_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE = 278_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER = 280_i32
    D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE = 283_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM = 284_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES = 285_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES = 286_i32
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES = 287_i32
    D3D12_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY = 289_i32
    D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE = 290_i32
    D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE = 291_i32
    D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE = 292_i32
    D3D12_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY = 294_i32
    D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE = 295_i32
    D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE = 296_i32
    D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE = 297_i32
    D3D12_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED = 310_i32
    D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE = 318_i32
    D3D12_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY = 321_i32
    D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE = 322_i32
    D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE = 323_i32
    D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 331_i32
    D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 332_i32
    D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 333_i32
    D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 334_i32
    D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED = 335_i32
    D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 336_i32
    D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED = 337_i32
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE = 340_i32
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC = 341_i32
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT = 342_i32
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANESLICE = 343_i32
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANESLICE = 344_i32
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS = 345_i32
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT = 346_i32
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS = 354_i32
    D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT = 401_i32
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS = 403_i32
    D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 410_i32
    D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 412_i32
    D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 414_i32
    D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 416_i32
    D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED = 418_i32
    D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 420_i32
    D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 422_i32
    D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED = 425_i32
    D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED = 426_i32
    D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED = 427_i32
    D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED = 428_i32
    D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED = 429_i32
    D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED = 430_i32
    D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED = 431_i32
    D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT = 447_i32
    D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT = 448_i32
    D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER = 493_i32
    D3D12_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER = 494_i32
    D3D12_MESSAGE_ID_CREATEDEVICE_INVALIDARGS = 506_i32
    D3D12_MESSAGE_ID_CREATEDEVICE_WARNING = 507_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_TYPE = 519_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_NULL_POINTER = 520_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SUBRESOURCE = 521_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_RESERVED_BITS = 522_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISSING_BIND_FLAGS = 523_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_MISC_FLAGS = 524_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_MATCHING_STATES = 525_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINATION = 526_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_BEFORE_AFTER_MISMATCH = 527_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_RESOURCE = 528_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_SAMPLE_COUNT = 529_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS = 530_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINED_FLAGS = 531_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS_FOR_FORMAT = 532_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SPLIT_BARRIER = 533_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_END = 534_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_BEGIN = 535_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAG = 536_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMMAND_LIST_TYPE = 537_i32
    D3D12_MESSAGE_ID_INVALID_SUBRESOURCE_STATE = 538_i32
    D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CONTENTION = 540_i32
    D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET = 541_i32
    D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET_BUNDLE = 542_i32
    D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CANNOT_RESET = 543_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_OPEN = 544_i32
    D3D12_MESSAGE_ID_INVALID_BUNDLE_API = 546_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_CLOSED = 547_i32
    D3D12_MESSAGE_ID_WRONG_COMMAND_ALLOCATOR_TYPE = 549_i32
    D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_SYNC = 552_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_SYNC = 553_i32
    D3D12_MESSAGE_ID_SET_DESCRIPTOR_HEAP_INVALID = 554_i32
    D3D12_MESSAGE_ID_CREATE_COMMANDQUEUE = 557_i32
    D3D12_MESSAGE_ID_CREATE_COMMANDALLOCATOR = 558_i32
    D3D12_MESSAGE_ID_CREATE_PIPELINESTATE = 559_i32
    D3D12_MESSAGE_ID_CREATE_COMMANDLIST12 = 560_i32
    D3D12_MESSAGE_ID_CREATE_RESOURCE = 562_i32
    D3D12_MESSAGE_ID_CREATE_DESCRIPTORHEAP = 563_i32
    D3D12_MESSAGE_ID_CREATE_ROOTSIGNATURE = 564_i32
    D3D12_MESSAGE_ID_CREATE_LIBRARY = 565_i32
    D3D12_MESSAGE_ID_CREATE_HEAP = 566_i32
    D3D12_MESSAGE_ID_CREATE_MONITOREDFENCE = 567_i32
    D3D12_MESSAGE_ID_CREATE_QUERYHEAP = 568_i32
    D3D12_MESSAGE_ID_CREATE_COMMANDSIGNATURE = 569_i32
    D3D12_MESSAGE_ID_LIVE_COMMANDQUEUE = 570_i32
    D3D12_MESSAGE_ID_LIVE_COMMANDALLOCATOR = 571_i32
    D3D12_MESSAGE_ID_LIVE_PIPELINESTATE = 572_i32
    D3D12_MESSAGE_ID_LIVE_COMMANDLIST12 = 573_i32
    D3D12_MESSAGE_ID_LIVE_RESOURCE = 575_i32
    D3D12_MESSAGE_ID_LIVE_DESCRIPTORHEAP = 576_i32
    D3D12_MESSAGE_ID_LIVE_ROOTSIGNATURE = 577_i32
    D3D12_MESSAGE_ID_LIVE_LIBRARY = 578_i32
    D3D12_MESSAGE_ID_LIVE_HEAP = 579_i32
    D3D12_MESSAGE_ID_LIVE_MONITOREDFENCE = 580_i32
    D3D12_MESSAGE_ID_LIVE_QUERYHEAP = 581_i32
    D3D12_MESSAGE_ID_LIVE_COMMANDSIGNATURE = 582_i32
    D3D12_MESSAGE_ID_DESTROY_COMMANDQUEUE = 583_i32
    D3D12_MESSAGE_ID_DESTROY_COMMANDALLOCATOR = 584_i32
    D3D12_MESSAGE_ID_DESTROY_PIPELINESTATE = 585_i32
    D3D12_MESSAGE_ID_DESTROY_COMMANDLIST12 = 586_i32
    D3D12_MESSAGE_ID_DESTROY_RESOURCE = 588_i32
    D3D12_MESSAGE_ID_DESTROY_DESCRIPTORHEAP = 589_i32
    D3D12_MESSAGE_ID_DESTROY_ROOTSIGNATURE = 590_i32
    D3D12_MESSAGE_ID_DESTROY_LIBRARY = 591_i32
    D3D12_MESSAGE_ID_DESTROY_HEAP = 592_i32
    D3D12_MESSAGE_ID_DESTROY_MONITOREDFENCE = 593_i32
    D3D12_MESSAGE_ID_DESTROY_QUERYHEAP = 594_i32
    D3D12_MESSAGE_ID_DESTROY_COMMANDSIGNATURE = 595_i32
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONS = 597_i32
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMISCFLAGS = 599_i32
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDARG_RETURN = 602_i32
    D3D12_MESSAGE_ID_CREATERESOURCE_OUTOFMEMORY_RETURN = 603_i32
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDESC = 604_i32
    D3D12_MESSAGE_ID_POSSIBLY_INVALID_SUBRESOURCE_STATE = 607_i32
    D3D12_MESSAGE_ID_INVALID_USE_OF_NON_RESIDENT_RESOURCE = 608_i32
    D3D12_MESSAGE_ID_POSSIBLE_INVALID_USE_OF_NON_RESIDENT_RESOURCE = 609_i32
    D3D12_MESSAGE_ID_BUNDLE_PIPELINE_STATE_MISMATCH = 610_i32
    D3D12_MESSAGE_ID_PRIMITIVE_TOPOLOGY_MISMATCH_PIPELINE_STATE = 611_i32
    D3D12_MESSAGE_ID_RENDER_TARGET_FORMAT_MISMATCH_PIPELINE_STATE = 613_i32
    D3D12_MESSAGE_ID_RENDER_TARGET_SAMPLE_DESC_MISMATCH_PIPELINE_STATE = 614_i32
    D3D12_MESSAGE_ID_DEPTH_STENCIL_FORMAT_MISMATCH_PIPELINE_STATE = 615_i32
    D3D12_MESSAGE_ID_DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_PIPELINE_STATE = 616_i32
    D3D12_MESSAGE_ID_CREATESHADER_INVALIDBYTECODE = 622_i32
    D3D12_MESSAGE_ID_CREATEHEAP_NULLDESC = 623_i32
    D3D12_MESSAGE_ID_CREATEHEAP_INVALIDSIZE = 624_i32
    D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDHEAPTYPE = 625_i32
    D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES = 626_i32
    D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMEMORYPOOL = 627_i32
    D3D12_MESSAGE_ID_CREATEHEAP_INVALIDPROPERTIES = 628_i32
    D3D12_MESSAGE_ID_CREATEHEAP_INVALIDALIGNMENT = 629_i32
    D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMISCFLAGS = 630_i32
    D3D12_MESSAGE_ID_CREATEHEAP_INVALIDMISCFLAGS = 631_i32
    D3D12_MESSAGE_ID_CREATEHEAP_INVALIDARG_RETURN = 632_i32
    D3D12_MESSAGE_ID_CREATEHEAP_OUTOFMEMORY_RETURN = 633_i32
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAPPROPERTIES = 634_i32
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPTYPE = 635_i32
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES = 636_i32
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDMEMORYPOOL = 637_i32
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPPROPERTIES = 638_i32
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPMISCFLAGS = 639_i32
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPMISCFLAGS = 640_i32
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDARG_RETURN = 641_i32
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_OUTOFMEMORY_RETURN = 642_i32
    D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_UNRECOGNIZEDHEAPTYPE = 643_i32
    D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_INVALIDHEAPTYPE = 644_i32
    D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_INVALID_DESC = 645_i32
    D3D12_MESSAGE_ID_INVALID_DESCRIPTOR_HANDLE = 646_i32
    D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE = 647_i32
    D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_RESOURCE = 649_i32
    D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_DESC = 650_i32
    D3D12_MESSAGE_ID_CREATE_UNORDEREDACCESS_VIEW_INVALID_COUNTER_USAGE = 652_i32
    D3D12_MESSAGE_ID_COPY_DESCRIPTORS_INVALID_RANGES = 653_i32
    D3D12_MESSAGE_ID_COPY_DESCRIPTORS_WRITE_ONLY_DESCRIPTOR = 654_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RTV_FORMAT_NOT_UNKNOWN = 655_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_RENDER_TARGET_COUNT = 656_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VERTEX_SHADER_NOT_SET = 657_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_NOT_SET = 658_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_HS_DS_SIGNATURE_MISMATCH = 659_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERINDEX = 660_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_COMPONENTTYPE = 661_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERMASK = 662_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SYSTEMVALUE = 663_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 664_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_MINPRECISION = 665_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 666_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_XOR_DS_MISMATCH = 667_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH = 668_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_CONTROL_POINT_COUNT_MISMATCH = 669_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_TESSELLATOR_DOMAIN_MISMATCH = 670_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 671_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_FORCED_SAMPLE_COUNT = 672_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_PRIMITIVETOPOLOGY = 673_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SYSTEMVALUE = 674_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 675_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 676_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_TYPE_MISMATCH = 677_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS = 678_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RENDERTARGETVIEW_NOT_SET = 679_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DEPTHSTENCILVIEW_NOT_SET = 680_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_INPUT_PRIMITIVE_MISMATCH = 681_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_POSITION_NOT_PRESENT = 682_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE_FLAGS = 683_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_INDEX_BUFFER_PROPERTIES = 684_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SAMPLE_DESC = 685_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_ROOT_SIGNATURE_MISMATCH = 686_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DS_ROOT_SIGNATURE_MISMATCH = 687_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VS_ROOT_SIGNATURE_MISMATCH = 688_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_ROOT_SIGNATURE_MISMATCH = 689_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_ROOT_SIGNATURE_MISMATCH = 690_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE = 691_i32
    D3D12_MESSAGE_ID_EXECUTE_BUNDLE_OPEN_BUNDLE = 692_i32
    D3D12_MESSAGE_ID_EXECUTE_BUNDLE_DESCRIPTOR_HEAP_MISMATCH = 693_i32
    D3D12_MESSAGE_ID_EXECUTE_BUNDLE_TYPE = 694_i32
    D3D12_MESSAGE_ID_DRAW_EMPTY_SCISSOR_RECTANGLE = 695_i32
    D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_BLOB_NOT_FOUND = 696_i32
    D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_DESERIALIZE_FAILED = 697_i32
    D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_INVALID_CONFIGURATION = 698_i32
    D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_SUPPORTED_ON_DEVICE = 699_i32
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLRESOURCEPROPERTIES = 700_i32
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAP = 701_i32
    D3D12_MESSAGE_ID_GETRESOURCEALLOCATIONINFO_INVALIDRDESCS = 702_i32
    D3D12_MESSAGE_ID_MAKERESIDENT_NULLOBJECTARRAY = 703_i32
    D3D12_MESSAGE_ID_EVICT_NULLOBJECTARRAY = 705_i32
    D3D12_MESSAGE_ID_SET_DESCRIPTOR_TABLE_INVALID = 708_i32
    D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_INVALID = 709_i32
    D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_BUFFER_VIEW_INVALID = 710_i32
    D3D12_MESSAGE_ID_SET_ROOT_SHADER_RESOURCE_VIEW_INVALID = 711_i32
    D3D12_MESSAGE_ID_SET_ROOT_UNORDERED_ACCESS_VIEW_INVALID = 712_i32
    D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID_DESC = 713_i32
    D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID_DESC = 715_i32
    D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID_DESC = 717_i32
    D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDDIMENSIONALITY = 718_i32
    D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDLAYOUT = 719_i32
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONALITY = 720_i32
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDALIGNMENT = 721_i32
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMIPLEVELS = 722_i32
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDSAMPLEDESC = 723_i32
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDLAYOUT = 724_i32
    D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID = 725_i32
    D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID = 726_i32
    D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID = 727_i32
    D3D12_MESSAGE_ID_SET_RENDER_TARGETS_INVALID = 728_i32
    D3D12_MESSAGE_ID_CREATEQUERY_HEAP_INVALID_PARAMETERS = 729_i32
    D3D12_MESSAGE_ID_BEGIN_END_QUERY_INVALID_PARAMETERS = 731_i32
    D3D12_MESSAGE_ID_CLOSE_COMMAND_LIST_OPEN_QUERY = 732_i32
    D3D12_MESSAGE_ID_RESOLVE_QUERY_DATA_INVALID_PARAMETERS = 733_i32
    D3D12_MESSAGE_ID_SET_PREDICATION_INVALID_PARAMETERS = 734_i32
    D3D12_MESSAGE_ID_TIMESTAMPS_NOT_SUPPORTED = 735_i32
    D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDFORMAT = 737_i32
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDFORMAT = 738_i32
    D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDSUBRESOURCERANGE = 739_i32
    D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDBASEOFFSET = 740_i32
    D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDSUBRESOURCERANGE = 739_i32
    D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDBASEOFFSET = 740_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_HEAP = 741_i32
    D3D12_MESSAGE_ID_CREATE_SAMPLER_INVALID = 742_i32
    D3D12_MESSAGE_ID_CREATECOMMANDSIGNATURE_INVALID = 743_i32
    D3D12_MESSAGE_ID_EXECUTE_INDIRECT_INVALID_PARAMETERS = 744_i32
    D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_RESOURCE_DIMENSION = 745_i32
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUE = 815_i32
    D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDCLEARVALUEFORMAT = 816_i32
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUEFORMAT = 817_i32
    D3D12_MESSAGE_ID_CREATERESOURCE_CLEARVALUEDENORMFLUSH = 818_i32
    D3D12_MESSAGE_ID_CLEARRENDERTARGETVIEW_MISMATCHINGCLEARVALUE = 820_i32
    D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_MISMATCHINGCLEARVALUE = 821_i32
    D3D12_MESSAGE_ID_MAP_INVALIDHEAP = 822_i32
    D3D12_MESSAGE_ID_UNMAP_INVALIDHEAP = 823_i32
    D3D12_MESSAGE_ID_MAP_INVALIDRESOURCE = 824_i32
    D3D12_MESSAGE_ID_UNMAP_INVALIDRESOURCE = 825_i32
    D3D12_MESSAGE_ID_MAP_INVALIDSUBRESOURCE = 826_i32
    D3D12_MESSAGE_ID_UNMAP_INVALIDSUBRESOURCE = 827_i32
    D3D12_MESSAGE_ID_MAP_INVALIDRANGE = 828_i32
    D3D12_MESSAGE_ID_UNMAP_INVALIDRANGE = 829_i32
    D3D12_MESSAGE_ID_MAP_INVALIDDATAPOINTER = 832_i32
    D3D12_MESSAGE_ID_MAP_INVALIDARG_RETURN = 833_i32
    D3D12_MESSAGE_ID_MAP_OUTOFMEMORY_RETURN = 834_i32
    D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_BUNDLENOTSUPPORTED = 835_i32
    D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_COMMANDLISTMISMATCH = 836_i32
    D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_OPENCOMMANDLIST = 837_i32
    D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_FAILEDCOMMANDLIST = 838_i32
    D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLDST = 839_i32
    D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDDSTRESOURCEDIMENSION = 840_i32
    D3D12_MESSAGE_ID_COPYBUFFERREGION_DSTRANGEOUTOFBOUNDS = 841_i32
    D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLSRC = 842_i32
    D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDSRCRESOURCEDIMENSION = 843_i32
    D3D12_MESSAGE_ID_COPYBUFFERREGION_SRCRANGEOUTOFBOUNDS = 844_i32
    D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDCOPYFLAGS = 845_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLDST = 846_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTTYPE = 847_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCEDIMENSION = 848_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCE = 849_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTSUBRESOURCE = 850_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTOFFSET = 851_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTFORMAT = 852_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTFORMAT = 853_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDIMENSIONS = 854_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTROWPITCH = 855_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTPLACEMENT = 856_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDSPLACEDFOOTPRINTFORMAT = 857_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_DSTREGIONOUTOFBOUNDS = 858_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLSRC = 859_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCTYPE = 860_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCEDIMENSION = 861_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCE = 862_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCSUBRESOURCE = 863_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCOFFSET = 864_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCFORMAT = 865_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCFORMAT = 866_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDIMENSIONS = 867_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCROWPITCH = 868_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCPLACEMENT = 869_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDSPLACEDFOOTPRINTFORMAT = 870_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_SRCREGIONOUTOFBOUNDS = 871_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTCOORDINATES = 872_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCBOX = 873_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_FORMATMISMATCH = 874_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_EMPTYBOX = 875_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDCOPYFLAGS = 876_i32
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SUBRESOURCE_INDEX = 877_i32
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_FORMAT = 878_i32
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_MISMATCH = 879_i32
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SAMPLE_COUNT = 880_i32
    D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_INVALID_SHADER = 881_i32
    D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_CS_ROOT_SIGNATURE_MISMATCH = 882_i32
    D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_MISSING_ROOT_SIGNATURE = 883_i32
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALIDCACHEDBLOB = 884_i32
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBADAPTERMISMATCH = 885_i32
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDRIVERVERSIONMISMATCH = 886_i32
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDESCMISMATCH = 887_i32
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBIGNORED = 888_i32
    D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDHEAP = 889_i32
    D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDRESOURCE = 890_i32
    D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDBOX = 891_i32
    D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDSUBRESOURCE = 892_i32
    D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_EMPTYBOX = 893_i32
    D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDHEAP = 894_i32
    D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDRESOURCE = 895_i32
    D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDBOX = 896_i32
    D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDSUBRESOURCE = 897_i32
    D3D12_MESSAGE_ID_READFROMSUBRESOURCE_EMPTYBOX = 898_i32
    D3D12_MESSAGE_ID_TOO_MANY_NODES_SPECIFIED = 899_i32
    D3D12_MESSAGE_ID_INVALID_NODE_INDEX = 900_i32
    D3D12_MESSAGE_ID_GETHEAPPROPERTIES_INVALIDRESOURCE = 901_i32
    D3D12_MESSAGE_ID_NODE_MASK_MISMATCH = 902_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_OUTOFMEMORY = 903_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_MULTIPLE_SWAPCHAIN_BUFFER_REFERENCES = 904_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_TOO_MANY_SWAPCHAIN_REFERENCES = 905_i32
    D3D12_MESSAGE_ID_COMMAND_QUEUE_TOO_MANY_SWAPCHAIN_REFERENCES = 906_i32
    D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_WRONGSWAPCHAINBUFFERREFERENCE = 907_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_SETRENDERTARGETS_INVALIDNUMRENDERTARGETS = 908_i32
    D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_TYPE = 909_i32
    D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_FLAGS = 910_i32
    D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFLAGS = 911_i32
    D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFORMAT = 912_i32
    D3D12_MESSAGE_ID_CREATESHAREDHEAP_INVALIDFLAGS = 913_i32
    D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_UNRECOGNIZEDPROPERTIES = 914_i32
    D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDSIZE = 915_i32
    D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDOBJECT = 916_i32
    D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDOBJECT = 917_i32
    D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDKEY = 918_i32
    D3D12_MESSAGE_ID_KEYEDMUTEX_WRONGSTATE = 919_i32
    D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_PRIORITY = 920_i32
    D3D12_MESSAGE_ID_OBJECT_DELETED_WHILE_STILL_IN_USE = 921_i32
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_FLAGS = 922_i32
    D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_HAS_NO_RESOURCE = 923_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RENDER_TARGET_DELETED = 924_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_ALL_RENDER_TARGETS_HAVE_UNKNOWN_FORMAT = 925_i32
    D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_INTERSECTS_MULTIPLE_BUFFERS = 926_i32
    D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_GPU_WRITTEN_READBACK_RESOURCE_MAPPED = 927_i32
    D3D12_MESSAGE_ID_UNMAP_RANGE_NOT_EMPTY = 929_i32
    D3D12_MESSAGE_ID_MAP_INVALID_NULLRANGE = 930_i32
    D3D12_MESSAGE_ID_UNMAP_INVALID_NULLRANGE = 931_i32
    D3D12_MESSAGE_ID_NO_GRAPHICS_API_SUPPORT = 932_i32
    D3D12_MESSAGE_ID_NO_COMPUTE_API_SUPPORT = 933_i32
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_FLAGS_NOT_SUPPORTED = 934_i32
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_ARGUMENT_UNINITIALIZED = 935_i32
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_HEAP_INDEX_OUT_OF_BOUNDS = 936_i32
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TABLE_REGISTER_INDEX_OUT_OF_BOUNDS = 937_i32
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_UNINITIALIZED = 938_i32
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TYPE_MISMATCH = 939_i32
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SRV_RESOURCE_DIMENSION_MISMATCH = 940_i32
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UAV_RESOURCE_DIMENSION_MISMATCH = 941_i32
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INCOMPATIBLE_RESOURCE_STATE = 942_i32
    D3D12_MESSAGE_ID_COPYRESOURCE_NULLDST = 943_i32
    D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDDSTRESOURCE = 944_i32
    D3D12_MESSAGE_ID_COPYRESOURCE_NULLSRC = 945_i32
    D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSRCRESOURCE = 946_i32
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLDST = 947_i32
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDDSTRESOURCE = 948_i32
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLSRC = 949_i32
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDSRCRESOURCE = 950_i32
    D3D12_MESSAGE_ID_PIPELINE_STATE_TYPE_MISMATCH = 951_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_NOT_SET = 952_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_MISMATCH = 953_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_ZERO_BARRIERS = 954_i32
    D3D12_MESSAGE_ID_BEGIN_END_EVENT_MISMATCH = 955_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_POSSIBLE_BEFORE_AFTER_MISMATCH = 956_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_BEGIN_END = 957_i32
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INVALID_RESOURCE = 958_i32
    D3D12_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT = 959_i32
    D3D12_MESSAGE_ID_OBJECT_EVICTED_WHILE_STILL_IN_USE = 960_i32
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_DESCRIPTOR_ACCESS_OUT_OF_BOUNDS = 961_i32
    D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_INVALIDLIBRARYBLOB = 962_i32
    D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_DRIVERVERSIONMISMATCH = 963_i32
    D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_ADAPTERVERSIONMISMATCH = 964_i32
    D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_UNSUPPORTED = 965_i32
    D3D12_MESSAGE_ID_CREATE_PIPELINELIBRARY = 966_i32
    D3D12_MESSAGE_ID_LIVE_PIPELINELIBRARY = 967_i32
    D3D12_MESSAGE_ID_DESTROY_PIPELINELIBRARY = 968_i32
    D3D12_MESSAGE_ID_STOREPIPELINE_NONAME = 969_i32
    D3D12_MESSAGE_ID_STOREPIPELINE_DUPLICATENAME = 970_i32
    D3D12_MESSAGE_ID_LOADPIPELINE_NAMENOTFOUND = 971_i32
    D3D12_MESSAGE_ID_LOADPIPELINE_INVALIDDESC = 972_i32
    D3D12_MESSAGE_ID_PIPELINELIBRARY_SERIALIZE_NOTENOUGHMEMORY = 973_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_RT_OUTPUT_MISMATCH = 974_i32
    D3D12_MESSAGE_ID_SETEVENTONMULTIPLEFENCECOMPLETION_INVALIDFLAGS = 975_i32
    D3D12_MESSAGE_ID_CREATE_QUEUE_VIDEO_NOT_SUPPORTED = 976_i32
    D3D12_MESSAGE_ID_CREATE_COMMAND_ALLOCATOR_VIDEO_NOT_SUPPORTED = 977_i32
    D3D12_MESSAGE_ID_CREATEQUERY_HEAP_VIDEO_DECODE_STATISTICS_NOT_SUPPORTED = 978_i32
    D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDLIST = 979_i32
    D3D12_MESSAGE_ID_CREATE_VIDEODECODER = 980_i32
    D3D12_MESSAGE_ID_CREATE_VIDEODECODESTREAM = 981_i32
    D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDLIST = 982_i32
    D3D12_MESSAGE_ID_LIVE_VIDEODECODER = 983_i32
    D3D12_MESSAGE_ID_LIVE_VIDEODECODESTREAM = 984_i32
    D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDLIST = 985_i32
    D3D12_MESSAGE_ID_DESTROY_VIDEODECODER = 986_i32
    D3D12_MESSAGE_ID_DESTROY_VIDEODECODESTREAM = 987_i32
    D3D12_MESSAGE_ID_DECODE_FRAME_INVALID_PARAMETERS = 988_i32
    D3D12_MESSAGE_ID_DEPRECATED_API = 989_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_COMMAND_LIST_TYPE = 990_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_DESCRIPTOR_TABLE_NOT_SET = 991_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_CONSTANT_BUFFER_VIEW_NOT_SET = 992_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_SHADER_RESOURCE_VIEW_NOT_SET = 993_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_UNORDERED_ACCESS_VIEW_NOT_SET = 994_i32
    D3D12_MESSAGE_ID_DISCARD_INVALID_SUBRESOURCE_RANGE = 995_i32
    D3D12_MESSAGE_ID_DISCARD_ONE_SUBRESOURCE_FOR_MIPS_WITH_RECTS = 996_i32
    D3D12_MESSAGE_ID_DISCARD_NO_RECTS_FOR_NON_TEXTURE2D = 997_i32
    D3D12_MESSAGE_ID_COPY_ON_SAME_SUBRESOURCE = 998_i32
    D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PAGEABLE = 999_i32
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UNSUPPORTED = 1000_i32
    D3D12_MESSAGE_ID_STATIC_DESCRIPTOR_INVALID_DESCRIPTOR_CHANGE = 1001_i32
    D3D12_MESSAGE_ID_DATA_STATIC_DESCRIPTOR_INVALID_DATA_CHANGE = 1002_i32
    D3D12_MESSAGE_ID_DATA_STATIC_WHILE_SET_AT_EXECUTE_DESCRIPTOR_INVALID_DATA_CHANGE = 1003_i32
    D3D12_MESSAGE_ID_EXECUTE_BUNDLE_STATIC_DESCRIPTOR_DATA_STATIC_NOT_SET = 1004_i32
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_ACCESS_OUT_OF_BOUNDS = 1005_i32
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SAMPLER_MODE_MISMATCH = 1006_i32
    D3D12_MESSAGE_ID_CREATE_FENCE_INVALID_FLAGS = 1007_i32
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_DUPLICATE_SUBRESOURCE_TRANSITIONS = 1008_i32
    D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PRIORITY = 1009_i32
    D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_LARGE_NUM_DESCRIPTORS = 1013_i32
    D3D12_MESSAGE_ID_BEGIN_EVENT = 1014_i32
    D3D12_MESSAGE_ID_END_EVENT = 1015_i32
    D3D12_MESSAGE_ID_CREATEDEVICE_DEBUG_LAYER_STARTUP_OPTIONS = 1016_i32
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_DEPTHBOUNDSTEST_UNSUPPORTED = 1017_i32
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_DUPLICATE_SUBOBJECT = 1018_i32
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_UNKNOWN_SUBOBJECT = 1019_i32
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_ZERO_SIZE_STREAM = 1020_i32
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_STREAM = 1021_i32
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CANNOT_DEDUCE_TYPE = 1022_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_STATIC_DESCRIPTOR_RESOURCE_DIMENSION_MISMATCH = 1023_i32
    D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_PRIVILEGE_FOR_GLOBAL_REALTIME = 1024_i32
    D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_HARDWARE_SUPPORT_FOR_GLOBAL_REALTIME = 1025_i32
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_ARCHITECTURE = 1026_i32
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DST = 1027_i32
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE_DIMENSION = 1028_i32
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DST_RANGE_OUT_OF_BOUNDS = 1029_i32
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_SRC = 1030_i32
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE_DIMENSION = 1031_i32
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_SRC_RANGE_OUT_OF_BOUNDS = 1032_i32
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_OFFSET_ALIGNMENT = 1033_i32
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_RESOURCES = 1034_i32
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_SUBRESOURCE_RANGES = 1035_i32
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_RESOURCE = 1036_i32
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_SUBRESOURCE_RANGE = 1037_i32
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_SUBRESOURCE_OUT_OF_BOUNDS = 1038_i32
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_RANGE_OUT_OF_BOUNDS = 1039_i32
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_ZERO_DEPENDENCIES = 1040_i32
    D3D12_MESSAGE_ID_DEVICE_CREATE_SHARED_HANDLE_INVALIDARG = 1041_i32
    D3D12_MESSAGE_ID_DESCRIPTOR_HANDLE_WITH_INVALID_RESOURCE = 1042_i32
    D3D12_MESSAGE_ID_SETDEPTHBOUNDS_INVALIDARGS = 1043_i32
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_STATE_IMPRECISE = 1044_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_PIPELINE_STATE_NOT_SET = 1045_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_MODEL_MISMATCH = 1046_i32
    D3D12_MESSAGE_ID_OBJECT_ACCESSED_WHILE_STILL_IN_USE = 1047_i32
    D3D12_MESSAGE_ID_PROGRAMMABLE_MSAA_UNSUPPORTED = 1048_i32
    D3D12_MESSAGE_ID_SETSAMPLEPOSITIONS_INVALIDARGS = 1049_i32
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCEREGION_INVALID_RECT = 1050_i32
    D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDQUEUE = 1051_i32
    D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDLIST = 1052_i32
    D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDQUEUE = 1053_i32
    D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDQUEUE = 1054_i32
    D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDLIST = 1055_i32
    D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDQUEUE = 1056_i32
    D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDQUEUE = 1057_i32
    D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDLIST = 1058_i32
    D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDQUEUE = 1059_i32
    D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSOR = 1060_i32
    D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSSTREAM = 1061_i32
    D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSOR = 1062_i32
    D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSSTREAM = 1063_i32
    D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSOR = 1064_i32
    D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSSTREAM = 1065_i32
    D3D12_MESSAGE_ID_PROCESS_FRAME_INVALID_PARAMETERS = 1066_i32
    D3D12_MESSAGE_ID_COPY_INVALIDLAYOUT = 1067_i32
    D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION = 1068_i32
    D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION_POLICY = 1069_i32
    D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION = 1070_i32
    D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION = 1071_i32
    D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION_POLICY = 1072_i32
    D3D12_MESSAGE_ID_LIVE_PROTECTED_RESOURCE_SESSION = 1073_i32
    D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION = 1074_i32
    D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION_POLICY = 1075_i32
    D3D12_MESSAGE_ID_DESTROY_PROTECTED_RESOURCE_SESSION = 1076_i32
    D3D12_MESSAGE_ID_PROTECTED_RESOURCE_SESSION_UNSUPPORTED = 1077_i32
    D3D12_MESSAGE_ID_FENCE_INVALIDOPERATION = 1078_i32
    D3D12_MESSAGE_ID_CREATEQUERY_HEAP_COPY_QUEUE_TIMESTAMPS_NOT_SUPPORTED = 1079_i32
    D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_DEFERRED = 1080_i32
    D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMFIRSTUSE = 1081_i32
    D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMCLEAR = 1082_i32
    D3D12_MESSAGE_ID_CREATE_VIDEODECODERHEAP = 1083_i32
    D3D12_MESSAGE_ID_LIVE_VIDEODECODERHEAP = 1084_i32
    D3D12_MESSAGE_ID_DESTROY_VIDEODECODERHEAP = 1085_i32
    D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDARG_RETURN = 1086_i32
    D3D12_MESSAGE_ID_OPENEXISTINGHEAP_OUTOFMEMORY_RETURN = 1087_i32
    D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDADDRESS = 1088_i32
    D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDHANDLE = 1089_i32
    D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_DEST = 1090_i32
    D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_MODE = 1091_i32
    D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_ALIGNMENT = 1092_i32
    D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_NOT_SUPPORTED = 1093_i32
    D3D12_MESSAGE_ID_SETVIEWINSTANCEMASK_INVALIDARGS = 1094_i32
    D3D12_MESSAGE_ID_VIEW_INSTANCING_UNSUPPORTED = 1095_i32
    D3D12_MESSAGE_ID_VIEW_INSTANCING_INVALIDARGS = 1096_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_MISMATCH_DECODE_REFERENCE_ONLY_FLAG = 1097_i32
    D3D12_MESSAGE_ID_COPYRESOURCE_MISMATCH_DECODE_REFERENCE_ONLY_FLAG = 1098_i32
    D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_FAILURE = 1099_i32
    D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_UNSUPPORTED = 1100_i32
    D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_INVALID_INPUT = 1101_i32
    D3D12_MESSAGE_ID_CREATE_VIDEO_DECODER_UNSUPPORTED = 1102_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_METADATA_ERROR = 1103_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VIEW_INSTANCING_VERTEX_SIZE_EXCEEDED = 1104_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RUNTIME_INTERNAL_ERROR = 1105_i32
    D3D12_MESSAGE_ID_NO_VIDEO_API_SUPPORT = 1106_i32
    D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_INVALID_INPUT = 1107_i32
    D3D12_MESSAGE_ID_CREATE_VIDEO_PROCESSOR_CAPS_FAILURE = 1108_i32
    D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_UNSUPPORTED_FORMAT = 1109_i32
    D3D12_MESSAGE_ID_VIDEO_DECODE_FRAME_INVALID_ARGUMENT = 1110_i32
    D3D12_MESSAGE_ID_ENQUEUE_MAKE_RESIDENT_INVALID_FLAGS = 1111_i32
    D3D12_MESSAGE_ID_OPENEXISTINGHEAP_UNSUPPORTED = 1112_i32
    D3D12_MESSAGE_ID_VIDEO_PROCESS_FRAMES_INVALID_ARGUMENT = 1113_i32
    D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_UNSUPPORTED = 1114_i32
    D3D12_MESSAGE_ID_CREATE_COMMANDRECORDER = 1115_i32
    D3D12_MESSAGE_ID_LIVE_COMMANDRECORDER = 1116_i32
    D3D12_MESSAGE_ID_DESTROY_COMMANDRECORDER = 1117_i32
    D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_VIDEO_NOT_SUPPORTED = 1118_i32
    D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_SUPPORT_FLAGS = 1119_i32
    D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_FLAGS = 1120_i32
    D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_MORE_RECORDERS_THAN_LOGICAL_PROCESSORS = 1121_i32
    D3D12_MESSAGE_ID_CREATE_COMMANDPOOL = 1122_i32
    D3D12_MESSAGE_ID_LIVE_COMMANDPOOL = 1123_i32
    D3D12_MESSAGE_ID_DESTROY_COMMANDPOOL = 1124_i32
    D3D12_MESSAGE_ID_CREATE_COMMAND_POOL_INVALID_FLAGS = 1125_i32
    D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_VIDEO_NOT_SUPPORTED = 1126_i32
    D3D12_MESSAGE_ID_COMMAND_RECORDER_SUPPORT_FLAGS_MISMATCH = 1127_i32
    D3D12_MESSAGE_ID_COMMAND_RECORDER_CONTENTION = 1128_i32
    D3D12_MESSAGE_ID_COMMAND_RECORDER_USAGE_WITH_CREATECOMMANDLIST_COMMAND_LIST = 1129_i32
    D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_USAGE_WITH_CREATECOMMANDLIST1_COMMAND_LIST = 1130_i32
    D3D12_MESSAGE_ID_CANNOT_EXECUTE_EMPTY_COMMAND_LIST = 1131_i32
    D3D12_MESSAGE_ID_CANNOT_RESET_COMMAND_POOL_WITH_OPEN_COMMAND_LISTS = 1132_i32
    D3D12_MESSAGE_ID_CANNOT_USE_COMMAND_RECORDER_WITHOUT_CURRENT_TARGET = 1133_i32
    D3D12_MESSAGE_ID_CANNOT_CHANGE_COMMAND_RECORDER_TARGET_WHILE_RECORDING = 1134_i32
    D3D12_MESSAGE_ID_COMMAND_POOL_SYNC = 1135_i32
    D3D12_MESSAGE_ID_EVICT_UNDERFLOW = 1136_i32
    D3D12_MESSAGE_ID_CREATE_META_COMMAND = 1137_i32
    D3D12_MESSAGE_ID_LIVE_META_COMMAND = 1138_i32
    D3D12_MESSAGE_ID_DESTROY_META_COMMAND = 1139_i32
    D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_DST_RESOURCE = 1140_i32
    D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_SRC_RESOURCE = 1141_i32
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE = 1142_i32
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE = 1143_i32
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_BUFFER = 1144_i32
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_RESOURCE_DESC = 1145_i32
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_UNSUPPORTED = 1146_i32
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_DIMENSION = 1147_i32
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_FLAGS = 1148_i32
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_OFFSET = 1149_i32
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_DIMENSION = 1150_i32
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_FLAGS = 1151_i32
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_OUTOFMEMORY_RETURN = 1152_i32
    D3D12_MESSAGE_ID_CANNOT_CREATE_GRAPHICS_AND_VIDEO_COMMAND_RECORDER = 1153_i32
    D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_POSSIBLY_MISMATCHING_PROPERTIES = 1154_i32
    D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE = 1155_i32
    D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INCOMPATIBLE_WITH_STRUCTURED_BUFFERS = 1156_i32
    D3D12_MESSAGE_ID_COMPUTE_ONLY_DEVICE_OPERATION_UNSUPPORTED = 1157_i32
    D3D12_MESSAGE_ID_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INVALID = 1158_i32
    D3D12_MESSAGE_ID_EMIT_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_INVALID = 1159_i32
    D3D12_MESSAGE_ID_COPY_RAYTRACING_ACCELERATION_STRUCTURE_INVALID = 1160_i32
    D3D12_MESSAGE_ID_DISPATCH_RAYS_INVALID = 1161_i32
    D3D12_MESSAGE_ID_GET_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO_INVALID = 1162_i32
    D3D12_MESSAGE_ID_CREATE_LIFETIMETRACKER = 1163_i32
    D3D12_MESSAGE_ID_LIVE_LIFETIMETRACKER = 1164_i32
    D3D12_MESSAGE_ID_DESTROY_LIFETIMETRACKER = 1165_i32
    D3D12_MESSAGE_ID_DESTROYOWNEDOBJECT_OBJECTNOTOWNED = 1166_i32
    D3D12_MESSAGE_ID_CREATE_TRACKEDWORKLOAD = 1167_i32
    D3D12_MESSAGE_ID_LIVE_TRACKEDWORKLOAD = 1168_i32
    D3D12_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD = 1169_i32
    D3D12_MESSAGE_ID_RENDER_PASS_ERROR = 1170_i32
    D3D12_MESSAGE_ID_META_COMMAND_ID_INVALID = 1171_i32
    D3D12_MESSAGE_ID_META_COMMAND_UNSUPPORTED_PARAMS = 1172_i32
    D3D12_MESSAGE_ID_META_COMMAND_FAILED_ENUMERATION = 1173_i32
    D3D12_MESSAGE_ID_META_COMMAND_PARAMETER_SIZE_MISMATCH = 1174_i32
    D3D12_MESSAGE_ID_UNINITIALIZED_META_COMMAND = 1175_i32
    D3D12_MESSAGE_ID_META_COMMAND_INVALID_GPU_VIRTUAL_ADDRESS = 1176_i32
    D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDLIST = 1177_i32
    D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDLIST = 1178_i32
    D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDLIST = 1179_i32
    D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDQUEUE = 1180_i32
    D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDQUEUE = 1181_i32
    D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDQUEUE = 1182_i32
    D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONESTIMATOR = 1183_i32
    D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONESTIMATOR = 1184_i32
    D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONESTIMATOR = 1185_i32
    D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONVECTORHEAP = 1186_i32
    D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONVECTORHEAP = 1187_i32
    D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONVECTORHEAP = 1188_i32
    D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS = 1189_i32
    D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS = 1190_i32
    D3D12_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR = 1191_i32
    D3D12_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD = 1192_i32
    D3D12_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR = 1193_i32
    D3D12_MESSAGE_ID_CREATE_STATE_OBJECT_ERROR = 1194_i32
    D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_ERROR = 1195_i32
    D3D12_MESSAGE_ID_GET_SHADER_STACK_SIZE_ERROR = 1196_i32
    D3D12_MESSAGE_ID_GET_PIPELINE_STACK_SIZE_ERROR = 1197_i32
    D3D12_MESSAGE_ID_SET_PIPELINE_STACK_SIZE_ERROR = 1198_i32
    D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_SIZE_INVALID = 1199_i32
    D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_INVALID = 1200_i32
    D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_DRIVER_REPORTED_ISSUE = 1201_i32
    D3D12_MESSAGE_ID_RENDER_PASS_INVALID_RESOURCE_BARRIER = 1202_i32
    D3D12_MESSAGE_ID_RENDER_PASS_DISALLOWED_API_CALLED = 1203_i32
    D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_NEST_RENDER_PASSES = 1204_i32
    D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_END_WITHOUT_BEGIN = 1205_i32
    D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_CLOSE_COMMAND_LIST = 1206_i32
    D3D12_MESSAGE_ID_RENDER_PASS_GPU_WORK_WHILE_SUSPENDED = 1207_i32
    D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_SUSPEND_RESUME = 1208_i32
    D3D12_MESSAGE_ID_RENDER_PASS_NO_PRIOR_SUSPEND_WITHIN_EXECUTECOMMANDLISTS = 1209_i32
    D3D12_MESSAGE_ID_RENDER_PASS_NO_SUBSEQUENT_RESUME_WITHIN_EXECUTECOMMANDLISTS = 1210_i32
    D3D12_MESSAGE_ID_TRACKED_WORKLOAD_COMMAND_QUEUE_MISMATCH = 1211_i32
    D3D12_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED = 1212_i32
    D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_NO_ACCESS = 1213_i32
    D3D12_MESSAGE_ID_RENDER_PASS_UNSUPPORTED_RESOLVE = 1214_i32
    D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INVALID_RESOURCE_PTR = 1215_i32
    D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_SIGNAL = 1216_i32
    D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_WAIT = 1217_i32
    D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_ESTIMATOR_INVALID_ARGUMENT = 1218_i32
    D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT = 1219_i32
    D3D12_MESSAGE_ID_ESTIMATE_MOTION_INVALID_ARGUMENT = 1220_i32
    D3D12_MESSAGE_ID_RESOLVE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT = 1221_i32
    D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_HEAP_TYPE = 1222_i32
    D3D12_MESSAGE_ID_SET_BACKGROUND_PROCESSING_MODE_INVALID_ARGUMENT = 1223_i32
    D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE_FOR_FEATURE_LEVEL = 1224_i32
    D3D12_MESSAGE_ID_CREATE_VIDEOEXTENSIONCOMMAND = 1225_i32
    D3D12_MESSAGE_ID_LIVE_VIDEOEXTENSIONCOMMAND = 1226_i32
    D3D12_MESSAGE_ID_DESTROY_VIDEOEXTENSIONCOMMAND = 1227_i32
    D3D12_MESSAGE_ID_INVALID_VIDEO_EXTENSION_COMMAND_ID = 1228_i32
    D3D12_MESSAGE_ID_VIDEO_EXTENSION_COMMAND_INVALID_ARGUMENT = 1229_i32
    D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_UNIQUE_IN_DXIL_LIBRARY = 1230_i32
    D3D12_MESSAGE_ID_VARIABLE_SHADING_RATE_NOT_ALLOWED_WITH_TIR = 1231_i32
    D3D12_MESSAGE_ID_GEOMETRY_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE = 1232_i32
    D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_SHADING_RATE = 1233_i32
    D3D12_MESSAGE_ID_RSSETSHADING_RATE_SHADING_RATE_NOT_PERMITTED_BY_CAP = 1234_i32
    D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_COMBINER = 1235_i32
    D3D12_MESSAGE_ID_RSSETSHADINGRATEIMAGE_REQUIRES_TIER_2 = 1236_i32
    D3D12_MESSAGE_ID_RSSETSHADINGRATE_REQUIRES_TIER_1 = 1237_i32
    D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_FORMAT = 1238_i32
    D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_ARRAY_SIZE = 1239_i32
    D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_MIP_LEVEL = 1240_i32
    D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_COUNT = 1241_i32
    D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_QUALITY = 1242_i32
    D3D12_MESSAGE_ID_NON_RETAIL_SHADER_MODEL_WONT_VALIDATE = 1243_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_ROOT_SIGNATURE_MISMATCH = 1244_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_ROOT_SIGNATURE_MISMATCH = 1245_i32
    D3D12_MESSAGE_ID_ADD_TO_STATE_OBJECT_ERROR = 1246_i32
    D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION_INVALID_ARGUMENT = 1247_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_PSO_DESC_MISMATCH = 1248_i32
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_MS_INCOMPLETE_TYPE = 1249_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_NOT_MS_MISMATCH = 1250_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_NOT_PS_MISMATCH = 1251_i32
    D3D12_MESSAGE_ID_NONZERO_SAMPLER_FEEDBACK_MIP_REGION_WITH_INCOMPATIBLE_FORMAT = 1252_i32
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_SHADER_MISMATCH = 1253_i32
    D3D12_MESSAGE_ID_EMPTY_DISPATCH = 1254_i32
    D3D12_MESSAGE_ID_RESOURCE_FORMAT_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY = 1255_i32
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_MIP_REGION = 1256_i32
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_DIMENSION = 1257_i32
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_COUNT = 1258_i32
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_QUALITY = 1259_i32
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_LAYOUT = 1260_i32
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_REQUIRES_UNORDERED_ACCESS_FLAG = 1261_i32
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_NULL_ARGUMENTS = 1262_i32
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_UAV_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY = 1263_i32
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_REQUIRES_FEEDBACK_MAP_FORMAT = 1264_i32
    D3D12_MESSAGE_ID_CREATEMESHSHADER_INVALIDSHADERBYTECODE = 1265_i32
    D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTOFMEMORY = 1266_i32
    D3D12_MESSAGE_ID_CREATEMESHSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 1267_i32
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_INVALID_FORMAT = 1268_i32
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_INVALID_MIP_LEVEL_COUNT = 1269_i32
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_ARRAY_SIZE_MISMATCH = 1270_i32
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_MISMATCHING_TARGETED_RESOURCE = 1271_i32
    D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTPUTEXCEEDSMAXSIZE = 1272_i32
    D3D12_MESSAGE_ID_CREATEMESHSHADER_GROUPSHAREDEXCEEDSMAXSIZE = 1273_i32
    D3D12_MESSAGE_ID_VERTEX_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE = 1274_i32
    D3D12_MESSAGE_ID_MESH_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE = 1275_i32
    D3D12_MESSAGE_ID_CREATEMESHSHADER_MISMATCHEDASMSPAYLOADSIZE = 1276_i32
    D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_UNBOUNDED_STATIC_DESCRIPTORS = 1277_i32
    D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_INVALIDSHADERBYTECODE = 1278_i32
    D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_OUTOFMEMORY = 1279_i32
    D3D12_MESSAGE_ID_CREATE_SHADERCACHESESSION = 1280_i32
    D3D12_MESSAGE_ID_LIVE_SHADERCACHESESSION = 1281_i32
    D3D12_MESSAGE_ID_DESTROY_SHADERCACHESESSION = 1282_i32
    D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_INVALIDARGS = 1283_i32
    D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_DISABLED = 1284_i32
    D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_ALREADYOPEN = 1285_i32
    D3D12_MESSAGE_ID_SHADERCACHECONTROL_DEVELOPERMODE = 1286_i32
    D3D12_MESSAGE_ID_SHADERCACHECONTROL_INVALIDFLAGS = 1287_i32
    D3D12_MESSAGE_ID_SHADERCACHECONTROL_STATEALREADYSET = 1288_i32
    D3D12_MESSAGE_ID_SHADERCACHECONTROL_IGNOREDFLAG = 1289_i32
    D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_ALREADYPRESENT = 1290_i32
    D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_HASHCOLLISION = 1291_i32
    D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_CACHEFULL = 1292_i32
    D3D12_MESSAGE_ID_SHADERCACHESESSION_FINDVALUE_NOTFOUND = 1293_i32
    D3D12_MESSAGE_ID_SHADERCACHESESSION_CORRUPT = 1294_i32
    D3D12_MESSAGE_ID_SHADERCACHESESSION_DISABLED = 1295_i32
    D3D12_MESSAGE_ID_OVERSIZED_DISPATCH = 1296_i32
    D3D12_MESSAGE_ID_CREATE_VIDEOENCODER = 1297_i32
    D3D12_MESSAGE_ID_LIVE_VIDEOENCODER = 1298_i32
    D3D12_MESSAGE_ID_DESTROY_VIDEOENCODER = 1299_i32
    D3D12_MESSAGE_ID_CREATE_VIDEOENCODERHEAP = 1300_i32
    D3D12_MESSAGE_ID_LIVE_VIDEOENCODERHEAP = 1301_i32
    D3D12_MESSAGE_ID_DESTROY_VIDEOENCODERHEAP = 1302_i32
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_MISMATCH_ENCODE_REFERENCE_ONLY_FLAG = 1303_i32
    D3D12_MESSAGE_ID_COPYRESOURCE_MISMATCH_ENCODE_REFERENCE_ONLY_FLAG = 1304_i32
    D3D12_MESSAGE_ID_ENCODE_FRAME_INVALID_PARAMETERS = 1305_i32
    D3D12_MESSAGE_ID_ENCODE_FRAME_UNSUPPORTED_PARAMETERS = 1306_i32
    D3D12_MESSAGE_ID_RESOLVE_ENCODER_OUTPUT_METADATA_INVALID_PARAMETERS = 1307_i32
    D3D12_MESSAGE_ID_RESOLVE_ENCODER_OUTPUT_METADATA_UNSUPPORTED_PARAMETERS = 1308_i32
    D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_INVALID_PARAMETERS = 1309_i32
    D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_UNSUPPORTED_PARAMETERS = 1310_i32
    D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_HEAP_INVALID_PARAMETERS = 1311_i32
    D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_HEAP_UNSUPPORTED_PARAMETERS = 1312_i32
    D3D12_MESSAGE_ID_CREATECOMMANDLIST_NULL_COMMANDALLOCATOR = 1313_i32
    D3D12_MESSAGE_ID_CLEAR_UNORDERED_ACCESS_VIEW_INVALID_DESCRIPTOR_HANDLE = 1314_i32
    D3D12_MESSAGE_ID_DESCRIPTOR_HEAP_NOT_SHADER_VISIBLE = 1315_i32
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_BLENDOP_WARNING = 1316_i32
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_BLENDOPALPHA_WARNING = 1317_i32
    D3D12_MESSAGE_ID_WRITE_COMBINE_PERFORMANCE_WARNING = 1318_i32
    D3D12_MESSAGE_ID_RESOLVE_QUERY_INVALID_QUERY_STATE = 1319_i32
    D3D12_MESSAGE_ID_SETPRIVATEDATA_NO_ACCESS = 1320_i32
    D3D12_MESSAGE_ID_COMMAND_LIST_STATIC_DESCRIPTOR_SAMPLER_MODE_MISMATCH = 1321_i32
    D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_UNSUPPORTED_BUFFER_WIDTH = 1322_i32
    D3D12_MESSAGE_ID_CREATEMESHSHADER_TOPOLOGY_MISMATCH = 1323_i32
    D3D12_MESSAGE_ID_VRS_SUM_COMBINER_REQUIRES_CAPABILITY = 1324_i32
    D3D12_MESSAGE_ID_SETTING_SHADING_RATE_FROM_MS_REQUIRES_CAPABILITY = 1325_i32
    D3D12_MESSAGE_ID_SHADERCACHESESSION_SHADERCACHEDELETE_NOTSUPPORTED = 1326_i32
    D3D12_MESSAGE_ID_SHADERCACHECONTROL_SHADERCACHECLEAR_NOTSUPPORTED = 1327_i32
    D3D12_MESSAGE_ID_D3D12_MESSAGES_END = 1328_i32
  end
  enum D3D12_MESSAGE_CALLBACK_FLAGS
    D3D12_MESSAGE_CALLBACK_FLAG_NONE = 0_i32
    D3D12_MESSAGE_CALLBACK_IGNORE_FILTERS = 1_i32
  end
  enum D3D12_AXIS_SHADING_RATE
    D3D12_AXIS_SHADING_RATE_1X = 0_i32
    D3D12_AXIS_SHADING_RATE_2X = 1_i32
    D3D12_AXIS_SHADING_RATE_4X = 2_i32
  end
  enum D3D12_SHADING_RATE
    D3D12_SHADING_RATE_1X1 = 0_i32
    D3D12_SHADING_RATE_1X2 = 1_i32
    D3D12_SHADING_RATE_2X1 = 4_i32
    D3D12_SHADING_RATE_2X2 = 5_i32
    D3D12_SHADING_RATE_2X4 = 6_i32
    D3D12_SHADING_RATE_4X2 = 9_i32
    D3D12_SHADING_RATE_4X4 = 10_i32
  end
  enum D3D12_SHADING_RATE_COMBINER
    D3D12_SHADING_RATE_COMBINER_PASSTHROUGH = 0_i32
    D3D12_SHADING_RATE_COMBINER_OVERRIDE = 1_i32
    D3D12_SHADING_RATE_COMBINER_MIN = 2_i32
    D3D12_SHADING_RATE_COMBINER_MAX = 3_i32
    D3D12_SHADING_RATE_COMBINER_SUM = 4_i32
  end
  enum D3D12_SHADER_VERSION_TYPE
    D3D12_SHVER_PIXEL_SHADER = 0_i32
    D3D12_SHVER_VERTEX_SHADER = 1_i32
    D3D12_SHVER_GEOMETRY_SHADER = 2_i32
    D3D12_SHVER_HULL_SHADER = 3_i32
    D3D12_SHVER_DOMAIN_SHADER = 4_i32
    D3D12_SHVER_COMPUTE_SHADER = 5_i32
    D3D12_SHVER_RESERVED0 = 65520_i32
  end

  @[Extern]
  struct D3D12_COMMAND_QUEUE_DESC
    property type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE
    property priority : Int32
    property flags : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_FLAGS
    property node_mask : UInt32
    def initialize(@type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, @priority : Int32, @flags : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_FLAGS, @node_mask : UInt32)
    end
  end

  @[Extern]
  struct D3D12_INPUT_ELEMENT_DESC
    property semantic_name : Win32cr::Foundation::PSTR
    property semantic_index : UInt32
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property input_slot : UInt32
    property aligned_byte_offset : UInt32
    property input_slot_class : Win32cr::Graphics::Direct3D12::D3D12_INPUT_CLASSIFICATION
    property instance_data_step_rate : UInt32
    def initialize(@semantic_name : Win32cr::Foundation::PSTR, @semantic_index : UInt32, @format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @input_slot : UInt32, @aligned_byte_offset : UInt32, @input_slot_class : Win32cr::Graphics::Direct3D12::D3D12_INPUT_CLASSIFICATION, @instance_data_step_rate : UInt32)
    end
  end

  @[Extern]
  struct D3D12_SO_DECLARATION_ENTRY
    property stream : UInt32
    property semantic_name : Win32cr::Foundation::PSTR
    property semantic_index : UInt32
    property start_component : UInt8
    property component_count : UInt8
    property output_slot : UInt8
    def initialize(@stream : UInt32, @semantic_name : Win32cr::Foundation::PSTR, @semantic_index : UInt32, @start_component : UInt8, @component_count : UInt8, @output_slot : UInt8)
    end
  end

  @[Extern]
  struct D3D12_VIEWPORT
    property top_left_x : Float32
    property top_left_y : Float32
    property width : Float32
    property height : Float32
    property min_depth : Float32
    property max_depth : Float32
    def initialize(@top_left_x : Float32, @top_left_y : Float32, @width : Float32, @height : Float32, @min_depth : Float32, @max_depth : Float32)
    end
  end

  @[Extern]
  struct D3D12_BOX
    property left : UInt32
    property top : UInt32
    property front : UInt32
    property right : UInt32
    property bottom : UInt32
    property back : UInt32
    def initialize(@left : UInt32, @top : UInt32, @front : UInt32, @right : UInt32, @bottom : UInt32, @back : UInt32)
    end
  end

  @[Extern]
  struct D3D12_DEPTH_STENCILOP_DESC
    property stencil_fail_op : Win32cr::Graphics::Direct3D12::D3D12_STENCIL_OP
    property stencil_depth_fail_op : Win32cr::Graphics::Direct3D12::D3D12_STENCIL_OP
    property stencil_pass_op : Win32cr::Graphics::Direct3D12::D3D12_STENCIL_OP
    property stencil_func : Win32cr::Graphics::Direct3D12::D3D12_COMPARISON_FUNC
    def initialize(@stencil_fail_op : Win32cr::Graphics::Direct3D12::D3D12_STENCIL_OP, @stencil_depth_fail_op : Win32cr::Graphics::Direct3D12::D3D12_STENCIL_OP, @stencil_pass_op : Win32cr::Graphics::Direct3D12::D3D12_STENCIL_OP, @stencil_func : Win32cr::Graphics::Direct3D12::D3D12_COMPARISON_FUNC)
    end
  end

  @[Extern]
  struct D3D12_DEPTH_STENCIL_DESC
    property depth_enable : Win32cr::Foundation::BOOL
    property depth_write_mask : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_WRITE_MASK
    property depth_func : Win32cr::Graphics::Direct3D12::D3D12_COMPARISON_FUNC
    property stencil_enable : Win32cr::Foundation::BOOL
    property stencil_read_mask : UInt8
    property stencil_write_mask : UInt8
    property front_face : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCILOP_DESC
    property back_face : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCILOP_DESC
    def initialize(@depth_enable : Win32cr::Foundation::BOOL, @depth_write_mask : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_WRITE_MASK, @depth_func : Win32cr::Graphics::Direct3D12::D3D12_COMPARISON_FUNC, @stencil_enable : Win32cr::Foundation::BOOL, @stencil_read_mask : UInt8, @stencil_write_mask : UInt8, @front_face : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCILOP_DESC, @back_face : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCILOP_DESC)
    end
  end

  @[Extern]
  struct D3D12_DEPTH_STENCIL_DESC1
    property depth_enable : Win32cr::Foundation::BOOL
    property depth_write_mask : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_WRITE_MASK
    property depth_func : Win32cr::Graphics::Direct3D12::D3D12_COMPARISON_FUNC
    property stencil_enable : Win32cr::Foundation::BOOL
    property stencil_read_mask : UInt8
    property stencil_write_mask : UInt8
    property front_face : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCILOP_DESC
    property back_face : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCILOP_DESC
    property depth_bounds_test_enable : Win32cr::Foundation::BOOL
    def initialize(@depth_enable : Win32cr::Foundation::BOOL, @depth_write_mask : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_WRITE_MASK, @depth_func : Win32cr::Graphics::Direct3D12::D3D12_COMPARISON_FUNC, @stencil_enable : Win32cr::Foundation::BOOL, @stencil_read_mask : UInt8, @stencil_write_mask : UInt8, @front_face : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCILOP_DESC, @back_face : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCILOP_DESC, @depth_bounds_test_enable : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D3D12_RENDER_TARGET_BLEND_DESC
    property blend_enable : Win32cr::Foundation::BOOL
    property logic_op_enable : Win32cr::Foundation::BOOL
    property src_blend : Win32cr::Graphics::Direct3D12::D3D12_BLEND
    property dest_blend : Win32cr::Graphics::Direct3D12::D3D12_BLEND
    property blend_op : Win32cr::Graphics::Direct3D12::D3D12_BLEND_OP
    property src_blend_alpha : Win32cr::Graphics::Direct3D12::D3D12_BLEND
    property dest_blend_alpha : Win32cr::Graphics::Direct3D12::D3D12_BLEND
    property blend_op_alpha : Win32cr::Graphics::Direct3D12::D3D12_BLEND_OP
    property logic_op : Win32cr::Graphics::Direct3D12::D3D12_LOGIC_OP
    property render_target_write_mask : UInt8
    def initialize(@blend_enable : Win32cr::Foundation::BOOL, @logic_op_enable : Win32cr::Foundation::BOOL, @src_blend : Win32cr::Graphics::Direct3D12::D3D12_BLEND, @dest_blend : Win32cr::Graphics::Direct3D12::D3D12_BLEND, @blend_op : Win32cr::Graphics::Direct3D12::D3D12_BLEND_OP, @src_blend_alpha : Win32cr::Graphics::Direct3D12::D3D12_BLEND, @dest_blend_alpha : Win32cr::Graphics::Direct3D12::D3D12_BLEND, @blend_op_alpha : Win32cr::Graphics::Direct3D12::D3D12_BLEND_OP, @logic_op : Win32cr::Graphics::Direct3D12::D3D12_LOGIC_OP, @render_target_write_mask : UInt8)
    end
  end

  @[Extern]
  struct D3D12_BLEND_DESC
    property alpha_to_coverage_enable : Win32cr::Foundation::BOOL
    property independent_blend_enable : Win32cr::Foundation::BOOL
    property render_target : Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_BLEND_DESC[8]
    def initialize(@alpha_to_coverage_enable : Win32cr::Foundation::BOOL, @independent_blend_enable : Win32cr::Foundation::BOOL, @render_target : Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_BLEND_DESC[8])
    end
  end

  @[Extern]
  struct D3D12_RASTERIZER_DESC
    property fill_mode : Win32cr::Graphics::Direct3D12::D3D12_FILL_MODE
    property cull_mode : Win32cr::Graphics::Direct3D12::D3D12_CULL_MODE
    property front_counter_clockwise : Win32cr::Foundation::BOOL
    property depth_bias : Int32
    property depth_bias_clamp : Float32
    property slope_scaled_depth_bias : Float32
    property depth_clip_enable : Win32cr::Foundation::BOOL
    property multisample_enable : Win32cr::Foundation::BOOL
    property antialiased_line_enable : Win32cr::Foundation::BOOL
    property forced_sample_count : UInt32
    property conservative_raster : Win32cr::Graphics::Direct3D12::D3D12_CONSERVATIVE_RASTERIZATION_MODE
    def initialize(@fill_mode : Win32cr::Graphics::Direct3D12::D3D12_FILL_MODE, @cull_mode : Win32cr::Graphics::Direct3D12::D3D12_CULL_MODE, @front_counter_clockwise : Win32cr::Foundation::BOOL, @depth_bias : Int32, @depth_bias_clamp : Float32, @slope_scaled_depth_bias : Float32, @depth_clip_enable : Win32cr::Foundation::BOOL, @multisample_enable : Win32cr::Foundation::BOOL, @antialiased_line_enable : Win32cr::Foundation::BOOL, @forced_sample_count : UInt32, @conservative_raster : Win32cr::Graphics::Direct3D12::D3D12_CONSERVATIVE_RASTERIZATION_MODE)
    end
  end

  @[Extern]
  struct D3D12_SHADER_BYTECODE
    property pShaderBytecode : Void*
    property bytecode_length : LibC::UIntPtrT
    def initialize(@pShaderBytecode : Void*, @bytecode_length : LibC::UIntPtrT)
    end
  end

  @[Extern]
  struct D3D12_STREAM_OUTPUT_DESC
    property pSODeclaration : Win32cr::Graphics::Direct3D12::D3D12_SO_DECLARATION_ENTRY*
    property num_entries : UInt32
    property pBufferStrides : UInt32*
    property num_strides : UInt32
    property rasterized_stream : UInt32
    def initialize(@pSODeclaration : Win32cr::Graphics::Direct3D12::D3D12_SO_DECLARATION_ENTRY*, @num_entries : UInt32, @pBufferStrides : UInt32*, @num_strides : UInt32, @rasterized_stream : UInt32)
    end
  end

  @[Extern]
  struct D3D12_INPUT_LAYOUT_DESC
    property pInputElementDescs : Win32cr::Graphics::Direct3D12::D3D12_INPUT_ELEMENT_DESC*
    property num_elements : UInt32
    def initialize(@pInputElementDescs : Win32cr::Graphics::Direct3D12::D3D12_INPUT_ELEMENT_DESC*, @num_elements : UInt32)
    end
  end

  @[Extern]
  struct D3D12_CACHED_PIPELINE_STATE
    property pCachedBlob : Void*
    property cached_blob_size_in_bytes : LibC::UIntPtrT
    def initialize(@pCachedBlob : Void*, @cached_blob_size_in_bytes : LibC::UIntPtrT)
    end
  end

  @[Extern]
  struct D3D12_GRAPHICS_PIPELINE_STATE_DESC
    property pRootSignature : Void*
    property vs : Win32cr::Graphics::Direct3D12::D3D12_SHADER_BYTECODE
    property ps : Win32cr::Graphics::Direct3D12::D3D12_SHADER_BYTECODE
    property ds : Win32cr::Graphics::Direct3D12::D3D12_SHADER_BYTECODE
    property hs : Win32cr::Graphics::Direct3D12::D3D12_SHADER_BYTECODE
    property gs : Win32cr::Graphics::Direct3D12::D3D12_SHADER_BYTECODE
    property stream_output : Win32cr::Graphics::Direct3D12::D3D12_STREAM_OUTPUT_DESC
    property blend_state : Win32cr::Graphics::Direct3D12::D3D12_BLEND_DESC
    property sample_mask : UInt32
    property rasterizer_state : Win32cr::Graphics::Direct3D12::D3D12_RASTERIZER_DESC
    property depth_stencil_state : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_DESC
    property input_layout : Win32cr::Graphics::Direct3D12::D3D12_INPUT_LAYOUT_DESC
    property ib_strip_cut_value : Win32cr::Graphics::Direct3D12::D3D12_INDEX_BUFFER_STRIP_CUT_VALUE
    property primitive_topology_type : Win32cr::Graphics::Direct3D12::D3D12_PRIMITIVE_TOPOLOGY_TYPE
    property num_render_targets : UInt32
    property rtv_formats : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT[8]
    property dsv_format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property sample_desc : Win32cr::Graphics::Dxgi::Common::DXGI_SAMPLE_DESC
    property node_mask : UInt32
    property cached_pso : Win32cr::Graphics::Direct3D12::D3D12_CACHED_PIPELINE_STATE
    property flags : Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_FLAGS
    def initialize(@pRootSignature : Void*, @vs : Win32cr::Graphics::Direct3D12::D3D12_SHADER_BYTECODE, @ps : Win32cr::Graphics::Direct3D12::D3D12_SHADER_BYTECODE, @ds : Win32cr::Graphics::Direct3D12::D3D12_SHADER_BYTECODE, @hs : Win32cr::Graphics::Direct3D12::D3D12_SHADER_BYTECODE, @gs : Win32cr::Graphics::Direct3D12::D3D12_SHADER_BYTECODE, @stream_output : Win32cr::Graphics::Direct3D12::D3D12_STREAM_OUTPUT_DESC, @blend_state : Win32cr::Graphics::Direct3D12::D3D12_BLEND_DESC, @sample_mask : UInt32, @rasterizer_state : Win32cr::Graphics::Direct3D12::D3D12_RASTERIZER_DESC, @depth_stencil_state : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_DESC, @input_layout : Win32cr::Graphics::Direct3D12::D3D12_INPUT_LAYOUT_DESC, @ib_strip_cut_value : Win32cr::Graphics::Direct3D12::D3D12_INDEX_BUFFER_STRIP_CUT_VALUE, @primitive_topology_type : Win32cr::Graphics::Direct3D12::D3D12_PRIMITIVE_TOPOLOGY_TYPE, @num_render_targets : UInt32, @rtv_formats : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT[8], @dsv_format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @sample_desc : Win32cr::Graphics::Dxgi::Common::DXGI_SAMPLE_DESC, @node_mask : UInt32, @cached_pso : Win32cr::Graphics::Direct3D12::D3D12_CACHED_PIPELINE_STATE, @flags : Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_FLAGS)
    end
  end

  @[Extern]
  struct D3D12_COMPUTE_PIPELINE_STATE_DESC
    property pRootSignature : Void*
    property cs : Win32cr::Graphics::Direct3D12::D3D12_SHADER_BYTECODE
    property node_mask : UInt32
    property cached_pso : Win32cr::Graphics::Direct3D12::D3D12_CACHED_PIPELINE_STATE
    property flags : Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_FLAGS
    def initialize(@pRootSignature : Void*, @cs : Win32cr::Graphics::Direct3D12::D3D12_SHADER_BYTECODE, @node_mask : UInt32, @cached_pso : Win32cr::Graphics::Direct3D12::D3D12_CACHED_PIPELINE_STATE, @flags : Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_FLAGS)
    end
  end

  @[Extern]
  struct D3D12_RT_FORMAT_ARRAY
    property rt_formats : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT[8]
    property num_render_targets : UInt32
    def initialize(@rt_formats : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT[8], @num_render_targets : UInt32)
    end
  end

  @[Extern]
  struct D3D12_PIPELINE_STATE_STREAM_DESC
    property size_in_bytes : LibC::UIntPtrT
    property pPipelineStateSubobjectStream : Void*
    def initialize(@size_in_bytes : LibC::UIntPtrT, @pPipelineStateSubobjectStream : Void*)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS
    property double_precision_float_shader_ops : Win32cr::Foundation::BOOL
    property output_merger_logic_op : Win32cr::Foundation::BOOL
    property min_precision_support : Win32cr::Graphics::Direct3D12::D3D12_SHADER_MIN_PRECISION_SUPPORT
    property tiled_resources_tier : Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCES_TIER
    property resource_binding_tier : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BINDING_TIER
    property ps_specified_stencil_ref_supported : Win32cr::Foundation::BOOL
    property typed_uav_load_additional_formats : Win32cr::Foundation::BOOL
    property ro_vs_supported : Win32cr::Foundation::BOOL
    property conservative_rasterization_tier : Win32cr::Graphics::Direct3D12::D3D12_CONSERVATIVE_RASTERIZATION_TIER
    property max_gpu_virtual_address_bits_per_resource : UInt32
    property standard_swizzle64_kb_supported : Win32cr::Foundation::BOOL
    property cross_node_sharing_tier : Win32cr::Graphics::Direct3D12::D3D12_CROSS_NODE_SHARING_TIER
    property cross_adapter_row_major_texture_supported : Win32cr::Foundation::BOOL
    property vp_and_rt_array_index_from_any_shader_feeding_rasterizer_supported_without_gs_emulation : Win32cr::Foundation::BOOL
    property resource_heap_tier : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_HEAP_TIER
    def initialize(@double_precision_float_shader_ops : Win32cr::Foundation::BOOL, @output_merger_logic_op : Win32cr::Foundation::BOOL, @min_precision_support : Win32cr::Graphics::Direct3D12::D3D12_SHADER_MIN_PRECISION_SUPPORT, @tiled_resources_tier : Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCES_TIER, @resource_binding_tier : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BINDING_TIER, @ps_specified_stencil_ref_supported : Win32cr::Foundation::BOOL, @typed_uav_load_additional_formats : Win32cr::Foundation::BOOL, @ro_vs_supported : Win32cr::Foundation::BOOL, @conservative_rasterization_tier : Win32cr::Graphics::Direct3D12::D3D12_CONSERVATIVE_RASTERIZATION_TIER, @max_gpu_virtual_address_bits_per_resource : UInt32, @standard_swizzle64_kb_supported : Win32cr::Foundation::BOOL, @cross_node_sharing_tier : Win32cr::Graphics::Direct3D12::D3D12_CROSS_NODE_SHARING_TIER, @cross_adapter_row_major_texture_supported : Win32cr::Foundation::BOOL, @vp_and_rt_array_index_from_any_shader_feeding_rasterizer_supported_without_gs_emulation : Win32cr::Foundation::BOOL, @resource_heap_tier : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_HEAP_TIER)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS1
    property wave_ops : Win32cr::Foundation::BOOL
    property wave_lane_count_min : UInt32
    property wave_lane_count_max : UInt32
    property total_lane_count : UInt32
    property expanded_compute_resource_states : Win32cr::Foundation::BOOL
    property int64_shader_ops : Win32cr::Foundation::BOOL
    def initialize(@wave_ops : Win32cr::Foundation::BOOL, @wave_lane_count_min : UInt32, @wave_lane_count_max : UInt32, @total_lane_count : UInt32, @expanded_compute_resource_states : Win32cr::Foundation::BOOL, @int64_shader_ops : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS2
    property depth_bounds_test_supported : Win32cr::Foundation::BOOL
    property programmable_sample_positions_tier : Win32cr::Graphics::Direct3D12::D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER
    def initialize(@depth_bounds_test_supported : Win32cr::Foundation::BOOL, @programmable_sample_positions_tier : Win32cr::Graphics::Direct3D12::D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_ROOT_SIGNATURE
    property highest_version : Win32cr::Graphics::Direct3D12::D3D_ROOT_SIGNATURE_VERSION
    def initialize(@highest_version : Win32cr::Graphics::Direct3D12::D3D_ROOT_SIGNATURE_VERSION)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_ARCHITECTURE
    property node_index : UInt32
    property tile_based_renderer : Win32cr::Foundation::BOOL
    property uma : Win32cr::Foundation::BOOL
    property cache_coherent_uma : Win32cr::Foundation::BOOL
    def initialize(@node_index : UInt32, @tile_based_renderer : Win32cr::Foundation::BOOL, @uma : Win32cr::Foundation::BOOL, @cache_coherent_uma : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_ARCHITECTURE1
    property node_index : UInt32
    property tile_based_renderer : Win32cr::Foundation::BOOL
    property uma : Win32cr::Foundation::BOOL
    property cache_coherent_uma : Win32cr::Foundation::BOOL
    property isolated_mmu : Win32cr::Foundation::BOOL
    def initialize(@node_index : UInt32, @tile_based_renderer : Win32cr::Foundation::BOOL, @uma : Win32cr::Foundation::BOOL, @cache_coherent_uma : Win32cr::Foundation::BOOL, @isolated_mmu : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_FEATURE_LEVELS
    property num_feature_levels : UInt32
    property pFeatureLevelsRequested : Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL*
    property max_supported_feature_level : Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL
    def initialize(@num_feature_levels : UInt32, @pFeatureLevelsRequested : Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL*, @max_supported_feature_level : Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_SHADER_MODEL
    property highest_shader_model : Win32cr::Graphics::Direct3D12::D3D_SHADER_MODEL
    def initialize(@highest_shader_model : Win32cr::Graphics::Direct3D12::D3D_SHADER_MODEL)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_FORMAT_SUPPORT
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property support1 : Win32cr::Graphics::Direct3D12::D3D12_FORMAT_SUPPORT1
    property support2 : Win32cr::Graphics::Direct3D12::D3D12_FORMAT_SUPPORT2
    def initialize(@format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @support1 : Win32cr::Graphics::Direct3D12::D3D12_FORMAT_SUPPORT1, @support2 : Win32cr::Graphics::Direct3D12::D3D12_FORMAT_SUPPORT2)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property sample_count : UInt32
    property flags : Win32cr::Graphics::Direct3D12::D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS
    property num_quality_levels : UInt32
    def initialize(@format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @sample_count : UInt32, @flags : Win32cr::Graphics::Direct3D12::D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS, @num_quality_levels : UInt32)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_FORMAT_INFO
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property plane_count : UInt8
    def initialize(@format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @plane_count : UInt8)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
    property max_gpu_virtual_address_bits_per_resource : UInt32
    property max_gpu_virtual_address_bits_per_process : UInt32
    def initialize(@max_gpu_virtual_address_bits_per_resource : UInt32, @max_gpu_virtual_address_bits_per_process : UInt32)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_SHADER_CACHE
    property support_flags : Win32cr::Graphics::Direct3D12::D3D12_SHADER_CACHE_SUPPORT_FLAGS
    def initialize(@support_flags : Win32cr::Graphics::Direct3D12::D3D12_SHADER_CACHE_SUPPORT_FLAGS)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY
    property command_list_type : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE
    property priority : UInt32
    property priority_for_type_is_supported : Win32cr::Foundation::BOOL
    def initialize(@command_list_type : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, @priority : UInt32, @priority_for_type_is_supported : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS3
    property copy_queue_timestamp_queries_supported : Win32cr::Foundation::BOOL
    property casting_fully_typed_format_supported : Win32cr::Foundation::BOOL
    property write_buffer_immediate_support_flags : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_SUPPORT_FLAGS
    property view_instancing_tier : Win32cr::Graphics::Direct3D12::D3D12_VIEW_INSTANCING_TIER
    property barycentrics_supported : Win32cr::Foundation::BOOL
    def initialize(@copy_queue_timestamp_queries_supported : Win32cr::Foundation::BOOL, @casting_fully_typed_format_supported : Win32cr::Foundation::BOOL, @write_buffer_immediate_support_flags : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_SUPPORT_FLAGS, @view_instancing_tier : Win32cr::Graphics::Direct3D12::D3D12_VIEW_INSTANCING_TIER, @barycentrics_supported : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_EXISTING_HEAPS
    property supported : Win32cr::Foundation::BOOL
    def initialize(@supported : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_DISPLAYABLE
    property displayable_texture : Win32cr::Foundation::BOOL
    property shared_resource_compatibility_tier : Win32cr::Graphics::Direct3D12::D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER
    def initialize(@displayable_texture : Win32cr::Foundation::BOOL, @shared_resource_compatibility_tier : Win32cr::Graphics::Direct3D12::D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS4
    property msaa64_kb_aligned_texture_supported : Win32cr::Foundation::BOOL
    property shared_resource_compatibility_tier : Win32cr::Graphics::Direct3D12::D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER
    property native16_bit_shader_ops_supported : Win32cr::Foundation::BOOL
    def initialize(@msaa64_kb_aligned_texture_supported : Win32cr::Foundation::BOOL, @shared_resource_compatibility_tier : Win32cr::Graphics::Direct3D12::D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER, @native16_bit_shader_ops_supported : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_SERIALIZATION
    property node_index : UInt32
    property heap_serialization_tier : Win32cr::Graphics::Direct3D12::D3D12_HEAP_SERIALIZATION_TIER
    def initialize(@node_index : UInt32, @heap_serialization_tier : Win32cr::Graphics::Direct3D12::D3D12_HEAP_SERIALIZATION_TIER)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_CROSS_NODE
    property sharing_tier : Win32cr::Graphics::Direct3D12::D3D12_CROSS_NODE_SHARING_TIER
    property atomic_shader_instructions : Win32cr::Foundation::BOOL
    def initialize(@sharing_tier : Win32cr::Graphics::Direct3D12::D3D12_CROSS_NODE_SHARING_TIER, @atomic_shader_instructions : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS5
    property srv_only_tiled_resource_tier3 : Win32cr::Foundation::BOOL
    property render_passes_tier : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_TIER
    property raytracing_tier : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_TIER
    def initialize(@srv_only_tiled_resource_tier3 : Win32cr::Foundation::BOOL, @render_passes_tier : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_TIER, @raytracing_tier : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_TIER)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS6
    property additional_shading_rates_supported : Win32cr::Foundation::BOOL
    property per_primitive_shading_rate_supported_with_viewport_indexing : Win32cr::Foundation::BOOL
    property variable_shading_rate_tier : Win32cr::Graphics::Direct3D12::D3D12_VARIABLE_SHADING_RATE_TIER
    property shading_rate_image_tile_size : UInt32
    property background_processing_supported : Win32cr::Foundation::BOOL
    def initialize(@additional_shading_rates_supported : Win32cr::Foundation::BOOL, @per_primitive_shading_rate_supported_with_viewport_indexing : Win32cr::Foundation::BOOL, @variable_shading_rate_tier : Win32cr::Graphics::Direct3D12::D3D12_VARIABLE_SHADING_RATE_TIER, @shading_rate_image_tile_size : UInt32, @background_processing_supported : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS7
    property mesh_shader_tier : Win32cr::Graphics::Direct3D12::D3D12_MESH_SHADER_TIER
    property sampler_feedback_tier : Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_FEEDBACK_TIER
    def initialize(@mesh_shader_tier : Win32cr::Graphics::Direct3D12::D3D12_MESH_SHADER_TIER, @sampler_feedback_tier : Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_FEEDBACK_TIER)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_QUERY_META_COMMAND
    property command_id : LibC::GUID
    property node_mask : UInt32
    property pQueryInputData : Void*
    property query_input_data_size_in_bytes : LibC::UIntPtrT
    property pQueryOutputData : Void*
    property query_output_data_size_in_bytes : LibC::UIntPtrT
    def initialize(@command_id : LibC::GUID, @node_mask : UInt32, @pQueryInputData : Void*, @query_input_data_size_in_bytes : LibC::UIntPtrT, @pQueryOutputData : Void*, @query_output_data_size_in_bytes : LibC::UIntPtrT)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS8
    property unaligned_block_textures_supported : Win32cr::Foundation::BOOL
    def initialize(@unaligned_block_textures_supported : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS9
    property mesh_shader_pipeline_stats_supported : Win32cr::Foundation::BOOL
    property mesh_shader_supports_full_range_render_target_array_index : Win32cr::Foundation::BOOL
    property atomic_int64_on_typed_resource_supported : Win32cr::Foundation::BOOL
    property atomic_int64_on_group_shared_supported : Win32cr::Foundation::BOOL
    property derivatives_in_mesh_and_amplification_shaders_supported : Win32cr::Foundation::BOOL
    property wave_mma_tier : Win32cr::Graphics::Direct3D12::D3D12_WAVE_MMA_TIER
    def initialize(@mesh_shader_pipeline_stats_supported : Win32cr::Foundation::BOOL, @mesh_shader_supports_full_range_render_target_array_index : Win32cr::Foundation::BOOL, @atomic_int64_on_typed_resource_supported : Win32cr::Foundation::BOOL, @atomic_int64_on_group_shared_supported : Win32cr::Foundation::BOOL, @derivatives_in_mesh_and_amplification_shaders_supported : Win32cr::Foundation::BOOL, @wave_mma_tier : Win32cr::Graphics::Direct3D12::D3D12_WAVE_MMA_TIER)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS10
    property variable_rate_shading_sum_combiner_supported : Win32cr::Foundation::BOOL
    property mesh_shader_per_primitive_shading_rate_supported : Win32cr::Foundation::BOOL
    def initialize(@variable_rate_shading_sum_combiner_supported : Win32cr::Foundation::BOOL, @mesh_shader_per_primitive_shading_rate_supported : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_D3D12_OPTIONS11
    property atomic_int64_on_descriptor_heap_resource_supported : Win32cr::Foundation::BOOL
    def initialize(@atomic_int64_on_descriptor_heap_resource_supported : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D3D12_RESOURCE_ALLOCATION_INFO
    property size_in_bytes : UInt64
    property alignment : UInt64
    def initialize(@size_in_bytes : UInt64, @alignment : UInt64)
    end
  end

  @[Extern]
  struct D3D12_RESOURCE_ALLOCATION_INFO1
    property offset : UInt64
    property alignment : UInt64
    property size_in_bytes : UInt64
    def initialize(@offset : UInt64, @alignment : UInt64, @size_in_bytes : UInt64)
    end
  end

  @[Extern]
  struct D3D12_HEAP_PROPERTIES
    property type__ : Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE
    property cpu_page_property : Win32cr::Graphics::Direct3D12::D3D12_CPU_PAGE_PROPERTY
    property memory_pool_preference : Win32cr::Graphics::Direct3D12::D3D12_MEMORY_POOL
    property creation_node_mask : UInt32
    property visible_node_mask : UInt32
    def initialize(@type__ : Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE, @cpu_page_property : Win32cr::Graphics::Direct3D12::D3D12_CPU_PAGE_PROPERTY, @memory_pool_preference : Win32cr::Graphics::Direct3D12::D3D12_MEMORY_POOL, @creation_node_mask : UInt32, @visible_node_mask : UInt32)
    end
  end

  @[Extern]
  struct D3D12_HEAP_DESC
    property size_in_bytes : UInt64
    property properties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES
    property alignment : UInt64
    property flags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS
    def initialize(@size_in_bytes : UInt64, @properties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES, @alignment : UInt64, @flags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS)
    end
  end

  @[Extern]
  struct D3D12_MIP_REGION
    property width : UInt32
    property height : UInt32
    property depth : UInt32
    def initialize(@width : UInt32, @height : UInt32, @depth : UInt32)
    end
  end

  @[Extern]
  struct D3D12_RESOURCE_DESC
    property dimension : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DIMENSION
    property alignment : UInt64
    property width : UInt64
    property height : UInt32
    property depth_or_array_size : UInt16
    property mip_levels : UInt16
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property sample_desc : Win32cr::Graphics::Dxgi::Common::DXGI_SAMPLE_DESC
    property layout : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_LAYOUT
    property flags : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_FLAGS
    def initialize(@dimension : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DIMENSION, @alignment : UInt64, @width : UInt64, @height : UInt32, @depth_or_array_size : UInt16, @mip_levels : UInt16, @format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @sample_desc : Win32cr::Graphics::Dxgi::Common::DXGI_SAMPLE_DESC, @layout : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_LAYOUT, @flags : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_FLAGS)
    end
  end

  @[Extern]
  struct D3D12_RESOURCE_DESC1
    property dimension : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DIMENSION
    property alignment : UInt64
    property width : UInt64
    property height : UInt32
    property depth_or_array_size : UInt16
    property mip_levels : UInt16
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property sample_desc : Win32cr::Graphics::Dxgi::Common::DXGI_SAMPLE_DESC
    property layout : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_LAYOUT
    property flags : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_FLAGS
    property sampler_feedback_mip_region : Win32cr::Graphics::Direct3D12::D3D12_MIP_REGION
    def initialize(@dimension : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DIMENSION, @alignment : UInt64, @width : UInt64, @height : UInt32, @depth_or_array_size : UInt16, @mip_levels : UInt16, @format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @sample_desc : Win32cr::Graphics::Dxgi::Common::DXGI_SAMPLE_DESC, @layout : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_LAYOUT, @flags : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_FLAGS, @sampler_feedback_mip_region : Win32cr::Graphics::Direct3D12::D3D12_MIP_REGION)
    end
  end

  @[Extern]
  struct D3D12_DEPTH_STENCIL_VALUE
    property depth : Float32
    property stencil : UInt8
    def initialize(@depth : Float32, @stencil : UInt8)
    end
  end

  @[Extern]
  struct D3D12_CLEAR_VALUE
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property color : Float32[4]
    property depth_stencil : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VALUE
    def initialize(@color : Float32[4], @depth_stencil : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VALUE)
    end
    end

    def initialize(@format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct D3D12_RANGE
    property begin__ : LibC::UIntPtrT
    property end__ : LibC::UIntPtrT
    def initialize(@begin__ : LibC::UIntPtrT, @end__ : LibC::UIntPtrT)
    end
  end

  @[Extern]
  struct D3D12_RANGE_UINT64
    property begin__ : UInt64
    property end__ : UInt64
    def initialize(@begin__ : UInt64, @end__ : UInt64)
    end
  end

  @[Extern]
  struct D3D12_SUBRESOURCE_RANGE_UINT64
    property subresource : UInt32
    property range : Win32cr::Graphics::Direct3D12::D3D12_RANGE_UINT64
    def initialize(@subresource : UInt32, @range : Win32cr::Graphics::Direct3D12::D3D12_RANGE_UINT64)
    end
  end

  @[Extern]
  struct D3D12_SUBRESOURCE_INFO
    property offset : UInt64
    property row_pitch : UInt32
    property depth_pitch : UInt32
    def initialize(@offset : UInt64, @row_pitch : UInt32, @depth_pitch : UInt32)
    end
  end

  @[Extern]
  struct D3D12_TILED_RESOURCE_COORDINATE
    property x : UInt32
    property y : UInt32
    property z : UInt32
    property subresource : UInt32
    def initialize(@x : UInt32, @y : UInt32, @z : UInt32, @subresource : UInt32)
    end
  end

  @[Extern]
  struct D3D12_TILE_REGION_SIZE
    property num_tiles : UInt32
    property use_box : Win32cr::Foundation::BOOL
    property width : UInt32
    property height : UInt16
    property depth : UInt16
    def initialize(@num_tiles : UInt32, @use_box : Win32cr::Foundation::BOOL, @width : UInt32, @height : UInt16, @depth : UInt16)
    end
  end

  @[Extern]
  struct D3D12_SUBRESOURCE_TILING
    property width_in_tiles : UInt32
    property height_in_tiles : UInt16
    property depth_in_tiles : UInt16
    property start_tile_index_in_overall_resource : UInt32
    def initialize(@width_in_tiles : UInt32, @height_in_tiles : UInt16, @depth_in_tiles : UInt16, @start_tile_index_in_overall_resource : UInt32)
    end
  end

  @[Extern]
  struct D3D12_TILE_SHAPE
    property width_in_texels : UInt32
    property height_in_texels : UInt32
    property depth_in_texels : UInt32
    def initialize(@width_in_texels : UInt32, @height_in_texels : UInt32, @depth_in_texels : UInt32)
    end
  end

  @[Extern]
  struct D3D12_PACKED_MIP_INFO
    property num_standard_mips : UInt8
    property num_packed_mips : UInt8
    property num_tiles_for_packed_mips : UInt32
    property start_tile_index_in_overall_resource : UInt32
    def initialize(@num_standard_mips : UInt8, @num_packed_mips : UInt8, @num_tiles_for_packed_mips : UInt32, @start_tile_index_in_overall_resource : UInt32)
    end
  end

  @[Extern]
  struct D3D12_RESOURCE_TRANSITION_BARRIER
    property pResource : Void*
    property subresource : UInt32
    property state_before : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES
    property state_after : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES
    def initialize(@pResource : Void*, @subresource : UInt32, @state_before : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, @state_after : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES)
    end
  end

  @[Extern]
  struct D3D12_RESOURCE_ALIASING_BARRIER
    property pResourceBefore : Void*
    property pResourceAfter : Void*
    def initialize(@pResourceBefore : Void*, @pResourceAfter : Void*)
    end
  end

  @[Extern]
  struct D3D12_RESOURCE_UAV_BARRIER
    property pResource : Void*
    def initialize(@pResource : Void*)
    end
  end

  @[Extern]
  struct D3D12_RESOURCE_BARRIER
    property type__ : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER_TYPE
    property flags : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER_FLAGS
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property transition : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_TRANSITION_BARRIER
    property aliasing : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALIASING_BARRIER
    property uav : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_UAV_BARRIER
    def initialize(@transition : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_TRANSITION_BARRIER, @aliasing : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALIASING_BARRIER, @uav : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_UAV_BARRIER)
    end
    end

    def initialize(@type__ : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER_TYPE, @flags : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER_FLAGS, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct D3D12_SUBRESOURCE_FOOTPRINT
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property width : UInt32
    property height : UInt32
    property depth : UInt32
    property row_pitch : UInt32
    def initialize(@format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @width : UInt32, @height : UInt32, @depth : UInt32, @row_pitch : UInt32)
    end
  end

  @[Extern]
  struct D3D12_PLACED_SUBRESOURCE_FOOTPRINT
    property offset : UInt64
    property footprint : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_FOOTPRINT
    def initialize(@offset : UInt64, @footprint : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_FOOTPRINT)
    end
  end

  @[Extern]
  struct D3D12_TEXTURE_COPY_LOCATION
    property pResource : Void*
    property type__ : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_TYPE
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property placed_footprint : Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT
    property subresource_index : UInt32
    def initialize(@placed_footprint : Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT, @subresource_index : UInt32)
    end
    end

    def initialize(@pResource : Void*, @type__ : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_TYPE, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct D3D12_SAMPLE_POSITION
    property x : Int8
    property y : Int8
    def initialize(@x : Int8, @y : Int8)
    end
  end

  @[Extern]
  struct D3D12_VIEW_INSTANCE_LOCATION
    property viewport_array_index : UInt32
    property render_target_array_index : UInt32
    def initialize(@viewport_array_index : UInt32, @render_target_array_index : UInt32)
    end
  end

  @[Extern]
  struct D3D12_VIEW_INSTANCING_DESC
    property view_instance_count : UInt32
    property pViewInstanceLocations : Win32cr::Graphics::Direct3D12::D3D12_VIEW_INSTANCE_LOCATION*
    property flags : Win32cr::Graphics::Direct3D12::D3D12_VIEW_INSTANCING_FLAGS
    def initialize(@view_instance_count : UInt32, @pViewInstanceLocations : Win32cr::Graphics::Direct3D12::D3D12_VIEW_INSTANCE_LOCATION*, @flags : Win32cr::Graphics::Direct3D12::D3D12_VIEW_INSTANCING_FLAGS)
    end
  end

  @[Extern]
  struct D3D12_BUFFER_SRV
    property first_element : UInt64
    property num_elements : UInt32
    property structure_byte_stride : UInt32
    property flags : Win32cr::Graphics::Direct3D12::D3D12_BUFFER_SRV_FLAGS
    def initialize(@first_element : UInt64, @num_elements : UInt32, @structure_byte_stride : UInt32, @flags : Win32cr::Graphics::Direct3D12::D3D12_BUFFER_SRV_FLAGS)
    end
  end

  @[Extern]
  struct D3D12_TEX1D_SRV
    property most_detailed_mip : UInt32
    property mip_levels : UInt32
    property resource_min_lod_clamp : Float32
    def initialize(@most_detailed_mip : UInt32, @mip_levels : UInt32, @resource_min_lod_clamp : Float32)
    end
  end

  @[Extern]
  struct D3D12_TEX1D_ARRAY_SRV
    property most_detailed_mip : UInt32
    property mip_levels : UInt32
    property first_array_slice : UInt32
    property array_size : UInt32
    property resource_min_lod_clamp : Float32
    def initialize(@most_detailed_mip : UInt32, @mip_levels : UInt32, @first_array_slice : UInt32, @array_size : UInt32, @resource_min_lod_clamp : Float32)
    end
  end

  @[Extern]
  struct D3D12_TEX2D_SRV
    property most_detailed_mip : UInt32
    property mip_levels : UInt32
    property plane_slice : UInt32
    property resource_min_lod_clamp : Float32
    def initialize(@most_detailed_mip : UInt32, @mip_levels : UInt32, @plane_slice : UInt32, @resource_min_lod_clamp : Float32)
    end
  end

  @[Extern]
  struct D3D12_TEX2D_ARRAY_SRV
    property most_detailed_mip : UInt32
    property mip_levels : UInt32
    property first_array_slice : UInt32
    property array_size : UInt32
    property plane_slice : UInt32
    property resource_min_lod_clamp : Float32
    def initialize(@most_detailed_mip : UInt32, @mip_levels : UInt32, @first_array_slice : UInt32, @array_size : UInt32, @plane_slice : UInt32, @resource_min_lod_clamp : Float32)
    end
  end

  @[Extern]
  struct D3D12_TEX3D_SRV
    property most_detailed_mip : UInt32
    property mip_levels : UInt32
    property resource_min_lod_clamp : Float32
    def initialize(@most_detailed_mip : UInt32, @mip_levels : UInt32, @resource_min_lod_clamp : Float32)
    end
  end

  @[Extern]
  struct D3D12_TEXCUBE_SRV
    property most_detailed_mip : UInt32
    property mip_levels : UInt32
    property resource_min_lod_clamp : Float32
    def initialize(@most_detailed_mip : UInt32, @mip_levels : UInt32, @resource_min_lod_clamp : Float32)
    end
  end

  @[Extern]
  struct D3D12_TEXCUBE_ARRAY_SRV
    property most_detailed_mip : UInt32
    property mip_levels : UInt32
    property first2_d_array_face : UInt32
    property num_cubes : UInt32
    property resource_min_lod_clamp : Float32
    def initialize(@most_detailed_mip : UInt32, @mip_levels : UInt32, @first2_d_array_face : UInt32, @num_cubes : UInt32, @resource_min_lod_clamp : Float32)
    end
  end

  @[Extern]
  struct D3D12_TEX2DMS_SRV
    property unused_field_nothing_to_define : UInt32
    def initialize(@unused_field_nothing_to_define : UInt32)
    end
  end

  @[Extern]
  struct D3D12_TEX2DMS_ARRAY_SRV
    property first_array_slice : UInt32
    property array_size : UInt32
    def initialize(@first_array_slice : UInt32, @array_size : UInt32)
    end
  end

  @[Extern]
  struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV
    property location : UInt64
    def initialize(@location : UInt64)
    end
  end

  @[Extern]
  struct D3D12_SHADER_RESOURCE_VIEW_DESC
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property view_dimension : Win32cr::Graphics::Direct3D12::D3D12_SRV_DIMENSION
    property shader4_component_mapping : UInt32
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property buffer : Win32cr::Graphics::Direct3D12::D3D12_BUFFER_SRV
    property texture1_d : Win32cr::Graphics::Direct3D12::D3D12_TEX1D_SRV
    property texture1_d_array : Win32cr::Graphics::Direct3D12::D3D12_TEX1D_ARRAY_SRV
    property texture2_d : Win32cr::Graphics::Direct3D12::D3D12_TEX2D_SRV
    property texture2_d_array : Win32cr::Graphics::Direct3D12::D3D12_TEX2D_ARRAY_SRV
    property texture2_dms : Win32cr::Graphics::Direct3D12::D3D12_TEX2DMS_SRV
    property texture2_dms_array : Win32cr::Graphics::Direct3D12::D3D12_TEX2DMS_ARRAY_SRV
    property texture3_d : Win32cr::Graphics::Direct3D12::D3D12_TEX3D_SRV
    property texture_cube : Win32cr::Graphics::Direct3D12::D3D12_TEXCUBE_SRV
    property texture_cube_array : Win32cr::Graphics::Direct3D12::D3D12_TEXCUBE_ARRAY_SRV
    property raytracing_acceleration_structure : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV
    def initialize(@buffer : Win32cr::Graphics::Direct3D12::D3D12_BUFFER_SRV, @texture1_d : Win32cr::Graphics::Direct3D12::D3D12_TEX1D_SRV, @texture1_d_array : Win32cr::Graphics::Direct3D12::D3D12_TEX1D_ARRAY_SRV, @texture2_d : Win32cr::Graphics::Direct3D12::D3D12_TEX2D_SRV, @texture2_d_array : Win32cr::Graphics::Direct3D12::D3D12_TEX2D_ARRAY_SRV, @texture2_dms : Win32cr::Graphics::Direct3D12::D3D12_TEX2DMS_SRV, @texture2_dms_array : Win32cr::Graphics::Direct3D12::D3D12_TEX2DMS_ARRAY_SRV, @texture3_d : Win32cr::Graphics::Direct3D12::D3D12_TEX3D_SRV, @texture_cube : Win32cr::Graphics::Direct3D12::D3D12_TEXCUBE_SRV, @texture_cube_array : Win32cr::Graphics::Direct3D12::D3D12_TEXCUBE_ARRAY_SRV, @raytracing_acceleration_structure : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV)
    end
    end

    def initialize(@format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @view_dimension : Win32cr::Graphics::Direct3D12::D3D12_SRV_DIMENSION, @shader4_component_mapping : UInt32, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct D3D12_CONSTANT_BUFFER_VIEW_DESC
    property buffer_location : UInt64
    property size_in_bytes : UInt32
    def initialize(@buffer_location : UInt64, @size_in_bytes : UInt32)
    end
  end

  @[Extern]
  struct D3D12_SAMPLER_DESC
    property filter : Win32cr::Graphics::Direct3D12::D3D12_FILTER
    property address_u : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_ADDRESS_MODE
    property address_v : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_ADDRESS_MODE
    property address_w : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_ADDRESS_MODE
    property mip_lod_bias : Float32
    property max_anisotropy : UInt32
    property comparison_func : Win32cr::Graphics::Direct3D12::D3D12_COMPARISON_FUNC
    property border_color : Float32[4]
    property min_lod : Float32
    property max_lod : Float32
    def initialize(@filter : Win32cr::Graphics::Direct3D12::D3D12_FILTER, @address_u : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_ADDRESS_MODE, @address_v : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_ADDRESS_MODE, @address_w : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_ADDRESS_MODE, @mip_lod_bias : Float32, @max_anisotropy : UInt32, @comparison_func : Win32cr::Graphics::Direct3D12::D3D12_COMPARISON_FUNC, @border_color : Float32[4], @min_lod : Float32, @max_lod : Float32)
    end
  end

  @[Extern]
  struct D3D12_BUFFER_UAV
    property first_element : UInt64
    property num_elements : UInt32
    property structure_byte_stride : UInt32
    property counter_offset_in_bytes : UInt64
    property flags : Win32cr::Graphics::Direct3D12::D3D12_BUFFER_UAV_FLAGS
    def initialize(@first_element : UInt64, @num_elements : UInt32, @structure_byte_stride : UInt32, @counter_offset_in_bytes : UInt64, @flags : Win32cr::Graphics::Direct3D12::D3D12_BUFFER_UAV_FLAGS)
    end
  end

  @[Extern]
  struct D3D12_TEX1D_UAV
    property mip_slice : UInt32
    def initialize(@mip_slice : UInt32)
    end
  end

  @[Extern]
  struct D3D12_TEX1D_ARRAY_UAV
    property mip_slice : UInt32
    property first_array_slice : UInt32
    property array_size : UInt32
    def initialize(@mip_slice : UInt32, @first_array_slice : UInt32, @array_size : UInt32)
    end
  end

  @[Extern]
  struct D3D12_TEX2D_UAV
    property mip_slice : UInt32
    property plane_slice : UInt32
    def initialize(@mip_slice : UInt32, @plane_slice : UInt32)
    end
  end

  @[Extern]
  struct D3D12_TEX2D_ARRAY_UAV
    property mip_slice : UInt32
    property first_array_slice : UInt32
    property array_size : UInt32
    property plane_slice : UInt32
    def initialize(@mip_slice : UInt32, @first_array_slice : UInt32, @array_size : UInt32, @plane_slice : UInt32)
    end
  end

  @[Extern]
  struct D3D12_TEX3D_UAV
    property mip_slice : UInt32
    property first_w_slice : UInt32
    property w_size : UInt32
    def initialize(@mip_slice : UInt32, @first_w_slice : UInt32, @w_size : UInt32)
    end
  end

  @[Extern]
  struct D3D12_UNORDERED_ACCESS_VIEW_DESC
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property view_dimension : Win32cr::Graphics::Direct3D12::D3D12_UAV_DIMENSION
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property buffer : Win32cr::Graphics::Direct3D12::D3D12_BUFFER_UAV
    property texture1_d : Win32cr::Graphics::Direct3D12::D3D12_TEX1D_UAV
    property texture1_d_array : Win32cr::Graphics::Direct3D12::D3D12_TEX1D_ARRAY_UAV
    property texture2_d : Win32cr::Graphics::Direct3D12::D3D12_TEX2D_UAV
    property texture2_d_array : Win32cr::Graphics::Direct3D12::D3D12_TEX2D_ARRAY_UAV
    property texture3_d : Win32cr::Graphics::Direct3D12::D3D12_TEX3D_UAV
    def initialize(@buffer : Win32cr::Graphics::Direct3D12::D3D12_BUFFER_UAV, @texture1_d : Win32cr::Graphics::Direct3D12::D3D12_TEX1D_UAV, @texture1_d_array : Win32cr::Graphics::Direct3D12::D3D12_TEX1D_ARRAY_UAV, @texture2_d : Win32cr::Graphics::Direct3D12::D3D12_TEX2D_UAV, @texture2_d_array : Win32cr::Graphics::Direct3D12::D3D12_TEX2D_ARRAY_UAV, @texture3_d : Win32cr::Graphics::Direct3D12::D3D12_TEX3D_UAV)
    end
    end

    def initialize(@format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @view_dimension : Win32cr::Graphics::Direct3D12::D3D12_UAV_DIMENSION, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct D3D12_BUFFER_RTV
    property first_element : UInt64
    property num_elements : UInt32
    def initialize(@first_element : UInt64, @num_elements : UInt32)
    end
  end

  @[Extern]
  struct D3D12_TEX1D_RTV
    property mip_slice : UInt32
    def initialize(@mip_slice : UInt32)
    end
  end

  @[Extern]
  struct D3D12_TEX1D_ARRAY_RTV
    property mip_slice : UInt32
    property first_array_slice : UInt32
    property array_size : UInt32
    def initialize(@mip_slice : UInt32, @first_array_slice : UInt32, @array_size : UInt32)
    end
  end

  @[Extern]
  struct D3D12_TEX2D_RTV
    property mip_slice : UInt32
    property plane_slice : UInt32
    def initialize(@mip_slice : UInt32, @plane_slice : UInt32)
    end
  end

  @[Extern]
  struct D3D12_TEX2DMS_RTV
    property unused_field_nothing_to_define : UInt32
    def initialize(@unused_field_nothing_to_define : UInt32)
    end
  end

  @[Extern]
  struct D3D12_TEX2D_ARRAY_RTV
    property mip_slice : UInt32
    property first_array_slice : UInt32
    property array_size : UInt32
    property plane_slice : UInt32
    def initialize(@mip_slice : UInt32, @first_array_slice : UInt32, @array_size : UInt32, @plane_slice : UInt32)
    end
  end

  @[Extern]
  struct D3D12_TEX2DMS_ARRAY_RTV
    property first_array_slice : UInt32
    property array_size : UInt32
    def initialize(@first_array_slice : UInt32, @array_size : UInt32)
    end
  end

  @[Extern]
  struct D3D12_TEX3D_RTV
    property mip_slice : UInt32
    property first_w_slice : UInt32
    property w_size : UInt32
    def initialize(@mip_slice : UInt32, @first_w_slice : UInt32, @w_size : UInt32)
    end
  end

  @[Extern]
  struct D3D12_RENDER_TARGET_VIEW_DESC
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property view_dimension : Win32cr::Graphics::Direct3D12::D3D12_RTV_DIMENSION
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property buffer : Win32cr::Graphics::Direct3D12::D3D12_BUFFER_RTV
    property texture1_d : Win32cr::Graphics::Direct3D12::D3D12_TEX1D_RTV
    property texture1_d_array : Win32cr::Graphics::Direct3D12::D3D12_TEX1D_ARRAY_RTV
    property texture2_d : Win32cr::Graphics::Direct3D12::D3D12_TEX2D_RTV
    property texture2_d_array : Win32cr::Graphics::Direct3D12::D3D12_TEX2D_ARRAY_RTV
    property texture2_dms : Win32cr::Graphics::Direct3D12::D3D12_TEX2DMS_RTV
    property texture2_dms_array : Win32cr::Graphics::Direct3D12::D3D12_TEX2DMS_ARRAY_RTV
    property texture3_d : Win32cr::Graphics::Direct3D12::D3D12_TEX3D_RTV
    def initialize(@buffer : Win32cr::Graphics::Direct3D12::D3D12_BUFFER_RTV, @texture1_d : Win32cr::Graphics::Direct3D12::D3D12_TEX1D_RTV, @texture1_d_array : Win32cr::Graphics::Direct3D12::D3D12_TEX1D_ARRAY_RTV, @texture2_d : Win32cr::Graphics::Direct3D12::D3D12_TEX2D_RTV, @texture2_d_array : Win32cr::Graphics::Direct3D12::D3D12_TEX2D_ARRAY_RTV, @texture2_dms : Win32cr::Graphics::Direct3D12::D3D12_TEX2DMS_RTV, @texture2_dms_array : Win32cr::Graphics::Direct3D12::D3D12_TEX2DMS_ARRAY_RTV, @texture3_d : Win32cr::Graphics::Direct3D12::D3D12_TEX3D_RTV)
    end
    end

    def initialize(@format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @view_dimension : Win32cr::Graphics::Direct3D12::D3D12_RTV_DIMENSION, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct D3D12_TEX1D_DSV
    property mip_slice : UInt32
    def initialize(@mip_slice : UInt32)
    end
  end

  @[Extern]
  struct D3D12_TEX1D_ARRAY_DSV
    property mip_slice : UInt32
    property first_array_slice : UInt32
    property array_size : UInt32
    def initialize(@mip_slice : UInt32, @first_array_slice : UInt32, @array_size : UInt32)
    end
  end

  @[Extern]
  struct D3D12_TEX2D_DSV
    property mip_slice : UInt32
    def initialize(@mip_slice : UInt32)
    end
  end

  @[Extern]
  struct D3D12_TEX2D_ARRAY_DSV
    property mip_slice : UInt32
    property first_array_slice : UInt32
    property array_size : UInt32
    def initialize(@mip_slice : UInt32, @first_array_slice : UInt32, @array_size : UInt32)
    end
  end

  @[Extern]
  struct D3D12_TEX2DMS_DSV
    property unused_field_nothing_to_define : UInt32
    def initialize(@unused_field_nothing_to_define : UInt32)
    end
  end

  @[Extern]
  struct D3D12_TEX2DMS_ARRAY_DSV
    property first_array_slice : UInt32
    property array_size : UInt32
    def initialize(@first_array_slice : UInt32, @array_size : UInt32)
    end
  end

  @[Extern]
  struct D3D12_DEPTH_STENCIL_VIEW_DESC
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property view_dimension : Win32cr::Graphics::Direct3D12::D3D12_DSV_DIMENSION
    property flags : Win32cr::Graphics::Direct3D12::D3D12_DSV_FLAGS
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property texture1_d : Win32cr::Graphics::Direct3D12::D3D12_TEX1D_DSV
    property texture1_d_array : Win32cr::Graphics::Direct3D12::D3D12_TEX1D_ARRAY_DSV
    property texture2_d : Win32cr::Graphics::Direct3D12::D3D12_TEX2D_DSV
    property texture2_d_array : Win32cr::Graphics::Direct3D12::D3D12_TEX2D_ARRAY_DSV
    property texture2_dms : Win32cr::Graphics::Direct3D12::D3D12_TEX2DMS_DSV
    property texture2_dms_array : Win32cr::Graphics::Direct3D12::D3D12_TEX2DMS_ARRAY_DSV
    def initialize(@texture1_d : Win32cr::Graphics::Direct3D12::D3D12_TEX1D_DSV, @texture1_d_array : Win32cr::Graphics::Direct3D12::D3D12_TEX1D_ARRAY_DSV, @texture2_d : Win32cr::Graphics::Direct3D12::D3D12_TEX2D_DSV, @texture2_d_array : Win32cr::Graphics::Direct3D12::D3D12_TEX2D_ARRAY_DSV, @texture2_dms : Win32cr::Graphics::Direct3D12::D3D12_TEX2DMS_DSV, @texture2_dms_array : Win32cr::Graphics::Direct3D12::D3D12_TEX2DMS_ARRAY_DSV)
    end
    end

    def initialize(@format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @view_dimension : Win32cr::Graphics::Direct3D12::D3D12_DSV_DIMENSION, @flags : Win32cr::Graphics::Direct3D12::D3D12_DSV_FLAGS, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct D3D12_DESCRIPTOR_HEAP_DESC
    property type__ : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE
    property num_descriptors : UInt32
    property flags : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_FLAGS
    property node_mask : UInt32
    def initialize(@type__ : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, @num_descriptors : UInt32, @flags : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_FLAGS, @node_mask : UInt32)
    end
  end

  @[Extern]
  struct D3D12_DESCRIPTOR_RANGE
    property range_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_RANGE_TYPE
    property num_descriptors : UInt32
    property base_shader_register : UInt32
    property register_space : UInt32
    property offset_in_descriptors_from_table_start : UInt32
    def initialize(@range_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_RANGE_TYPE, @num_descriptors : UInt32, @base_shader_register : UInt32, @register_space : UInt32, @offset_in_descriptors_from_table_start : UInt32)
    end
  end

  @[Extern]
  struct D3D12_ROOT_DESCRIPTOR_TABLE
    property num_descriptor_ranges : UInt32
    property pDescriptorRanges : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_RANGE*
    def initialize(@num_descriptor_ranges : UInt32, @pDescriptorRanges : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_RANGE*)
    end
  end

  @[Extern]
  struct D3D12_ROOT_CONSTANTS
    property shader_register : UInt32
    property register_space : UInt32
    property num32_bit_values : UInt32
    def initialize(@shader_register : UInt32, @register_space : UInt32, @num32_bit_values : UInt32)
    end
  end

  @[Extern]
  struct D3D12_ROOT_DESCRIPTOR
    property shader_register : UInt32
    property register_space : UInt32
    def initialize(@shader_register : UInt32, @register_space : UInt32)
    end
  end

  @[Extern]
  struct D3D12_ROOT_PARAMETER
    property parameter_type : Win32cr::Graphics::Direct3D12::D3D12_ROOT_PARAMETER_TYPE
    property anonymous : Anonymous_e__Union_
    property shader_visibility : Win32cr::Graphics::Direct3D12::D3D12_SHADER_VISIBILITY

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property descriptor_table : Win32cr::Graphics::Direct3D12::D3D12_ROOT_DESCRIPTOR_TABLE
    property constants : Win32cr::Graphics::Direct3D12::D3D12_ROOT_CONSTANTS
    property descriptor : Win32cr::Graphics::Direct3D12::D3D12_ROOT_DESCRIPTOR
    def initialize(@descriptor_table : Win32cr::Graphics::Direct3D12::D3D12_ROOT_DESCRIPTOR_TABLE, @constants : Win32cr::Graphics::Direct3D12::D3D12_ROOT_CONSTANTS, @descriptor : Win32cr::Graphics::Direct3D12::D3D12_ROOT_DESCRIPTOR)
    end
    end

    def initialize(@parameter_type : Win32cr::Graphics::Direct3D12::D3D12_ROOT_PARAMETER_TYPE, @anonymous : Anonymous_e__Union_, @shader_visibility : Win32cr::Graphics::Direct3D12::D3D12_SHADER_VISIBILITY)
    end
  end

  @[Extern]
  struct D3D12_STATIC_SAMPLER_DESC
    property filter : Win32cr::Graphics::Direct3D12::D3D12_FILTER
    property address_u : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_ADDRESS_MODE
    property address_v : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_ADDRESS_MODE
    property address_w : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_ADDRESS_MODE
    property mip_lod_bias : Float32
    property max_anisotropy : UInt32
    property comparison_func : Win32cr::Graphics::Direct3D12::D3D12_COMPARISON_FUNC
    property border_color : Win32cr::Graphics::Direct3D12::D3D12_STATIC_BORDER_COLOR
    property min_lod : Float32
    property max_lod : Float32
    property shader_register : UInt32
    property register_space : UInt32
    property shader_visibility : Win32cr::Graphics::Direct3D12::D3D12_SHADER_VISIBILITY
    def initialize(@filter : Win32cr::Graphics::Direct3D12::D3D12_FILTER, @address_u : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_ADDRESS_MODE, @address_v : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_ADDRESS_MODE, @address_w : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_ADDRESS_MODE, @mip_lod_bias : Float32, @max_anisotropy : UInt32, @comparison_func : Win32cr::Graphics::Direct3D12::D3D12_COMPARISON_FUNC, @border_color : Win32cr::Graphics::Direct3D12::D3D12_STATIC_BORDER_COLOR, @min_lod : Float32, @max_lod : Float32, @shader_register : UInt32, @register_space : UInt32, @shader_visibility : Win32cr::Graphics::Direct3D12::D3D12_SHADER_VISIBILITY)
    end
  end

  @[Extern]
  struct D3D12_ROOT_SIGNATURE_DESC
    property num_parameters : UInt32
    property pParameters : Win32cr::Graphics::Direct3D12::D3D12_ROOT_PARAMETER*
    property num_static_samplers : UInt32
    property pStaticSamplers : Win32cr::Graphics::Direct3D12::D3D12_STATIC_SAMPLER_DESC*
    property flags : Win32cr::Graphics::Direct3D12::D3D12_ROOT_SIGNATURE_FLAGS
    def initialize(@num_parameters : UInt32, @pParameters : Win32cr::Graphics::Direct3D12::D3D12_ROOT_PARAMETER*, @num_static_samplers : UInt32, @pStaticSamplers : Win32cr::Graphics::Direct3D12::D3D12_STATIC_SAMPLER_DESC*, @flags : Win32cr::Graphics::Direct3D12::D3D12_ROOT_SIGNATURE_FLAGS)
    end
  end

  @[Extern]
  struct D3D12_DESCRIPTOR_RANGE1
    property range_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_RANGE_TYPE
    property num_descriptors : UInt32
    property base_shader_register : UInt32
    property register_space : UInt32
    property flags : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_RANGE_FLAGS
    property offset_in_descriptors_from_table_start : UInt32
    def initialize(@range_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_RANGE_TYPE, @num_descriptors : UInt32, @base_shader_register : UInt32, @register_space : UInt32, @flags : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_RANGE_FLAGS, @offset_in_descriptors_from_table_start : UInt32)
    end
  end

  @[Extern]
  struct D3D12_ROOT_DESCRIPTOR_TABLE1
    property num_descriptor_ranges : UInt32
    property pDescriptorRanges : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_RANGE1*
    def initialize(@num_descriptor_ranges : UInt32, @pDescriptorRanges : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_RANGE1*)
    end
  end

  @[Extern]
  struct D3D12_ROOT_DESCRIPTOR1
    property shader_register : UInt32
    property register_space : UInt32
    property flags : Win32cr::Graphics::Direct3D12::D3D12_ROOT_DESCRIPTOR_FLAGS
    def initialize(@shader_register : UInt32, @register_space : UInt32, @flags : Win32cr::Graphics::Direct3D12::D3D12_ROOT_DESCRIPTOR_FLAGS)
    end
  end

  @[Extern]
  struct D3D12_ROOT_PARAMETER1
    property parameter_type : Win32cr::Graphics::Direct3D12::D3D12_ROOT_PARAMETER_TYPE
    property anonymous : Anonymous_e__Union_
    property shader_visibility : Win32cr::Graphics::Direct3D12::D3D12_SHADER_VISIBILITY

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property descriptor_table : Win32cr::Graphics::Direct3D12::D3D12_ROOT_DESCRIPTOR_TABLE1
    property constants : Win32cr::Graphics::Direct3D12::D3D12_ROOT_CONSTANTS
    property descriptor : Win32cr::Graphics::Direct3D12::D3D12_ROOT_DESCRIPTOR1
    def initialize(@descriptor_table : Win32cr::Graphics::Direct3D12::D3D12_ROOT_DESCRIPTOR_TABLE1, @constants : Win32cr::Graphics::Direct3D12::D3D12_ROOT_CONSTANTS, @descriptor : Win32cr::Graphics::Direct3D12::D3D12_ROOT_DESCRIPTOR1)
    end
    end

    def initialize(@parameter_type : Win32cr::Graphics::Direct3D12::D3D12_ROOT_PARAMETER_TYPE, @anonymous : Anonymous_e__Union_, @shader_visibility : Win32cr::Graphics::Direct3D12::D3D12_SHADER_VISIBILITY)
    end
  end

  @[Extern]
  struct D3D12_ROOT_SIGNATURE_DESC1
    property num_parameters : UInt32
    property pParameters : Win32cr::Graphics::Direct3D12::D3D12_ROOT_PARAMETER1*
    property num_static_samplers : UInt32
    property pStaticSamplers : Win32cr::Graphics::Direct3D12::D3D12_STATIC_SAMPLER_DESC*
    property flags : Win32cr::Graphics::Direct3D12::D3D12_ROOT_SIGNATURE_FLAGS
    def initialize(@num_parameters : UInt32, @pParameters : Win32cr::Graphics::Direct3D12::D3D12_ROOT_PARAMETER1*, @num_static_samplers : UInt32, @pStaticSamplers : Win32cr::Graphics::Direct3D12::D3D12_STATIC_SAMPLER_DESC*, @flags : Win32cr::Graphics::Direct3D12::D3D12_ROOT_SIGNATURE_FLAGS)
    end
  end

  @[Extern]
  struct D3D12_VERSIONED_ROOT_SIGNATURE_DESC
    property version : Win32cr::Graphics::Direct3D12::D3D_ROOT_SIGNATURE_VERSION
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property desc_1_0 : Win32cr::Graphics::Direct3D12::D3D12_ROOT_SIGNATURE_DESC
    property desc_1_1 : Win32cr::Graphics::Direct3D12::D3D12_ROOT_SIGNATURE_DESC1
    def initialize(@desc_1_0 : Win32cr::Graphics::Direct3D12::D3D12_ROOT_SIGNATURE_DESC, @desc_1_1 : Win32cr::Graphics::Direct3D12::D3D12_ROOT_SIGNATURE_DESC1)
    end
    end

    def initialize(@version : Win32cr::Graphics::Direct3D12::D3D_ROOT_SIGNATURE_VERSION, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct D3D12_CPU_DESCRIPTOR_HANDLE
    property ptr : LibC::UIntPtrT
    def initialize(@ptr : LibC::UIntPtrT)
    end
  end

  @[Extern]
  struct D3D12_GPU_DESCRIPTOR_HANDLE
    property ptr : UInt64
    def initialize(@ptr : UInt64)
    end
  end

  @[Extern]
  struct D3D12_DISCARD_REGION
    property num_rects : UInt32
    property pRects : Win32cr::Foundation::RECT*
    property first_subresource : UInt32
    property num_subresources : UInt32
    def initialize(@num_rects : UInt32, @pRects : Win32cr::Foundation::RECT*, @first_subresource : UInt32, @num_subresources : UInt32)
    end
  end

  @[Extern]
  struct D3D12_QUERY_HEAP_DESC
    property type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_TYPE
    property count : UInt32
    property node_mask : UInt32
    def initialize(@type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_TYPE, @count : UInt32, @node_mask : UInt32)
    end
  end

  @[Extern]
  struct D3D12_QUERY_DATA_PIPELINE_STATISTICS
    property ia_vertices : UInt64
    property ia_primitives : UInt64
    property vs_invocations : UInt64
    property gs_invocations : UInt64
    property gs_primitives : UInt64
    property c_invocations : UInt64
    property c_primitives : UInt64
    property ps_invocations : UInt64
    property hs_invocations : UInt64
    property ds_invocations : UInt64
    property cs_invocations : UInt64
    def initialize(@ia_vertices : UInt64, @ia_primitives : UInt64, @vs_invocations : UInt64, @gs_invocations : UInt64, @gs_primitives : UInt64, @c_invocations : UInt64, @c_primitives : UInt64, @ps_invocations : UInt64, @hs_invocations : UInt64, @ds_invocations : UInt64, @cs_invocations : UInt64)
    end
  end

  @[Extern]
  struct D3D12_QUERY_DATA_PIPELINE_STATISTICS1
    property ia_vertices : UInt64
    property ia_primitives : UInt64
    property vs_invocations : UInt64
    property gs_invocations : UInt64
    property gs_primitives : UInt64
    property c_invocations : UInt64
    property c_primitives : UInt64
    property ps_invocations : UInt64
    property hs_invocations : UInt64
    property ds_invocations : UInt64
    property cs_invocations : UInt64
    property as_invocations : UInt64
    property ms_invocations : UInt64
    property ms_primitives : UInt64
    def initialize(@ia_vertices : UInt64, @ia_primitives : UInt64, @vs_invocations : UInt64, @gs_invocations : UInt64, @gs_primitives : UInt64, @c_invocations : UInt64, @c_primitives : UInt64, @ps_invocations : UInt64, @hs_invocations : UInt64, @ds_invocations : UInt64, @cs_invocations : UInt64, @as_invocations : UInt64, @ms_invocations : UInt64, @ms_primitives : UInt64)
    end
  end

  @[Extern]
  struct D3D12_QUERY_DATA_SO_STATISTICS
    property num_primitives_written : UInt64
    property primitives_storage_needed : UInt64
    def initialize(@num_primitives_written : UInt64, @primitives_storage_needed : UInt64)
    end
  end

  @[Extern]
  struct D3D12_STREAM_OUTPUT_BUFFER_VIEW
    property buffer_location : UInt64
    property size_in_bytes : UInt64
    property buffer_filled_size_location : UInt64
    def initialize(@buffer_location : UInt64, @size_in_bytes : UInt64, @buffer_filled_size_location : UInt64)
    end
  end

  @[Extern]
  struct D3D12_DRAW_ARGUMENTS
    property vertex_count_per_instance : UInt32
    property instance_count : UInt32
    property start_vertex_location : UInt32
    property start_instance_location : UInt32
    def initialize(@vertex_count_per_instance : UInt32, @instance_count : UInt32, @start_vertex_location : UInt32, @start_instance_location : UInt32)
    end
  end

  @[Extern]
  struct D3D12_DRAW_INDEXED_ARGUMENTS
    property index_count_per_instance : UInt32
    property instance_count : UInt32
    property start_index_location : UInt32
    property base_vertex_location : Int32
    property start_instance_location : UInt32
    def initialize(@index_count_per_instance : UInt32, @instance_count : UInt32, @start_index_location : UInt32, @base_vertex_location : Int32, @start_instance_location : UInt32)
    end
  end

  @[Extern]
  struct D3D12_DISPATCH_ARGUMENTS
    property thread_group_count_x : UInt32
    property thread_group_count_y : UInt32
    property thread_group_count_z : UInt32
    def initialize(@thread_group_count_x : UInt32, @thread_group_count_y : UInt32, @thread_group_count_z : UInt32)
    end
  end

  @[Extern]
  struct D3D12_VERTEX_BUFFER_VIEW
    property buffer_location : UInt64
    property size_in_bytes : UInt32
    property stride_in_bytes : UInt32
    def initialize(@buffer_location : UInt64, @size_in_bytes : UInt32, @stride_in_bytes : UInt32)
    end
  end

  @[Extern]
  struct D3D12_INDEX_BUFFER_VIEW
    property buffer_location : UInt64
    property size_in_bytes : UInt32
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    def initialize(@buffer_location : UInt64, @size_in_bytes : UInt32, @format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT)
    end
  end

  @[Extern]
  struct D3D12_INDIRECT_ARGUMENT_DESC
    property type__ : Win32cr::Graphics::Direct3D12::D3D12_INDIRECT_ARGUMENT_TYPE
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property vertex_buffer : VertexBuffer_e__Struct_
    property constant : Constant_e__Struct_
    property constant_buffer_view : ConstantBufferView_e__Struct_
    property shader_resource_view : ShaderResourceView_e__Struct_
    property unordered_access_view : UnorderedAccessView_e__Struct_

      # Nested Type ShaderResourceView_e__Struct_
      @[Extern]
      struct ShaderResourceView_e__Struct_
    property root_parameter_index : UInt32
    def initialize(@root_parameter_index : UInt32)
    end
      end


      # Nested Type Constant_e__Struct_
      @[Extern]
      struct Constant_e__Struct_
    property root_parameter_index : UInt32
    property dest_offset_in32_bit_values : UInt32
    property num32_bit_values_to_set : UInt32
    def initialize(@root_parameter_index : UInt32, @dest_offset_in32_bit_values : UInt32, @num32_bit_values_to_set : UInt32)
    end
      end


      # Nested Type UnorderedAccessView_e__Struct_
      @[Extern]
      struct UnorderedAccessView_e__Struct_
    property root_parameter_index : UInt32
    def initialize(@root_parameter_index : UInt32)
    end
      end


      # Nested Type VertexBuffer_e__Struct_
      @[Extern]
      struct VertexBuffer_e__Struct_
    property slot : UInt32
    def initialize(@slot : UInt32)
    end
      end


      # Nested Type ConstantBufferView_e__Struct_
      @[Extern]
      struct ConstantBufferView_e__Struct_
    property root_parameter_index : UInt32
    def initialize(@root_parameter_index : UInt32)
    end
      end

    def initialize(@vertex_buffer : VertexBuffer_e__Struct_, @constant : Constant_e__Struct_, @constant_buffer_view : ConstantBufferView_e__Struct_, @shader_resource_view : ShaderResourceView_e__Struct_, @unordered_access_view : UnorderedAccessView_e__Struct_)
    end
    end

    def initialize(@type__ : Win32cr::Graphics::Direct3D12::D3D12_INDIRECT_ARGUMENT_TYPE, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct D3D12_COMMAND_SIGNATURE_DESC
    property byte_stride : UInt32
    property num_argument_descs : UInt32
    property pArgumentDescs : Win32cr::Graphics::Direct3D12::D3D12_INDIRECT_ARGUMENT_DESC*
    property node_mask : UInt32
    def initialize(@byte_stride : UInt32, @num_argument_descs : UInt32, @pArgumentDescs : Win32cr::Graphics::Direct3D12::D3D12_INDIRECT_ARGUMENT_DESC*, @node_mask : UInt32)
    end
  end

  @[Extern]
  struct D3D12_WRITEBUFFERIMMEDIATE_PARAMETER
    property dest : UInt64
    property value : UInt32
    def initialize(@dest : UInt64, @value : UInt32)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT
    property node_index : UInt32
    property support : Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS
    def initialize(@node_index : UInt32, @support : Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS)
    end
  end

  @[Extern]
  struct D3D12_PROTECTED_RESOURCE_SESSION_DESC
    property node_mask : UInt32
    property flags : Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_FLAGS
    def initialize(@node_mask : UInt32, @flags : Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_FLAGS)
    end
  end

  @[Extern]
  struct D3D12_META_COMMAND_PARAMETER_DESC
    property name : Win32cr::Foundation::PWSTR
    property type__ : Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_TYPE
    property flags : Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_FLAGS
    property required_resource_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES
    property structure_offset : UInt32
    def initialize(@name : Win32cr::Foundation::PWSTR, @type__ : Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_TYPE, @flags : Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_FLAGS, @required_resource_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, @structure_offset : UInt32)
    end
  end

  @[Extern]
  struct D3D12_META_COMMAND_DESC
    property id : LibC::GUID
    property name : Win32cr::Foundation::PWSTR
    property initialization_dirty_state : Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_STATES
    property execution_dirty_state : Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_STATES
    def initialize(@id : LibC::GUID, @name : Win32cr::Foundation::PWSTR, @initialization_dirty_state : Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_STATES, @execution_dirty_state : Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_STATES)
    end
  end

  @[Extern]
  struct D3D12_STATE_SUBOBJECT
    property type__ : Win32cr::Graphics::Direct3D12::D3D12_STATE_SUBOBJECT_TYPE
    property pDesc : Void*
    def initialize(@type__ : Win32cr::Graphics::Direct3D12::D3D12_STATE_SUBOBJECT_TYPE, @pDesc : Void*)
    end
  end

  @[Extern]
  struct D3D12_STATE_OBJECT_CONFIG
    property flags : Win32cr::Graphics::Direct3D12::D3D12_STATE_OBJECT_FLAGS
    def initialize(@flags : Win32cr::Graphics::Direct3D12::D3D12_STATE_OBJECT_FLAGS)
    end
  end

  @[Extern]
  struct D3D12_GLOBAL_ROOT_SIGNATURE
    property pGlobalRootSignature : Void*
    def initialize(@pGlobalRootSignature : Void*)
    end
  end

  @[Extern]
  struct D3D12_LOCAL_ROOT_SIGNATURE
    property pLocalRootSignature : Void*
    def initialize(@pLocalRootSignature : Void*)
    end
  end

  @[Extern]
  struct D3D12_NODE_MASK
    property node_mask : UInt32
    def initialize(@node_mask : UInt32)
    end
  end

  @[Extern]
  struct D3D12_EXPORT_DESC
    property name : Win32cr::Foundation::PWSTR
    property export_to_rename : Win32cr::Foundation::PWSTR
    property flags : Win32cr::Graphics::Direct3D12::D3D12_EXPORT_FLAGS
    def initialize(@name : Win32cr::Foundation::PWSTR, @export_to_rename : Win32cr::Foundation::PWSTR, @flags : Win32cr::Graphics::Direct3D12::D3D12_EXPORT_FLAGS)
    end
  end

  @[Extern]
  struct D3D12_DXIL_LIBRARY_DESC
    property dxil_library : Win32cr::Graphics::Direct3D12::D3D12_SHADER_BYTECODE
    property num_exports : UInt32
    property pExports : Win32cr::Graphics::Direct3D12::D3D12_EXPORT_DESC*
    def initialize(@dxil_library : Win32cr::Graphics::Direct3D12::D3D12_SHADER_BYTECODE, @num_exports : UInt32, @pExports : Win32cr::Graphics::Direct3D12::D3D12_EXPORT_DESC*)
    end
  end

  @[Extern]
  struct D3D12_EXISTING_COLLECTION_DESC
    property pExistingCollection : Void*
    property num_exports : UInt32
    property pExports : Win32cr::Graphics::Direct3D12::D3D12_EXPORT_DESC*
    def initialize(@pExistingCollection : Void*, @num_exports : UInt32, @pExports : Win32cr::Graphics::Direct3D12::D3D12_EXPORT_DESC*)
    end
  end

  @[Extern]
  struct D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION
    property pSubobjectToAssociate : Win32cr::Graphics::Direct3D12::D3D12_STATE_SUBOBJECT*
    property num_exports : UInt32
    property pExports : Win32cr::Foundation::PWSTR*
    def initialize(@pSubobjectToAssociate : Win32cr::Graphics::Direct3D12::D3D12_STATE_SUBOBJECT*, @num_exports : UInt32, @pExports : Win32cr::Foundation::PWSTR*)
    end
  end

  @[Extern]
  struct D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION
    property subobject_to_associate : Win32cr::Foundation::PWSTR
    property num_exports : UInt32
    property pExports : Win32cr::Foundation::PWSTR*
    def initialize(@subobject_to_associate : Win32cr::Foundation::PWSTR, @num_exports : UInt32, @pExports : Win32cr::Foundation::PWSTR*)
    end
  end

  @[Extern]
  struct D3D12_HIT_GROUP_DESC
    property hit_group_export : Win32cr::Foundation::PWSTR
    property type__ : Win32cr::Graphics::Direct3D12::D3D12_HIT_GROUP_TYPE
    property any_hit_shader_import : Win32cr::Foundation::PWSTR
    property closest_hit_shader_import : Win32cr::Foundation::PWSTR
    property intersection_shader_import : Win32cr::Foundation::PWSTR
    def initialize(@hit_group_export : Win32cr::Foundation::PWSTR, @type__ : Win32cr::Graphics::Direct3D12::D3D12_HIT_GROUP_TYPE, @any_hit_shader_import : Win32cr::Foundation::PWSTR, @closest_hit_shader_import : Win32cr::Foundation::PWSTR, @intersection_shader_import : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct D3D12_RAYTRACING_SHADER_CONFIG
    property max_payload_size_in_bytes : UInt32
    property max_attribute_size_in_bytes : UInt32
    def initialize(@max_payload_size_in_bytes : UInt32, @max_attribute_size_in_bytes : UInt32)
    end
  end

  @[Extern]
  struct D3D12_RAYTRACING_PIPELINE_CONFIG
    property max_trace_recursion_depth : UInt32
    def initialize(@max_trace_recursion_depth : UInt32)
    end
  end

  @[Extern]
  struct D3D12_RAYTRACING_PIPELINE_CONFIG1
    property max_trace_recursion_depth : UInt32
    property flags : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_PIPELINE_FLAGS
    def initialize(@max_trace_recursion_depth : UInt32, @flags : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_PIPELINE_FLAGS)
    end
  end

  @[Extern]
  struct D3D12_STATE_OBJECT_DESC
    property type__ : Win32cr::Graphics::Direct3D12::D3D12_STATE_OBJECT_TYPE
    property num_subobjects : UInt32
    property pSubobjects : Win32cr::Graphics::Direct3D12::D3D12_STATE_SUBOBJECT*
    def initialize(@type__ : Win32cr::Graphics::Direct3D12::D3D12_STATE_OBJECT_TYPE, @num_subobjects : UInt32, @pSubobjects : Win32cr::Graphics::Direct3D12::D3D12_STATE_SUBOBJECT*)
    end
  end

  @[Extern]
  struct D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE
    property start_address : UInt64
    property stride_in_bytes : UInt64
    def initialize(@start_address : UInt64, @stride_in_bytes : UInt64)
    end
  end

  @[Extern]
  struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE
    property start_address : UInt64
    property size_in_bytes : UInt64
    def initialize(@start_address : UInt64, @size_in_bytes : UInt64)
    end
  end

  @[Extern]
  struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE
    property start_address : UInt64
    property size_in_bytes : UInt64
    property stride_in_bytes : UInt64
    def initialize(@start_address : UInt64, @size_in_bytes : UInt64, @stride_in_bytes : UInt64)
    end
  end

  @[Extern]
  struct D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC
    property transform3x4 : UInt64
    property index_format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property vertex_format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property index_count : UInt32
    property vertex_count : UInt32
    property index_buffer : UInt64
    property vertex_buffer : Win32cr::Graphics::Direct3D12::D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE
    def initialize(@transform3x4 : UInt64, @index_format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @vertex_format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @index_count : UInt32, @vertex_count : UInt32, @index_buffer : UInt64, @vertex_buffer : Win32cr::Graphics::Direct3D12::D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE)
    end
  end

  @[Extern]
  struct D3D12_RAYTRACING_AABB
    property min_x : Float32
    property min_y : Float32
    property min_z : Float32
    property max_x : Float32
    property max_y : Float32
    property max_z : Float32
    def initialize(@min_x : Float32, @min_y : Float32, @min_z : Float32, @max_x : Float32, @max_y : Float32, @max_z : Float32)
    end
  end

  @[Extern]
  struct D3D12_RAYTRACING_GEOMETRY_AABBS_DESC
    property aabb_count : UInt64
    property aab_bs : Win32cr::Graphics::Direct3D12::D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE
    def initialize(@aabb_count : UInt64, @aab_bs : Win32cr::Graphics::Direct3D12::D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE)
    end
  end

  @[Extern]
  struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC
    property dest_buffer : UInt64
    property info_type : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE
    def initialize(@dest_buffer : UInt64, @info_type : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE)
    end
  end

  @[Extern]
  struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC
    property compacted_size_in_bytes : UInt64
    def initialize(@compacted_size_in_bytes : UInt64)
    end
  end

  @[Extern]
  struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC
    property decoded_size_in_bytes : UInt64
    def initialize(@decoded_size_in_bytes : UInt64)
    end
  end

  @[Extern]
  struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER
    property type__ : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE
    property num_descs : UInt32
    def initialize(@type__ : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE, @num_descs : UInt32)
    end
  end

  @[Extern]
  struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC
    property serialized_size_in_bytes : UInt64
    property num_bottom_level_acceleration_structure_pointers : UInt64
    def initialize(@serialized_size_in_bytes : UInt64, @num_bottom_level_acceleration_structure_pointers : UInt64)
    end
  end

  @[Extern]
  struct D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER
    property driver_opaque_guid : LibC::GUID
    property driver_opaque_versioning_data : UInt8[16]
    def initialize(@driver_opaque_guid : LibC::GUID, @driver_opaque_versioning_data : UInt8[16])
    end
  end

  @[Extern]
  struct D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER
    property driver_matching_identifier : Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER
    property serialized_size_in_bytes_including_header : UInt64
    property deserialized_size_in_bytes : UInt64
    property num_bottom_level_acceleration_structure_pointers_after_header : UInt64
    def initialize(@driver_matching_identifier : Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER, @serialized_size_in_bytes_including_header : UInt64, @deserialized_size_in_bytes : UInt64, @num_bottom_level_acceleration_structure_pointers_after_header : UInt64)
    end
  end

  @[Extern]
  struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC
    property current_size_in_bytes : UInt64
    def initialize(@current_size_in_bytes : UInt64)
    end
  end

  @[Extern]
  struct D3D12_RAYTRACING_INSTANCE_DESC
    property transform : Float32[12]
    property _bitfield1 : UInt32
    property _bitfield2 : UInt32
    property acceleration_structure : UInt64
    def initialize(@transform : Float32[12], @_bitfield1 : UInt32, @_bitfield2 : UInt32, @acceleration_structure : UInt64)
    end
  end

  @[Extern]
  struct D3D12_RAYTRACING_GEOMETRY_DESC
    property type__ : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_GEOMETRY_TYPE
    property flags : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_GEOMETRY_FLAGS
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property triangles : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC
    property aab_bs : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_GEOMETRY_AABBS_DESC
    def initialize(@triangles : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC, @aab_bs : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_GEOMETRY_AABBS_DESC)
    end
    end

    def initialize(@type__ : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_GEOMETRY_TYPE, @flags : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_GEOMETRY_FLAGS, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS
    property type__ : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE
    property flags : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS
    property num_descs : UInt32
    property descs_layout : Win32cr::Graphics::Direct3D12::D3D12_ELEMENTS_LAYOUT
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property instance_descs : UInt64
    property pGeometryDescs : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_GEOMETRY_DESC*
    property ppGeometryDescs : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_GEOMETRY_DESC**
    def initialize(@instance_descs : UInt64, @pGeometryDescs : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_GEOMETRY_DESC*, @ppGeometryDescs : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_GEOMETRY_DESC**)
    end
    end

    def initialize(@type__ : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE, @flags : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS, @num_descs : UInt32, @descs_layout : Win32cr::Graphics::Direct3D12::D3D12_ELEMENTS_LAYOUT, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC
    property dest_acceleration_structure_data : UInt64
    property inputs : Win32cr::Graphics::Direct3D12::D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS
    property source_acceleration_structure_data : UInt64
    property scratch_acceleration_structure_data : UInt64
    def initialize(@dest_acceleration_structure_data : UInt64, @inputs : Win32cr::Graphics::Direct3D12::D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS, @source_acceleration_structure_data : UInt64, @scratch_acceleration_structure_data : UInt64)
    end
  end

  @[Extern]
  struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO
    property result_data_max_size_in_bytes : UInt64
    property scratch_data_size_in_bytes : UInt64
    property update_scratch_data_size_in_bytes : UInt64
    def initialize(@result_data_max_size_in_bytes : UInt64, @scratch_data_size_in_bytes : UInt64, @update_scratch_data_size_in_bytes : UInt64)
    end
  end

  @[Extern]
  struct D3D12_AUTO_BREADCRUMB_NODE
    property pCommandListDebugNameA : UInt8*
    property pCommandListDebugNameW : Win32cr::Foundation::PWSTR
    property pCommandQueueDebugNameA : UInt8*
    property pCommandQueueDebugNameW : Win32cr::Foundation::PWSTR
    property pCommandList : Void*
    property pCommandQueue : Void*
    property breadcrumb_count : UInt32
    property pLastBreadcrumbValue : UInt32*
    property pCommandHistory : Win32cr::Graphics::Direct3D12::D3D12_AUTO_BREADCRUMB_OP*
    property pNext : Win32cr::Graphics::Direct3D12::D3D12_AUTO_BREADCRUMB_NODE*
    def initialize(@pCommandListDebugNameA : UInt8*, @pCommandListDebugNameW : Win32cr::Foundation::PWSTR, @pCommandQueueDebugNameA : UInt8*, @pCommandQueueDebugNameW : Win32cr::Foundation::PWSTR, @pCommandList : Void*, @pCommandQueue : Void*, @breadcrumb_count : UInt32, @pLastBreadcrumbValue : UInt32*, @pCommandHistory : Win32cr::Graphics::Direct3D12::D3D12_AUTO_BREADCRUMB_OP*, @pNext : Win32cr::Graphics::Direct3D12::D3D12_AUTO_BREADCRUMB_NODE*)
    end
  end

  @[Extern]
  struct D3D12_DRED_BREADCRUMB_CONTEXT
    property breadcrumb_index : UInt32
    property pContextString : Win32cr::Foundation::PWSTR
    def initialize(@breadcrumb_index : UInt32, @pContextString : Win32cr::Foundation::PWSTR)
    end
  end

  @[Extern]
  struct D3D12_AUTO_BREADCRUMB_NODE1
    property pCommandListDebugNameA : UInt8*
    property pCommandListDebugNameW : Win32cr::Foundation::PWSTR
    property pCommandQueueDebugNameA : UInt8*
    property pCommandQueueDebugNameW : Win32cr::Foundation::PWSTR
    property pCommandList : Void*
    property pCommandQueue : Void*
    property breadcrumb_count : UInt32
    property pLastBreadcrumbValue : UInt32*
    property pCommandHistory : Win32cr::Graphics::Direct3D12::D3D12_AUTO_BREADCRUMB_OP*
    property pNext : Win32cr::Graphics::Direct3D12::D3D12_AUTO_BREADCRUMB_NODE1*
    property breadcrumb_contexts_count : UInt32
    property pBreadcrumbContexts : Win32cr::Graphics::Direct3D12::D3D12_DRED_BREADCRUMB_CONTEXT*
    def initialize(@pCommandListDebugNameA : UInt8*, @pCommandListDebugNameW : Win32cr::Foundation::PWSTR, @pCommandQueueDebugNameA : UInt8*, @pCommandQueueDebugNameW : Win32cr::Foundation::PWSTR, @pCommandList : Void*, @pCommandQueue : Void*, @breadcrumb_count : UInt32, @pLastBreadcrumbValue : UInt32*, @pCommandHistory : Win32cr::Graphics::Direct3D12::D3D12_AUTO_BREADCRUMB_OP*, @pNext : Win32cr::Graphics::Direct3D12::D3D12_AUTO_BREADCRUMB_NODE1*, @breadcrumb_contexts_count : UInt32, @pBreadcrumbContexts : Win32cr::Graphics::Direct3D12::D3D12_DRED_BREADCRUMB_CONTEXT*)
    end
  end

  @[Extern]
  struct D3D12_DEVICE_REMOVED_EXTENDED_DATA
    property flags : Win32cr::Graphics::Direct3D12::D3D12_DRED_FLAGS
    property pHeadAutoBreadcrumbNode : Win32cr::Graphics::Direct3D12::D3D12_AUTO_BREADCRUMB_NODE*
    def initialize(@flags : Win32cr::Graphics::Direct3D12::D3D12_DRED_FLAGS, @pHeadAutoBreadcrumbNode : Win32cr::Graphics::Direct3D12::D3D12_AUTO_BREADCRUMB_NODE*)
    end
  end

  @[Extern]
  struct D3D12_DRED_ALLOCATION_NODE
    property object_name_a : UInt8*
    property object_name_w : Win32cr::Foundation::PWSTR
    property allocation_type : Win32cr::Graphics::Direct3D12::D3D12_DRED_ALLOCATION_TYPE
    property pNext : Win32cr::Graphics::Direct3D12::D3D12_DRED_ALLOCATION_NODE*
    def initialize(@object_name_a : UInt8*, @object_name_w : Win32cr::Foundation::PWSTR, @allocation_type : Win32cr::Graphics::Direct3D12::D3D12_DRED_ALLOCATION_TYPE, @pNext : Win32cr::Graphics::Direct3D12::D3D12_DRED_ALLOCATION_NODE*)
    end
  end

  @[Extern]
  struct D3D12_DRED_ALLOCATION_NODE1
    property object_name_a : UInt8*
    property object_name_w : Win32cr::Foundation::PWSTR
    property allocation_type : Win32cr::Graphics::Direct3D12::D3D12_DRED_ALLOCATION_TYPE
    property pNext : Win32cr::Graphics::Direct3D12::D3D12_DRED_ALLOCATION_NODE1*
    property pObject : Void*
    def initialize(@object_name_a : UInt8*, @object_name_w : Win32cr::Foundation::PWSTR, @allocation_type : Win32cr::Graphics::Direct3D12::D3D12_DRED_ALLOCATION_TYPE, @pNext : Win32cr::Graphics::Direct3D12::D3D12_DRED_ALLOCATION_NODE1*, @pObject : Void*)
    end
  end

  @[Extern]
  struct D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT
    property pHeadAutoBreadcrumbNode : Win32cr::Graphics::Direct3D12::D3D12_AUTO_BREADCRUMB_NODE*
    def initialize(@pHeadAutoBreadcrumbNode : Win32cr::Graphics::Direct3D12::D3D12_AUTO_BREADCRUMB_NODE*)
    end
  end

  @[Extern]
  struct D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1
    property pHeadAutoBreadcrumbNode : Win32cr::Graphics::Direct3D12::D3D12_AUTO_BREADCRUMB_NODE1*
    def initialize(@pHeadAutoBreadcrumbNode : Win32cr::Graphics::Direct3D12::D3D12_AUTO_BREADCRUMB_NODE1*)
    end
  end

  @[Extern]
  struct D3D12_DRED_PAGE_FAULT_OUTPUT
    property page_fault_va : UInt64
    property pHeadExistingAllocationNode : Win32cr::Graphics::Direct3D12::D3D12_DRED_ALLOCATION_NODE*
    property pHeadRecentFreedAllocationNode : Win32cr::Graphics::Direct3D12::D3D12_DRED_ALLOCATION_NODE*
    def initialize(@page_fault_va : UInt64, @pHeadExistingAllocationNode : Win32cr::Graphics::Direct3D12::D3D12_DRED_ALLOCATION_NODE*, @pHeadRecentFreedAllocationNode : Win32cr::Graphics::Direct3D12::D3D12_DRED_ALLOCATION_NODE*)
    end
  end

  @[Extern]
  struct D3D12_DRED_PAGE_FAULT_OUTPUT1
    property page_fault_va : UInt64
    property pHeadExistingAllocationNode : Win32cr::Graphics::Direct3D12::D3D12_DRED_ALLOCATION_NODE1*
    property pHeadRecentFreedAllocationNode : Win32cr::Graphics::Direct3D12::D3D12_DRED_ALLOCATION_NODE1*
    def initialize(@page_fault_va : UInt64, @pHeadExistingAllocationNode : Win32cr::Graphics::Direct3D12::D3D12_DRED_ALLOCATION_NODE1*, @pHeadRecentFreedAllocationNode : Win32cr::Graphics::Direct3D12::D3D12_DRED_ALLOCATION_NODE1*)
    end
  end

  @[Extern]
  struct D3D12_DRED_PAGE_FAULT_OUTPUT2
    property page_fault_va : UInt64
    property pHeadExistingAllocationNode : Win32cr::Graphics::Direct3D12::D3D12_DRED_ALLOCATION_NODE1*
    property pHeadRecentFreedAllocationNode : Win32cr::Graphics::Direct3D12::D3D12_DRED_ALLOCATION_NODE1*
    property page_fault_flags : Win32cr::Graphics::Direct3D12::D3D12_DRED_PAGE_FAULT_FLAGS
    def initialize(@page_fault_va : UInt64, @pHeadExistingAllocationNode : Win32cr::Graphics::Direct3D12::D3D12_DRED_ALLOCATION_NODE1*, @pHeadRecentFreedAllocationNode : Win32cr::Graphics::Direct3D12::D3D12_DRED_ALLOCATION_NODE1*, @page_fault_flags : Win32cr::Graphics::Direct3D12::D3D12_DRED_PAGE_FAULT_FLAGS)
    end
  end

  @[Extern]
  struct D3D12_DEVICE_REMOVED_EXTENDED_DATA1
    property device_removed_reason : Win32cr::Foundation::HRESULT
    property auto_breadcrumbs_output : Win32cr::Graphics::Direct3D12::D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT
    property page_fault_output : Win32cr::Graphics::Direct3D12::D3D12_DRED_PAGE_FAULT_OUTPUT
    def initialize(@device_removed_reason : Win32cr::Foundation::HRESULT, @auto_breadcrumbs_output : Win32cr::Graphics::Direct3D12::D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT, @page_fault_output : Win32cr::Graphics::Direct3D12::D3D12_DRED_PAGE_FAULT_OUTPUT)
    end
  end

  @[Extern]
  struct D3D12_DEVICE_REMOVED_EXTENDED_DATA2
    property device_removed_reason : Win32cr::Foundation::HRESULT
    property auto_breadcrumbs_output : Win32cr::Graphics::Direct3D12::D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1
    property page_fault_output : Win32cr::Graphics::Direct3D12::D3D12_DRED_PAGE_FAULT_OUTPUT1
    def initialize(@device_removed_reason : Win32cr::Foundation::HRESULT, @auto_breadcrumbs_output : Win32cr::Graphics::Direct3D12::D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1, @page_fault_output : Win32cr::Graphics::Direct3D12::D3D12_DRED_PAGE_FAULT_OUTPUT1)
    end
  end

  @[Extern]
  struct D3D12_DEVICE_REMOVED_EXTENDED_DATA3
    property device_removed_reason : Win32cr::Foundation::HRESULT
    property auto_breadcrumbs_output : Win32cr::Graphics::Direct3D12::D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1
    property page_fault_output : Win32cr::Graphics::Direct3D12::D3D12_DRED_PAGE_FAULT_OUTPUT2
    property device_state : Win32cr::Graphics::Direct3D12::D3D12_DRED_DEVICE_STATE
    def initialize(@device_removed_reason : Win32cr::Foundation::HRESULT, @auto_breadcrumbs_output : Win32cr::Graphics::Direct3D12::D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1, @page_fault_output : Win32cr::Graphics::Direct3D12::D3D12_DRED_PAGE_FAULT_OUTPUT2, @device_state : Win32cr::Graphics::Direct3D12::D3D12_DRED_DEVICE_STATE)
    end
  end

  @[Extern]
  struct D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA
    property version : Win32cr::Graphics::Direct3D12::D3D12_DRED_VERSION
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property dred_1_0 : Win32cr::Graphics::Direct3D12::D3D12_DEVICE_REMOVED_EXTENDED_DATA
    property dred_1_1 : Win32cr::Graphics::Direct3D12::D3D12_DEVICE_REMOVED_EXTENDED_DATA1
    property dred_1_2 : Win32cr::Graphics::Direct3D12::D3D12_DEVICE_REMOVED_EXTENDED_DATA2
    property dred_1_3 : Win32cr::Graphics::Direct3D12::D3D12_DEVICE_REMOVED_EXTENDED_DATA3
    def initialize(@dred_1_0 : Win32cr::Graphics::Direct3D12::D3D12_DEVICE_REMOVED_EXTENDED_DATA, @dred_1_1 : Win32cr::Graphics::Direct3D12::D3D12_DEVICE_REMOVED_EXTENDED_DATA1, @dred_1_2 : Win32cr::Graphics::Direct3D12::D3D12_DEVICE_REMOVED_EXTENDED_DATA2, @dred_1_3 : Win32cr::Graphics::Direct3D12::D3D12_DEVICE_REMOVED_EXTENDED_DATA3)
    end
    end

    def initialize(@version : Win32cr::Graphics::Direct3D12::D3D12_DRED_VERSION, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT
    property node_index : UInt32
    property count : UInt32
    def initialize(@node_index : UInt32, @count : UInt32)
    end
  end

  @[Extern]
  struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES
    property node_index : UInt32
    property count : UInt32
    property pTypes : LibC::GUID*
    def initialize(@node_index : UInt32, @count : UInt32, @pTypes : LibC::GUID*)
    end
  end

  @[Extern]
  struct D3D12_PROTECTED_RESOURCE_SESSION_DESC1
    property node_mask : UInt32
    property flags : Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_FLAGS
    property protection_type : LibC::GUID
    def initialize(@node_mask : UInt32, @flags : Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_FLAGS, @protection_type : LibC::GUID)
    end
  end

  @[Extern]
  struct D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS
    property clear_value : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE
    def initialize(@clear_value : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE)
    end
  end

  @[Extern]
  struct D3D12_RENDER_PASS_BEGINNING_ACCESS
    property type__ : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property clear : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS
    def initialize(@clear : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS)
    end
    end

    def initialize(@type__ : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS
    property src_subresource : UInt32
    property dst_subresource : UInt32
    property dst_x : UInt32
    property dst_y : UInt32
    property src_rect : Win32cr::Foundation::RECT
    def initialize(@src_subresource : UInt32, @dst_subresource : UInt32, @dst_x : UInt32, @dst_y : UInt32, @src_rect : Win32cr::Foundation::RECT)
    end
  end

  @[Extern]
  struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS
    property pSrcResource : Void*
    property pDstResource : Void*
    property subresource_count : UInt32
    property pSubresourceParameters : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS*
    property format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT
    property resolve_mode : Win32cr::Graphics::Direct3D12::D3D12_RESOLVE_MODE
    property preserve_resolve_source : Win32cr::Foundation::BOOL
    def initialize(@pSrcResource : Void*, @pDstResource : Void*, @subresource_count : UInt32, @pSubresourceParameters : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS*, @format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, @resolve_mode : Win32cr::Graphics::Direct3D12::D3D12_RESOLVE_MODE, @preserve_resolve_source : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D3D12_RENDER_PASS_ENDING_ACCESS
    property type__ : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_ENDING_ACCESS_TYPE
    property anonymous : Anonymous_e__Union_

    # Nested Type Anonymous_e__Union_
    @[Extern(union: true)]
    struct Anonymous_e__Union_
    property resolve : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS
    def initialize(@resolve : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS)
    end
    end

    def initialize(@type__ : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_ENDING_ACCESS_TYPE, @anonymous : Anonymous_e__Union_)
    end
  end

  @[Extern]
  struct D3D12_RENDER_PASS_RENDER_TARGET_DESC
    property cpuDescriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE
    property beginning_access : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_BEGINNING_ACCESS
    property ending_access : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_ENDING_ACCESS
    def initialize(@cpuDescriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, @beginning_access : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_BEGINNING_ACCESS, @ending_access : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_ENDING_ACCESS)
    end
  end

  @[Extern]
  struct D3D12_RENDER_PASS_DEPTH_STENCIL_DESC
    property cpuDescriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE
    property depth_beginning_access : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_BEGINNING_ACCESS
    property stencil_beginning_access : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_BEGINNING_ACCESS
    property depth_ending_access : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_ENDING_ACCESS
    property stencil_ending_access : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_ENDING_ACCESS
    def initialize(@cpuDescriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, @depth_beginning_access : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_BEGINNING_ACCESS, @stencil_beginning_access : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_BEGINNING_ACCESS, @depth_ending_access : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_ENDING_ACCESS, @stencil_ending_access : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_ENDING_ACCESS)
    end
  end

  @[Extern]
  struct D3D12_DISPATCH_RAYS_DESC
    property ray_generation_shader_record : Win32cr::Graphics::Direct3D12::D3D12_GPU_VIRTUAL_ADDRESS_RANGE
    property miss_shader_table : Win32cr::Graphics::Direct3D12::D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE
    property hit_group_table : Win32cr::Graphics::Direct3D12::D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE
    property callable_shader_table : Win32cr::Graphics::Direct3D12::D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE
    property width : UInt32
    property height : UInt32
    property depth : UInt32
    def initialize(@ray_generation_shader_record : Win32cr::Graphics::Direct3D12::D3D12_GPU_VIRTUAL_ADDRESS_RANGE, @miss_shader_table : Win32cr::Graphics::Direct3D12::D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE, @hit_group_table : Win32cr::Graphics::Direct3D12::D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE, @callable_shader_table : Win32cr::Graphics::Direct3D12::D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE, @width : UInt32, @height : UInt32, @depth : UInt32)
    end
  end

  @[Extern]
  struct D3D12_SHADER_CACHE_SESSION_DESC
    property identifier : LibC::GUID
    property mode : Win32cr::Graphics::Direct3D12::D3D12_SHADER_CACHE_MODE
    property flags : Win32cr::Graphics::Direct3D12::D3D12_SHADER_CACHE_FLAGS
    property maximum_in_memory_cache_size_bytes : UInt32
    property maximum_in_memory_cache_entries : UInt32
    property maximum_value_file_size_bytes : UInt32
    property version : UInt64
    def initialize(@identifier : LibC::GUID, @mode : Win32cr::Graphics::Direct3D12::D3D12_SHADER_CACHE_MODE, @flags : Win32cr::Graphics::Direct3D12::D3D12_SHADER_CACHE_FLAGS, @maximum_in_memory_cache_size_bytes : UInt32, @maximum_in_memory_cache_entries : UInt32, @maximum_value_file_size_bytes : UInt32, @version : UInt64)
    end
  end

  @[Extern]
  struct D3D12_SUBRESOURCE_DATA
    property pData : Void*
    property row_pitch : LibC::IntPtrT
    property slice_pitch : LibC::IntPtrT
    def initialize(@pData : Void*, @row_pitch : LibC::IntPtrT, @slice_pitch : LibC::IntPtrT)
    end
  end

  @[Extern]
  struct D3D12_MEMCPY_DEST
    property pData : Void*
    property row_pitch : LibC::UIntPtrT
    property slice_pitch : LibC::UIntPtrT
    def initialize(@pData : Void*, @row_pitch : LibC::UIntPtrT, @slice_pitch : LibC::UIntPtrT)
    end
  end

  @[Extern]
  struct D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS
    property max_messages_per_command_list : UInt32
    property default_shader_patch_mode : Win32cr::Graphics::Direct3D12::D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE
    property pipeline_state_create_flags : Win32cr::Graphics::Direct3D12::D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS
    def initialize(@max_messages_per_command_list : UInt32, @default_shader_patch_mode : Win32cr::Graphics::Direct3D12::D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE, @pipeline_state_create_flags : Win32cr::Graphics::Direct3D12::D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS)
    end
  end

  @[Extern]
  struct D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR
    property slowdown_factor : Float32
    def initialize(@slowdown_factor : Float32)
    end
  end

  @[Extern]
  struct D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS
    property shader_patch_mode : Win32cr::Graphics::Direct3D12::D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE
    def initialize(@shader_patch_mode : Win32cr::Graphics::Direct3D12::D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE)
    end
  end

  @[Extern]
  struct D3D12_MESSAGE
    property category : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_CATEGORY
    property severity : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_SEVERITY
    property id : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_ID
    property pDescription : UInt8*
    property description_byte_length : LibC::UIntPtrT
    def initialize(@category : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_CATEGORY, @severity : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_SEVERITY, @id : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_ID, @pDescription : UInt8*, @description_byte_length : LibC::UIntPtrT)
    end
  end

  @[Extern]
  struct D3D12_INFO_QUEUE_FILTER_DESC
    property num_categories : UInt32
    property pCategoryList : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_CATEGORY*
    property num_severities : UInt32
    property pSeverityList : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_SEVERITY*
    property num_i_ds : UInt32
    property pIDList : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_ID*
    def initialize(@num_categories : UInt32, @pCategoryList : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_CATEGORY*, @num_severities : UInt32, @pSeverityList : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_SEVERITY*, @num_i_ds : UInt32, @pIDList : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_ID*)
    end
  end

  @[Extern]
  struct D3D12_INFO_QUEUE_FILTER
    property allow_list : Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER_DESC
    property deny_list : Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER_DESC
    def initialize(@allow_list : Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER_DESC, @deny_list : Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER_DESC)
    end
  end

  @[Extern]
  struct D3D12_DISPATCH_MESH_ARGUMENTS
    property thread_group_count_x : UInt32
    property thread_group_count_y : UInt32
    property thread_group_count_z : UInt32
    def initialize(@thread_group_count_x : UInt32, @thread_group_count_y : UInt32, @thread_group_count_z : UInt32)
    end
  end

  @[Extern]
  struct D3D12_SIGNATURE_PARAMETER_DESC
    property semantic_name : Win32cr::Foundation::PSTR
    property semantic_index : UInt32
    property register : UInt32
    property system_value_type : Win32cr::Graphics::Direct3D::D3D_NAME
    property component_type : Win32cr::Graphics::Direct3D::D3D_REGISTER_COMPONENT_TYPE
    property mask : UInt8
    property read_write_mask : UInt8
    property stream : UInt32
    property min_precision : Win32cr::Graphics::Direct3D::D3D_MIN_PRECISION
    def initialize(@semantic_name : Win32cr::Foundation::PSTR, @semantic_index : UInt32, @register : UInt32, @system_value_type : Win32cr::Graphics::Direct3D::D3D_NAME, @component_type : Win32cr::Graphics::Direct3D::D3D_REGISTER_COMPONENT_TYPE, @mask : UInt8, @read_write_mask : UInt8, @stream : UInt32, @min_precision : Win32cr::Graphics::Direct3D::D3D_MIN_PRECISION)
    end
  end

  @[Extern]
  struct D3D12_SHADER_BUFFER_DESC
    property name : Win32cr::Foundation::PSTR
    property type__ : Win32cr::Graphics::Direct3D::D3D_CBUFFER_TYPE
    property variables : UInt32
    property size : UInt32
    property uFlags : UInt32
    def initialize(@name : Win32cr::Foundation::PSTR, @type__ : Win32cr::Graphics::Direct3D::D3D_CBUFFER_TYPE, @variables : UInt32, @size : UInt32, @uFlags : UInt32)
    end
  end

  @[Extern]
  struct D3D12_SHADER_VARIABLE_DESC
    property name : Win32cr::Foundation::PSTR
    property start_offset : UInt32
    property size : UInt32
    property uFlags : UInt32
    property default_value : Void*
    property start_texture : UInt32
    property texture_size : UInt32
    property start_sampler : UInt32
    property sampler_size : UInt32
    def initialize(@name : Win32cr::Foundation::PSTR, @start_offset : UInt32, @size : UInt32, @uFlags : UInt32, @default_value : Void*, @start_texture : UInt32, @texture_size : UInt32, @start_sampler : UInt32, @sampler_size : UInt32)
    end
  end

  @[Extern]
  struct D3D12_SHADER_TYPE_DESC
    property class__ : Win32cr::Graphics::Direct3D::D3D_SHADER_VARIABLE_CLASS
    property type__ : Win32cr::Graphics::Direct3D::D3D_SHADER_VARIABLE_TYPE
    property rows : UInt32
    property columns : UInt32
    property elements : UInt32
    property members : UInt32
    property offset : UInt32
    property name : Win32cr::Foundation::PSTR
    def initialize(@class__ : Win32cr::Graphics::Direct3D::D3D_SHADER_VARIABLE_CLASS, @type__ : Win32cr::Graphics::Direct3D::D3D_SHADER_VARIABLE_TYPE, @rows : UInt32, @columns : UInt32, @elements : UInt32, @members : UInt32, @offset : UInt32, @name : Win32cr::Foundation::PSTR)
    end
  end

  @[Extern]
  struct D3D12_SHADER_DESC
    property version : UInt32
    property creator : Win32cr::Foundation::PSTR
    property flags : UInt32
    property constant_buffers : UInt32
    property bound_resources : UInt32
    property input_parameters : UInt32
    property output_parameters : UInt32
    property instruction_count : UInt32
    property temp_register_count : UInt32
    property temp_array_count : UInt32
    property def_count : UInt32
    property dcl_count : UInt32
    property texture_normal_instructions : UInt32
    property texture_load_instructions : UInt32
    property texture_comp_instructions : UInt32
    property texture_bias_instructions : UInt32
    property texture_gradient_instructions : UInt32
    property float_instruction_count : UInt32
    property int_instruction_count : UInt32
    property uint_instruction_count : UInt32
    property static_flow_control_count : UInt32
    property dynamic_flow_control_count : UInt32
    property macro_instruction_count : UInt32
    property array_instruction_count : UInt32
    property cut_instruction_count : UInt32
    property emit_instruction_count : UInt32
    property gs_output_topology : Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY
    property gs_max_output_vertex_count : UInt32
    property input_primitive : Win32cr::Graphics::Direct3D::D3D_PRIMITIVE
    property patch_constant_parameters : UInt32
    property cGSInstanceCount : UInt32
    property cControlPoints : UInt32
    property hs_output_primitive : Win32cr::Graphics::Direct3D::D3D_TESSELLATOR_OUTPUT_PRIMITIVE
    property hs_partitioning : Win32cr::Graphics::Direct3D::D3D_TESSELLATOR_PARTITIONING
    property tessellator_domain : Win32cr::Graphics::Direct3D::D3D_TESSELLATOR_DOMAIN
    property cBarrierInstructions : UInt32
    property cInterlockedInstructions : UInt32
    property cTextureStoreInstructions : UInt32
    def initialize(@version : UInt32, @creator : Win32cr::Foundation::PSTR, @flags : UInt32, @constant_buffers : UInt32, @bound_resources : UInt32, @input_parameters : UInt32, @output_parameters : UInt32, @instruction_count : UInt32, @temp_register_count : UInt32, @temp_array_count : UInt32, @def_count : UInt32, @dcl_count : UInt32, @texture_normal_instructions : UInt32, @texture_load_instructions : UInt32, @texture_comp_instructions : UInt32, @texture_bias_instructions : UInt32, @texture_gradient_instructions : UInt32, @float_instruction_count : UInt32, @int_instruction_count : UInt32, @uint_instruction_count : UInt32, @static_flow_control_count : UInt32, @dynamic_flow_control_count : UInt32, @macro_instruction_count : UInt32, @array_instruction_count : UInt32, @cut_instruction_count : UInt32, @emit_instruction_count : UInt32, @gs_output_topology : Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY, @gs_max_output_vertex_count : UInt32, @input_primitive : Win32cr::Graphics::Direct3D::D3D_PRIMITIVE, @patch_constant_parameters : UInt32, @cGSInstanceCount : UInt32, @cControlPoints : UInt32, @hs_output_primitive : Win32cr::Graphics::Direct3D::D3D_TESSELLATOR_OUTPUT_PRIMITIVE, @hs_partitioning : Win32cr::Graphics::Direct3D::D3D_TESSELLATOR_PARTITIONING, @tessellator_domain : Win32cr::Graphics::Direct3D::D3D_TESSELLATOR_DOMAIN, @cBarrierInstructions : UInt32, @cInterlockedInstructions : UInt32, @cTextureStoreInstructions : UInt32)
    end
  end

  @[Extern]
  struct D3D12_SHADER_INPUT_BIND_DESC
    property name : Win32cr::Foundation::PSTR
    property type__ : Win32cr::Graphics::Direct3D::D3D_SHADER_INPUT_TYPE
    property bind_point : UInt32
    property bind_count : UInt32
    property uFlags : UInt32
    property return_type : Win32cr::Graphics::Direct3D::D3D_RESOURCE_RETURN_TYPE
    property dimension : Win32cr::Graphics::Direct3D::D3D_SRV_DIMENSION
    property num_samples : UInt32
    property space : UInt32
    property uID : UInt32
    def initialize(@name : Win32cr::Foundation::PSTR, @type__ : Win32cr::Graphics::Direct3D::D3D_SHADER_INPUT_TYPE, @bind_point : UInt32, @bind_count : UInt32, @uFlags : UInt32, @return_type : Win32cr::Graphics::Direct3D::D3D_RESOURCE_RETURN_TYPE, @dimension : Win32cr::Graphics::Direct3D::D3D_SRV_DIMENSION, @num_samples : UInt32, @space : UInt32, @uID : UInt32)
    end
  end

  @[Extern]
  struct D3D12_LIBRARY_DESC
    property creator : Win32cr::Foundation::PSTR
    property flags : UInt32
    property function_count : UInt32
    def initialize(@creator : Win32cr::Foundation::PSTR, @flags : UInt32, @function_count : UInt32)
    end
  end

  @[Extern]
  struct D3D12_FUNCTION_DESC
    property version : UInt32
    property creator : Win32cr::Foundation::PSTR
    property flags : UInt32
    property constant_buffers : UInt32
    property bound_resources : UInt32
    property instruction_count : UInt32
    property temp_register_count : UInt32
    property temp_array_count : UInt32
    property def_count : UInt32
    property dcl_count : UInt32
    property texture_normal_instructions : UInt32
    property texture_load_instructions : UInt32
    property texture_comp_instructions : UInt32
    property texture_bias_instructions : UInt32
    property texture_gradient_instructions : UInt32
    property float_instruction_count : UInt32
    property int_instruction_count : UInt32
    property uint_instruction_count : UInt32
    property static_flow_control_count : UInt32
    property dynamic_flow_control_count : UInt32
    property macro_instruction_count : UInt32
    property array_instruction_count : UInt32
    property mov_instruction_count : UInt32
    property movc_instruction_count : UInt32
    property conversion_instruction_count : UInt32
    property bitwise_instruction_count : UInt32
    property min_feature_level : Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL
    property required_feature_flags : UInt64
    property name : Win32cr::Foundation::PSTR
    property function_parameter_count : Int32
    property has_return : Win32cr::Foundation::BOOL
    property has10_level9_vertex_shader : Win32cr::Foundation::BOOL
    property has10_level9_pixel_shader : Win32cr::Foundation::BOOL
    def initialize(@version : UInt32, @creator : Win32cr::Foundation::PSTR, @flags : UInt32, @constant_buffers : UInt32, @bound_resources : UInt32, @instruction_count : UInt32, @temp_register_count : UInt32, @temp_array_count : UInt32, @def_count : UInt32, @dcl_count : UInt32, @texture_normal_instructions : UInt32, @texture_load_instructions : UInt32, @texture_comp_instructions : UInt32, @texture_bias_instructions : UInt32, @texture_gradient_instructions : UInt32, @float_instruction_count : UInt32, @int_instruction_count : UInt32, @uint_instruction_count : UInt32, @static_flow_control_count : UInt32, @dynamic_flow_control_count : UInt32, @macro_instruction_count : UInt32, @array_instruction_count : UInt32, @mov_instruction_count : UInt32, @movc_instruction_count : UInt32, @conversion_instruction_count : UInt32, @bitwise_instruction_count : UInt32, @min_feature_level : Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL, @required_feature_flags : UInt64, @name : Win32cr::Foundation::PSTR, @function_parameter_count : Int32, @has_return : Win32cr::Foundation::BOOL, @has10_level9_vertex_shader : Win32cr::Foundation::BOOL, @has10_level9_pixel_shader : Win32cr::Foundation::BOOL)
    end
  end

  @[Extern]
  struct D3D12_PARAMETER_DESC
    property name : Win32cr::Foundation::PSTR
    property semantic_name : Win32cr::Foundation::PSTR
    property type__ : Win32cr::Graphics::Direct3D::D3D_SHADER_VARIABLE_TYPE
    property class__ : Win32cr::Graphics::Direct3D::D3D_SHADER_VARIABLE_CLASS
    property rows : UInt32
    property columns : UInt32
    property interpolation_mode : Win32cr::Graphics::Direct3D::D3D_INTERPOLATION_MODE
    property flags : Win32cr::Graphics::Direct3D::D3D_PARAMETER_FLAGS
    property first_in_register : UInt32
    property first_in_component : UInt32
    property first_out_register : UInt32
    property first_out_component : UInt32
    def initialize(@name : Win32cr::Foundation::PSTR, @semantic_name : Win32cr::Foundation::PSTR, @type__ : Win32cr::Graphics::Direct3D::D3D_SHADER_VARIABLE_TYPE, @class__ : Win32cr::Graphics::Direct3D::D3D_SHADER_VARIABLE_CLASS, @rows : UInt32, @columns : UInt32, @interpolation_mode : Win32cr::Graphics::Direct3D::D3D_INTERPOLATION_MODE, @flags : Win32cr::Graphics::Direct3D::D3D_PARAMETER_FLAGS, @first_in_register : UInt32, @first_in_component : UInt32, @first_out_register : UInt32, @first_out_component : UInt32)
    end
  end

  @[Extern]
  record ID3D12ObjectVtbl,
    query_interface : Proc(ID3D12Object*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Object*, UInt32),
    release : Proc(ID3D12Object*, UInt32),
    get_private_data : Proc(ID3D12Object*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12Object*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12Object*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12Object*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12Object, lpVtbl : ID3D12ObjectVtbl* do
    GUID = LibC::GUID.new(0xc4fec28f_u32, 0x7966_u16, 0x4e95_u16, StaticArray[0x9f_u8, 0x94_u8, 0xf4_u8, 0x31_u8, 0xcb_u8, 0x56_u8, 0xc3_u8, 0xb8_u8])
    def query_interface(this : ID3D12Object*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Object*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Object*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12Object*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12Object*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12Object*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12Object*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end

  end

  @[Extern]
  record ID3D12DeviceChildVtbl,
    query_interface : Proc(ID3D12DeviceChild*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12DeviceChild*, UInt32),
    release : Proc(ID3D12DeviceChild*, UInt32),
    get_private_data : Proc(ID3D12DeviceChild*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12DeviceChild*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12DeviceChild*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12DeviceChild*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12DeviceChild*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12DeviceChild, lpVtbl : ID3D12DeviceChildVtbl* do
    GUID = LibC::GUID.new(0x905db94b_u32, 0xa00c_u16, 0x4140_u16, StaticArray[0x9d_u8, 0xf5_u8, 0x2b_u8, 0x64_u8, 0xca_u8, 0x9e_u8, 0xa3_u8, 0x57_u8])
    def query_interface(this : ID3D12DeviceChild*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12DeviceChild*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12DeviceChild*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12DeviceChild*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12DeviceChild*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12DeviceChild*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12DeviceChild*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12DeviceChild*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end

  end

  @[Extern]
  record ID3D12RootSignatureVtbl,
    query_interface : Proc(ID3D12RootSignature*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12RootSignature*, UInt32),
    release : Proc(ID3D12RootSignature*, UInt32),
    get_private_data : Proc(ID3D12RootSignature*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12RootSignature*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12RootSignature*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12RootSignature*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12RootSignature*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12RootSignature, lpVtbl : ID3D12RootSignatureVtbl* do
    GUID = LibC::GUID.new(0xc54a6b66_u32, 0x72df_u16, 0x4ee8_u16, StaticArray[0x8b_u8, 0xe5_u8, 0xa9_u8, 0x46_u8, 0xa1_u8, 0x42_u8, 0x92_u8, 0x14_u8])
    def query_interface(this : ID3D12RootSignature*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12RootSignature*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12RootSignature*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12RootSignature*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12RootSignature*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12RootSignature*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12RootSignature*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12RootSignature*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end

  end

  @[Extern]
  record ID3D12RootSignatureDeserializerVtbl,
    query_interface : Proc(ID3D12RootSignatureDeserializer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12RootSignatureDeserializer*, UInt32),
    release : Proc(ID3D12RootSignatureDeserializer*, UInt32),
    get_root_signature_desc : Proc(ID3D12RootSignatureDeserializer*, Win32cr::Graphics::Direct3D12::D3D12_ROOT_SIGNATURE_DESC*)


  @[Extern]
  record ID3D12RootSignatureDeserializer, lpVtbl : ID3D12RootSignatureDeserializerVtbl* do
    GUID = LibC::GUID.new(0x34ab647b_u32, 0x3cc8_u16, 0x46ac_u16, StaticArray[0x84_u8, 0x1b_u8, 0xc0_u8, 0x96_u8, 0x56_u8, 0x45_u8, 0xc0_u8, 0x46_u8])
    def query_interface(this : ID3D12RootSignatureDeserializer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12RootSignatureDeserializer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12RootSignatureDeserializer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_root_signature_desc(this : ID3D12RootSignatureDeserializer*) : Win32cr::Graphics::Direct3D12::D3D12_ROOT_SIGNATURE_DESC*
      @lpVtbl.try &.value.get_root_signature_desc.call(this)
    end

  end

  @[Extern]
  record ID3D12VersionedRootSignatureDeserializerVtbl,
    query_interface : Proc(ID3D12VersionedRootSignatureDeserializer*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12VersionedRootSignatureDeserializer*, UInt32),
    release : Proc(ID3D12VersionedRootSignatureDeserializer*, UInt32),
    get_root_signature_desc_at_version : Proc(ID3D12VersionedRootSignatureDeserializer*, Win32cr::Graphics::Direct3D12::D3D_ROOT_SIGNATURE_VERSION, Win32cr::Graphics::Direct3D12::D3D12_VERSIONED_ROOT_SIGNATURE_DESC**, Win32cr::Foundation::HRESULT),
    get_unconverted_root_signature_desc : Proc(ID3D12VersionedRootSignatureDeserializer*, Win32cr::Graphics::Direct3D12::D3D12_VERSIONED_ROOT_SIGNATURE_DESC*)


  @[Extern]
  record ID3D12VersionedRootSignatureDeserializer, lpVtbl : ID3D12VersionedRootSignatureDeserializerVtbl* do
    GUID = LibC::GUID.new(0x7f91ce67_u32, 0x90c_u16, 0x4bb7_u16, StaticArray[0xb7_u8, 0x8e_u8, 0xed_u8, 0x8f_u8, 0xf2_u8, 0xe3_u8, 0x1d_u8, 0xa0_u8])
    def query_interface(this : ID3D12VersionedRootSignatureDeserializer*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12VersionedRootSignatureDeserializer*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12VersionedRootSignatureDeserializer*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_root_signature_desc_at_version(this : ID3D12VersionedRootSignatureDeserializer*, convertToVersion : Win32cr::Graphics::Direct3D12::D3D_ROOT_SIGNATURE_VERSION, ppDesc : Win32cr::Graphics::Direct3D12::D3D12_VERSIONED_ROOT_SIGNATURE_DESC**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_root_signature_desc_at_version.call(this, convertToVersion, ppDesc)
    end
    def get_unconverted_root_signature_desc(this : ID3D12VersionedRootSignatureDeserializer*) : Win32cr::Graphics::Direct3D12::D3D12_VERSIONED_ROOT_SIGNATURE_DESC*
      @lpVtbl.try &.value.get_unconverted_root_signature_desc.call(this)
    end

  end

  @[Extern]
  record ID3D12PageableVtbl,
    query_interface : Proc(ID3D12Pageable*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Pageable*, UInt32),
    release : Proc(ID3D12Pageable*, UInt32),
    get_private_data : Proc(ID3D12Pageable*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12Pageable*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12Pageable*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12Pageable*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12Pageable*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12Pageable, lpVtbl : ID3D12PageableVtbl* do
    GUID = LibC::GUID.new(0x63ee58fb_u32, 0x1268_u16, 0x4835_u16, StaticArray[0x86_u8, 0xda_u8, 0xf0_u8, 0x8_u8, 0xce_u8, 0x62_u8, 0xf0_u8, 0xd6_u8])
    def query_interface(this : ID3D12Pageable*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Pageable*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Pageable*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12Pageable*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12Pageable*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12Pageable*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12Pageable*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12Pageable*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end

  end

  @[Extern]
  record ID3D12HeapVtbl,
    query_interface : Proc(ID3D12Heap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Heap*, UInt32),
    release : Proc(ID3D12Heap*, UInt32),
    get_private_data : Proc(ID3D12Heap*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12Heap*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12Heap*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12Heap*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12Heap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_desc : Proc(ID3D12Heap*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC)


  @[Extern]
  record ID3D12Heap, lpVtbl : ID3D12HeapVtbl* do
    GUID = LibC::GUID.new(0x6b3b2502_u32, 0x6e51_u16, 0x45b3_u16, StaticArray[0x90_u8, 0xee_u8, 0x98_u8, 0x84_u8, 0x26_u8, 0x5e_u8, 0x8d_u8, 0xf3_u8])
    def query_interface(this : ID3D12Heap*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Heap*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Heap*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12Heap*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12Heap*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12Heap*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12Heap*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12Heap*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_desc(this : ID3D12Heap*) : Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC
      @lpVtbl.try &.value.get_desc.call(this)
    end

  end

  @[Extern]
  record ID3D12ResourceVtbl,
    query_interface : Proc(ID3D12Resource*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Resource*, UInt32),
    release : Proc(ID3D12Resource*, UInt32),
    get_private_data : Proc(ID3D12Resource*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12Resource*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12Resource*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12Resource*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12Resource*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    map : Proc(ID3D12Resource*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RANGE*, Void**, Win32cr::Foundation::HRESULT),
    unmap : Proc(ID3D12Resource*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RANGE*, Void),
    get_desc : Proc(ID3D12Resource*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC),
    get_gpu_virtual_address : Proc(ID3D12Resource*, UInt64),
    write_to_subresource : Proc(ID3D12Resource*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_BOX*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    read_from_subresource : Proc(ID3D12Resource*, Void*, UInt32, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_BOX*, Win32cr::Foundation::HRESULT),
    get_heap_properties : Proc(ID3D12Resource*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12Resource, lpVtbl : ID3D12ResourceVtbl* do
    GUID = LibC::GUID.new(0x696442be_u32, 0xa72e_u16, 0x4059_u16, StaticArray[0xbc_u8, 0x79_u8, 0x5b_u8, 0x5c_u8, 0x98_u8, 0x4_u8, 0xf_u8, 0xad_u8])
    def query_interface(this : ID3D12Resource*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Resource*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Resource*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12Resource*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12Resource*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12Resource*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12Resource*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12Resource*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def map(this : ID3D12Resource*, subresource : UInt32, pReadRange : Win32cr::Graphics::Direct3D12::D3D12_RANGE*, ppData : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map.call(this, subresource, pReadRange, ppData)
    end
    def unmap(this : ID3D12Resource*, subresource : UInt32, pWrittenRange : Win32cr::Graphics::Direct3D12::D3D12_RANGE*) : Void
      @lpVtbl.try &.value.unmap.call(this, subresource, pWrittenRange)
    end
    def get_desc(this : ID3D12Resource*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC
      @lpVtbl.try &.value.get_desc.call(this)
    end
    def get_gpu_virtual_address(this : ID3D12Resource*) : UInt64
      @lpVtbl.try &.value.get_gpu_virtual_address.call(this)
    end
    def write_to_subresource(this : ID3D12Resource*, dst_subresource : UInt32, pDstBox : Win32cr::Graphics::Direct3D12::D3D12_BOX*, pSrcData : Void*, src_row_pitch : UInt32, src_depth_pitch : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_to_subresource.call(this, dst_subresource, pDstBox, pSrcData, src_row_pitch, src_depth_pitch)
    end
    def read_from_subresource(this : ID3D12Resource*, pDstData : Void*, dst_row_pitch : UInt32, dst_depth_pitch : UInt32, src_subresource : UInt32, pSrcBox : Win32cr::Graphics::Direct3D12::D3D12_BOX*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_from_subresource.call(this, pDstData, dst_row_pitch, dst_depth_pitch, src_subresource, pSrcBox)
    end
    def get_heap_properties(this : ID3D12Resource*, pHeapProperties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, pHeapFlags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_heap_properties.call(this, pHeapProperties, pHeapFlags)
    end

  end

  @[Extern]
  record ID3D12CommandAllocatorVtbl,
    query_interface : Proc(ID3D12CommandAllocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12CommandAllocator*, UInt32),
    release : Proc(ID3D12CommandAllocator*, UInt32),
    get_private_data : Proc(ID3D12CommandAllocator*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12CommandAllocator*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12CommandAllocator*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12CommandAllocator*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12CommandAllocator*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    reset : Proc(ID3D12CommandAllocator*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12CommandAllocator, lpVtbl : ID3D12CommandAllocatorVtbl* do
    GUID = LibC::GUID.new(0x6102dee4_u32, 0xaf59_u16, 0x4b09_u16, StaticArray[0xb9_u8, 0x99_u8, 0xb4_u8, 0x4d_u8, 0x73_u8, 0xf0_u8, 0x9b_u8, 0x24_u8])
    def query_interface(this : ID3D12CommandAllocator*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12CommandAllocator*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12CommandAllocator*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12CommandAllocator*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12CommandAllocator*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12CommandAllocator*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12CommandAllocator*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12CommandAllocator*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def reset(this : ID3D12CommandAllocator*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this)
    end

  end

  @[Extern]
  record ID3D12FenceVtbl,
    query_interface : Proc(ID3D12Fence*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Fence*, UInt32),
    release : Proc(ID3D12Fence*, UInt32),
    get_private_data : Proc(ID3D12Fence*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12Fence*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12Fence*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12Fence*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12Fence*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_completed_value : Proc(ID3D12Fence*, UInt64),
    set_event_on_completion : Proc(ID3D12Fence*, UInt64, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    signal : Proc(ID3D12Fence*, UInt64, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12Fence, lpVtbl : ID3D12FenceVtbl* do
    GUID = LibC::GUID.new(0xa753dcf_u32, 0xc4d8_u16, 0x4b91_u16, StaticArray[0xad_u8, 0xf6_u8, 0xbe_u8, 0x5a_u8, 0x60_u8, 0xd9_u8, 0x5a_u8, 0x76_u8])
    def query_interface(this : ID3D12Fence*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Fence*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Fence*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12Fence*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12Fence*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12Fence*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12Fence*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12Fence*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_completed_value(this : ID3D12Fence*) : UInt64
      @lpVtbl.try &.value.get_completed_value.call(this)
    end
    def set_event_on_completion(this : ID3D12Fence*, value : UInt64, hEvent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_on_completion.call(this, value, hEvent)
    end
    def signal(this : ID3D12Fence*, value : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.signal.call(this, value)
    end

  end

  @[Extern]
  record ID3D12Fence1Vtbl,
    query_interface : Proc(ID3D12Fence1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Fence1*, UInt32),
    release : Proc(ID3D12Fence1*, UInt32),
    get_private_data : Proc(ID3D12Fence1*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12Fence1*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12Fence1*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12Fence1*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12Fence1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_completed_value : Proc(ID3D12Fence1*, UInt64),
    set_event_on_completion : Proc(ID3D12Fence1*, UInt64, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    signal : Proc(ID3D12Fence1*, UInt64, Win32cr::Foundation::HRESULT),
    get_creation_flags : Proc(ID3D12Fence1*, Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS)


  @[Extern]
  record ID3D12Fence1, lpVtbl : ID3D12Fence1Vtbl* do
    GUID = LibC::GUID.new(0x433685fe_u32, 0xe22b_u16, 0x4ca0_u16, StaticArray[0xa8_u8, 0xdb_u8, 0xb5_u8, 0xb4_u8, 0xf4_u8, 0xdd_u8, 0xe_u8, 0x4a_u8])
    def query_interface(this : ID3D12Fence1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Fence1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Fence1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12Fence1*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12Fence1*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12Fence1*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12Fence1*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12Fence1*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_completed_value(this : ID3D12Fence1*) : UInt64
      @lpVtbl.try &.value.get_completed_value.call(this)
    end
    def set_event_on_completion(this : ID3D12Fence1*, value : UInt64, hEvent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_on_completion.call(this, value, hEvent)
    end
    def signal(this : ID3D12Fence1*, value : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.signal.call(this, value)
    end
    def get_creation_flags(this : ID3D12Fence1*) : Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS
      @lpVtbl.try &.value.get_creation_flags.call(this)
    end

  end

  @[Extern]
  record ID3D12PipelineStateVtbl,
    query_interface : Proc(ID3D12PipelineState*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12PipelineState*, UInt32),
    release : Proc(ID3D12PipelineState*, UInt32),
    get_private_data : Proc(ID3D12PipelineState*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12PipelineState*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12PipelineState*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12PipelineState*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12PipelineState*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_cached_blob : Proc(ID3D12PipelineState*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12PipelineState, lpVtbl : ID3D12PipelineStateVtbl* do
    GUID = LibC::GUID.new(0x765a30f3_u32, 0xf624_u16, 0x4c6f_u16, StaticArray[0xa8_u8, 0x28_u8, 0xac_u8, 0xe9_u8, 0x48_u8, 0x62_u8, 0x24_u8, 0x45_u8])
    def query_interface(this : ID3D12PipelineState*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12PipelineState*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12PipelineState*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12PipelineState*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12PipelineState*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12PipelineState*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12PipelineState*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12PipelineState*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_cached_blob(this : ID3D12PipelineState*, ppBlob : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_cached_blob.call(this, ppBlob)
    end

  end

  @[Extern]
  record ID3D12DescriptorHeapVtbl,
    query_interface : Proc(ID3D12DescriptorHeap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12DescriptorHeap*, UInt32),
    release : Proc(ID3D12DescriptorHeap*, UInt32),
    get_private_data : Proc(ID3D12DescriptorHeap*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12DescriptorHeap*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12DescriptorHeap*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12DescriptorHeap*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12DescriptorHeap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_desc : Proc(ID3D12DescriptorHeap*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC),
    get_cpu_descriptor_handle_for_heap_start : Proc(ID3D12DescriptorHeap*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE),
    get_gpu_descriptor_handle_for_heap_start : Proc(ID3D12DescriptorHeap*, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE)


  @[Extern]
  record ID3D12DescriptorHeap, lpVtbl : ID3D12DescriptorHeapVtbl* do
    GUID = LibC::GUID.new(0x8efb471d_u32, 0x616c_u16, 0x4f49_u16, StaticArray[0x90_u8, 0xf7_u8, 0x12_u8, 0x7b_u8, 0xb7_u8, 0x63_u8, 0xfa_u8, 0x51_u8])
    def query_interface(this : ID3D12DescriptorHeap*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12DescriptorHeap*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12DescriptorHeap*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12DescriptorHeap*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12DescriptorHeap*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12DescriptorHeap*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12DescriptorHeap*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12DescriptorHeap*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_desc(this : ID3D12DescriptorHeap*) : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC
      @lpVtbl.try &.value.get_desc.call(this)
    end
    def get_cpu_descriptor_handle_for_heap_start(this : ID3D12DescriptorHeap*) : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE
      @lpVtbl.try &.value.get_cpu_descriptor_handle_for_heap_start.call(this)
    end
    def get_gpu_descriptor_handle_for_heap_start(this : ID3D12DescriptorHeap*) : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE
      @lpVtbl.try &.value.get_gpu_descriptor_handle_for_heap_start.call(this)
    end

  end

  @[Extern]
  record ID3D12QueryHeapVtbl,
    query_interface : Proc(ID3D12QueryHeap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12QueryHeap*, UInt32),
    release : Proc(ID3D12QueryHeap*, UInt32),
    get_private_data : Proc(ID3D12QueryHeap*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12QueryHeap*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12QueryHeap*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12QueryHeap*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12QueryHeap*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12QueryHeap, lpVtbl : ID3D12QueryHeapVtbl* do
    GUID = LibC::GUID.new(0xd9658ae_u32, 0xed45_u16, 0x469e_u16, StaticArray[0xa6_u8, 0x1d_u8, 0x97_u8, 0xe_u8, 0xc5_u8, 0x83_u8, 0xca_u8, 0xb4_u8])
    def query_interface(this : ID3D12QueryHeap*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12QueryHeap*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12QueryHeap*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12QueryHeap*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12QueryHeap*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12QueryHeap*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12QueryHeap*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12QueryHeap*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end

  end

  @[Extern]
  record ID3D12CommandSignatureVtbl,
    query_interface : Proc(ID3D12CommandSignature*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12CommandSignature*, UInt32),
    release : Proc(ID3D12CommandSignature*, UInt32),
    get_private_data : Proc(ID3D12CommandSignature*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12CommandSignature*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12CommandSignature*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12CommandSignature*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12CommandSignature*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12CommandSignature, lpVtbl : ID3D12CommandSignatureVtbl* do
    GUID = LibC::GUID.new(0xc36a797c_u32, 0xec80_u16, 0x4f0a_u16, StaticArray[0x89_u8, 0x85_u8, 0xa7_u8, 0xb2_u8, 0x47_u8, 0x50_u8, 0x82_u8, 0xd1_u8])
    def query_interface(this : ID3D12CommandSignature*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12CommandSignature*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12CommandSignature*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12CommandSignature*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12CommandSignature*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12CommandSignature*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12CommandSignature*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12CommandSignature*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end

  end

  @[Extern]
  record ID3D12CommandListVtbl,
    query_interface : Proc(ID3D12CommandList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12CommandList*, UInt32),
    release : Proc(ID3D12CommandList*, UInt32),
    get_private_data : Proc(ID3D12CommandList*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12CommandList*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12CommandList*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12CommandList*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12CommandList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D12CommandList*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE)


  @[Extern]
  record ID3D12CommandList, lpVtbl : ID3D12CommandListVtbl* do
    GUID = LibC::GUID.new(0x7116d91c_u32, 0xe7e4_u16, 0x47ce_u16, StaticArray[0xb8_u8, 0xc6_u8, 0xec_u8, 0x81_u8, 0x68_u8, 0xf4_u8, 0x37_u8, 0xe5_u8])
    def query_interface(this : ID3D12CommandList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12CommandList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12CommandList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12CommandList*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12CommandList*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12CommandList*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12CommandList*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12CommandList*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_type(this : ID3D12CommandList*) : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE
      @lpVtbl.try &.value.get_type.call(this)
    end

  end

  @[Extern]
  record ID3D12GraphicsCommandListVtbl,
    query_interface : Proc(ID3D12GraphicsCommandList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12GraphicsCommandList*, UInt32),
    release : Proc(ID3D12GraphicsCommandList*, UInt32),
    get_private_data : Proc(ID3D12GraphicsCommandList*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12GraphicsCommandList*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12GraphicsCommandList*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12GraphicsCommandList*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12GraphicsCommandList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D12GraphicsCommandList*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE),
    close : Proc(ID3D12GraphicsCommandList*, Win32cr::Foundation::HRESULT),
    reset : Proc(ID3D12GraphicsCommandList*, Void*, Void*, Win32cr::Foundation::HRESULT),
    clear_state : Proc(ID3D12GraphicsCommandList*, Void*, Void),
    draw_instanced : Proc(ID3D12GraphicsCommandList*, UInt32, UInt32, UInt32, UInt32, Void),
    draw_indexed_instanced : Proc(ID3D12GraphicsCommandList*, UInt32, UInt32, UInt32, Int32, UInt32, Void),
    dispatch : Proc(ID3D12GraphicsCommandList*, UInt32, UInt32, UInt32, Void),
    copy_buffer_region : Proc(ID3D12GraphicsCommandList*, Void*, UInt64, Void*, UInt64, UInt64, Void),
    copy_texture_region : Proc(ID3D12GraphicsCommandList*, Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, UInt32, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, Win32cr::Graphics::Direct3D12::D3D12_BOX*, Void),
    copy_resource : Proc(ID3D12GraphicsCommandList*, Void*, Void*, Void),
    copy_tiles : Proc(ID3D12GraphicsCommandList*, Void*, Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCE_COORDINATE*, Win32cr::Graphics::Direct3D12::D3D12_TILE_REGION_SIZE*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_TILE_COPY_FLAGS, Void),
    resolve_subresource : Proc(ID3D12GraphicsCommandList*, Void*, UInt32, Void*, UInt32, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Void),
    ia_set_primitive_topology : Proc(ID3D12GraphicsCommandList*, Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY, Void),
    rs_set_viewports : Proc(ID3D12GraphicsCommandList*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_VIEWPORT*, Void),
    rs_set_scissor_rects : Proc(ID3D12GraphicsCommandList*, UInt32, Win32cr::Foundation::RECT*, Void),
    om_set_blend_factor : Proc(ID3D12GraphicsCommandList*, Float32*, Void),
    om_set_stencil_ref : Proc(ID3D12GraphicsCommandList*, UInt32, Void),
    set_pipeline_state : Proc(ID3D12GraphicsCommandList*, Void*, Void),
    resource_barrier : Proc(ID3D12GraphicsCommandList*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*, Void),
    execute_bundle : Proc(ID3D12GraphicsCommandList*, Void*, Void),
    set_descriptor_heaps : Proc(ID3D12GraphicsCommandList*, UInt32, Void**, Void),
    set_compute_root_signature : Proc(ID3D12GraphicsCommandList*, Void*, Void),
    set_graphics_root_signature : Proc(ID3D12GraphicsCommandList*, Void*, Void),
    set_compute_root_descriptor_table : Proc(ID3D12GraphicsCommandList*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Void),
    set_graphics_root_descriptor_table : Proc(ID3D12GraphicsCommandList*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Void),
    set_compute_root32_bit_constant : Proc(ID3D12GraphicsCommandList*, UInt32, UInt32, UInt32, Void),
    set_graphics_root32_bit_constant : Proc(ID3D12GraphicsCommandList*, UInt32, UInt32, UInt32, Void),
    set_compute_root32_bit_constants : Proc(ID3D12GraphicsCommandList*, UInt32, UInt32, Void*, UInt32, Void),
    set_graphics_root32_bit_constants : Proc(ID3D12GraphicsCommandList*, UInt32, UInt32, Void*, UInt32, Void),
    set_compute_root_constant_buffer_view : Proc(ID3D12GraphicsCommandList*, UInt32, UInt64, Void),
    set_graphics_root_constant_buffer_view : Proc(ID3D12GraphicsCommandList*, UInt32, UInt64, Void),
    set_compute_root_shader_resource_view : Proc(ID3D12GraphicsCommandList*, UInt32, UInt64, Void),
    set_graphics_root_shader_resource_view : Proc(ID3D12GraphicsCommandList*, UInt32, UInt64, Void),
    set_compute_root_unordered_access_view : Proc(ID3D12GraphicsCommandList*, UInt32, UInt64, Void),
    set_graphics_root_unordered_access_view : Proc(ID3D12GraphicsCommandList*, UInt32, UInt64, Void),
    ia_set_index_buffer : Proc(ID3D12GraphicsCommandList*, Win32cr::Graphics::Direct3D12::D3D12_INDEX_BUFFER_VIEW*, Void),
    ia_set_vertex_buffers : Proc(ID3D12GraphicsCommandList*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_VERTEX_BUFFER_VIEW*, Void),
    so_set_targets : Proc(ID3D12GraphicsCommandList*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_STREAM_OUTPUT_BUFFER_VIEW*, Void),
    om_set_render_targets : Proc(ID3D12GraphicsCommandList*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, Win32cr::Foundation::BOOL, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, Void),
    clear_depth_stencil_view : Proc(ID3D12GraphicsCommandList*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_FLAGS, Float32, UInt8, UInt32, Win32cr::Foundation::RECT*, Void),
    clear_render_target_view : Proc(ID3D12GraphicsCommandList*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Float32*, UInt32, Win32cr::Foundation::RECT*, Void),
    clear_unordered_access_view_uint : Proc(ID3D12GraphicsCommandList*, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void*, UInt32*, UInt32, Win32cr::Foundation::RECT*, Void),
    clear_unordered_access_view_float : Proc(ID3D12GraphicsCommandList*, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void*, Float32*, UInt32, Win32cr::Foundation::RECT*, Void),
    discard_resource : Proc(ID3D12GraphicsCommandList*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*, Void),
    begin_query : Proc(ID3D12GraphicsCommandList*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    end_query : Proc(ID3D12GraphicsCommandList*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    resolve_query_data : Proc(ID3D12GraphicsCommandList*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, UInt32, Void*, UInt64, Void),
    set_predication : Proc(ID3D12GraphicsCommandList*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP, Void),
    set_marker : Proc(ID3D12GraphicsCommandList*, UInt32, Void*, UInt32, Void),
    begin_event : Proc(ID3D12GraphicsCommandList*, UInt32, Void*, UInt32, Void),
    end_event : Proc(ID3D12GraphicsCommandList*, Void),
    execute_indirect : Proc(ID3D12GraphicsCommandList*, Void*, UInt32, Void*, UInt64, Void*, UInt64, Void)


  @[Extern]
  record ID3D12GraphicsCommandList, lpVtbl : ID3D12GraphicsCommandListVtbl* do
    GUID = LibC::GUID.new(0x5b160d0f_u32, 0xac1b_u16, 0x4185_u16, StaticArray[0x8b_u8, 0xa8_u8, 0xb3_u8, 0xae_u8, 0x42_u8, 0xa5_u8, 0xa4_u8, 0x55_u8])
    def query_interface(this : ID3D12GraphicsCommandList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12GraphicsCommandList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12GraphicsCommandList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12GraphicsCommandList*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12GraphicsCommandList*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12GraphicsCommandList*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12GraphicsCommandList*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12GraphicsCommandList*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_type(this : ID3D12GraphicsCommandList*) : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def close(this : ID3D12GraphicsCommandList*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def reset(this : ID3D12GraphicsCommandList*, pAllocator : Void*, pInitialState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, pAllocator, pInitialState)
    end
    def clear_state(this : ID3D12GraphicsCommandList*, pPipelineState : Void*) : Void
      @lpVtbl.try &.value.clear_state.call(this, pPipelineState)
    end
    def draw_instanced(this : ID3D12GraphicsCommandList*, vertex_count_per_instance : UInt32, instance_count : UInt32, start_vertex_location : UInt32, start_instance_location : UInt32) : Void
      @lpVtbl.try &.value.draw_instanced.call(this, vertex_count_per_instance, instance_count, start_vertex_location, start_instance_location)
    end
    def draw_indexed_instanced(this : ID3D12GraphicsCommandList*, index_count_per_instance : UInt32, instance_count : UInt32, start_index_location : UInt32, base_vertex_location : Int32, start_instance_location : UInt32) : Void
      @lpVtbl.try &.value.draw_indexed_instanced.call(this, index_count_per_instance, instance_count, start_index_location, base_vertex_location, start_instance_location)
    end
    def dispatch(this : ID3D12GraphicsCommandList*, thread_group_count_x : UInt32, thread_group_count_y : UInt32, thread_group_count_z : UInt32) : Void
      @lpVtbl.try &.value.dispatch.call(this, thread_group_count_x, thread_group_count_y, thread_group_count_z)
    end
    def copy_buffer_region(this : ID3D12GraphicsCommandList*, pDstBuffer : Void*, dst_offset : UInt64, pSrcBuffer : Void*, src_offset : UInt64, num_bytes : UInt64) : Void
      @lpVtbl.try &.value.copy_buffer_region.call(this, pDstBuffer, dst_offset, pSrcBuffer, src_offset, num_bytes)
    end
    def copy_texture_region(this : ID3D12GraphicsCommandList*, pDst : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, dst_x : UInt32, dst_y : UInt32, dst_z : UInt32, pSrc : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, pSrcBox : Win32cr::Graphics::Direct3D12::D3D12_BOX*) : Void
      @lpVtbl.try &.value.copy_texture_region.call(this, pDst, dst_x, dst_y, dst_z, pSrc, pSrcBox)
    end
    def copy_resource(this : ID3D12GraphicsCommandList*, pDstResource : Void*, pSrcResource : Void*) : Void
      @lpVtbl.try &.value.copy_resource.call(this, pDstResource, pSrcResource)
    end
    def copy_tiles(this : ID3D12GraphicsCommandList*, pTiledResource : Void*, pTileRegionStartCoordinate : Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCE_COORDINATE*, pTileRegionSize : Win32cr::Graphics::Direct3D12::D3D12_TILE_REGION_SIZE*, pBuffer : Void*, buffer_start_offset_in_bytes : UInt64, flags : Win32cr::Graphics::Direct3D12::D3D12_TILE_COPY_FLAGS) : Void
      @lpVtbl.try &.value.copy_tiles.call(this, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, buffer_start_offset_in_bytes, flags)
    end
    def resolve_subresource(this : ID3D12GraphicsCommandList*, pDstResource : Void*, dst_subresource : UInt32, pSrcResource : Void*, src_subresource : UInt32, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT) : Void
      @lpVtbl.try &.value.resolve_subresource.call(this, pDstResource, dst_subresource, pSrcResource, src_subresource, format)
    end
    def ia_set_primitive_topology(this : ID3D12GraphicsCommandList*, primitive_topology : Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY) : Void
      @lpVtbl.try &.value.ia_set_primitive_topology.call(this, primitive_topology)
    end
    def rs_set_viewports(this : ID3D12GraphicsCommandList*, num_viewports : UInt32, pViewports : Win32cr::Graphics::Direct3D12::D3D12_VIEWPORT*) : Void
      @lpVtbl.try &.value.rs_set_viewports.call(this, num_viewports, pViewports)
    end
    def rs_set_scissor_rects(this : ID3D12GraphicsCommandList*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.rs_set_scissor_rects.call(this, num_rects, pRects)
    end
    def om_set_blend_factor(this : ID3D12GraphicsCommandList*, blend_factor : Float32*) : Void
      @lpVtbl.try &.value.om_set_blend_factor.call(this, blend_factor)
    end
    def om_set_stencil_ref(this : ID3D12GraphicsCommandList*, stencil_ref : UInt32) : Void
      @lpVtbl.try &.value.om_set_stencil_ref.call(this, stencil_ref)
    end
    def set_pipeline_state(this : ID3D12GraphicsCommandList*, pPipelineState : Void*) : Void
      @lpVtbl.try &.value.set_pipeline_state.call(this, pPipelineState)
    end
    def resource_barrier(this : ID3D12GraphicsCommandList*, num_barriers : UInt32, pBarriers : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*) : Void
      @lpVtbl.try &.value.resource_barrier.call(this, num_barriers, pBarriers)
    end
    def execute_bundle(this : ID3D12GraphicsCommandList*, pCommandList : Void*) : Void
      @lpVtbl.try &.value.execute_bundle.call(this, pCommandList)
    end
    def set_descriptor_heaps(this : ID3D12GraphicsCommandList*, num_descriptor_heaps : UInt32, ppDescriptorHeaps : Void**) : Void
      @lpVtbl.try &.value.set_descriptor_heaps.call(this, num_descriptor_heaps, ppDescriptorHeaps)
    end
    def set_compute_root_signature(this : ID3D12GraphicsCommandList*, pRootSignature : Void*) : Void
      @lpVtbl.try &.value.set_compute_root_signature.call(this, pRootSignature)
    end
    def set_graphics_root_signature(this : ID3D12GraphicsCommandList*, pRootSignature : Void*) : Void
      @lpVtbl.try &.value.set_graphics_root_signature.call(this, pRootSignature)
    end
    def set_compute_root_descriptor_table(this : ID3D12GraphicsCommandList*, root_parameter_index : UInt32, base_descriptor : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.set_compute_root_descriptor_table.call(this, root_parameter_index, base_descriptor)
    end
    def set_graphics_root_descriptor_table(this : ID3D12GraphicsCommandList*, root_parameter_index : UInt32, base_descriptor : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.set_graphics_root_descriptor_table.call(this, root_parameter_index, base_descriptor)
    end
    def set_compute_root32_bit_constant(this : ID3D12GraphicsCommandList*, root_parameter_index : UInt32, src_data : UInt32, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_compute_root32_bit_constant.call(this, root_parameter_index, src_data, dest_offset_in32_bit_values)
    end
    def set_graphics_root32_bit_constant(this : ID3D12GraphicsCommandList*, root_parameter_index : UInt32, src_data : UInt32, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_graphics_root32_bit_constant.call(this, root_parameter_index, src_data, dest_offset_in32_bit_values)
    end
    def set_compute_root32_bit_constants(this : ID3D12GraphicsCommandList*, root_parameter_index : UInt32, num32_bit_values_to_set : UInt32, pSrcData : Void*, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_compute_root32_bit_constants.call(this, root_parameter_index, num32_bit_values_to_set, pSrcData, dest_offset_in32_bit_values)
    end
    def set_graphics_root32_bit_constants(this : ID3D12GraphicsCommandList*, root_parameter_index : UInt32, num32_bit_values_to_set : UInt32, pSrcData : Void*, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_graphics_root32_bit_constants.call(this, root_parameter_index, num32_bit_values_to_set, pSrcData, dest_offset_in32_bit_values)
    end
    def set_compute_root_constant_buffer_view(this : ID3D12GraphicsCommandList*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_compute_root_constant_buffer_view.call(this, root_parameter_index, buffer_location)
    end
    def set_graphics_root_constant_buffer_view(this : ID3D12GraphicsCommandList*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_graphics_root_constant_buffer_view.call(this, root_parameter_index, buffer_location)
    end
    def set_compute_root_shader_resource_view(this : ID3D12GraphicsCommandList*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_compute_root_shader_resource_view.call(this, root_parameter_index, buffer_location)
    end
    def set_graphics_root_shader_resource_view(this : ID3D12GraphicsCommandList*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_graphics_root_shader_resource_view.call(this, root_parameter_index, buffer_location)
    end
    def set_compute_root_unordered_access_view(this : ID3D12GraphicsCommandList*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_compute_root_unordered_access_view.call(this, root_parameter_index, buffer_location)
    end
    def set_graphics_root_unordered_access_view(this : ID3D12GraphicsCommandList*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_graphics_root_unordered_access_view.call(this, root_parameter_index, buffer_location)
    end
    def ia_set_index_buffer(this : ID3D12GraphicsCommandList*, pView : Win32cr::Graphics::Direct3D12::D3D12_INDEX_BUFFER_VIEW*) : Void
      @lpVtbl.try &.value.ia_set_index_buffer.call(this, pView)
    end
    def ia_set_vertex_buffers(this : ID3D12GraphicsCommandList*, start_slot : UInt32, num_views : UInt32, pViews : Win32cr::Graphics::Direct3D12::D3D12_VERTEX_BUFFER_VIEW*) : Void
      @lpVtbl.try &.value.ia_set_vertex_buffers.call(this, start_slot, num_views, pViews)
    end
    def so_set_targets(this : ID3D12GraphicsCommandList*, start_slot : UInt32, num_views : UInt32, pViews : Win32cr::Graphics::Direct3D12::D3D12_STREAM_OUTPUT_BUFFER_VIEW*) : Void
      @lpVtbl.try &.value.so_set_targets.call(this, start_slot, num_views, pViews)
    end
    def om_set_render_targets(this : ID3D12GraphicsCommandList*, num_render_target_descriptors : UInt32, pRenderTargetDescriptors : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, r_ts_single_handle_to_descriptor_range : Win32cr::Foundation::BOOL, pDepthStencilDescriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*) : Void
      @lpVtbl.try &.value.om_set_render_targets.call(this, num_render_target_descriptors, pRenderTargetDescriptors, r_ts_single_handle_to_descriptor_range, pDepthStencilDescriptor)
    end
    def clear_depth_stencil_view(this : ID3D12GraphicsCommandList*, depth_stencil_view : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, clear_flags : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_FLAGS, depth : Float32, stencil : UInt8, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_depth_stencil_view.call(this, depth_stencil_view, clear_flags, depth, stencil, num_rects, pRects)
    end
    def clear_render_target_view(this : ID3D12GraphicsCommandList*, render_target_view : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, color_rgba : Float32*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_render_target_view.call(this, render_target_view, color_rgba, num_rects, pRects)
    end
    def clear_unordered_access_view_uint(this : ID3D12GraphicsCommandList*, view_gpu_handle_in_current_heap : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, view_cpu_handle : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, pResource : Void*, values : UInt32*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_unordered_access_view_uint.call(this, view_gpu_handle_in_current_heap, view_cpu_handle, pResource, values, num_rects, pRects)
    end
    def clear_unordered_access_view_float(this : ID3D12GraphicsCommandList*, view_gpu_handle_in_current_heap : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, view_cpu_handle : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, pResource : Void*, values : Float32*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_unordered_access_view_float.call(this, view_gpu_handle_in_current_heap, view_cpu_handle, pResource, values, num_rects, pRects)
    end
    def discard_resource(this : ID3D12GraphicsCommandList*, pResource : Void*, pRegion : Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*) : Void
      @lpVtbl.try &.value.discard_resource.call(this, pResource, pRegion)
    end
    def begin_query(this : ID3D12GraphicsCommandList*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.begin_query.call(this, pQueryHeap, type__, index)
    end
    def end_query(this : ID3D12GraphicsCommandList*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.end_query.call(this, pQueryHeap, type__, index)
    end
    def resolve_query_data(this : ID3D12GraphicsCommandList*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, start_index : UInt32, num_queries : UInt32, pDestinationBuffer : Void*, aligned_destination_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.resolve_query_data.call(this, pQueryHeap, type__, start_index, num_queries, pDestinationBuffer, aligned_destination_buffer_offset)
    end
    def set_predication(this : ID3D12GraphicsCommandList*, pBuffer : Void*, aligned_buffer_offset : UInt64, operation : Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP) : Void
      @lpVtbl.try &.value.set_predication.call(this, pBuffer, aligned_buffer_offset, operation)
    end
    def set_marker(this : ID3D12GraphicsCommandList*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.set_marker.call(this, metadata, pData, size)
    end
    def begin_event(this : ID3D12GraphicsCommandList*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.begin_event.call(this, metadata, pData, size)
    end
    def end_event(this : ID3D12GraphicsCommandList*) : Void
      @lpVtbl.try &.value.end_event.call(this)
    end
    def execute_indirect(this : ID3D12GraphicsCommandList*, pCommandSignature : Void*, max_command_count : UInt32, pArgumentBuffer : Void*, argument_buffer_offset : UInt64, pCountBuffer : Void*, count_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.execute_indirect.call(this, pCommandSignature, max_command_count, pArgumentBuffer, argument_buffer_offset, pCountBuffer, count_buffer_offset)
    end

  end

  @[Extern]
  record ID3D12GraphicsCommandList1Vtbl,
    query_interface : Proc(ID3D12GraphicsCommandList1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12GraphicsCommandList1*, UInt32),
    release : Proc(ID3D12GraphicsCommandList1*, UInt32),
    get_private_data : Proc(ID3D12GraphicsCommandList1*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12GraphicsCommandList1*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12GraphicsCommandList1*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12GraphicsCommandList1*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12GraphicsCommandList1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D12GraphicsCommandList1*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE),
    close : Proc(ID3D12GraphicsCommandList1*, Win32cr::Foundation::HRESULT),
    reset : Proc(ID3D12GraphicsCommandList1*, Void*, Void*, Win32cr::Foundation::HRESULT),
    clear_state : Proc(ID3D12GraphicsCommandList1*, Void*, Void),
    draw_instanced : Proc(ID3D12GraphicsCommandList1*, UInt32, UInt32, UInt32, UInt32, Void),
    draw_indexed_instanced : Proc(ID3D12GraphicsCommandList1*, UInt32, UInt32, UInt32, Int32, UInt32, Void),
    dispatch : Proc(ID3D12GraphicsCommandList1*, UInt32, UInt32, UInt32, Void),
    copy_buffer_region : Proc(ID3D12GraphicsCommandList1*, Void*, UInt64, Void*, UInt64, UInt64, Void),
    copy_texture_region : Proc(ID3D12GraphicsCommandList1*, Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, UInt32, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, Win32cr::Graphics::Direct3D12::D3D12_BOX*, Void),
    copy_resource : Proc(ID3D12GraphicsCommandList1*, Void*, Void*, Void),
    copy_tiles : Proc(ID3D12GraphicsCommandList1*, Void*, Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCE_COORDINATE*, Win32cr::Graphics::Direct3D12::D3D12_TILE_REGION_SIZE*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_TILE_COPY_FLAGS, Void),
    resolve_subresource : Proc(ID3D12GraphicsCommandList1*, Void*, UInt32, Void*, UInt32, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Void),
    ia_set_primitive_topology : Proc(ID3D12GraphicsCommandList1*, Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY, Void),
    rs_set_viewports : Proc(ID3D12GraphicsCommandList1*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_VIEWPORT*, Void),
    rs_set_scissor_rects : Proc(ID3D12GraphicsCommandList1*, UInt32, Win32cr::Foundation::RECT*, Void),
    om_set_blend_factor : Proc(ID3D12GraphicsCommandList1*, Float32*, Void),
    om_set_stencil_ref : Proc(ID3D12GraphicsCommandList1*, UInt32, Void),
    set_pipeline_state : Proc(ID3D12GraphicsCommandList1*, Void*, Void),
    resource_barrier : Proc(ID3D12GraphicsCommandList1*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*, Void),
    execute_bundle : Proc(ID3D12GraphicsCommandList1*, Void*, Void),
    set_descriptor_heaps : Proc(ID3D12GraphicsCommandList1*, UInt32, Void**, Void),
    set_compute_root_signature : Proc(ID3D12GraphicsCommandList1*, Void*, Void),
    set_graphics_root_signature : Proc(ID3D12GraphicsCommandList1*, Void*, Void),
    set_compute_root_descriptor_table : Proc(ID3D12GraphicsCommandList1*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Void),
    set_graphics_root_descriptor_table : Proc(ID3D12GraphicsCommandList1*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Void),
    set_compute_root32_bit_constant : Proc(ID3D12GraphicsCommandList1*, UInt32, UInt32, UInt32, Void),
    set_graphics_root32_bit_constant : Proc(ID3D12GraphicsCommandList1*, UInt32, UInt32, UInt32, Void),
    set_compute_root32_bit_constants : Proc(ID3D12GraphicsCommandList1*, UInt32, UInt32, Void*, UInt32, Void),
    set_graphics_root32_bit_constants : Proc(ID3D12GraphicsCommandList1*, UInt32, UInt32, Void*, UInt32, Void),
    set_compute_root_constant_buffer_view : Proc(ID3D12GraphicsCommandList1*, UInt32, UInt64, Void),
    set_graphics_root_constant_buffer_view : Proc(ID3D12GraphicsCommandList1*, UInt32, UInt64, Void),
    set_compute_root_shader_resource_view : Proc(ID3D12GraphicsCommandList1*, UInt32, UInt64, Void),
    set_graphics_root_shader_resource_view : Proc(ID3D12GraphicsCommandList1*, UInt32, UInt64, Void),
    set_compute_root_unordered_access_view : Proc(ID3D12GraphicsCommandList1*, UInt32, UInt64, Void),
    set_graphics_root_unordered_access_view : Proc(ID3D12GraphicsCommandList1*, UInt32, UInt64, Void),
    ia_set_index_buffer : Proc(ID3D12GraphicsCommandList1*, Win32cr::Graphics::Direct3D12::D3D12_INDEX_BUFFER_VIEW*, Void),
    ia_set_vertex_buffers : Proc(ID3D12GraphicsCommandList1*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_VERTEX_BUFFER_VIEW*, Void),
    so_set_targets : Proc(ID3D12GraphicsCommandList1*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_STREAM_OUTPUT_BUFFER_VIEW*, Void),
    om_set_render_targets : Proc(ID3D12GraphicsCommandList1*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, Win32cr::Foundation::BOOL, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, Void),
    clear_depth_stencil_view : Proc(ID3D12GraphicsCommandList1*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_FLAGS, Float32, UInt8, UInt32, Win32cr::Foundation::RECT*, Void),
    clear_render_target_view : Proc(ID3D12GraphicsCommandList1*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Float32*, UInt32, Win32cr::Foundation::RECT*, Void),
    clear_unordered_access_view_uint : Proc(ID3D12GraphicsCommandList1*, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void*, UInt32*, UInt32, Win32cr::Foundation::RECT*, Void),
    clear_unordered_access_view_float : Proc(ID3D12GraphicsCommandList1*, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void*, Float32*, UInt32, Win32cr::Foundation::RECT*, Void),
    discard_resource : Proc(ID3D12GraphicsCommandList1*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*, Void),
    begin_query : Proc(ID3D12GraphicsCommandList1*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    end_query : Proc(ID3D12GraphicsCommandList1*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    resolve_query_data : Proc(ID3D12GraphicsCommandList1*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, UInt32, Void*, UInt64, Void),
    set_predication : Proc(ID3D12GraphicsCommandList1*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP, Void),
    set_marker : Proc(ID3D12GraphicsCommandList1*, UInt32, Void*, UInt32, Void),
    begin_event : Proc(ID3D12GraphicsCommandList1*, UInt32, Void*, UInt32, Void),
    end_event : Proc(ID3D12GraphicsCommandList1*, Void),
    execute_indirect : Proc(ID3D12GraphicsCommandList1*, Void*, UInt32, Void*, UInt64, Void*, UInt64, Void),
    atomic_copy_buffer_uint : Proc(ID3D12GraphicsCommandList1*, Void*, UInt64, Void*, UInt64, UInt32, Void**, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*, Void),
    atomic_copy_buffer_uint64 : Proc(ID3D12GraphicsCommandList1*, Void*, UInt64, Void*, UInt64, UInt32, Void**, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*, Void),
    om_set_depth_bounds : Proc(ID3D12GraphicsCommandList1*, Float32, Float32, Void),
    set_sample_positions : Proc(ID3D12GraphicsCommandList1*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_SAMPLE_POSITION*, Void),
    resolve_subresource_region : Proc(ID3D12GraphicsCommandList1*, Void*, UInt32, UInt32, UInt32, Void*, UInt32, Win32cr::Foundation::RECT*, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Win32cr::Graphics::Direct3D12::D3D12_RESOLVE_MODE, Void),
    set_view_instance_mask : Proc(ID3D12GraphicsCommandList1*, UInt32, Void)


  @[Extern]
  record ID3D12GraphicsCommandList1, lpVtbl : ID3D12GraphicsCommandList1Vtbl* do
    GUID = LibC::GUID.new(0x553103fb_u32, 0x1fe7_u16, 0x4557_u16, StaticArray[0xbb_u8, 0x38_u8, 0x94_u8, 0x6d_u8, 0x7d_u8, 0xe_u8, 0x7c_u8, 0xa7_u8])
    def query_interface(this : ID3D12GraphicsCommandList1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12GraphicsCommandList1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12GraphicsCommandList1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12GraphicsCommandList1*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12GraphicsCommandList1*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12GraphicsCommandList1*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12GraphicsCommandList1*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12GraphicsCommandList1*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_type(this : ID3D12GraphicsCommandList1*) : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def close(this : ID3D12GraphicsCommandList1*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def reset(this : ID3D12GraphicsCommandList1*, pAllocator : Void*, pInitialState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, pAllocator, pInitialState)
    end
    def clear_state(this : ID3D12GraphicsCommandList1*, pPipelineState : Void*) : Void
      @lpVtbl.try &.value.clear_state.call(this, pPipelineState)
    end
    def draw_instanced(this : ID3D12GraphicsCommandList1*, vertex_count_per_instance : UInt32, instance_count : UInt32, start_vertex_location : UInt32, start_instance_location : UInt32) : Void
      @lpVtbl.try &.value.draw_instanced.call(this, vertex_count_per_instance, instance_count, start_vertex_location, start_instance_location)
    end
    def draw_indexed_instanced(this : ID3D12GraphicsCommandList1*, index_count_per_instance : UInt32, instance_count : UInt32, start_index_location : UInt32, base_vertex_location : Int32, start_instance_location : UInt32) : Void
      @lpVtbl.try &.value.draw_indexed_instanced.call(this, index_count_per_instance, instance_count, start_index_location, base_vertex_location, start_instance_location)
    end
    def dispatch(this : ID3D12GraphicsCommandList1*, thread_group_count_x : UInt32, thread_group_count_y : UInt32, thread_group_count_z : UInt32) : Void
      @lpVtbl.try &.value.dispatch.call(this, thread_group_count_x, thread_group_count_y, thread_group_count_z)
    end
    def copy_buffer_region(this : ID3D12GraphicsCommandList1*, pDstBuffer : Void*, dst_offset : UInt64, pSrcBuffer : Void*, src_offset : UInt64, num_bytes : UInt64) : Void
      @lpVtbl.try &.value.copy_buffer_region.call(this, pDstBuffer, dst_offset, pSrcBuffer, src_offset, num_bytes)
    end
    def copy_texture_region(this : ID3D12GraphicsCommandList1*, pDst : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, dst_x : UInt32, dst_y : UInt32, dst_z : UInt32, pSrc : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, pSrcBox : Win32cr::Graphics::Direct3D12::D3D12_BOX*) : Void
      @lpVtbl.try &.value.copy_texture_region.call(this, pDst, dst_x, dst_y, dst_z, pSrc, pSrcBox)
    end
    def copy_resource(this : ID3D12GraphicsCommandList1*, pDstResource : Void*, pSrcResource : Void*) : Void
      @lpVtbl.try &.value.copy_resource.call(this, pDstResource, pSrcResource)
    end
    def copy_tiles(this : ID3D12GraphicsCommandList1*, pTiledResource : Void*, pTileRegionStartCoordinate : Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCE_COORDINATE*, pTileRegionSize : Win32cr::Graphics::Direct3D12::D3D12_TILE_REGION_SIZE*, pBuffer : Void*, buffer_start_offset_in_bytes : UInt64, flags : Win32cr::Graphics::Direct3D12::D3D12_TILE_COPY_FLAGS) : Void
      @lpVtbl.try &.value.copy_tiles.call(this, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, buffer_start_offset_in_bytes, flags)
    end
    def resolve_subresource(this : ID3D12GraphicsCommandList1*, pDstResource : Void*, dst_subresource : UInt32, pSrcResource : Void*, src_subresource : UInt32, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT) : Void
      @lpVtbl.try &.value.resolve_subresource.call(this, pDstResource, dst_subresource, pSrcResource, src_subresource, format)
    end
    def ia_set_primitive_topology(this : ID3D12GraphicsCommandList1*, primitive_topology : Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY) : Void
      @lpVtbl.try &.value.ia_set_primitive_topology.call(this, primitive_topology)
    end
    def rs_set_viewports(this : ID3D12GraphicsCommandList1*, num_viewports : UInt32, pViewports : Win32cr::Graphics::Direct3D12::D3D12_VIEWPORT*) : Void
      @lpVtbl.try &.value.rs_set_viewports.call(this, num_viewports, pViewports)
    end
    def rs_set_scissor_rects(this : ID3D12GraphicsCommandList1*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.rs_set_scissor_rects.call(this, num_rects, pRects)
    end
    def om_set_blend_factor(this : ID3D12GraphicsCommandList1*, blend_factor : Float32*) : Void
      @lpVtbl.try &.value.om_set_blend_factor.call(this, blend_factor)
    end
    def om_set_stencil_ref(this : ID3D12GraphicsCommandList1*, stencil_ref : UInt32) : Void
      @lpVtbl.try &.value.om_set_stencil_ref.call(this, stencil_ref)
    end
    def set_pipeline_state(this : ID3D12GraphicsCommandList1*, pPipelineState : Void*) : Void
      @lpVtbl.try &.value.set_pipeline_state.call(this, pPipelineState)
    end
    def resource_barrier(this : ID3D12GraphicsCommandList1*, num_barriers : UInt32, pBarriers : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*) : Void
      @lpVtbl.try &.value.resource_barrier.call(this, num_barriers, pBarriers)
    end
    def execute_bundle(this : ID3D12GraphicsCommandList1*, pCommandList : Void*) : Void
      @lpVtbl.try &.value.execute_bundle.call(this, pCommandList)
    end
    def set_descriptor_heaps(this : ID3D12GraphicsCommandList1*, num_descriptor_heaps : UInt32, ppDescriptorHeaps : Void**) : Void
      @lpVtbl.try &.value.set_descriptor_heaps.call(this, num_descriptor_heaps, ppDescriptorHeaps)
    end
    def set_compute_root_signature(this : ID3D12GraphicsCommandList1*, pRootSignature : Void*) : Void
      @lpVtbl.try &.value.set_compute_root_signature.call(this, pRootSignature)
    end
    def set_graphics_root_signature(this : ID3D12GraphicsCommandList1*, pRootSignature : Void*) : Void
      @lpVtbl.try &.value.set_graphics_root_signature.call(this, pRootSignature)
    end
    def set_compute_root_descriptor_table(this : ID3D12GraphicsCommandList1*, root_parameter_index : UInt32, base_descriptor : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.set_compute_root_descriptor_table.call(this, root_parameter_index, base_descriptor)
    end
    def set_graphics_root_descriptor_table(this : ID3D12GraphicsCommandList1*, root_parameter_index : UInt32, base_descriptor : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.set_graphics_root_descriptor_table.call(this, root_parameter_index, base_descriptor)
    end
    def set_compute_root32_bit_constant(this : ID3D12GraphicsCommandList1*, root_parameter_index : UInt32, src_data : UInt32, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_compute_root32_bit_constant.call(this, root_parameter_index, src_data, dest_offset_in32_bit_values)
    end
    def set_graphics_root32_bit_constant(this : ID3D12GraphicsCommandList1*, root_parameter_index : UInt32, src_data : UInt32, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_graphics_root32_bit_constant.call(this, root_parameter_index, src_data, dest_offset_in32_bit_values)
    end
    def set_compute_root32_bit_constants(this : ID3D12GraphicsCommandList1*, root_parameter_index : UInt32, num32_bit_values_to_set : UInt32, pSrcData : Void*, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_compute_root32_bit_constants.call(this, root_parameter_index, num32_bit_values_to_set, pSrcData, dest_offset_in32_bit_values)
    end
    def set_graphics_root32_bit_constants(this : ID3D12GraphicsCommandList1*, root_parameter_index : UInt32, num32_bit_values_to_set : UInt32, pSrcData : Void*, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_graphics_root32_bit_constants.call(this, root_parameter_index, num32_bit_values_to_set, pSrcData, dest_offset_in32_bit_values)
    end
    def set_compute_root_constant_buffer_view(this : ID3D12GraphicsCommandList1*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_compute_root_constant_buffer_view.call(this, root_parameter_index, buffer_location)
    end
    def set_graphics_root_constant_buffer_view(this : ID3D12GraphicsCommandList1*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_graphics_root_constant_buffer_view.call(this, root_parameter_index, buffer_location)
    end
    def set_compute_root_shader_resource_view(this : ID3D12GraphicsCommandList1*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_compute_root_shader_resource_view.call(this, root_parameter_index, buffer_location)
    end
    def set_graphics_root_shader_resource_view(this : ID3D12GraphicsCommandList1*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_graphics_root_shader_resource_view.call(this, root_parameter_index, buffer_location)
    end
    def set_compute_root_unordered_access_view(this : ID3D12GraphicsCommandList1*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_compute_root_unordered_access_view.call(this, root_parameter_index, buffer_location)
    end
    def set_graphics_root_unordered_access_view(this : ID3D12GraphicsCommandList1*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_graphics_root_unordered_access_view.call(this, root_parameter_index, buffer_location)
    end
    def ia_set_index_buffer(this : ID3D12GraphicsCommandList1*, pView : Win32cr::Graphics::Direct3D12::D3D12_INDEX_BUFFER_VIEW*) : Void
      @lpVtbl.try &.value.ia_set_index_buffer.call(this, pView)
    end
    def ia_set_vertex_buffers(this : ID3D12GraphicsCommandList1*, start_slot : UInt32, num_views : UInt32, pViews : Win32cr::Graphics::Direct3D12::D3D12_VERTEX_BUFFER_VIEW*) : Void
      @lpVtbl.try &.value.ia_set_vertex_buffers.call(this, start_slot, num_views, pViews)
    end
    def so_set_targets(this : ID3D12GraphicsCommandList1*, start_slot : UInt32, num_views : UInt32, pViews : Win32cr::Graphics::Direct3D12::D3D12_STREAM_OUTPUT_BUFFER_VIEW*) : Void
      @lpVtbl.try &.value.so_set_targets.call(this, start_slot, num_views, pViews)
    end
    def om_set_render_targets(this : ID3D12GraphicsCommandList1*, num_render_target_descriptors : UInt32, pRenderTargetDescriptors : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, r_ts_single_handle_to_descriptor_range : Win32cr::Foundation::BOOL, pDepthStencilDescriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*) : Void
      @lpVtbl.try &.value.om_set_render_targets.call(this, num_render_target_descriptors, pRenderTargetDescriptors, r_ts_single_handle_to_descriptor_range, pDepthStencilDescriptor)
    end
    def clear_depth_stencil_view(this : ID3D12GraphicsCommandList1*, depth_stencil_view : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, clear_flags : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_FLAGS, depth : Float32, stencil : UInt8, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_depth_stencil_view.call(this, depth_stencil_view, clear_flags, depth, stencil, num_rects, pRects)
    end
    def clear_render_target_view(this : ID3D12GraphicsCommandList1*, render_target_view : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, color_rgba : Float32*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_render_target_view.call(this, render_target_view, color_rgba, num_rects, pRects)
    end
    def clear_unordered_access_view_uint(this : ID3D12GraphicsCommandList1*, view_gpu_handle_in_current_heap : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, view_cpu_handle : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, pResource : Void*, values : UInt32*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_unordered_access_view_uint.call(this, view_gpu_handle_in_current_heap, view_cpu_handle, pResource, values, num_rects, pRects)
    end
    def clear_unordered_access_view_float(this : ID3D12GraphicsCommandList1*, view_gpu_handle_in_current_heap : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, view_cpu_handle : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, pResource : Void*, values : Float32*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_unordered_access_view_float.call(this, view_gpu_handle_in_current_heap, view_cpu_handle, pResource, values, num_rects, pRects)
    end
    def discard_resource(this : ID3D12GraphicsCommandList1*, pResource : Void*, pRegion : Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*) : Void
      @lpVtbl.try &.value.discard_resource.call(this, pResource, pRegion)
    end
    def begin_query(this : ID3D12GraphicsCommandList1*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.begin_query.call(this, pQueryHeap, type__, index)
    end
    def end_query(this : ID3D12GraphicsCommandList1*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.end_query.call(this, pQueryHeap, type__, index)
    end
    def resolve_query_data(this : ID3D12GraphicsCommandList1*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, start_index : UInt32, num_queries : UInt32, pDestinationBuffer : Void*, aligned_destination_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.resolve_query_data.call(this, pQueryHeap, type__, start_index, num_queries, pDestinationBuffer, aligned_destination_buffer_offset)
    end
    def set_predication(this : ID3D12GraphicsCommandList1*, pBuffer : Void*, aligned_buffer_offset : UInt64, operation : Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP) : Void
      @lpVtbl.try &.value.set_predication.call(this, pBuffer, aligned_buffer_offset, operation)
    end
    def set_marker(this : ID3D12GraphicsCommandList1*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.set_marker.call(this, metadata, pData, size)
    end
    def begin_event(this : ID3D12GraphicsCommandList1*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.begin_event.call(this, metadata, pData, size)
    end
    def end_event(this : ID3D12GraphicsCommandList1*) : Void
      @lpVtbl.try &.value.end_event.call(this)
    end
    def execute_indirect(this : ID3D12GraphicsCommandList1*, pCommandSignature : Void*, max_command_count : UInt32, pArgumentBuffer : Void*, argument_buffer_offset : UInt64, pCountBuffer : Void*, count_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.execute_indirect.call(this, pCommandSignature, max_command_count, pArgumentBuffer, argument_buffer_offset, pCountBuffer, count_buffer_offset)
    end
    def atomic_copy_buffer_uint(this : ID3D12GraphicsCommandList1*, pDstBuffer : Void*, dst_offset : UInt64, pSrcBuffer : Void*, src_offset : UInt64, dependencies : UInt32, ppDependentResources : Void**, pDependentSubresourceRanges : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
      @lpVtbl.try &.value.atomic_copy_buffer_uint.call(this, pDstBuffer, dst_offset, pSrcBuffer, src_offset, dependencies, ppDependentResources, pDependentSubresourceRanges)
    end
    def atomic_copy_buffer_uint64(this : ID3D12GraphicsCommandList1*, pDstBuffer : Void*, dst_offset : UInt64, pSrcBuffer : Void*, src_offset : UInt64, dependencies : UInt32, ppDependentResources : Void**, pDependentSubresourceRanges : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
      @lpVtbl.try &.value.atomic_copy_buffer_uint64.call(this, pDstBuffer, dst_offset, pSrcBuffer, src_offset, dependencies, ppDependentResources, pDependentSubresourceRanges)
    end
    def om_set_depth_bounds(this : ID3D12GraphicsCommandList1*, min : Float32, max : Float32) : Void
      @lpVtbl.try &.value.om_set_depth_bounds.call(this, min, max)
    end
    def set_sample_positions(this : ID3D12GraphicsCommandList1*, num_samples_per_pixel : UInt32, num_pixels : UInt32, pSamplePositions : Win32cr::Graphics::Direct3D12::D3D12_SAMPLE_POSITION*) : Void
      @lpVtbl.try &.value.set_sample_positions.call(this, num_samples_per_pixel, num_pixels, pSamplePositions)
    end
    def resolve_subresource_region(this : ID3D12GraphicsCommandList1*, pDstResource : Void*, dst_subresource : UInt32, dst_x : UInt32, dst_y : UInt32, pSrcResource : Void*, src_subresource : UInt32, pSrcRect : Win32cr::Foundation::RECT*, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, resolve_mode : Win32cr::Graphics::Direct3D12::D3D12_RESOLVE_MODE) : Void
      @lpVtbl.try &.value.resolve_subresource_region.call(this, pDstResource, dst_subresource, dst_x, dst_y, pSrcResource, src_subresource, pSrcRect, format, resolve_mode)
    end
    def set_view_instance_mask(this : ID3D12GraphicsCommandList1*, mask : UInt32) : Void
      @lpVtbl.try &.value.set_view_instance_mask.call(this, mask)
    end

  end

  @[Extern]
  record ID3D12GraphicsCommandList2Vtbl,
    query_interface : Proc(ID3D12GraphicsCommandList2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12GraphicsCommandList2*, UInt32),
    release : Proc(ID3D12GraphicsCommandList2*, UInt32),
    get_private_data : Proc(ID3D12GraphicsCommandList2*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12GraphicsCommandList2*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12GraphicsCommandList2*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12GraphicsCommandList2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12GraphicsCommandList2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D12GraphicsCommandList2*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE),
    close : Proc(ID3D12GraphicsCommandList2*, Win32cr::Foundation::HRESULT),
    reset : Proc(ID3D12GraphicsCommandList2*, Void*, Void*, Win32cr::Foundation::HRESULT),
    clear_state : Proc(ID3D12GraphicsCommandList2*, Void*, Void),
    draw_instanced : Proc(ID3D12GraphicsCommandList2*, UInt32, UInt32, UInt32, UInt32, Void),
    draw_indexed_instanced : Proc(ID3D12GraphicsCommandList2*, UInt32, UInt32, UInt32, Int32, UInt32, Void),
    dispatch : Proc(ID3D12GraphicsCommandList2*, UInt32, UInt32, UInt32, Void),
    copy_buffer_region : Proc(ID3D12GraphicsCommandList2*, Void*, UInt64, Void*, UInt64, UInt64, Void),
    copy_texture_region : Proc(ID3D12GraphicsCommandList2*, Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, UInt32, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, Win32cr::Graphics::Direct3D12::D3D12_BOX*, Void),
    copy_resource : Proc(ID3D12GraphicsCommandList2*, Void*, Void*, Void),
    copy_tiles : Proc(ID3D12GraphicsCommandList2*, Void*, Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCE_COORDINATE*, Win32cr::Graphics::Direct3D12::D3D12_TILE_REGION_SIZE*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_TILE_COPY_FLAGS, Void),
    resolve_subresource : Proc(ID3D12GraphicsCommandList2*, Void*, UInt32, Void*, UInt32, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Void),
    ia_set_primitive_topology : Proc(ID3D12GraphicsCommandList2*, Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY, Void),
    rs_set_viewports : Proc(ID3D12GraphicsCommandList2*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_VIEWPORT*, Void),
    rs_set_scissor_rects : Proc(ID3D12GraphicsCommandList2*, UInt32, Win32cr::Foundation::RECT*, Void),
    om_set_blend_factor : Proc(ID3D12GraphicsCommandList2*, Float32*, Void),
    om_set_stencil_ref : Proc(ID3D12GraphicsCommandList2*, UInt32, Void),
    set_pipeline_state : Proc(ID3D12GraphicsCommandList2*, Void*, Void),
    resource_barrier : Proc(ID3D12GraphicsCommandList2*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*, Void),
    execute_bundle : Proc(ID3D12GraphicsCommandList2*, Void*, Void),
    set_descriptor_heaps : Proc(ID3D12GraphicsCommandList2*, UInt32, Void**, Void),
    set_compute_root_signature : Proc(ID3D12GraphicsCommandList2*, Void*, Void),
    set_graphics_root_signature : Proc(ID3D12GraphicsCommandList2*, Void*, Void),
    set_compute_root_descriptor_table : Proc(ID3D12GraphicsCommandList2*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Void),
    set_graphics_root_descriptor_table : Proc(ID3D12GraphicsCommandList2*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Void),
    set_compute_root32_bit_constant : Proc(ID3D12GraphicsCommandList2*, UInt32, UInt32, UInt32, Void),
    set_graphics_root32_bit_constant : Proc(ID3D12GraphicsCommandList2*, UInt32, UInt32, UInt32, Void),
    set_compute_root32_bit_constants : Proc(ID3D12GraphicsCommandList2*, UInt32, UInt32, Void*, UInt32, Void),
    set_graphics_root32_bit_constants : Proc(ID3D12GraphicsCommandList2*, UInt32, UInt32, Void*, UInt32, Void),
    set_compute_root_constant_buffer_view : Proc(ID3D12GraphicsCommandList2*, UInt32, UInt64, Void),
    set_graphics_root_constant_buffer_view : Proc(ID3D12GraphicsCommandList2*, UInt32, UInt64, Void),
    set_compute_root_shader_resource_view : Proc(ID3D12GraphicsCommandList2*, UInt32, UInt64, Void),
    set_graphics_root_shader_resource_view : Proc(ID3D12GraphicsCommandList2*, UInt32, UInt64, Void),
    set_compute_root_unordered_access_view : Proc(ID3D12GraphicsCommandList2*, UInt32, UInt64, Void),
    set_graphics_root_unordered_access_view : Proc(ID3D12GraphicsCommandList2*, UInt32, UInt64, Void),
    ia_set_index_buffer : Proc(ID3D12GraphicsCommandList2*, Win32cr::Graphics::Direct3D12::D3D12_INDEX_BUFFER_VIEW*, Void),
    ia_set_vertex_buffers : Proc(ID3D12GraphicsCommandList2*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_VERTEX_BUFFER_VIEW*, Void),
    so_set_targets : Proc(ID3D12GraphicsCommandList2*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_STREAM_OUTPUT_BUFFER_VIEW*, Void),
    om_set_render_targets : Proc(ID3D12GraphicsCommandList2*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, Win32cr::Foundation::BOOL, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, Void),
    clear_depth_stencil_view : Proc(ID3D12GraphicsCommandList2*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_FLAGS, Float32, UInt8, UInt32, Win32cr::Foundation::RECT*, Void),
    clear_render_target_view : Proc(ID3D12GraphicsCommandList2*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Float32*, UInt32, Win32cr::Foundation::RECT*, Void),
    clear_unordered_access_view_uint : Proc(ID3D12GraphicsCommandList2*, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void*, UInt32*, UInt32, Win32cr::Foundation::RECT*, Void),
    clear_unordered_access_view_float : Proc(ID3D12GraphicsCommandList2*, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void*, Float32*, UInt32, Win32cr::Foundation::RECT*, Void),
    discard_resource : Proc(ID3D12GraphicsCommandList2*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*, Void),
    begin_query : Proc(ID3D12GraphicsCommandList2*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    end_query : Proc(ID3D12GraphicsCommandList2*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    resolve_query_data : Proc(ID3D12GraphicsCommandList2*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, UInt32, Void*, UInt64, Void),
    set_predication : Proc(ID3D12GraphicsCommandList2*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP, Void),
    set_marker : Proc(ID3D12GraphicsCommandList2*, UInt32, Void*, UInt32, Void),
    begin_event : Proc(ID3D12GraphicsCommandList2*, UInt32, Void*, UInt32, Void),
    end_event : Proc(ID3D12GraphicsCommandList2*, Void),
    execute_indirect : Proc(ID3D12GraphicsCommandList2*, Void*, UInt32, Void*, UInt64, Void*, UInt64, Void),
    atomic_copy_buffer_uint : Proc(ID3D12GraphicsCommandList2*, Void*, UInt64, Void*, UInt64, UInt32, Void**, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*, Void),
    atomic_copy_buffer_uint64 : Proc(ID3D12GraphicsCommandList2*, Void*, UInt64, Void*, UInt64, UInt32, Void**, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*, Void),
    om_set_depth_bounds : Proc(ID3D12GraphicsCommandList2*, Float32, Float32, Void),
    set_sample_positions : Proc(ID3D12GraphicsCommandList2*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_SAMPLE_POSITION*, Void),
    resolve_subresource_region : Proc(ID3D12GraphicsCommandList2*, Void*, UInt32, UInt32, UInt32, Void*, UInt32, Win32cr::Foundation::RECT*, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Win32cr::Graphics::Direct3D12::D3D12_RESOLVE_MODE, Void),
    set_view_instance_mask : Proc(ID3D12GraphicsCommandList2*, UInt32, Void),
    write_buffer_immediate : Proc(ID3D12GraphicsCommandList2*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void)


  @[Extern]
  record ID3D12GraphicsCommandList2, lpVtbl : ID3D12GraphicsCommandList2Vtbl* do
    GUID = LibC::GUID.new(0x38c3e585_u32, 0xff17_u16, 0x412c_u16, StaticArray[0x91_u8, 0x50_u8, 0x4f_u8, 0xc6_u8, 0xf9_u8, 0xd7_u8, 0x2a_u8, 0x28_u8])
    def query_interface(this : ID3D12GraphicsCommandList2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12GraphicsCommandList2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12GraphicsCommandList2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12GraphicsCommandList2*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12GraphicsCommandList2*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12GraphicsCommandList2*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12GraphicsCommandList2*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12GraphicsCommandList2*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_type(this : ID3D12GraphicsCommandList2*) : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def close(this : ID3D12GraphicsCommandList2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def reset(this : ID3D12GraphicsCommandList2*, pAllocator : Void*, pInitialState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, pAllocator, pInitialState)
    end
    def clear_state(this : ID3D12GraphicsCommandList2*, pPipelineState : Void*) : Void
      @lpVtbl.try &.value.clear_state.call(this, pPipelineState)
    end
    def draw_instanced(this : ID3D12GraphicsCommandList2*, vertex_count_per_instance : UInt32, instance_count : UInt32, start_vertex_location : UInt32, start_instance_location : UInt32) : Void
      @lpVtbl.try &.value.draw_instanced.call(this, vertex_count_per_instance, instance_count, start_vertex_location, start_instance_location)
    end
    def draw_indexed_instanced(this : ID3D12GraphicsCommandList2*, index_count_per_instance : UInt32, instance_count : UInt32, start_index_location : UInt32, base_vertex_location : Int32, start_instance_location : UInt32) : Void
      @lpVtbl.try &.value.draw_indexed_instanced.call(this, index_count_per_instance, instance_count, start_index_location, base_vertex_location, start_instance_location)
    end
    def dispatch(this : ID3D12GraphicsCommandList2*, thread_group_count_x : UInt32, thread_group_count_y : UInt32, thread_group_count_z : UInt32) : Void
      @lpVtbl.try &.value.dispatch.call(this, thread_group_count_x, thread_group_count_y, thread_group_count_z)
    end
    def copy_buffer_region(this : ID3D12GraphicsCommandList2*, pDstBuffer : Void*, dst_offset : UInt64, pSrcBuffer : Void*, src_offset : UInt64, num_bytes : UInt64) : Void
      @lpVtbl.try &.value.copy_buffer_region.call(this, pDstBuffer, dst_offset, pSrcBuffer, src_offset, num_bytes)
    end
    def copy_texture_region(this : ID3D12GraphicsCommandList2*, pDst : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, dst_x : UInt32, dst_y : UInt32, dst_z : UInt32, pSrc : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, pSrcBox : Win32cr::Graphics::Direct3D12::D3D12_BOX*) : Void
      @lpVtbl.try &.value.copy_texture_region.call(this, pDst, dst_x, dst_y, dst_z, pSrc, pSrcBox)
    end
    def copy_resource(this : ID3D12GraphicsCommandList2*, pDstResource : Void*, pSrcResource : Void*) : Void
      @lpVtbl.try &.value.copy_resource.call(this, pDstResource, pSrcResource)
    end
    def copy_tiles(this : ID3D12GraphicsCommandList2*, pTiledResource : Void*, pTileRegionStartCoordinate : Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCE_COORDINATE*, pTileRegionSize : Win32cr::Graphics::Direct3D12::D3D12_TILE_REGION_SIZE*, pBuffer : Void*, buffer_start_offset_in_bytes : UInt64, flags : Win32cr::Graphics::Direct3D12::D3D12_TILE_COPY_FLAGS) : Void
      @lpVtbl.try &.value.copy_tiles.call(this, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, buffer_start_offset_in_bytes, flags)
    end
    def resolve_subresource(this : ID3D12GraphicsCommandList2*, pDstResource : Void*, dst_subresource : UInt32, pSrcResource : Void*, src_subresource : UInt32, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT) : Void
      @lpVtbl.try &.value.resolve_subresource.call(this, pDstResource, dst_subresource, pSrcResource, src_subresource, format)
    end
    def ia_set_primitive_topology(this : ID3D12GraphicsCommandList2*, primitive_topology : Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY) : Void
      @lpVtbl.try &.value.ia_set_primitive_topology.call(this, primitive_topology)
    end
    def rs_set_viewports(this : ID3D12GraphicsCommandList2*, num_viewports : UInt32, pViewports : Win32cr::Graphics::Direct3D12::D3D12_VIEWPORT*) : Void
      @lpVtbl.try &.value.rs_set_viewports.call(this, num_viewports, pViewports)
    end
    def rs_set_scissor_rects(this : ID3D12GraphicsCommandList2*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.rs_set_scissor_rects.call(this, num_rects, pRects)
    end
    def om_set_blend_factor(this : ID3D12GraphicsCommandList2*, blend_factor : Float32*) : Void
      @lpVtbl.try &.value.om_set_blend_factor.call(this, blend_factor)
    end
    def om_set_stencil_ref(this : ID3D12GraphicsCommandList2*, stencil_ref : UInt32) : Void
      @lpVtbl.try &.value.om_set_stencil_ref.call(this, stencil_ref)
    end
    def set_pipeline_state(this : ID3D12GraphicsCommandList2*, pPipelineState : Void*) : Void
      @lpVtbl.try &.value.set_pipeline_state.call(this, pPipelineState)
    end
    def resource_barrier(this : ID3D12GraphicsCommandList2*, num_barriers : UInt32, pBarriers : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*) : Void
      @lpVtbl.try &.value.resource_barrier.call(this, num_barriers, pBarriers)
    end
    def execute_bundle(this : ID3D12GraphicsCommandList2*, pCommandList : Void*) : Void
      @lpVtbl.try &.value.execute_bundle.call(this, pCommandList)
    end
    def set_descriptor_heaps(this : ID3D12GraphicsCommandList2*, num_descriptor_heaps : UInt32, ppDescriptorHeaps : Void**) : Void
      @lpVtbl.try &.value.set_descriptor_heaps.call(this, num_descriptor_heaps, ppDescriptorHeaps)
    end
    def set_compute_root_signature(this : ID3D12GraphicsCommandList2*, pRootSignature : Void*) : Void
      @lpVtbl.try &.value.set_compute_root_signature.call(this, pRootSignature)
    end
    def set_graphics_root_signature(this : ID3D12GraphicsCommandList2*, pRootSignature : Void*) : Void
      @lpVtbl.try &.value.set_graphics_root_signature.call(this, pRootSignature)
    end
    def set_compute_root_descriptor_table(this : ID3D12GraphicsCommandList2*, root_parameter_index : UInt32, base_descriptor : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.set_compute_root_descriptor_table.call(this, root_parameter_index, base_descriptor)
    end
    def set_graphics_root_descriptor_table(this : ID3D12GraphicsCommandList2*, root_parameter_index : UInt32, base_descriptor : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.set_graphics_root_descriptor_table.call(this, root_parameter_index, base_descriptor)
    end
    def set_compute_root32_bit_constant(this : ID3D12GraphicsCommandList2*, root_parameter_index : UInt32, src_data : UInt32, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_compute_root32_bit_constant.call(this, root_parameter_index, src_data, dest_offset_in32_bit_values)
    end
    def set_graphics_root32_bit_constant(this : ID3D12GraphicsCommandList2*, root_parameter_index : UInt32, src_data : UInt32, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_graphics_root32_bit_constant.call(this, root_parameter_index, src_data, dest_offset_in32_bit_values)
    end
    def set_compute_root32_bit_constants(this : ID3D12GraphicsCommandList2*, root_parameter_index : UInt32, num32_bit_values_to_set : UInt32, pSrcData : Void*, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_compute_root32_bit_constants.call(this, root_parameter_index, num32_bit_values_to_set, pSrcData, dest_offset_in32_bit_values)
    end
    def set_graphics_root32_bit_constants(this : ID3D12GraphicsCommandList2*, root_parameter_index : UInt32, num32_bit_values_to_set : UInt32, pSrcData : Void*, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_graphics_root32_bit_constants.call(this, root_parameter_index, num32_bit_values_to_set, pSrcData, dest_offset_in32_bit_values)
    end
    def set_compute_root_constant_buffer_view(this : ID3D12GraphicsCommandList2*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_compute_root_constant_buffer_view.call(this, root_parameter_index, buffer_location)
    end
    def set_graphics_root_constant_buffer_view(this : ID3D12GraphicsCommandList2*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_graphics_root_constant_buffer_view.call(this, root_parameter_index, buffer_location)
    end
    def set_compute_root_shader_resource_view(this : ID3D12GraphicsCommandList2*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_compute_root_shader_resource_view.call(this, root_parameter_index, buffer_location)
    end
    def set_graphics_root_shader_resource_view(this : ID3D12GraphicsCommandList2*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_graphics_root_shader_resource_view.call(this, root_parameter_index, buffer_location)
    end
    def set_compute_root_unordered_access_view(this : ID3D12GraphicsCommandList2*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_compute_root_unordered_access_view.call(this, root_parameter_index, buffer_location)
    end
    def set_graphics_root_unordered_access_view(this : ID3D12GraphicsCommandList2*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_graphics_root_unordered_access_view.call(this, root_parameter_index, buffer_location)
    end
    def ia_set_index_buffer(this : ID3D12GraphicsCommandList2*, pView : Win32cr::Graphics::Direct3D12::D3D12_INDEX_BUFFER_VIEW*) : Void
      @lpVtbl.try &.value.ia_set_index_buffer.call(this, pView)
    end
    def ia_set_vertex_buffers(this : ID3D12GraphicsCommandList2*, start_slot : UInt32, num_views : UInt32, pViews : Win32cr::Graphics::Direct3D12::D3D12_VERTEX_BUFFER_VIEW*) : Void
      @lpVtbl.try &.value.ia_set_vertex_buffers.call(this, start_slot, num_views, pViews)
    end
    def so_set_targets(this : ID3D12GraphicsCommandList2*, start_slot : UInt32, num_views : UInt32, pViews : Win32cr::Graphics::Direct3D12::D3D12_STREAM_OUTPUT_BUFFER_VIEW*) : Void
      @lpVtbl.try &.value.so_set_targets.call(this, start_slot, num_views, pViews)
    end
    def om_set_render_targets(this : ID3D12GraphicsCommandList2*, num_render_target_descriptors : UInt32, pRenderTargetDescriptors : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, r_ts_single_handle_to_descriptor_range : Win32cr::Foundation::BOOL, pDepthStencilDescriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*) : Void
      @lpVtbl.try &.value.om_set_render_targets.call(this, num_render_target_descriptors, pRenderTargetDescriptors, r_ts_single_handle_to_descriptor_range, pDepthStencilDescriptor)
    end
    def clear_depth_stencil_view(this : ID3D12GraphicsCommandList2*, depth_stencil_view : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, clear_flags : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_FLAGS, depth : Float32, stencil : UInt8, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_depth_stencil_view.call(this, depth_stencil_view, clear_flags, depth, stencil, num_rects, pRects)
    end
    def clear_render_target_view(this : ID3D12GraphicsCommandList2*, render_target_view : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, color_rgba : Float32*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_render_target_view.call(this, render_target_view, color_rgba, num_rects, pRects)
    end
    def clear_unordered_access_view_uint(this : ID3D12GraphicsCommandList2*, view_gpu_handle_in_current_heap : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, view_cpu_handle : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, pResource : Void*, values : UInt32*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_unordered_access_view_uint.call(this, view_gpu_handle_in_current_heap, view_cpu_handle, pResource, values, num_rects, pRects)
    end
    def clear_unordered_access_view_float(this : ID3D12GraphicsCommandList2*, view_gpu_handle_in_current_heap : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, view_cpu_handle : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, pResource : Void*, values : Float32*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_unordered_access_view_float.call(this, view_gpu_handle_in_current_heap, view_cpu_handle, pResource, values, num_rects, pRects)
    end
    def discard_resource(this : ID3D12GraphicsCommandList2*, pResource : Void*, pRegion : Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*) : Void
      @lpVtbl.try &.value.discard_resource.call(this, pResource, pRegion)
    end
    def begin_query(this : ID3D12GraphicsCommandList2*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.begin_query.call(this, pQueryHeap, type__, index)
    end
    def end_query(this : ID3D12GraphicsCommandList2*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.end_query.call(this, pQueryHeap, type__, index)
    end
    def resolve_query_data(this : ID3D12GraphicsCommandList2*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, start_index : UInt32, num_queries : UInt32, pDestinationBuffer : Void*, aligned_destination_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.resolve_query_data.call(this, pQueryHeap, type__, start_index, num_queries, pDestinationBuffer, aligned_destination_buffer_offset)
    end
    def set_predication(this : ID3D12GraphicsCommandList2*, pBuffer : Void*, aligned_buffer_offset : UInt64, operation : Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP) : Void
      @lpVtbl.try &.value.set_predication.call(this, pBuffer, aligned_buffer_offset, operation)
    end
    def set_marker(this : ID3D12GraphicsCommandList2*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.set_marker.call(this, metadata, pData, size)
    end
    def begin_event(this : ID3D12GraphicsCommandList2*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.begin_event.call(this, metadata, pData, size)
    end
    def end_event(this : ID3D12GraphicsCommandList2*) : Void
      @lpVtbl.try &.value.end_event.call(this)
    end
    def execute_indirect(this : ID3D12GraphicsCommandList2*, pCommandSignature : Void*, max_command_count : UInt32, pArgumentBuffer : Void*, argument_buffer_offset : UInt64, pCountBuffer : Void*, count_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.execute_indirect.call(this, pCommandSignature, max_command_count, pArgumentBuffer, argument_buffer_offset, pCountBuffer, count_buffer_offset)
    end
    def atomic_copy_buffer_uint(this : ID3D12GraphicsCommandList2*, pDstBuffer : Void*, dst_offset : UInt64, pSrcBuffer : Void*, src_offset : UInt64, dependencies : UInt32, ppDependentResources : Void**, pDependentSubresourceRanges : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
      @lpVtbl.try &.value.atomic_copy_buffer_uint.call(this, pDstBuffer, dst_offset, pSrcBuffer, src_offset, dependencies, ppDependentResources, pDependentSubresourceRanges)
    end
    def atomic_copy_buffer_uint64(this : ID3D12GraphicsCommandList2*, pDstBuffer : Void*, dst_offset : UInt64, pSrcBuffer : Void*, src_offset : UInt64, dependencies : UInt32, ppDependentResources : Void**, pDependentSubresourceRanges : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
      @lpVtbl.try &.value.atomic_copy_buffer_uint64.call(this, pDstBuffer, dst_offset, pSrcBuffer, src_offset, dependencies, ppDependentResources, pDependentSubresourceRanges)
    end
    def om_set_depth_bounds(this : ID3D12GraphicsCommandList2*, min : Float32, max : Float32) : Void
      @lpVtbl.try &.value.om_set_depth_bounds.call(this, min, max)
    end
    def set_sample_positions(this : ID3D12GraphicsCommandList2*, num_samples_per_pixel : UInt32, num_pixels : UInt32, pSamplePositions : Win32cr::Graphics::Direct3D12::D3D12_SAMPLE_POSITION*) : Void
      @lpVtbl.try &.value.set_sample_positions.call(this, num_samples_per_pixel, num_pixels, pSamplePositions)
    end
    def resolve_subresource_region(this : ID3D12GraphicsCommandList2*, pDstResource : Void*, dst_subresource : UInt32, dst_x : UInt32, dst_y : UInt32, pSrcResource : Void*, src_subresource : UInt32, pSrcRect : Win32cr::Foundation::RECT*, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, resolve_mode : Win32cr::Graphics::Direct3D12::D3D12_RESOLVE_MODE) : Void
      @lpVtbl.try &.value.resolve_subresource_region.call(this, pDstResource, dst_subresource, dst_x, dst_y, pSrcResource, src_subresource, pSrcRect, format, resolve_mode)
    end
    def set_view_instance_mask(this : ID3D12GraphicsCommandList2*, mask : UInt32) : Void
      @lpVtbl.try &.value.set_view_instance_mask.call(this, mask)
    end
    def write_buffer_immediate(this : ID3D12GraphicsCommandList2*, count : UInt32, pParams : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pModes : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
      @lpVtbl.try &.value.write_buffer_immediate.call(this, count, pParams, pModes)
    end

  end

  @[Extern]
  record ID3D12CommandQueueVtbl,
    query_interface : Proc(ID3D12CommandQueue*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12CommandQueue*, UInt32),
    release : Proc(ID3D12CommandQueue*, UInt32),
    get_private_data : Proc(ID3D12CommandQueue*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12CommandQueue*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12CommandQueue*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12CommandQueue*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12CommandQueue*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    update_tile_mappings : Proc(ID3D12CommandQueue*, Void*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCE_COORDINATE*, Win32cr::Graphics::Direct3D12::D3D12_TILE_REGION_SIZE*, Void*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_TILE_RANGE_FLAGS*, UInt32*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_TILE_MAPPING_FLAGS, Void),
    copy_tile_mappings : Proc(ID3D12CommandQueue*, Void*, Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCE_COORDINATE*, Void*, Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCE_COORDINATE*, Win32cr::Graphics::Direct3D12::D3D12_TILE_REGION_SIZE*, Win32cr::Graphics::Direct3D12::D3D12_TILE_MAPPING_FLAGS, Void),
    execute_command_lists : Proc(ID3D12CommandQueue*, UInt32, Void**, Void),
    set_marker : Proc(ID3D12CommandQueue*, UInt32, Void*, UInt32, Void),
    begin_event : Proc(ID3D12CommandQueue*, UInt32, Void*, UInt32, Void),
    end_event : Proc(ID3D12CommandQueue*, Void),
    signal : Proc(ID3D12CommandQueue*, Void*, UInt64, Win32cr::Foundation::HRESULT),
    wait : Proc(ID3D12CommandQueue*, Void*, UInt64, Win32cr::Foundation::HRESULT),
    get_timestamp_frequency : Proc(ID3D12CommandQueue*, UInt64*, Win32cr::Foundation::HRESULT),
    get_clock_calibration : Proc(ID3D12CommandQueue*, UInt64*, UInt64*, Win32cr::Foundation::HRESULT),
    get_desc : Proc(ID3D12CommandQueue*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC)


  @[Extern]
  record ID3D12CommandQueue, lpVtbl : ID3D12CommandQueueVtbl* do
    GUID = LibC::GUID.new(0xec870a6_u32, 0x5d7e_u16, 0x4c22_u16, StaticArray[0x8c_u8, 0xfc_u8, 0x5b_u8, 0xaa_u8, 0xe0_u8, 0x76_u8, 0x16_u8, 0xed_u8])
    def query_interface(this : ID3D12CommandQueue*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12CommandQueue*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12CommandQueue*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12CommandQueue*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12CommandQueue*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12CommandQueue*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12CommandQueue*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12CommandQueue*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def update_tile_mappings(this : ID3D12CommandQueue*, pResource : Void*, num_resource_regions : UInt32, pResourceRegionStartCoordinates : Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCE_COORDINATE*, pResourceRegionSizes : Win32cr::Graphics::Direct3D12::D3D12_TILE_REGION_SIZE*, pHeap : Void*, num_ranges : UInt32, pRangeFlags : Win32cr::Graphics::Direct3D12::D3D12_TILE_RANGE_FLAGS*, pHeapRangeStartOffsets : UInt32*, pRangeTileCounts : UInt32*, flags : Win32cr::Graphics::Direct3D12::D3D12_TILE_MAPPING_FLAGS) : Void
      @lpVtbl.try &.value.update_tile_mappings.call(this, pResource, num_resource_regions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, num_ranges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, flags)
    end
    def copy_tile_mappings(this : ID3D12CommandQueue*, pDstResource : Void*, pDstRegionStartCoordinate : Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCE_COORDINATE*, pSrcResource : Void*, pSrcRegionStartCoordinate : Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCE_COORDINATE*, pRegionSize : Win32cr::Graphics::Direct3D12::D3D12_TILE_REGION_SIZE*, flags : Win32cr::Graphics::Direct3D12::D3D12_TILE_MAPPING_FLAGS) : Void
      @lpVtbl.try &.value.copy_tile_mappings.call(this, pDstResource, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, pRegionSize, flags)
    end
    def execute_command_lists(this : ID3D12CommandQueue*, num_command_lists : UInt32, ppCommandLists : Void**) : Void
      @lpVtbl.try &.value.execute_command_lists.call(this, num_command_lists, ppCommandLists)
    end
    def set_marker(this : ID3D12CommandQueue*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.set_marker.call(this, metadata, pData, size)
    end
    def begin_event(this : ID3D12CommandQueue*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.begin_event.call(this, metadata, pData, size)
    end
    def end_event(this : ID3D12CommandQueue*) : Void
      @lpVtbl.try &.value.end_event.call(this)
    end
    def signal(this : ID3D12CommandQueue*, pFence : Void*, value : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.signal.call(this, pFence, value)
    end
    def wait(this : ID3D12CommandQueue*, pFence : Void*, value : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.wait.call(this, pFence, value)
    end
    def get_timestamp_frequency(this : ID3D12CommandQueue*, pFrequency : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_timestamp_frequency.call(this, pFrequency)
    end
    def get_clock_calibration(this : ID3D12CommandQueue*, pGpuTimestamp : UInt64*, pCpuTimestamp : UInt64*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_clock_calibration.call(this, pGpuTimestamp, pCpuTimestamp)
    end
    def get_desc(this : ID3D12CommandQueue*) : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC
      @lpVtbl.try &.value.get_desc.call(this)
    end

  end

  @[Extern]
  record ID3D12DeviceVtbl,
    query_interface : Proc(ID3D12Device*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Device*, UInt32),
    release : Proc(ID3D12Device*, UInt32),
    get_private_data : Proc(ID3D12Device*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12Device*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12Device*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12Device*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_node_count : Proc(ID3D12Device*, UInt32),
    create_command_queue : Proc(ID3D12Device*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_command_allocator : Proc(ID3D12Device*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_graphics_pipeline_state : Proc(ID3D12Device*, Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_compute_pipeline_state : Proc(ID3D12Device*, Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_command_list : Proc(ID3D12Device*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, Void*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    check_feature_support : Proc(ID3D12Device*, Win32cr::Graphics::Direct3D12::D3D12_FEATURE, Void*, UInt32, Win32cr::Foundation::HRESULT),
    create_descriptor_heap : Proc(ID3D12Device*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_descriptor_handle_increment_size : Proc(ID3D12Device*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, UInt32),
    create_root_signature : Proc(ID3D12Device*, UInt32, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_constant_buffer_view : Proc(ID3D12Device*, Win32cr::Graphics::Direct3D12::D3D12_CONSTANT_BUFFER_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_shader_resource_view : Proc(ID3D12Device*, Void*, Win32cr::Graphics::Direct3D12::D3D12_SHADER_RESOURCE_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_unordered_access_view : Proc(ID3D12Device*, Void*, Void*, Win32cr::Graphics::Direct3D12::D3D12_UNORDERED_ACCESS_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_render_target_view : Proc(ID3D12Device*, Void*, Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_depth_stencil_view : Proc(ID3D12Device*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_sampler : Proc(ID3D12Device*, Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    copy_descriptors : Proc(ID3D12Device*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, Void),
    copy_descriptors_simple : Proc(ID3D12Device*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, Void),
    get_resource_allocation_info : Proc(ID3D12Device*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO),
    get_custom_heap_properties : Proc(ID3D12Device*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES),
    create_committed_resource : Proc(ID3D12Device*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_heap : Proc(ID3D12Device*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_placed_resource : Proc(ID3D12Device*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_reserved_resource : Proc(ID3D12Device*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_shared_handle : Proc(ID3D12Device*, Void*, Win32cr::Security::SECURITY_ATTRIBUTES*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    open_shared_handle : Proc(ID3D12Device*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_shared_handle_by_name : Proc(ID3D12Device*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    make_resident : Proc(ID3D12Device*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    evict : Proc(ID3D12Device*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_fence : Proc(ID3D12Device*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_device_removed_reason : Proc(ID3D12Device*, Win32cr::Foundation::HRESULT),
    get_copyable_footprints : Proc(ID3D12Device*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, UInt32, UInt32, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void),
    create_query_heap : Proc(ID3D12Device*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_stable_power_state : Proc(ID3D12Device*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    create_command_signature : Proc(ID3D12Device*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_SIGNATURE_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_resource_tiling : Proc(ID3D12Device*, Void*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_PACKED_MIP_INFO*, Win32cr::Graphics::Direct3D12::D3D12_TILE_SHAPE*, UInt32*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_TILING*, Void),
    get_adapter_luid : Proc(ID3D12Device*, Win32cr::Foundation::LUID)


  @[Extern]
  record ID3D12Device, lpVtbl : ID3D12DeviceVtbl* do
    GUID = LibC::GUID.new(0x189819f1_u32, 0x1db6_u16, 0x4b57_u16, StaticArray[0xbe_u8, 0x54_u8, 0x18_u8, 0x21_u8, 0x33_u8, 0x9b_u8, 0x85_u8, 0xf7_u8])
    def query_interface(this : ID3D12Device*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Device*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Device*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12Device*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12Device*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12Device*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12Device*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_node_count(this : ID3D12Device*) : UInt32
      @lpVtbl.try &.value.get_node_count.call(this)
    end
    def create_command_queue(this : ID3D12Device*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, riid : LibC::GUID*, ppCommandQueue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_queue.call(this, pDesc, riid, ppCommandQueue)
    end
    def create_command_allocator(this : ID3D12Device*, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, riid : LibC::GUID*, ppCommandAllocator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_allocator.call(this, type__, riid, ppCommandAllocator)
    end
    def create_graphics_pipeline_state(this : ID3D12Device*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_graphics_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def create_compute_pipeline_state(this : ID3D12Device*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compute_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def create_command_list(this : ID3D12Device*, nodeMask : UInt32, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, pCommandAllocator : Void*, pInitialState : Void*, riid : LibC::GUID*, ppCommandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list.call(this, nodeMask, type__, pCommandAllocator, pInitialState, riid, ppCommandList)
    end
    def check_feature_support(this : ID3D12Device*, feature : Win32cr::Graphics::Direct3D12::D3D12_FEATURE, pFeatureSupportData : Void*, feature_support_data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_feature_support.call(this, feature, pFeatureSupportData, feature_support_data_size)
    end
    def create_descriptor_heap(this : ID3D12Device*, pDescriptorHeapDesc : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_descriptor_heap.call(this, pDescriptorHeapDesc, riid, ppvHeap)
    end
    def get_descriptor_handle_increment_size(this : ID3D12Device*, descriptor_heap_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : UInt32
      @lpVtbl.try &.value.get_descriptor_handle_increment_size.call(this, descriptor_heap_type)
    end
    def create_root_signature(this : ID3D12Device*, nodeMask : UInt32, pBlobWithRootSignature : Void*, blobLengthInBytes : LibC::UIntPtrT, riid : LibC::GUID*, ppvRootSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_root_signature.call(this, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature)
    end
    def create_constant_buffer_view(this : ID3D12Device*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_CONSTANT_BUFFER_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_constant_buffer_view.call(this, pDesc, dest_descriptor)
    end
    def create_shader_resource_view(this : ID3D12Device*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SHADER_RESOURCE_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_shader_resource_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_unordered_access_view(this : ID3D12Device*, pResource : Void*, pCounterResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_UNORDERED_ACCESS_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_unordered_access_view.call(this, pResource, pCounterResource, pDesc, dest_descriptor)
    end
    def create_render_target_view(this : ID3D12Device*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_render_target_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_depth_stencil_view(this : ID3D12Device*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_depth_stencil_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_sampler(this : ID3D12Device*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_sampler.call(this, pDesc, dest_descriptor)
    end
    def copy_descriptors(this : ID3D12Device*, num_dest_descriptor_ranges : UInt32, pDestDescriptorRangeStarts : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, pDestDescriptorRangeSizes : UInt32*, num_src_descriptor_ranges : UInt32, pSrcDescriptorRangeStarts : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, pSrcDescriptorRangeSizes : UInt32*, descriptor_heaps_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : Void
      @lpVtbl.try &.value.copy_descriptors.call(this, num_dest_descriptor_ranges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, num_src_descriptor_ranges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptor_heaps_type)
    end
    def copy_descriptors_simple(this : ID3D12Device*, num_descriptors : UInt32, dest_descriptor_range_start : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, src_descriptor_range_start : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, descriptor_heaps_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : Void
      @lpVtbl.try &.value.copy_descriptors_simple.call(this, num_descriptors, dest_descriptor_range_start, src_descriptor_range_start, descriptor_heaps_type)
    end
    def get_resource_allocation_info(this : ID3D12Device*, visibleMask : UInt32, numResourceDescs : UInt32, pResourceDescs : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO
      @lpVtbl.try &.value.get_resource_allocation_info.call(this, visibleMask, numResourceDescs, pResourceDescs)
    end
    def get_custom_heap_properties(this : ID3D12Device*, nodeMask : UInt32, heapType : Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE) : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES
      @lpVtbl.try &.value.get_custom_heap_properties.call(this, nodeMask, heapType)
    end
    def create_committed_resource(this : ID3D12Device*, pHeapProperties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, heap_flags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_resource_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riidResource : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_committed_resource.call(this, pHeapProperties, heap_flags, pDesc, initial_resource_state, pOptimizedClearValue, riidResource, ppvResource)
    end
    def create_heap(this : ID3D12Device*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_heap.call(this, pDesc, riid, ppvHeap)
    end
    def create_placed_resource(this : ID3D12Device*, pHeap : Void*, heap_offset : UInt64, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_placed_resource.call(this, pHeap, heap_offset, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_reserved_resource(this : ID3D12Device*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_reserved_resource.call(this, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_shared_handle(this : ID3D12Device*, pObject : Void*, pAttributes : Win32cr::Security::SECURITY_ATTRIBUTES*, access : UInt32, name : Win32cr::Foundation::PWSTR, pHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_handle.call(this, pObject, pAttributes, access, name, pHandle)
    end
    def open_shared_handle(this : ID3D12Device*, nt_handle : Win32cr::Foundation::HANDLE, riid : LibC::GUID*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_handle.call(this, nt_handle, riid, ppvObj)
    end
    def open_shared_handle_by_name(this : ID3D12Device*, name : Win32cr::Foundation::PWSTR, access : UInt32, pNTHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_handle_by_name.call(this, name, access, pNTHandle)
    end
    def make_resident(this : ID3D12Device*, num_objects : UInt32, ppObjects : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.make_resident.call(this, num_objects, ppObjects)
    end
    def evict(this : ID3D12Device*, num_objects : UInt32, ppObjects : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evict.call(this, num_objects, ppObjects)
    end
    def create_fence(this : ID3D12Device*, initial_value : UInt64, flags : Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS, riid : LibC::GUID*, ppFence : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_fence.call(this, initial_value, flags, riid, ppFence)
    end
    def get_device_removed_reason(this : ID3D12Device*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_removed_reason.call(this)
    end
    def get_copyable_footprints(this : ID3D12Device*, pResourceDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, first_subresource : UInt32, num_subresources : UInt32, base_offset : UInt64, pLayouts : Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pNumRows : UInt32*, pRowSizeInBytes : UInt64*, pTotalBytes : UInt64*) : Void
      @lpVtbl.try &.value.get_copyable_footprints.call(this, pResourceDesc, first_subresource, num_subresources, base_offset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
    end
    def create_query_heap(this : ID3D12Device*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_query_heap.call(this, pDesc, riid, ppvHeap)
    end
    def set_stable_power_state(this : ID3D12Device*, enable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stable_power_state.call(this, enable)
    end
    def create_command_signature(this : ID3D12Device*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_SIGNATURE_DESC*, pRootSignature : Void*, riid : LibC::GUID*, ppvCommandSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_signature.call(this, pDesc, pRootSignature, riid, ppvCommandSignature)
    end
    def get_resource_tiling(this : ID3D12Device*, pTiledResource : Void*, pNumTilesForEntireResource : UInt32*, pPackedMipDesc : Win32cr::Graphics::Direct3D12::D3D12_PACKED_MIP_INFO*, pStandardTileShapeForNonPackedMips : Win32cr::Graphics::Direct3D12::D3D12_TILE_SHAPE*, pNumSubresourceTilings : UInt32*, first_subresource_tiling_to_get : UInt32, pSubresourceTilingsForNonPackedMips : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_TILING*) : Void
      @lpVtbl.try &.value.get_resource_tiling.call(this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, first_subresource_tiling_to_get, pSubresourceTilingsForNonPackedMips)
    end
    def get_adapter_luid(this : ID3D12Device*) : Win32cr::Foundation::LUID
      @lpVtbl.try &.value.get_adapter_luid.call(this)
    end

  end

  @[Extern]
  record ID3D12PipelineLibraryVtbl,
    query_interface : Proc(ID3D12PipelineLibrary*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12PipelineLibrary*, UInt32),
    release : Proc(ID3D12PipelineLibrary*, UInt32),
    get_private_data : Proc(ID3D12PipelineLibrary*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12PipelineLibrary*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12PipelineLibrary*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12PipelineLibrary*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12PipelineLibrary*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    store_pipeline : Proc(ID3D12PipelineLibrary*, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::HRESULT),
    load_graphics_pipeline : Proc(ID3D12PipelineLibrary*, Win32cr::Foundation::PWSTR, Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    load_compute_pipeline : Proc(ID3D12PipelineLibrary*, Win32cr::Foundation::PWSTR, Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_serialized_size : Proc(ID3D12PipelineLibrary*, LibC::UIntPtrT),
    serialize : Proc(ID3D12PipelineLibrary*, Void*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12PipelineLibrary, lpVtbl : ID3D12PipelineLibraryVtbl* do
    GUID = LibC::GUID.new(0xc64226a8_u32, 0x9201_u16, 0x46af_u16, StaticArray[0xb4_u8, 0xcc_u8, 0x53_u8, 0xfb_u8, 0x9f_u8, 0xf7_u8, 0x41_u8, 0x4f_u8])
    def query_interface(this : ID3D12PipelineLibrary*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12PipelineLibrary*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12PipelineLibrary*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12PipelineLibrary*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12PipelineLibrary*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12PipelineLibrary*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12PipelineLibrary*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12PipelineLibrary*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def store_pipeline(this : ID3D12PipelineLibrary*, pName : Win32cr::Foundation::PWSTR, pPipeline : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.store_pipeline.call(this, pName, pPipeline)
    end
    def load_graphics_pipeline(this : ID3D12PipelineLibrary*, pName : Win32cr::Foundation::PWSTR, pDesc : Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_graphics_pipeline.call(this, pName, pDesc, riid, ppPipelineState)
    end
    def load_compute_pipeline(this : ID3D12PipelineLibrary*, pName : Win32cr::Foundation::PWSTR, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_compute_pipeline.call(this, pName, pDesc, riid, ppPipelineState)
    end
    def get_serialized_size(this : ID3D12PipelineLibrary*) : LibC::UIntPtrT
      @lpVtbl.try &.value.get_serialized_size.call(this)
    end
    def serialize(this : ID3D12PipelineLibrary*, pData : Void*, data_size_in_bytes : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.serialize.call(this, pData, data_size_in_bytes)
    end

  end

  @[Extern]
  record ID3D12PipelineLibrary1Vtbl,
    query_interface : Proc(ID3D12PipelineLibrary1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12PipelineLibrary1*, UInt32),
    release : Proc(ID3D12PipelineLibrary1*, UInt32),
    get_private_data : Proc(ID3D12PipelineLibrary1*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12PipelineLibrary1*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12PipelineLibrary1*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12PipelineLibrary1*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12PipelineLibrary1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    store_pipeline : Proc(ID3D12PipelineLibrary1*, Win32cr::Foundation::PWSTR, Void*, Win32cr::Foundation::HRESULT),
    load_graphics_pipeline : Proc(ID3D12PipelineLibrary1*, Win32cr::Foundation::PWSTR, Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    load_compute_pipeline : Proc(ID3D12PipelineLibrary1*, Win32cr::Foundation::PWSTR, Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_serialized_size : Proc(ID3D12PipelineLibrary1*, LibC::UIntPtrT),
    serialize : Proc(ID3D12PipelineLibrary1*, Void*, LibC::UIntPtrT, Win32cr::Foundation::HRESULT),
    load_pipeline : Proc(ID3D12PipelineLibrary1*, Win32cr::Foundation::PWSTR, Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_STREAM_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12PipelineLibrary1, lpVtbl : ID3D12PipelineLibrary1Vtbl* do
    GUID = LibC::GUID.new(0x80eabf42_u32, 0x2568_u16, 0x4e5e_u16, StaticArray[0xbd_u8, 0x82_u8, 0xc3_u8, 0x7f_u8, 0x86_u8, 0x96_u8, 0x1d_u8, 0xc3_u8])
    def query_interface(this : ID3D12PipelineLibrary1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12PipelineLibrary1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12PipelineLibrary1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12PipelineLibrary1*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12PipelineLibrary1*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12PipelineLibrary1*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12PipelineLibrary1*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12PipelineLibrary1*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def store_pipeline(this : ID3D12PipelineLibrary1*, pName : Win32cr::Foundation::PWSTR, pPipeline : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.store_pipeline.call(this, pName, pPipeline)
    end
    def load_graphics_pipeline(this : ID3D12PipelineLibrary1*, pName : Win32cr::Foundation::PWSTR, pDesc : Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_graphics_pipeline.call(this, pName, pDesc, riid, ppPipelineState)
    end
    def load_compute_pipeline(this : ID3D12PipelineLibrary1*, pName : Win32cr::Foundation::PWSTR, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_compute_pipeline.call(this, pName, pDesc, riid, ppPipelineState)
    end
    def get_serialized_size(this : ID3D12PipelineLibrary1*) : LibC::UIntPtrT
      @lpVtbl.try &.value.get_serialized_size.call(this)
    end
    def serialize(this : ID3D12PipelineLibrary1*, pData : Void*, data_size_in_bytes : LibC::UIntPtrT) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.serialize.call(this, pData, data_size_in_bytes)
    end
    def load_pipeline(this : ID3D12PipelineLibrary1*, pName : Win32cr::Foundation::PWSTR, pDesc : Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_STREAM_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.load_pipeline.call(this, pName, pDesc, riid, ppPipelineState)
    end

  end

  @[Extern]
  record ID3D12Device1Vtbl,
    query_interface : Proc(ID3D12Device1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Device1*, UInt32),
    release : Proc(ID3D12Device1*, UInt32),
    get_private_data : Proc(ID3D12Device1*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12Device1*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12Device1*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12Device1*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_node_count : Proc(ID3D12Device1*, UInt32),
    create_command_queue : Proc(ID3D12Device1*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_command_allocator : Proc(ID3D12Device1*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_graphics_pipeline_state : Proc(ID3D12Device1*, Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_compute_pipeline_state : Proc(ID3D12Device1*, Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_command_list : Proc(ID3D12Device1*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, Void*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    check_feature_support : Proc(ID3D12Device1*, Win32cr::Graphics::Direct3D12::D3D12_FEATURE, Void*, UInt32, Win32cr::Foundation::HRESULT),
    create_descriptor_heap : Proc(ID3D12Device1*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_descriptor_handle_increment_size : Proc(ID3D12Device1*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, UInt32),
    create_root_signature : Proc(ID3D12Device1*, UInt32, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_constant_buffer_view : Proc(ID3D12Device1*, Win32cr::Graphics::Direct3D12::D3D12_CONSTANT_BUFFER_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_shader_resource_view : Proc(ID3D12Device1*, Void*, Win32cr::Graphics::Direct3D12::D3D12_SHADER_RESOURCE_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_unordered_access_view : Proc(ID3D12Device1*, Void*, Void*, Win32cr::Graphics::Direct3D12::D3D12_UNORDERED_ACCESS_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_render_target_view : Proc(ID3D12Device1*, Void*, Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_depth_stencil_view : Proc(ID3D12Device1*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_sampler : Proc(ID3D12Device1*, Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    copy_descriptors : Proc(ID3D12Device1*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, Void),
    copy_descriptors_simple : Proc(ID3D12Device1*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, Void),
    get_resource_allocation_info : Proc(ID3D12Device1*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO),
    get_custom_heap_properties : Proc(ID3D12Device1*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES),
    create_committed_resource : Proc(ID3D12Device1*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_heap : Proc(ID3D12Device1*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_placed_resource : Proc(ID3D12Device1*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_reserved_resource : Proc(ID3D12Device1*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_shared_handle : Proc(ID3D12Device1*, Void*, Win32cr::Security::SECURITY_ATTRIBUTES*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    open_shared_handle : Proc(ID3D12Device1*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_shared_handle_by_name : Proc(ID3D12Device1*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    make_resident : Proc(ID3D12Device1*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    evict : Proc(ID3D12Device1*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_fence : Proc(ID3D12Device1*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_device_removed_reason : Proc(ID3D12Device1*, Win32cr::Foundation::HRESULT),
    get_copyable_footprints : Proc(ID3D12Device1*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, UInt32, UInt32, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void),
    create_query_heap : Proc(ID3D12Device1*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_stable_power_state : Proc(ID3D12Device1*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    create_command_signature : Proc(ID3D12Device1*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_SIGNATURE_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_resource_tiling : Proc(ID3D12Device1*, Void*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_PACKED_MIP_INFO*, Win32cr::Graphics::Direct3D12::D3D12_TILE_SHAPE*, UInt32*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_TILING*, Void),
    get_adapter_luid : Proc(ID3D12Device1*, Win32cr::Foundation::LUID),
    create_pipeline_library : Proc(ID3D12Device1*, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_event_on_multiple_fence_completion : Proc(ID3D12Device1*, Void**, UInt64*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_MULTIPLE_FENCE_WAIT_FLAGS, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    set_residency_priority : Proc(ID3D12Device1*, UInt32, Void**, Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_PRIORITY*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12Device1, lpVtbl : ID3D12Device1Vtbl* do
    GUID = LibC::GUID.new(0x77acce80_u32, 0x638e_u16, 0x4e65_u16, StaticArray[0x88_u8, 0x95_u8, 0xc1_u8, 0xf2_u8, 0x33_u8, 0x86_u8, 0x86_u8, 0x3e_u8])
    def query_interface(this : ID3D12Device1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Device1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Device1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12Device1*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12Device1*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12Device1*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12Device1*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_node_count(this : ID3D12Device1*) : UInt32
      @lpVtbl.try &.value.get_node_count.call(this)
    end
    def create_command_queue(this : ID3D12Device1*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, riid : LibC::GUID*, ppCommandQueue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_queue.call(this, pDesc, riid, ppCommandQueue)
    end
    def create_command_allocator(this : ID3D12Device1*, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, riid : LibC::GUID*, ppCommandAllocator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_allocator.call(this, type__, riid, ppCommandAllocator)
    end
    def create_graphics_pipeline_state(this : ID3D12Device1*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_graphics_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def create_compute_pipeline_state(this : ID3D12Device1*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compute_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def create_command_list(this : ID3D12Device1*, nodeMask : UInt32, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, pCommandAllocator : Void*, pInitialState : Void*, riid : LibC::GUID*, ppCommandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list.call(this, nodeMask, type__, pCommandAllocator, pInitialState, riid, ppCommandList)
    end
    def check_feature_support(this : ID3D12Device1*, feature : Win32cr::Graphics::Direct3D12::D3D12_FEATURE, pFeatureSupportData : Void*, feature_support_data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_feature_support.call(this, feature, pFeatureSupportData, feature_support_data_size)
    end
    def create_descriptor_heap(this : ID3D12Device1*, pDescriptorHeapDesc : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_descriptor_heap.call(this, pDescriptorHeapDesc, riid, ppvHeap)
    end
    def get_descriptor_handle_increment_size(this : ID3D12Device1*, descriptor_heap_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : UInt32
      @lpVtbl.try &.value.get_descriptor_handle_increment_size.call(this, descriptor_heap_type)
    end
    def create_root_signature(this : ID3D12Device1*, nodeMask : UInt32, pBlobWithRootSignature : Void*, blobLengthInBytes : LibC::UIntPtrT, riid : LibC::GUID*, ppvRootSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_root_signature.call(this, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature)
    end
    def create_constant_buffer_view(this : ID3D12Device1*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_CONSTANT_BUFFER_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_constant_buffer_view.call(this, pDesc, dest_descriptor)
    end
    def create_shader_resource_view(this : ID3D12Device1*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SHADER_RESOURCE_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_shader_resource_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_unordered_access_view(this : ID3D12Device1*, pResource : Void*, pCounterResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_UNORDERED_ACCESS_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_unordered_access_view.call(this, pResource, pCounterResource, pDesc, dest_descriptor)
    end
    def create_render_target_view(this : ID3D12Device1*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_render_target_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_depth_stencil_view(this : ID3D12Device1*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_depth_stencil_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_sampler(this : ID3D12Device1*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_sampler.call(this, pDesc, dest_descriptor)
    end
    def copy_descriptors(this : ID3D12Device1*, num_dest_descriptor_ranges : UInt32, pDestDescriptorRangeStarts : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, pDestDescriptorRangeSizes : UInt32*, num_src_descriptor_ranges : UInt32, pSrcDescriptorRangeStarts : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, pSrcDescriptorRangeSizes : UInt32*, descriptor_heaps_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : Void
      @lpVtbl.try &.value.copy_descriptors.call(this, num_dest_descriptor_ranges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, num_src_descriptor_ranges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptor_heaps_type)
    end
    def copy_descriptors_simple(this : ID3D12Device1*, num_descriptors : UInt32, dest_descriptor_range_start : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, src_descriptor_range_start : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, descriptor_heaps_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : Void
      @lpVtbl.try &.value.copy_descriptors_simple.call(this, num_descriptors, dest_descriptor_range_start, src_descriptor_range_start, descriptor_heaps_type)
    end
    def get_resource_allocation_info(this : ID3D12Device1*, visibleMask : UInt32, numResourceDescs : UInt32, pResourceDescs : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO
      @lpVtbl.try &.value.get_resource_allocation_info.call(this, visibleMask, numResourceDescs, pResourceDescs)
    end
    def get_custom_heap_properties(this : ID3D12Device1*, nodeMask : UInt32, heapType : Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE) : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES
      @lpVtbl.try &.value.get_custom_heap_properties.call(this, nodeMask, heapType)
    end
    def create_committed_resource(this : ID3D12Device1*, pHeapProperties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, heap_flags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_resource_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riidResource : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_committed_resource.call(this, pHeapProperties, heap_flags, pDesc, initial_resource_state, pOptimizedClearValue, riidResource, ppvResource)
    end
    def create_heap(this : ID3D12Device1*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_heap.call(this, pDesc, riid, ppvHeap)
    end
    def create_placed_resource(this : ID3D12Device1*, pHeap : Void*, heap_offset : UInt64, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_placed_resource.call(this, pHeap, heap_offset, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_reserved_resource(this : ID3D12Device1*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_reserved_resource.call(this, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_shared_handle(this : ID3D12Device1*, pObject : Void*, pAttributes : Win32cr::Security::SECURITY_ATTRIBUTES*, access : UInt32, name : Win32cr::Foundation::PWSTR, pHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_handle.call(this, pObject, pAttributes, access, name, pHandle)
    end
    def open_shared_handle(this : ID3D12Device1*, nt_handle : Win32cr::Foundation::HANDLE, riid : LibC::GUID*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_handle.call(this, nt_handle, riid, ppvObj)
    end
    def open_shared_handle_by_name(this : ID3D12Device1*, name : Win32cr::Foundation::PWSTR, access : UInt32, pNTHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_handle_by_name.call(this, name, access, pNTHandle)
    end
    def make_resident(this : ID3D12Device1*, num_objects : UInt32, ppObjects : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.make_resident.call(this, num_objects, ppObjects)
    end
    def evict(this : ID3D12Device1*, num_objects : UInt32, ppObjects : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evict.call(this, num_objects, ppObjects)
    end
    def create_fence(this : ID3D12Device1*, initial_value : UInt64, flags : Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS, riid : LibC::GUID*, ppFence : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_fence.call(this, initial_value, flags, riid, ppFence)
    end
    def get_device_removed_reason(this : ID3D12Device1*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_removed_reason.call(this)
    end
    def get_copyable_footprints(this : ID3D12Device1*, pResourceDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, first_subresource : UInt32, num_subresources : UInt32, base_offset : UInt64, pLayouts : Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pNumRows : UInt32*, pRowSizeInBytes : UInt64*, pTotalBytes : UInt64*) : Void
      @lpVtbl.try &.value.get_copyable_footprints.call(this, pResourceDesc, first_subresource, num_subresources, base_offset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
    end
    def create_query_heap(this : ID3D12Device1*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_query_heap.call(this, pDesc, riid, ppvHeap)
    end
    def set_stable_power_state(this : ID3D12Device1*, enable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stable_power_state.call(this, enable)
    end
    def create_command_signature(this : ID3D12Device1*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_SIGNATURE_DESC*, pRootSignature : Void*, riid : LibC::GUID*, ppvCommandSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_signature.call(this, pDesc, pRootSignature, riid, ppvCommandSignature)
    end
    def get_resource_tiling(this : ID3D12Device1*, pTiledResource : Void*, pNumTilesForEntireResource : UInt32*, pPackedMipDesc : Win32cr::Graphics::Direct3D12::D3D12_PACKED_MIP_INFO*, pStandardTileShapeForNonPackedMips : Win32cr::Graphics::Direct3D12::D3D12_TILE_SHAPE*, pNumSubresourceTilings : UInt32*, first_subresource_tiling_to_get : UInt32, pSubresourceTilingsForNonPackedMips : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_TILING*) : Void
      @lpVtbl.try &.value.get_resource_tiling.call(this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, first_subresource_tiling_to_get, pSubresourceTilingsForNonPackedMips)
    end
    def get_adapter_luid(this : ID3D12Device1*) : Win32cr::Foundation::LUID
      @lpVtbl.try &.value.get_adapter_luid.call(this)
    end
    def create_pipeline_library(this : ID3D12Device1*, pLibraryBlob : Void*, blob_length : LibC::UIntPtrT, riid : LibC::GUID*, ppPipelineLibrary : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pipeline_library.call(this, pLibraryBlob, blob_length, riid, ppPipelineLibrary)
    end
    def set_event_on_multiple_fence_completion(this : ID3D12Device1*, ppFences : Void**, pFenceValues : UInt64*, num_fences : UInt32, flags : Win32cr::Graphics::Direct3D12::D3D12_MULTIPLE_FENCE_WAIT_FLAGS, hEvent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_on_multiple_fence_completion.call(this, ppFences, pFenceValues, num_fences, flags, hEvent)
    end
    def set_residency_priority(this : ID3D12Device1*, num_objects : UInt32, ppObjects : Void**, pPriorities : Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_PRIORITY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_residency_priority.call(this, num_objects, ppObjects, pPriorities)
    end

  end

  @[Extern]
  record ID3D12Device2Vtbl,
    query_interface : Proc(ID3D12Device2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Device2*, UInt32),
    release : Proc(ID3D12Device2*, UInt32),
    get_private_data : Proc(ID3D12Device2*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12Device2*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12Device2*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12Device2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_node_count : Proc(ID3D12Device2*, UInt32),
    create_command_queue : Proc(ID3D12Device2*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_command_allocator : Proc(ID3D12Device2*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_graphics_pipeline_state : Proc(ID3D12Device2*, Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_compute_pipeline_state : Proc(ID3D12Device2*, Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_command_list : Proc(ID3D12Device2*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, Void*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    check_feature_support : Proc(ID3D12Device2*, Win32cr::Graphics::Direct3D12::D3D12_FEATURE, Void*, UInt32, Win32cr::Foundation::HRESULT),
    create_descriptor_heap : Proc(ID3D12Device2*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_descriptor_handle_increment_size : Proc(ID3D12Device2*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, UInt32),
    create_root_signature : Proc(ID3D12Device2*, UInt32, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_constant_buffer_view : Proc(ID3D12Device2*, Win32cr::Graphics::Direct3D12::D3D12_CONSTANT_BUFFER_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_shader_resource_view : Proc(ID3D12Device2*, Void*, Win32cr::Graphics::Direct3D12::D3D12_SHADER_RESOURCE_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_unordered_access_view : Proc(ID3D12Device2*, Void*, Void*, Win32cr::Graphics::Direct3D12::D3D12_UNORDERED_ACCESS_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_render_target_view : Proc(ID3D12Device2*, Void*, Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_depth_stencil_view : Proc(ID3D12Device2*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_sampler : Proc(ID3D12Device2*, Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    copy_descriptors : Proc(ID3D12Device2*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, Void),
    copy_descriptors_simple : Proc(ID3D12Device2*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, Void),
    get_resource_allocation_info : Proc(ID3D12Device2*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO),
    get_custom_heap_properties : Proc(ID3D12Device2*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES),
    create_committed_resource : Proc(ID3D12Device2*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_heap : Proc(ID3D12Device2*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_placed_resource : Proc(ID3D12Device2*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_reserved_resource : Proc(ID3D12Device2*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_shared_handle : Proc(ID3D12Device2*, Void*, Win32cr::Security::SECURITY_ATTRIBUTES*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    open_shared_handle : Proc(ID3D12Device2*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_shared_handle_by_name : Proc(ID3D12Device2*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    make_resident : Proc(ID3D12Device2*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    evict : Proc(ID3D12Device2*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_fence : Proc(ID3D12Device2*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_device_removed_reason : Proc(ID3D12Device2*, Win32cr::Foundation::HRESULT),
    get_copyable_footprints : Proc(ID3D12Device2*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, UInt32, UInt32, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void),
    create_query_heap : Proc(ID3D12Device2*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_stable_power_state : Proc(ID3D12Device2*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    create_command_signature : Proc(ID3D12Device2*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_SIGNATURE_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_resource_tiling : Proc(ID3D12Device2*, Void*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_PACKED_MIP_INFO*, Win32cr::Graphics::Direct3D12::D3D12_TILE_SHAPE*, UInt32*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_TILING*, Void),
    get_adapter_luid : Proc(ID3D12Device2*, Win32cr::Foundation::LUID),
    create_pipeline_library : Proc(ID3D12Device2*, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_event_on_multiple_fence_completion : Proc(ID3D12Device2*, Void**, UInt64*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_MULTIPLE_FENCE_WAIT_FLAGS, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    set_residency_priority : Proc(ID3D12Device2*, UInt32, Void**, Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_PRIORITY*, Win32cr::Foundation::HRESULT),
    create_pipeline_state : Proc(ID3D12Device2*, Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_STREAM_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12Device2, lpVtbl : ID3D12Device2Vtbl* do
    GUID = LibC::GUID.new(0x30baa41e_u32, 0xb15b_u16, 0x475c_u16, StaticArray[0xa0_u8, 0xbb_u8, 0x1a_u8, 0xf5_u8, 0xc5_u8, 0xb6_u8, 0x43_u8, 0x28_u8])
    def query_interface(this : ID3D12Device2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Device2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Device2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12Device2*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12Device2*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12Device2*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12Device2*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_node_count(this : ID3D12Device2*) : UInt32
      @lpVtbl.try &.value.get_node_count.call(this)
    end
    def create_command_queue(this : ID3D12Device2*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, riid : LibC::GUID*, ppCommandQueue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_queue.call(this, pDesc, riid, ppCommandQueue)
    end
    def create_command_allocator(this : ID3D12Device2*, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, riid : LibC::GUID*, ppCommandAllocator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_allocator.call(this, type__, riid, ppCommandAllocator)
    end
    def create_graphics_pipeline_state(this : ID3D12Device2*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_graphics_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def create_compute_pipeline_state(this : ID3D12Device2*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compute_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def create_command_list(this : ID3D12Device2*, nodeMask : UInt32, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, pCommandAllocator : Void*, pInitialState : Void*, riid : LibC::GUID*, ppCommandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list.call(this, nodeMask, type__, pCommandAllocator, pInitialState, riid, ppCommandList)
    end
    def check_feature_support(this : ID3D12Device2*, feature : Win32cr::Graphics::Direct3D12::D3D12_FEATURE, pFeatureSupportData : Void*, feature_support_data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_feature_support.call(this, feature, pFeatureSupportData, feature_support_data_size)
    end
    def create_descriptor_heap(this : ID3D12Device2*, pDescriptorHeapDesc : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_descriptor_heap.call(this, pDescriptorHeapDesc, riid, ppvHeap)
    end
    def get_descriptor_handle_increment_size(this : ID3D12Device2*, descriptor_heap_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : UInt32
      @lpVtbl.try &.value.get_descriptor_handle_increment_size.call(this, descriptor_heap_type)
    end
    def create_root_signature(this : ID3D12Device2*, nodeMask : UInt32, pBlobWithRootSignature : Void*, blobLengthInBytes : LibC::UIntPtrT, riid : LibC::GUID*, ppvRootSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_root_signature.call(this, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature)
    end
    def create_constant_buffer_view(this : ID3D12Device2*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_CONSTANT_BUFFER_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_constant_buffer_view.call(this, pDesc, dest_descriptor)
    end
    def create_shader_resource_view(this : ID3D12Device2*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SHADER_RESOURCE_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_shader_resource_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_unordered_access_view(this : ID3D12Device2*, pResource : Void*, pCounterResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_UNORDERED_ACCESS_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_unordered_access_view.call(this, pResource, pCounterResource, pDesc, dest_descriptor)
    end
    def create_render_target_view(this : ID3D12Device2*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_render_target_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_depth_stencil_view(this : ID3D12Device2*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_depth_stencil_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_sampler(this : ID3D12Device2*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_sampler.call(this, pDesc, dest_descriptor)
    end
    def copy_descriptors(this : ID3D12Device2*, num_dest_descriptor_ranges : UInt32, pDestDescriptorRangeStarts : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, pDestDescriptorRangeSizes : UInt32*, num_src_descriptor_ranges : UInt32, pSrcDescriptorRangeStarts : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, pSrcDescriptorRangeSizes : UInt32*, descriptor_heaps_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : Void
      @lpVtbl.try &.value.copy_descriptors.call(this, num_dest_descriptor_ranges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, num_src_descriptor_ranges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptor_heaps_type)
    end
    def copy_descriptors_simple(this : ID3D12Device2*, num_descriptors : UInt32, dest_descriptor_range_start : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, src_descriptor_range_start : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, descriptor_heaps_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : Void
      @lpVtbl.try &.value.copy_descriptors_simple.call(this, num_descriptors, dest_descriptor_range_start, src_descriptor_range_start, descriptor_heaps_type)
    end
    def get_resource_allocation_info(this : ID3D12Device2*, visibleMask : UInt32, numResourceDescs : UInt32, pResourceDescs : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO
      @lpVtbl.try &.value.get_resource_allocation_info.call(this, visibleMask, numResourceDescs, pResourceDescs)
    end
    def get_custom_heap_properties(this : ID3D12Device2*, nodeMask : UInt32, heapType : Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE) : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES
      @lpVtbl.try &.value.get_custom_heap_properties.call(this, nodeMask, heapType)
    end
    def create_committed_resource(this : ID3D12Device2*, pHeapProperties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, heap_flags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_resource_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riidResource : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_committed_resource.call(this, pHeapProperties, heap_flags, pDesc, initial_resource_state, pOptimizedClearValue, riidResource, ppvResource)
    end
    def create_heap(this : ID3D12Device2*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_heap.call(this, pDesc, riid, ppvHeap)
    end
    def create_placed_resource(this : ID3D12Device2*, pHeap : Void*, heap_offset : UInt64, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_placed_resource.call(this, pHeap, heap_offset, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_reserved_resource(this : ID3D12Device2*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_reserved_resource.call(this, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_shared_handle(this : ID3D12Device2*, pObject : Void*, pAttributes : Win32cr::Security::SECURITY_ATTRIBUTES*, access : UInt32, name : Win32cr::Foundation::PWSTR, pHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_handle.call(this, pObject, pAttributes, access, name, pHandle)
    end
    def open_shared_handle(this : ID3D12Device2*, nt_handle : Win32cr::Foundation::HANDLE, riid : LibC::GUID*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_handle.call(this, nt_handle, riid, ppvObj)
    end
    def open_shared_handle_by_name(this : ID3D12Device2*, name : Win32cr::Foundation::PWSTR, access : UInt32, pNTHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_handle_by_name.call(this, name, access, pNTHandle)
    end
    def make_resident(this : ID3D12Device2*, num_objects : UInt32, ppObjects : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.make_resident.call(this, num_objects, ppObjects)
    end
    def evict(this : ID3D12Device2*, num_objects : UInt32, ppObjects : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evict.call(this, num_objects, ppObjects)
    end
    def create_fence(this : ID3D12Device2*, initial_value : UInt64, flags : Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS, riid : LibC::GUID*, ppFence : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_fence.call(this, initial_value, flags, riid, ppFence)
    end
    def get_device_removed_reason(this : ID3D12Device2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_removed_reason.call(this)
    end
    def get_copyable_footprints(this : ID3D12Device2*, pResourceDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, first_subresource : UInt32, num_subresources : UInt32, base_offset : UInt64, pLayouts : Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pNumRows : UInt32*, pRowSizeInBytes : UInt64*, pTotalBytes : UInt64*) : Void
      @lpVtbl.try &.value.get_copyable_footprints.call(this, pResourceDesc, first_subresource, num_subresources, base_offset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
    end
    def create_query_heap(this : ID3D12Device2*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_query_heap.call(this, pDesc, riid, ppvHeap)
    end
    def set_stable_power_state(this : ID3D12Device2*, enable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stable_power_state.call(this, enable)
    end
    def create_command_signature(this : ID3D12Device2*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_SIGNATURE_DESC*, pRootSignature : Void*, riid : LibC::GUID*, ppvCommandSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_signature.call(this, pDesc, pRootSignature, riid, ppvCommandSignature)
    end
    def get_resource_tiling(this : ID3D12Device2*, pTiledResource : Void*, pNumTilesForEntireResource : UInt32*, pPackedMipDesc : Win32cr::Graphics::Direct3D12::D3D12_PACKED_MIP_INFO*, pStandardTileShapeForNonPackedMips : Win32cr::Graphics::Direct3D12::D3D12_TILE_SHAPE*, pNumSubresourceTilings : UInt32*, first_subresource_tiling_to_get : UInt32, pSubresourceTilingsForNonPackedMips : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_TILING*) : Void
      @lpVtbl.try &.value.get_resource_tiling.call(this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, first_subresource_tiling_to_get, pSubresourceTilingsForNonPackedMips)
    end
    def get_adapter_luid(this : ID3D12Device2*) : Win32cr::Foundation::LUID
      @lpVtbl.try &.value.get_adapter_luid.call(this)
    end
    def create_pipeline_library(this : ID3D12Device2*, pLibraryBlob : Void*, blob_length : LibC::UIntPtrT, riid : LibC::GUID*, ppPipelineLibrary : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pipeline_library.call(this, pLibraryBlob, blob_length, riid, ppPipelineLibrary)
    end
    def set_event_on_multiple_fence_completion(this : ID3D12Device2*, ppFences : Void**, pFenceValues : UInt64*, num_fences : UInt32, flags : Win32cr::Graphics::Direct3D12::D3D12_MULTIPLE_FENCE_WAIT_FLAGS, hEvent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_on_multiple_fence_completion.call(this, ppFences, pFenceValues, num_fences, flags, hEvent)
    end
    def set_residency_priority(this : ID3D12Device2*, num_objects : UInt32, ppObjects : Void**, pPriorities : Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_PRIORITY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_residency_priority.call(this, num_objects, ppObjects, pPriorities)
    end
    def create_pipeline_state(this : ID3D12Device2*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_STREAM_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end

  end

  @[Extern]
  record ID3D12Device3Vtbl,
    query_interface : Proc(ID3D12Device3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Device3*, UInt32),
    release : Proc(ID3D12Device3*, UInt32),
    get_private_data : Proc(ID3D12Device3*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12Device3*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12Device3*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12Device3*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_node_count : Proc(ID3D12Device3*, UInt32),
    create_command_queue : Proc(ID3D12Device3*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_command_allocator : Proc(ID3D12Device3*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_graphics_pipeline_state : Proc(ID3D12Device3*, Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_compute_pipeline_state : Proc(ID3D12Device3*, Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_command_list : Proc(ID3D12Device3*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, Void*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    check_feature_support : Proc(ID3D12Device3*, Win32cr::Graphics::Direct3D12::D3D12_FEATURE, Void*, UInt32, Win32cr::Foundation::HRESULT),
    create_descriptor_heap : Proc(ID3D12Device3*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_descriptor_handle_increment_size : Proc(ID3D12Device3*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, UInt32),
    create_root_signature : Proc(ID3D12Device3*, UInt32, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_constant_buffer_view : Proc(ID3D12Device3*, Win32cr::Graphics::Direct3D12::D3D12_CONSTANT_BUFFER_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_shader_resource_view : Proc(ID3D12Device3*, Void*, Win32cr::Graphics::Direct3D12::D3D12_SHADER_RESOURCE_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_unordered_access_view : Proc(ID3D12Device3*, Void*, Void*, Win32cr::Graphics::Direct3D12::D3D12_UNORDERED_ACCESS_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_render_target_view : Proc(ID3D12Device3*, Void*, Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_depth_stencil_view : Proc(ID3D12Device3*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_sampler : Proc(ID3D12Device3*, Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    copy_descriptors : Proc(ID3D12Device3*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, Void),
    copy_descriptors_simple : Proc(ID3D12Device3*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, Void),
    get_resource_allocation_info : Proc(ID3D12Device3*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO),
    get_custom_heap_properties : Proc(ID3D12Device3*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES),
    create_committed_resource : Proc(ID3D12Device3*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_heap : Proc(ID3D12Device3*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_placed_resource : Proc(ID3D12Device3*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_reserved_resource : Proc(ID3D12Device3*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_shared_handle : Proc(ID3D12Device3*, Void*, Win32cr::Security::SECURITY_ATTRIBUTES*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    open_shared_handle : Proc(ID3D12Device3*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_shared_handle_by_name : Proc(ID3D12Device3*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    make_resident : Proc(ID3D12Device3*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    evict : Proc(ID3D12Device3*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_fence : Proc(ID3D12Device3*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_device_removed_reason : Proc(ID3D12Device3*, Win32cr::Foundation::HRESULT),
    get_copyable_footprints : Proc(ID3D12Device3*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, UInt32, UInt32, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void),
    create_query_heap : Proc(ID3D12Device3*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_stable_power_state : Proc(ID3D12Device3*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    create_command_signature : Proc(ID3D12Device3*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_SIGNATURE_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_resource_tiling : Proc(ID3D12Device3*, Void*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_PACKED_MIP_INFO*, Win32cr::Graphics::Direct3D12::D3D12_TILE_SHAPE*, UInt32*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_TILING*, Void),
    get_adapter_luid : Proc(ID3D12Device3*, Win32cr::Foundation::LUID),
    create_pipeline_library : Proc(ID3D12Device3*, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_event_on_multiple_fence_completion : Proc(ID3D12Device3*, Void**, UInt64*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_MULTIPLE_FENCE_WAIT_FLAGS, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    set_residency_priority : Proc(ID3D12Device3*, UInt32, Void**, Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_PRIORITY*, Win32cr::Foundation::HRESULT),
    create_pipeline_state : Proc(ID3D12Device3*, Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_STREAM_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_existing_heap_from_address : Proc(ID3D12Device3*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_existing_heap_from_file_mapping : Proc(ID3D12Device3*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    enqueue_make_resident : Proc(ID3D12Device3*, Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_FLAGS, UInt32, Void**, Void*, UInt64, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12Device3, lpVtbl : ID3D12Device3Vtbl* do
    GUID = LibC::GUID.new(0x81dadc15_u32, 0x2bad_u16, 0x4392_u16, StaticArray[0x93_u8, 0xc5_u8, 0x10_u8, 0x13_u8, 0x45_u8, 0xc4_u8, 0xaa_u8, 0x98_u8])
    def query_interface(this : ID3D12Device3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Device3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Device3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12Device3*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12Device3*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12Device3*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12Device3*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_node_count(this : ID3D12Device3*) : UInt32
      @lpVtbl.try &.value.get_node_count.call(this)
    end
    def create_command_queue(this : ID3D12Device3*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, riid : LibC::GUID*, ppCommandQueue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_queue.call(this, pDesc, riid, ppCommandQueue)
    end
    def create_command_allocator(this : ID3D12Device3*, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, riid : LibC::GUID*, ppCommandAllocator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_allocator.call(this, type__, riid, ppCommandAllocator)
    end
    def create_graphics_pipeline_state(this : ID3D12Device3*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_graphics_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def create_compute_pipeline_state(this : ID3D12Device3*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compute_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def create_command_list(this : ID3D12Device3*, nodeMask : UInt32, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, pCommandAllocator : Void*, pInitialState : Void*, riid : LibC::GUID*, ppCommandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list.call(this, nodeMask, type__, pCommandAllocator, pInitialState, riid, ppCommandList)
    end
    def check_feature_support(this : ID3D12Device3*, feature : Win32cr::Graphics::Direct3D12::D3D12_FEATURE, pFeatureSupportData : Void*, feature_support_data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_feature_support.call(this, feature, pFeatureSupportData, feature_support_data_size)
    end
    def create_descriptor_heap(this : ID3D12Device3*, pDescriptorHeapDesc : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_descriptor_heap.call(this, pDescriptorHeapDesc, riid, ppvHeap)
    end
    def get_descriptor_handle_increment_size(this : ID3D12Device3*, descriptor_heap_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : UInt32
      @lpVtbl.try &.value.get_descriptor_handle_increment_size.call(this, descriptor_heap_type)
    end
    def create_root_signature(this : ID3D12Device3*, nodeMask : UInt32, pBlobWithRootSignature : Void*, blobLengthInBytes : LibC::UIntPtrT, riid : LibC::GUID*, ppvRootSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_root_signature.call(this, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature)
    end
    def create_constant_buffer_view(this : ID3D12Device3*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_CONSTANT_BUFFER_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_constant_buffer_view.call(this, pDesc, dest_descriptor)
    end
    def create_shader_resource_view(this : ID3D12Device3*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SHADER_RESOURCE_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_shader_resource_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_unordered_access_view(this : ID3D12Device3*, pResource : Void*, pCounterResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_UNORDERED_ACCESS_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_unordered_access_view.call(this, pResource, pCounterResource, pDesc, dest_descriptor)
    end
    def create_render_target_view(this : ID3D12Device3*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_render_target_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_depth_stencil_view(this : ID3D12Device3*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_depth_stencil_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_sampler(this : ID3D12Device3*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_sampler.call(this, pDesc, dest_descriptor)
    end
    def copy_descriptors(this : ID3D12Device3*, num_dest_descriptor_ranges : UInt32, pDestDescriptorRangeStarts : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, pDestDescriptorRangeSizes : UInt32*, num_src_descriptor_ranges : UInt32, pSrcDescriptorRangeStarts : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, pSrcDescriptorRangeSizes : UInt32*, descriptor_heaps_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : Void
      @lpVtbl.try &.value.copy_descriptors.call(this, num_dest_descriptor_ranges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, num_src_descriptor_ranges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptor_heaps_type)
    end
    def copy_descriptors_simple(this : ID3D12Device3*, num_descriptors : UInt32, dest_descriptor_range_start : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, src_descriptor_range_start : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, descriptor_heaps_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : Void
      @lpVtbl.try &.value.copy_descriptors_simple.call(this, num_descriptors, dest_descriptor_range_start, src_descriptor_range_start, descriptor_heaps_type)
    end
    def get_resource_allocation_info(this : ID3D12Device3*, visibleMask : UInt32, numResourceDescs : UInt32, pResourceDescs : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO
      @lpVtbl.try &.value.get_resource_allocation_info.call(this, visibleMask, numResourceDescs, pResourceDescs)
    end
    def get_custom_heap_properties(this : ID3D12Device3*, nodeMask : UInt32, heapType : Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE) : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES
      @lpVtbl.try &.value.get_custom_heap_properties.call(this, nodeMask, heapType)
    end
    def create_committed_resource(this : ID3D12Device3*, pHeapProperties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, heap_flags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_resource_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riidResource : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_committed_resource.call(this, pHeapProperties, heap_flags, pDesc, initial_resource_state, pOptimizedClearValue, riidResource, ppvResource)
    end
    def create_heap(this : ID3D12Device3*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_heap.call(this, pDesc, riid, ppvHeap)
    end
    def create_placed_resource(this : ID3D12Device3*, pHeap : Void*, heap_offset : UInt64, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_placed_resource.call(this, pHeap, heap_offset, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_reserved_resource(this : ID3D12Device3*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_reserved_resource.call(this, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_shared_handle(this : ID3D12Device3*, pObject : Void*, pAttributes : Win32cr::Security::SECURITY_ATTRIBUTES*, access : UInt32, name : Win32cr::Foundation::PWSTR, pHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_handle.call(this, pObject, pAttributes, access, name, pHandle)
    end
    def open_shared_handle(this : ID3D12Device3*, nt_handle : Win32cr::Foundation::HANDLE, riid : LibC::GUID*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_handle.call(this, nt_handle, riid, ppvObj)
    end
    def open_shared_handle_by_name(this : ID3D12Device3*, name : Win32cr::Foundation::PWSTR, access : UInt32, pNTHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_handle_by_name.call(this, name, access, pNTHandle)
    end
    def make_resident(this : ID3D12Device3*, num_objects : UInt32, ppObjects : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.make_resident.call(this, num_objects, ppObjects)
    end
    def evict(this : ID3D12Device3*, num_objects : UInt32, ppObjects : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evict.call(this, num_objects, ppObjects)
    end
    def create_fence(this : ID3D12Device3*, initial_value : UInt64, flags : Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS, riid : LibC::GUID*, ppFence : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_fence.call(this, initial_value, flags, riid, ppFence)
    end
    def get_device_removed_reason(this : ID3D12Device3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_removed_reason.call(this)
    end
    def get_copyable_footprints(this : ID3D12Device3*, pResourceDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, first_subresource : UInt32, num_subresources : UInt32, base_offset : UInt64, pLayouts : Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pNumRows : UInt32*, pRowSizeInBytes : UInt64*, pTotalBytes : UInt64*) : Void
      @lpVtbl.try &.value.get_copyable_footprints.call(this, pResourceDesc, first_subresource, num_subresources, base_offset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
    end
    def create_query_heap(this : ID3D12Device3*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_query_heap.call(this, pDesc, riid, ppvHeap)
    end
    def set_stable_power_state(this : ID3D12Device3*, enable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stable_power_state.call(this, enable)
    end
    def create_command_signature(this : ID3D12Device3*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_SIGNATURE_DESC*, pRootSignature : Void*, riid : LibC::GUID*, ppvCommandSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_signature.call(this, pDesc, pRootSignature, riid, ppvCommandSignature)
    end
    def get_resource_tiling(this : ID3D12Device3*, pTiledResource : Void*, pNumTilesForEntireResource : UInt32*, pPackedMipDesc : Win32cr::Graphics::Direct3D12::D3D12_PACKED_MIP_INFO*, pStandardTileShapeForNonPackedMips : Win32cr::Graphics::Direct3D12::D3D12_TILE_SHAPE*, pNumSubresourceTilings : UInt32*, first_subresource_tiling_to_get : UInt32, pSubresourceTilingsForNonPackedMips : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_TILING*) : Void
      @lpVtbl.try &.value.get_resource_tiling.call(this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, first_subresource_tiling_to_get, pSubresourceTilingsForNonPackedMips)
    end
    def get_adapter_luid(this : ID3D12Device3*) : Win32cr::Foundation::LUID
      @lpVtbl.try &.value.get_adapter_luid.call(this)
    end
    def create_pipeline_library(this : ID3D12Device3*, pLibraryBlob : Void*, blob_length : LibC::UIntPtrT, riid : LibC::GUID*, ppPipelineLibrary : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pipeline_library.call(this, pLibraryBlob, blob_length, riid, ppPipelineLibrary)
    end
    def set_event_on_multiple_fence_completion(this : ID3D12Device3*, ppFences : Void**, pFenceValues : UInt64*, num_fences : UInt32, flags : Win32cr::Graphics::Direct3D12::D3D12_MULTIPLE_FENCE_WAIT_FLAGS, hEvent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_on_multiple_fence_completion.call(this, ppFences, pFenceValues, num_fences, flags, hEvent)
    end
    def set_residency_priority(this : ID3D12Device3*, num_objects : UInt32, ppObjects : Void**, pPriorities : Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_PRIORITY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_residency_priority.call(this, num_objects, ppObjects, pPriorities)
    end
    def create_pipeline_state(this : ID3D12Device3*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_STREAM_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def open_existing_heap_from_address(this : ID3D12Device3*, pAddress : Void*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_existing_heap_from_address.call(this, pAddress, riid, ppvHeap)
    end
    def open_existing_heap_from_file_mapping(this : ID3D12Device3*, hFileMapping : Win32cr::Foundation::HANDLE, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_existing_heap_from_file_mapping.call(this, hFileMapping, riid, ppvHeap)
    end
    def enqueue_make_resident(this : ID3D12Device3*, flags : Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_FLAGS, num_objects : UInt32, ppObjects : Void**, pFenceToSignal : Void*, fence_value_to_signal : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enqueue_make_resident.call(this, flags, num_objects, ppObjects, pFenceToSignal, fence_value_to_signal)
    end

  end

  @[Extern]
  record ID3D12ProtectedSessionVtbl,
    query_interface : Proc(ID3D12ProtectedSession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12ProtectedSession*, UInt32),
    release : Proc(ID3D12ProtectedSession*, UInt32),
    get_private_data : Proc(ID3D12ProtectedSession*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12ProtectedSession*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12ProtectedSession*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12ProtectedSession*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12ProtectedSession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_status_fence : Proc(ID3D12ProtectedSession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_session_status : Proc(ID3D12ProtectedSession*, Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_SESSION_STATUS)


  @[Extern]
  record ID3D12ProtectedSession, lpVtbl : ID3D12ProtectedSessionVtbl* do
    GUID = LibC::GUID.new(0xa1533d18_u32, 0xac1_u16, 0x4084_u16, StaticArray[0x85_u8, 0xb9_u8, 0x89_u8, 0xa9_u8, 0x61_u8, 0x16_u8, 0x80_u8, 0x6b_u8])
    def query_interface(this : ID3D12ProtectedSession*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12ProtectedSession*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12ProtectedSession*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12ProtectedSession*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12ProtectedSession*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12ProtectedSession*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12ProtectedSession*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12ProtectedSession*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_status_fence(this : ID3D12ProtectedSession*, riid : LibC::GUID*, ppFence : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status_fence.call(this, riid, ppFence)
    end
    def get_session_status(this : ID3D12ProtectedSession*) : Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_SESSION_STATUS
      @lpVtbl.try &.value.get_session_status.call(this)
    end

  end

  @[Extern]
  record ID3D12ProtectedResourceSessionVtbl,
    query_interface : Proc(ID3D12ProtectedResourceSession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12ProtectedResourceSession*, UInt32),
    release : Proc(ID3D12ProtectedResourceSession*, UInt32),
    get_private_data : Proc(ID3D12ProtectedResourceSession*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12ProtectedResourceSession*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12ProtectedResourceSession*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12ProtectedResourceSession*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12ProtectedResourceSession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_status_fence : Proc(ID3D12ProtectedResourceSession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_session_status : Proc(ID3D12ProtectedResourceSession*, Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_SESSION_STATUS),
    get_desc : Proc(ID3D12ProtectedResourceSession*, Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC)


  @[Extern]
  record ID3D12ProtectedResourceSession, lpVtbl : ID3D12ProtectedResourceSessionVtbl* do
    GUID = LibC::GUID.new(0x6cd696f4_u32, 0xf289_u16, 0x40cc_u16, StaticArray[0x80_u8, 0x91_u8, 0x5a_u8, 0x6c_u8, 0xa_u8, 0x9_u8, 0x9c_u8, 0x3d_u8])
    def query_interface(this : ID3D12ProtectedResourceSession*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12ProtectedResourceSession*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12ProtectedResourceSession*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12ProtectedResourceSession*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12ProtectedResourceSession*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12ProtectedResourceSession*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12ProtectedResourceSession*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12ProtectedResourceSession*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_status_fence(this : ID3D12ProtectedResourceSession*, riid : LibC::GUID*, ppFence : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status_fence.call(this, riid, ppFence)
    end
    def get_session_status(this : ID3D12ProtectedResourceSession*) : Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_SESSION_STATUS
      @lpVtbl.try &.value.get_session_status.call(this)
    end
    def get_desc(this : ID3D12ProtectedResourceSession*) : Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC
      @lpVtbl.try &.value.get_desc.call(this)
    end

  end

  @[Extern]
  record ID3D12Device4Vtbl,
    query_interface : Proc(ID3D12Device4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Device4*, UInt32),
    release : Proc(ID3D12Device4*, UInt32),
    get_private_data : Proc(ID3D12Device4*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12Device4*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12Device4*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12Device4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_node_count : Proc(ID3D12Device4*, UInt32),
    create_command_queue : Proc(ID3D12Device4*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_command_allocator : Proc(ID3D12Device4*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_graphics_pipeline_state : Proc(ID3D12Device4*, Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_compute_pipeline_state : Proc(ID3D12Device4*, Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_command_list : Proc(ID3D12Device4*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, Void*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    check_feature_support : Proc(ID3D12Device4*, Win32cr::Graphics::Direct3D12::D3D12_FEATURE, Void*, UInt32, Win32cr::Foundation::HRESULT),
    create_descriptor_heap : Proc(ID3D12Device4*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_descriptor_handle_increment_size : Proc(ID3D12Device4*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, UInt32),
    create_root_signature : Proc(ID3D12Device4*, UInt32, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_constant_buffer_view : Proc(ID3D12Device4*, Win32cr::Graphics::Direct3D12::D3D12_CONSTANT_BUFFER_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_shader_resource_view : Proc(ID3D12Device4*, Void*, Win32cr::Graphics::Direct3D12::D3D12_SHADER_RESOURCE_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_unordered_access_view : Proc(ID3D12Device4*, Void*, Void*, Win32cr::Graphics::Direct3D12::D3D12_UNORDERED_ACCESS_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_render_target_view : Proc(ID3D12Device4*, Void*, Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_depth_stencil_view : Proc(ID3D12Device4*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_sampler : Proc(ID3D12Device4*, Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    copy_descriptors : Proc(ID3D12Device4*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, Void),
    copy_descriptors_simple : Proc(ID3D12Device4*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, Void),
    get_resource_allocation_info : Proc(ID3D12Device4*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO),
    get_custom_heap_properties : Proc(ID3D12Device4*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES),
    create_committed_resource : Proc(ID3D12Device4*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_heap : Proc(ID3D12Device4*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_placed_resource : Proc(ID3D12Device4*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_reserved_resource : Proc(ID3D12Device4*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_shared_handle : Proc(ID3D12Device4*, Void*, Win32cr::Security::SECURITY_ATTRIBUTES*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    open_shared_handle : Proc(ID3D12Device4*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_shared_handle_by_name : Proc(ID3D12Device4*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    make_resident : Proc(ID3D12Device4*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    evict : Proc(ID3D12Device4*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_fence : Proc(ID3D12Device4*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_device_removed_reason : Proc(ID3D12Device4*, Win32cr::Foundation::HRESULT),
    get_copyable_footprints : Proc(ID3D12Device4*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, UInt32, UInt32, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void),
    create_query_heap : Proc(ID3D12Device4*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_stable_power_state : Proc(ID3D12Device4*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    create_command_signature : Proc(ID3D12Device4*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_SIGNATURE_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_resource_tiling : Proc(ID3D12Device4*, Void*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_PACKED_MIP_INFO*, Win32cr::Graphics::Direct3D12::D3D12_TILE_SHAPE*, UInt32*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_TILING*, Void),
    get_adapter_luid : Proc(ID3D12Device4*, Win32cr::Foundation::LUID),
    create_pipeline_library : Proc(ID3D12Device4*, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_event_on_multiple_fence_completion : Proc(ID3D12Device4*, Void**, UInt64*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_MULTIPLE_FENCE_WAIT_FLAGS, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    set_residency_priority : Proc(ID3D12Device4*, UInt32, Void**, Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_PRIORITY*, Win32cr::Foundation::HRESULT),
    create_pipeline_state : Proc(ID3D12Device4*, Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_STREAM_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_existing_heap_from_address : Proc(ID3D12Device4*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_existing_heap_from_file_mapping : Proc(ID3D12Device4*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    enqueue_make_resident : Proc(ID3D12Device4*, Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_FLAGS, UInt32, Void**, Void*, UInt64, Win32cr::Foundation::HRESULT),
    create_command_list1 : Proc(ID3D12Device4*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_FLAGS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_protected_resource_session : Proc(ID3D12Device4*, Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_committed_resource1 : Proc(ID3D12Device4*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_heap1 : Proc(ID3D12Device4*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_reserved_resource1 : Proc(ID3D12Device4*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_resource_allocation_info1 : Proc(ID3D12Device4*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO1*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO)


  @[Extern]
  record ID3D12Device4, lpVtbl : ID3D12Device4Vtbl* do
    GUID = LibC::GUID.new(0xe865df17_u32, 0xa9ee_u16, 0x46f9_u16, StaticArray[0xa4_u8, 0x63_u8, 0x30_u8, 0x98_u8, 0x31_u8, 0x5a_u8, 0xa2_u8, 0xe5_u8])
    def query_interface(this : ID3D12Device4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Device4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Device4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12Device4*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12Device4*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12Device4*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12Device4*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_node_count(this : ID3D12Device4*) : UInt32
      @lpVtbl.try &.value.get_node_count.call(this)
    end
    def create_command_queue(this : ID3D12Device4*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, riid : LibC::GUID*, ppCommandQueue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_queue.call(this, pDesc, riid, ppCommandQueue)
    end
    def create_command_allocator(this : ID3D12Device4*, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, riid : LibC::GUID*, ppCommandAllocator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_allocator.call(this, type__, riid, ppCommandAllocator)
    end
    def create_graphics_pipeline_state(this : ID3D12Device4*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_graphics_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def create_compute_pipeline_state(this : ID3D12Device4*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compute_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def create_command_list(this : ID3D12Device4*, nodeMask : UInt32, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, pCommandAllocator : Void*, pInitialState : Void*, riid : LibC::GUID*, ppCommandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list.call(this, nodeMask, type__, pCommandAllocator, pInitialState, riid, ppCommandList)
    end
    def check_feature_support(this : ID3D12Device4*, feature : Win32cr::Graphics::Direct3D12::D3D12_FEATURE, pFeatureSupportData : Void*, feature_support_data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_feature_support.call(this, feature, pFeatureSupportData, feature_support_data_size)
    end
    def create_descriptor_heap(this : ID3D12Device4*, pDescriptorHeapDesc : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_descriptor_heap.call(this, pDescriptorHeapDesc, riid, ppvHeap)
    end
    def get_descriptor_handle_increment_size(this : ID3D12Device4*, descriptor_heap_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : UInt32
      @lpVtbl.try &.value.get_descriptor_handle_increment_size.call(this, descriptor_heap_type)
    end
    def create_root_signature(this : ID3D12Device4*, nodeMask : UInt32, pBlobWithRootSignature : Void*, blobLengthInBytes : LibC::UIntPtrT, riid : LibC::GUID*, ppvRootSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_root_signature.call(this, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature)
    end
    def create_constant_buffer_view(this : ID3D12Device4*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_CONSTANT_BUFFER_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_constant_buffer_view.call(this, pDesc, dest_descriptor)
    end
    def create_shader_resource_view(this : ID3D12Device4*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SHADER_RESOURCE_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_shader_resource_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_unordered_access_view(this : ID3D12Device4*, pResource : Void*, pCounterResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_UNORDERED_ACCESS_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_unordered_access_view.call(this, pResource, pCounterResource, pDesc, dest_descriptor)
    end
    def create_render_target_view(this : ID3D12Device4*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_render_target_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_depth_stencil_view(this : ID3D12Device4*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_depth_stencil_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_sampler(this : ID3D12Device4*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_sampler.call(this, pDesc, dest_descriptor)
    end
    def copy_descriptors(this : ID3D12Device4*, num_dest_descriptor_ranges : UInt32, pDestDescriptorRangeStarts : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, pDestDescriptorRangeSizes : UInt32*, num_src_descriptor_ranges : UInt32, pSrcDescriptorRangeStarts : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, pSrcDescriptorRangeSizes : UInt32*, descriptor_heaps_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : Void
      @lpVtbl.try &.value.copy_descriptors.call(this, num_dest_descriptor_ranges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, num_src_descriptor_ranges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptor_heaps_type)
    end
    def copy_descriptors_simple(this : ID3D12Device4*, num_descriptors : UInt32, dest_descriptor_range_start : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, src_descriptor_range_start : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, descriptor_heaps_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : Void
      @lpVtbl.try &.value.copy_descriptors_simple.call(this, num_descriptors, dest_descriptor_range_start, src_descriptor_range_start, descriptor_heaps_type)
    end
    def get_resource_allocation_info(this : ID3D12Device4*, visibleMask : UInt32, numResourceDescs : UInt32, pResourceDescs : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO
      @lpVtbl.try &.value.get_resource_allocation_info.call(this, visibleMask, numResourceDescs, pResourceDescs)
    end
    def get_custom_heap_properties(this : ID3D12Device4*, nodeMask : UInt32, heapType : Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE) : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES
      @lpVtbl.try &.value.get_custom_heap_properties.call(this, nodeMask, heapType)
    end
    def create_committed_resource(this : ID3D12Device4*, pHeapProperties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, heap_flags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_resource_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riidResource : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_committed_resource.call(this, pHeapProperties, heap_flags, pDesc, initial_resource_state, pOptimizedClearValue, riidResource, ppvResource)
    end
    def create_heap(this : ID3D12Device4*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_heap.call(this, pDesc, riid, ppvHeap)
    end
    def create_placed_resource(this : ID3D12Device4*, pHeap : Void*, heap_offset : UInt64, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_placed_resource.call(this, pHeap, heap_offset, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_reserved_resource(this : ID3D12Device4*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_reserved_resource.call(this, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_shared_handle(this : ID3D12Device4*, pObject : Void*, pAttributes : Win32cr::Security::SECURITY_ATTRIBUTES*, access : UInt32, name : Win32cr::Foundation::PWSTR, pHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_handle.call(this, pObject, pAttributes, access, name, pHandle)
    end
    def open_shared_handle(this : ID3D12Device4*, nt_handle : Win32cr::Foundation::HANDLE, riid : LibC::GUID*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_handle.call(this, nt_handle, riid, ppvObj)
    end
    def open_shared_handle_by_name(this : ID3D12Device4*, name : Win32cr::Foundation::PWSTR, access : UInt32, pNTHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_handle_by_name.call(this, name, access, pNTHandle)
    end
    def make_resident(this : ID3D12Device4*, num_objects : UInt32, ppObjects : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.make_resident.call(this, num_objects, ppObjects)
    end
    def evict(this : ID3D12Device4*, num_objects : UInt32, ppObjects : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evict.call(this, num_objects, ppObjects)
    end
    def create_fence(this : ID3D12Device4*, initial_value : UInt64, flags : Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS, riid : LibC::GUID*, ppFence : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_fence.call(this, initial_value, flags, riid, ppFence)
    end
    def get_device_removed_reason(this : ID3D12Device4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_removed_reason.call(this)
    end
    def get_copyable_footprints(this : ID3D12Device4*, pResourceDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, first_subresource : UInt32, num_subresources : UInt32, base_offset : UInt64, pLayouts : Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pNumRows : UInt32*, pRowSizeInBytes : UInt64*, pTotalBytes : UInt64*) : Void
      @lpVtbl.try &.value.get_copyable_footprints.call(this, pResourceDesc, first_subresource, num_subresources, base_offset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
    end
    def create_query_heap(this : ID3D12Device4*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_query_heap.call(this, pDesc, riid, ppvHeap)
    end
    def set_stable_power_state(this : ID3D12Device4*, enable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stable_power_state.call(this, enable)
    end
    def create_command_signature(this : ID3D12Device4*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_SIGNATURE_DESC*, pRootSignature : Void*, riid : LibC::GUID*, ppvCommandSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_signature.call(this, pDesc, pRootSignature, riid, ppvCommandSignature)
    end
    def get_resource_tiling(this : ID3D12Device4*, pTiledResource : Void*, pNumTilesForEntireResource : UInt32*, pPackedMipDesc : Win32cr::Graphics::Direct3D12::D3D12_PACKED_MIP_INFO*, pStandardTileShapeForNonPackedMips : Win32cr::Graphics::Direct3D12::D3D12_TILE_SHAPE*, pNumSubresourceTilings : UInt32*, first_subresource_tiling_to_get : UInt32, pSubresourceTilingsForNonPackedMips : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_TILING*) : Void
      @lpVtbl.try &.value.get_resource_tiling.call(this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, first_subresource_tiling_to_get, pSubresourceTilingsForNonPackedMips)
    end
    def get_adapter_luid(this : ID3D12Device4*) : Win32cr::Foundation::LUID
      @lpVtbl.try &.value.get_adapter_luid.call(this)
    end
    def create_pipeline_library(this : ID3D12Device4*, pLibraryBlob : Void*, blob_length : LibC::UIntPtrT, riid : LibC::GUID*, ppPipelineLibrary : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pipeline_library.call(this, pLibraryBlob, blob_length, riid, ppPipelineLibrary)
    end
    def set_event_on_multiple_fence_completion(this : ID3D12Device4*, ppFences : Void**, pFenceValues : UInt64*, num_fences : UInt32, flags : Win32cr::Graphics::Direct3D12::D3D12_MULTIPLE_FENCE_WAIT_FLAGS, hEvent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_on_multiple_fence_completion.call(this, ppFences, pFenceValues, num_fences, flags, hEvent)
    end
    def set_residency_priority(this : ID3D12Device4*, num_objects : UInt32, ppObjects : Void**, pPriorities : Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_PRIORITY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_residency_priority.call(this, num_objects, ppObjects, pPriorities)
    end
    def create_pipeline_state(this : ID3D12Device4*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_STREAM_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def open_existing_heap_from_address(this : ID3D12Device4*, pAddress : Void*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_existing_heap_from_address.call(this, pAddress, riid, ppvHeap)
    end
    def open_existing_heap_from_file_mapping(this : ID3D12Device4*, hFileMapping : Win32cr::Foundation::HANDLE, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_existing_heap_from_file_mapping.call(this, hFileMapping, riid, ppvHeap)
    end
    def enqueue_make_resident(this : ID3D12Device4*, flags : Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_FLAGS, num_objects : UInt32, ppObjects : Void**, pFenceToSignal : Void*, fence_value_to_signal : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enqueue_make_resident.call(this, flags, num_objects, ppObjects, pFenceToSignal, fence_value_to_signal)
    end
    def create_command_list1(this : ID3D12Device4*, nodeMask : UInt32, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, flags : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_FLAGS, riid : LibC::GUID*, ppCommandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list1.call(this, nodeMask, type__, flags, riid, ppCommandList)
    end
    def create_protected_resource_session(this : ID3D12Device4*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC*, riid : LibC::GUID*, ppSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_protected_resource_session.call(this, pDesc, riid, ppSession)
    end
    def create_committed_resource1(this : ID3D12Device4*, pHeapProperties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, heap_flags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_resource_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, pProtectedSession : Void*, riidResource : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_committed_resource1.call(this, pHeapProperties, heap_flags, pDesc, initial_resource_state, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource)
    end
    def create_heap1(this : ID3D12Device4*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, pProtectedSession : Void*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_heap1.call(this, pDesc, pProtectedSession, riid, ppvHeap)
    end
    def create_reserved_resource1(this : ID3D12Device4*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, pProtectedSession : Void*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_reserved_resource1.call(this, pDesc, initial_state, pOptimizedClearValue, pProtectedSession, riid, ppvResource)
    end
    def get_resource_allocation_info1(this : ID3D12Device4*, visibleMask : UInt32, numResourceDescs : UInt32, pResourceDescs : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, pResourceAllocationInfo1 : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO1*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO
      @lpVtbl.try &.value.get_resource_allocation_info1.call(this, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1)
    end

  end

  @[Extern]
  record ID3D12LifetimeOwnerVtbl,
    query_interface : Proc(ID3D12LifetimeOwner*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12LifetimeOwner*, UInt32),
    release : Proc(ID3D12LifetimeOwner*, UInt32),
    lifetime_state_updated : Proc(ID3D12LifetimeOwner*, Win32cr::Graphics::Direct3D12::D3D12_LIFETIME_STATE, Void)


  @[Extern]
  record ID3D12LifetimeOwner, lpVtbl : ID3D12LifetimeOwnerVtbl* do
    GUID = LibC::GUID.new(0xe667af9f_u32, 0xcd56_u16, 0x4f46_u16, StaticArray[0x83_u8, 0xce_u8, 0x3_u8, 0x2e_u8, 0x59_u8, 0x5d_u8, 0x70_u8, 0xa8_u8])
    def query_interface(this : ID3D12LifetimeOwner*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12LifetimeOwner*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12LifetimeOwner*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def lifetime_state_updated(this : ID3D12LifetimeOwner*, new_state : Win32cr::Graphics::Direct3D12::D3D12_LIFETIME_STATE) : Void
      @lpVtbl.try &.value.lifetime_state_updated.call(this, new_state)
    end

  end

  @[Extern]
  record ID3D12SwapChainAssistantVtbl,
    query_interface : Proc(ID3D12SwapChainAssistant*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12SwapChainAssistant*, UInt32),
    release : Proc(ID3D12SwapChainAssistant*, UInt32),
    get_luid : Proc(ID3D12SwapChainAssistant*, Win32cr::Foundation::LUID),
    get_swap_chain_object : Proc(ID3D12SwapChainAssistant*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_current_resource_and_command_queue : Proc(ID3D12SwapChainAssistant*, LibC::GUID*, Void**, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    insert_implicit_sync : Proc(ID3D12SwapChainAssistant*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12SwapChainAssistant, lpVtbl : ID3D12SwapChainAssistantVtbl* do
    GUID = LibC::GUID.new(0xf1df64b6_u32, 0x57fd_u16, 0x49cd_u16, StaticArray[0x88_u8, 0x7_u8, 0xc0_u8, 0xeb_u8, 0x88_u8, 0xb4_u8, 0x5c_u8, 0x8f_u8])
    def query_interface(this : ID3D12SwapChainAssistant*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12SwapChainAssistant*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12SwapChainAssistant*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_luid(this : ID3D12SwapChainAssistant*) : Win32cr::Foundation::LUID
      @lpVtbl.try &.value.get_luid.call(this)
    end
    def get_swap_chain_object(this : ID3D12SwapChainAssistant*, riid : LibC::GUID*, ppv : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_swap_chain_object.call(this, riid, ppv)
    end
    def get_current_resource_and_command_queue(this : ID3D12SwapChainAssistant*, riidResource : LibC::GUID*, ppvResource : Void**, riidQueue : LibC::GUID*, ppvQueue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_current_resource_and_command_queue.call(this, riidResource, ppvResource, riidQueue, ppvQueue)
    end
    def insert_implicit_sync(this : ID3D12SwapChainAssistant*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.insert_implicit_sync.call(this)
    end

  end

  @[Extern]
  record ID3D12LifetimeTrackerVtbl,
    query_interface : Proc(ID3D12LifetimeTracker*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12LifetimeTracker*, UInt32),
    release : Proc(ID3D12LifetimeTracker*, UInt32),
    get_private_data : Proc(ID3D12LifetimeTracker*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12LifetimeTracker*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12LifetimeTracker*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12LifetimeTracker*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12LifetimeTracker*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    destroy_owned_object : Proc(ID3D12LifetimeTracker*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12LifetimeTracker, lpVtbl : ID3D12LifetimeTrackerVtbl* do
    GUID = LibC::GUID.new(0x3fd03d36_u32, 0x4eb1_u16, 0x424a_u16, StaticArray[0xa5_u8, 0x82_u8, 0x49_u8, 0x4e_u8, 0xcb_u8, 0x8b_u8, 0xa8_u8, 0x13_u8])
    def query_interface(this : ID3D12LifetimeTracker*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12LifetimeTracker*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12LifetimeTracker*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12LifetimeTracker*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12LifetimeTracker*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12LifetimeTracker*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12LifetimeTracker*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12LifetimeTracker*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def destroy_owned_object(this : ID3D12LifetimeTracker*, pObject : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.destroy_owned_object.call(this, pObject)
    end

  end

  @[Extern]
  record ID3D12StateObjectVtbl,
    query_interface : Proc(ID3D12StateObject*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12StateObject*, UInt32),
    release : Proc(ID3D12StateObject*, UInt32),
    get_private_data : Proc(ID3D12StateObject*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12StateObject*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12StateObject*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12StateObject*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12StateObject*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12StateObject, lpVtbl : ID3D12StateObjectVtbl* do
    GUID = LibC::GUID.new(0x47016943_u32, 0xfca8_u16, 0x4594_u16, StaticArray[0x93_u8, 0xea_u8, 0xaf_u8, 0x25_u8, 0x8b_u8, 0x55_u8, 0x34_u8, 0x6d_u8])
    def query_interface(this : ID3D12StateObject*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12StateObject*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12StateObject*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12StateObject*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12StateObject*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12StateObject*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12StateObject*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12StateObject*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end

  end

  @[Extern]
  record ID3D12StateObjectPropertiesVtbl,
    query_interface : Proc(ID3D12StateObjectProperties*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12StateObjectProperties*, UInt32),
    release : Proc(ID3D12StateObjectProperties*, UInt32),
    get_shader_identifier : Proc(ID3D12StateObjectProperties*, Win32cr::Foundation::PWSTR, Void*),
    get_shader_stack_size : Proc(ID3D12StateObjectProperties*, Win32cr::Foundation::PWSTR, UInt64),
    get_pipeline_stack_size : Proc(ID3D12StateObjectProperties*, UInt64),
    set_pipeline_stack_size : Proc(ID3D12StateObjectProperties*, UInt64, Void)


  @[Extern]
  record ID3D12StateObjectProperties, lpVtbl : ID3D12StateObjectPropertiesVtbl* do
    GUID = LibC::GUID.new(0xde5fa827_u32, 0x9bf9_u16, 0x4f26_u16, StaticArray[0x89_u8, 0xff_u8, 0xd7_u8, 0xf5_u8, 0x6f_u8, 0xde_u8, 0x38_u8, 0x60_u8])
    def query_interface(this : ID3D12StateObjectProperties*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12StateObjectProperties*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12StateObjectProperties*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_shader_identifier(this : ID3D12StateObjectProperties*, pExportName : Win32cr::Foundation::PWSTR) : Void*
      @lpVtbl.try &.value.get_shader_identifier.call(this, pExportName)
    end
    def get_shader_stack_size(this : ID3D12StateObjectProperties*, pExportName : Win32cr::Foundation::PWSTR) : UInt64
      @lpVtbl.try &.value.get_shader_stack_size.call(this, pExportName)
    end
    def get_pipeline_stack_size(this : ID3D12StateObjectProperties*) : UInt64
      @lpVtbl.try &.value.get_pipeline_stack_size.call(this)
    end
    def set_pipeline_stack_size(this : ID3D12StateObjectProperties*, pipeline_stack_size_in_bytes : UInt64) : Void
      @lpVtbl.try &.value.set_pipeline_stack_size.call(this, pipeline_stack_size_in_bytes)
    end

  end

  @[Extern]
  record ID3D12Device5Vtbl,
    query_interface : Proc(ID3D12Device5*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Device5*, UInt32),
    release : Proc(ID3D12Device5*, UInt32),
    get_private_data : Proc(ID3D12Device5*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12Device5*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12Device5*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12Device5*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_node_count : Proc(ID3D12Device5*, UInt32),
    create_command_queue : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_command_allocator : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_graphics_pipeline_state : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_compute_pipeline_state : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_command_list : Proc(ID3D12Device5*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, Void*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    check_feature_support : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_FEATURE, Void*, UInt32, Win32cr::Foundation::HRESULT),
    create_descriptor_heap : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_descriptor_handle_increment_size : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, UInt32),
    create_root_signature : Proc(ID3D12Device5*, UInt32, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_constant_buffer_view : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_CONSTANT_BUFFER_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_shader_resource_view : Proc(ID3D12Device5*, Void*, Win32cr::Graphics::Direct3D12::D3D12_SHADER_RESOURCE_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_unordered_access_view : Proc(ID3D12Device5*, Void*, Void*, Win32cr::Graphics::Direct3D12::D3D12_UNORDERED_ACCESS_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_render_target_view : Proc(ID3D12Device5*, Void*, Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_depth_stencil_view : Proc(ID3D12Device5*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_sampler : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    copy_descriptors : Proc(ID3D12Device5*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, Void),
    copy_descriptors_simple : Proc(ID3D12Device5*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, Void),
    get_resource_allocation_info : Proc(ID3D12Device5*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO),
    get_custom_heap_properties : Proc(ID3D12Device5*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES),
    create_committed_resource : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_heap : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_placed_resource : Proc(ID3D12Device5*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_reserved_resource : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_shared_handle : Proc(ID3D12Device5*, Void*, Win32cr::Security::SECURITY_ATTRIBUTES*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    open_shared_handle : Proc(ID3D12Device5*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_shared_handle_by_name : Proc(ID3D12Device5*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    make_resident : Proc(ID3D12Device5*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    evict : Proc(ID3D12Device5*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_fence : Proc(ID3D12Device5*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_device_removed_reason : Proc(ID3D12Device5*, Win32cr::Foundation::HRESULT),
    get_copyable_footprints : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, UInt32, UInt32, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void),
    create_query_heap : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_stable_power_state : Proc(ID3D12Device5*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    create_command_signature : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_SIGNATURE_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_resource_tiling : Proc(ID3D12Device5*, Void*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_PACKED_MIP_INFO*, Win32cr::Graphics::Direct3D12::D3D12_TILE_SHAPE*, UInt32*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_TILING*, Void),
    get_adapter_luid : Proc(ID3D12Device5*, Win32cr::Foundation::LUID),
    create_pipeline_library : Proc(ID3D12Device5*, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_event_on_multiple_fence_completion : Proc(ID3D12Device5*, Void**, UInt64*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_MULTIPLE_FENCE_WAIT_FLAGS, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    set_residency_priority : Proc(ID3D12Device5*, UInt32, Void**, Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_PRIORITY*, Win32cr::Foundation::HRESULT),
    create_pipeline_state : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_STREAM_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_existing_heap_from_address : Proc(ID3D12Device5*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_existing_heap_from_file_mapping : Proc(ID3D12Device5*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    enqueue_make_resident : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_FLAGS, UInt32, Void**, Void*, UInt64, Win32cr::Foundation::HRESULT),
    create_command_list1 : Proc(ID3D12Device5*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_FLAGS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_protected_resource_session : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_committed_resource1 : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_heap1 : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_reserved_resource1 : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_resource_allocation_info1 : Proc(ID3D12Device5*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO1*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO),
    create_lifetime_tracker : Proc(ID3D12Device5*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    remove_device : Proc(ID3D12Device5*, Void),
    enumerate_meta_commands : Proc(ID3D12Device5*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_DESC*, Win32cr::Foundation::HRESULT),
    enumerate_meta_command_parameters : Proc(ID3D12Device5*, LibC::GUID*, Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_STAGE, UInt32*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_DESC*, Win32cr::Foundation::HRESULT),
    create_meta_command : Proc(ID3D12Device5*, LibC::GUID*, UInt32, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_state_object : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_STATE_OBJECT_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_raytracing_acceleration_structure_prebuild_info : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*, Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*, Void),
    check_driver_matching_identifier : Proc(ID3D12Device5*, Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_TYPE, Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*, Win32cr::Graphics::Direct3D12::D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS)


  @[Extern]
  record ID3D12Device5, lpVtbl : ID3D12Device5Vtbl* do
    GUID = LibC::GUID.new(0x8b4f173b_u32, 0x2fea_u16, 0x4b80_u16, StaticArray[0x8f_u8, 0x58_u8, 0x43_u8, 0x7_u8, 0x19_u8, 0x1a_u8, 0xb9_u8, 0x5d_u8])
    def query_interface(this : ID3D12Device5*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Device5*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Device5*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12Device5*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12Device5*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12Device5*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12Device5*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_node_count(this : ID3D12Device5*) : UInt32
      @lpVtbl.try &.value.get_node_count.call(this)
    end
    def create_command_queue(this : ID3D12Device5*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, riid : LibC::GUID*, ppCommandQueue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_queue.call(this, pDesc, riid, ppCommandQueue)
    end
    def create_command_allocator(this : ID3D12Device5*, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, riid : LibC::GUID*, ppCommandAllocator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_allocator.call(this, type__, riid, ppCommandAllocator)
    end
    def create_graphics_pipeline_state(this : ID3D12Device5*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_graphics_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def create_compute_pipeline_state(this : ID3D12Device5*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compute_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def create_command_list(this : ID3D12Device5*, nodeMask : UInt32, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, pCommandAllocator : Void*, pInitialState : Void*, riid : LibC::GUID*, ppCommandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list.call(this, nodeMask, type__, pCommandAllocator, pInitialState, riid, ppCommandList)
    end
    def check_feature_support(this : ID3D12Device5*, feature : Win32cr::Graphics::Direct3D12::D3D12_FEATURE, pFeatureSupportData : Void*, feature_support_data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_feature_support.call(this, feature, pFeatureSupportData, feature_support_data_size)
    end
    def create_descriptor_heap(this : ID3D12Device5*, pDescriptorHeapDesc : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_descriptor_heap.call(this, pDescriptorHeapDesc, riid, ppvHeap)
    end
    def get_descriptor_handle_increment_size(this : ID3D12Device5*, descriptor_heap_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : UInt32
      @lpVtbl.try &.value.get_descriptor_handle_increment_size.call(this, descriptor_heap_type)
    end
    def create_root_signature(this : ID3D12Device5*, nodeMask : UInt32, pBlobWithRootSignature : Void*, blobLengthInBytes : LibC::UIntPtrT, riid : LibC::GUID*, ppvRootSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_root_signature.call(this, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature)
    end
    def create_constant_buffer_view(this : ID3D12Device5*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_CONSTANT_BUFFER_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_constant_buffer_view.call(this, pDesc, dest_descriptor)
    end
    def create_shader_resource_view(this : ID3D12Device5*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SHADER_RESOURCE_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_shader_resource_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_unordered_access_view(this : ID3D12Device5*, pResource : Void*, pCounterResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_UNORDERED_ACCESS_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_unordered_access_view.call(this, pResource, pCounterResource, pDesc, dest_descriptor)
    end
    def create_render_target_view(this : ID3D12Device5*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_render_target_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_depth_stencil_view(this : ID3D12Device5*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_depth_stencil_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_sampler(this : ID3D12Device5*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_sampler.call(this, pDesc, dest_descriptor)
    end
    def copy_descriptors(this : ID3D12Device5*, num_dest_descriptor_ranges : UInt32, pDestDescriptorRangeStarts : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, pDestDescriptorRangeSizes : UInt32*, num_src_descriptor_ranges : UInt32, pSrcDescriptorRangeStarts : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, pSrcDescriptorRangeSizes : UInt32*, descriptor_heaps_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : Void
      @lpVtbl.try &.value.copy_descriptors.call(this, num_dest_descriptor_ranges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, num_src_descriptor_ranges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptor_heaps_type)
    end
    def copy_descriptors_simple(this : ID3D12Device5*, num_descriptors : UInt32, dest_descriptor_range_start : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, src_descriptor_range_start : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, descriptor_heaps_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : Void
      @lpVtbl.try &.value.copy_descriptors_simple.call(this, num_descriptors, dest_descriptor_range_start, src_descriptor_range_start, descriptor_heaps_type)
    end
    def get_resource_allocation_info(this : ID3D12Device5*, visibleMask : UInt32, numResourceDescs : UInt32, pResourceDescs : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO
      @lpVtbl.try &.value.get_resource_allocation_info.call(this, visibleMask, numResourceDescs, pResourceDescs)
    end
    def get_custom_heap_properties(this : ID3D12Device5*, nodeMask : UInt32, heapType : Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE) : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES
      @lpVtbl.try &.value.get_custom_heap_properties.call(this, nodeMask, heapType)
    end
    def create_committed_resource(this : ID3D12Device5*, pHeapProperties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, heap_flags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_resource_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riidResource : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_committed_resource.call(this, pHeapProperties, heap_flags, pDesc, initial_resource_state, pOptimizedClearValue, riidResource, ppvResource)
    end
    def create_heap(this : ID3D12Device5*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_heap.call(this, pDesc, riid, ppvHeap)
    end
    def create_placed_resource(this : ID3D12Device5*, pHeap : Void*, heap_offset : UInt64, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_placed_resource.call(this, pHeap, heap_offset, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_reserved_resource(this : ID3D12Device5*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_reserved_resource.call(this, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_shared_handle(this : ID3D12Device5*, pObject : Void*, pAttributes : Win32cr::Security::SECURITY_ATTRIBUTES*, access : UInt32, name : Win32cr::Foundation::PWSTR, pHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_handle.call(this, pObject, pAttributes, access, name, pHandle)
    end
    def open_shared_handle(this : ID3D12Device5*, nt_handle : Win32cr::Foundation::HANDLE, riid : LibC::GUID*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_handle.call(this, nt_handle, riid, ppvObj)
    end
    def open_shared_handle_by_name(this : ID3D12Device5*, name : Win32cr::Foundation::PWSTR, access : UInt32, pNTHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_handle_by_name.call(this, name, access, pNTHandle)
    end
    def make_resident(this : ID3D12Device5*, num_objects : UInt32, ppObjects : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.make_resident.call(this, num_objects, ppObjects)
    end
    def evict(this : ID3D12Device5*, num_objects : UInt32, ppObjects : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evict.call(this, num_objects, ppObjects)
    end
    def create_fence(this : ID3D12Device5*, initial_value : UInt64, flags : Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS, riid : LibC::GUID*, ppFence : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_fence.call(this, initial_value, flags, riid, ppFence)
    end
    def get_device_removed_reason(this : ID3D12Device5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_removed_reason.call(this)
    end
    def get_copyable_footprints(this : ID3D12Device5*, pResourceDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, first_subresource : UInt32, num_subresources : UInt32, base_offset : UInt64, pLayouts : Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pNumRows : UInt32*, pRowSizeInBytes : UInt64*, pTotalBytes : UInt64*) : Void
      @lpVtbl.try &.value.get_copyable_footprints.call(this, pResourceDesc, first_subresource, num_subresources, base_offset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
    end
    def create_query_heap(this : ID3D12Device5*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_query_heap.call(this, pDesc, riid, ppvHeap)
    end
    def set_stable_power_state(this : ID3D12Device5*, enable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stable_power_state.call(this, enable)
    end
    def create_command_signature(this : ID3D12Device5*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_SIGNATURE_DESC*, pRootSignature : Void*, riid : LibC::GUID*, ppvCommandSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_signature.call(this, pDesc, pRootSignature, riid, ppvCommandSignature)
    end
    def get_resource_tiling(this : ID3D12Device5*, pTiledResource : Void*, pNumTilesForEntireResource : UInt32*, pPackedMipDesc : Win32cr::Graphics::Direct3D12::D3D12_PACKED_MIP_INFO*, pStandardTileShapeForNonPackedMips : Win32cr::Graphics::Direct3D12::D3D12_TILE_SHAPE*, pNumSubresourceTilings : UInt32*, first_subresource_tiling_to_get : UInt32, pSubresourceTilingsForNonPackedMips : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_TILING*) : Void
      @lpVtbl.try &.value.get_resource_tiling.call(this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, first_subresource_tiling_to_get, pSubresourceTilingsForNonPackedMips)
    end
    def get_adapter_luid(this : ID3D12Device5*) : Win32cr::Foundation::LUID
      @lpVtbl.try &.value.get_adapter_luid.call(this)
    end
    def create_pipeline_library(this : ID3D12Device5*, pLibraryBlob : Void*, blob_length : LibC::UIntPtrT, riid : LibC::GUID*, ppPipelineLibrary : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pipeline_library.call(this, pLibraryBlob, blob_length, riid, ppPipelineLibrary)
    end
    def set_event_on_multiple_fence_completion(this : ID3D12Device5*, ppFences : Void**, pFenceValues : UInt64*, num_fences : UInt32, flags : Win32cr::Graphics::Direct3D12::D3D12_MULTIPLE_FENCE_WAIT_FLAGS, hEvent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_on_multiple_fence_completion.call(this, ppFences, pFenceValues, num_fences, flags, hEvent)
    end
    def set_residency_priority(this : ID3D12Device5*, num_objects : UInt32, ppObjects : Void**, pPriorities : Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_PRIORITY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_residency_priority.call(this, num_objects, ppObjects, pPriorities)
    end
    def create_pipeline_state(this : ID3D12Device5*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_STREAM_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def open_existing_heap_from_address(this : ID3D12Device5*, pAddress : Void*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_existing_heap_from_address.call(this, pAddress, riid, ppvHeap)
    end
    def open_existing_heap_from_file_mapping(this : ID3D12Device5*, hFileMapping : Win32cr::Foundation::HANDLE, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_existing_heap_from_file_mapping.call(this, hFileMapping, riid, ppvHeap)
    end
    def enqueue_make_resident(this : ID3D12Device5*, flags : Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_FLAGS, num_objects : UInt32, ppObjects : Void**, pFenceToSignal : Void*, fence_value_to_signal : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enqueue_make_resident.call(this, flags, num_objects, ppObjects, pFenceToSignal, fence_value_to_signal)
    end
    def create_command_list1(this : ID3D12Device5*, nodeMask : UInt32, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, flags : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_FLAGS, riid : LibC::GUID*, ppCommandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list1.call(this, nodeMask, type__, flags, riid, ppCommandList)
    end
    def create_protected_resource_session(this : ID3D12Device5*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC*, riid : LibC::GUID*, ppSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_protected_resource_session.call(this, pDesc, riid, ppSession)
    end
    def create_committed_resource1(this : ID3D12Device5*, pHeapProperties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, heap_flags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_resource_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, pProtectedSession : Void*, riidResource : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_committed_resource1.call(this, pHeapProperties, heap_flags, pDesc, initial_resource_state, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource)
    end
    def create_heap1(this : ID3D12Device5*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, pProtectedSession : Void*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_heap1.call(this, pDesc, pProtectedSession, riid, ppvHeap)
    end
    def create_reserved_resource1(this : ID3D12Device5*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, pProtectedSession : Void*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_reserved_resource1.call(this, pDesc, initial_state, pOptimizedClearValue, pProtectedSession, riid, ppvResource)
    end
    def get_resource_allocation_info1(this : ID3D12Device5*, visibleMask : UInt32, numResourceDescs : UInt32, pResourceDescs : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, pResourceAllocationInfo1 : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO1*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO
      @lpVtbl.try &.value.get_resource_allocation_info1.call(this, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1)
    end
    def create_lifetime_tracker(this : ID3D12Device5*, pOwner : Void*, riid : LibC::GUID*, ppvTracker : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_lifetime_tracker.call(this, pOwner, riid, ppvTracker)
    end
    def remove_device(this : ID3D12Device5*) : Void
      @lpVtbl.try &.value.remove_device.call(this)
    end
    def enumerate_meta_commands(this : ID3D12Device5*, pNumMetaCommands : UInt32*, pDescs : Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_meta_commands.call(this, pNumMetaCommands, pDescs)
    end
    def enumerate_meta_command_parameters(this : ID3D12Device5*, command_id : LibC::GUID*, stage : Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_STAGE, pTotalStructureSizeInBytes : UInt32*, pParameterCount : UInt32*, pParameterDescs : Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_meta_command_parameters.call(this, command_id, stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs)
    end
    def create_meta_command(this : ID3D12Device5*, command_id : LibC::GUID*, node_mask : UInt32, pCreationParametersData : Void*, creation_parameters_data_size_in_bytes : LibC::UIntPtrT, riid : LibC::GUID*, ppMetaCommand : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_meta_command.call(this, command_id, node_mask, pCreationParametersData, creation_parameters_data_size_in_bytes, riid, ppMetaCommand)
    end
    def create_state_object(this : ID3D12Device5*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_STATE_OBJECT_DESC*, riid : LibC::GUID*, ppStateObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_state_object.call(this, pDesc, riid, ppStateObject)
    end
    def get_raytracing_acceleration_structure_prebuild_info(this : ID3D12Device5*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*, pInfo : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*) : Void
      @lpVtbl.try &.value.get_raytracing_acceleration_structure_prebuild_info.call(this, pDesc, pInfo)
    end
    def check_driver_matching_identifier(this : ID3D12Device5*, serialized_data_type : Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_TYPE, pIdentifierToCheck : Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*) : Win32cr::Graphics::Direct3D12::D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS
      @lpVtbl.try &.value.check_driver_matching_identifier.call(this, serialized_data_type, pIdentifierToCheck)
    end

  end

  @[Extern]
  record ID3D12DeviceRemovedExtendedDataSettingsVtbl,
    query_interface : Proc(ID3D12DeviceRemovedExtendedDataSettings*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12DeviceRemovedExtendedDataSettings*, UInt32),
    release : Proc(ID3D12DeviceRemovedExtendedDataSettings*, UInt32),
    set_auto_breadcrumbs_enablement : Proc(ID3D12DeviceRemovedExtendedDataSettings*, Win32cr::Graphics::Direct3D12::D3D12_DRED_ENABLEMENT, Void),
    set_page_fault_enablement : Proc(ID3D12DeviceRemovedExtendedDataSettings*, Win32cr::Graphics::Direct3D12::D3D12_DRED_ENABLEMENT, Void),
    set_watson_dump_enablement : Proc(ID3D12DeviceRemovedExtendedDataSettings*, Win32cr::Graphics::Direct3D12::D3D12_DRED_ENABLEMENT, Void)


  @[Extern]
  record ID3D12DeviceRemovedExtendedDataSettings, lpVtbl : ID3D12DeviceRemovedExtendedDataSettingsVtbl* do
    GUID = LibC::GUID.new(0x82bc481c_u32, 0x6b9b_u16, 0x4030_u16, StaticArray[0xae_u8, 0xdb_u8, 0x7e_u8, 0xe3_u8, 0xd1_u8, 0xdf_u8, 0x1e_u8, 0x63_u8])
    def query_interface(this : ID3D12DeviceRemovedExtendedDataSettings*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12DeviceRemovedExtendedDataSettings*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12DeviceRemovedExtendedDataSettings*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_auto_breadcrumbs_enablement(this : ID3D12DeviceRemovedExtendedDataSettings*, enablement : Win32cr::Graphics::Direct3D12::D3D12_DRED_ENABLEMENT) : Void
      @lpVtbl.try &.value.set_auto_breadcrumbs_enablement.call(this, enablement)
    end
    def set_page_fault_enablement(this : ID3D12DeviceRemovedExtendedDataSettings*, enablement : Win32cr::Graphics::Direct3D12::D3D12_DRED_ENABLEMENT) : Void
      @lpVtbl.try &.value.set_page_fault_enablement.call(this, enablement)
    end
    def set_watson_dump_enablement(this : ID3D12DeviceRemovedExtendedDataSettings*, enablement : Win32cr::Graphics::Direct3D12::D3D12_DRED_ENABLEMENT) : Void
      @lpVtbl.try &.value.set_watson_dump_enablement.call(this, enablement)
    end

  end

  @[Extern]
  record ID3D12DeviceRemovedExtendedDataSettings1Vtbl,
    query_interface : Proc(ID3D12DeviceRemovedExtendedDataSettings1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12DeviceRemovedExtendedDataSettings1*, UInt32),
    release : Proc(ID3D12DeviceRemovedExtendedDataSettings1*, UInt32),
    set_auto_breadcrumbs_enablement : Proc(ID3D12DeviceRemovedExtendedDataSettings1*, Win32cr::Graphics::Direct3D12::D3D12_DRED_ENABLEMENT, Void),
    set_page_fault_enablement : Proc(ID3D12DeviceRemovedExtendedDataSettings1*, Win32cr::Graphics::Direct3D12::D3D12_DRED_ENABLEMENT, Void),
    set_watson_dump_enablement : Proc(ID3D12DeviceRemovedExtendedDataSettings1*, Win32cr::Graphics::Direct3D12::D3D12_DRED_ENABLEMENT, Void),
    set_breadcrumb_context_enablement : Proc(ID3D12DeviceRemovedExtendedDataSettings1*, Win32cr::Graphics::Direct3D12::D3D12_DRED_ENABLEMENT, Void)


  @[Extern]
  record ID3D12DeviceRemovedExtendedDataSettings1, lpVtbl : ID3D12DeviceRemovedExtendedDataSettings1Vtbl* do
    GUID = LibC::GUID.new(0xdbd5ae51_u32, 0x3317_u16, 0x4f0a_u16, StaticArray[0xad_u8, 0xf9_u8, 0x1d_u8, 0x7c_u8, 0xed_u8, 0xca_u8, 0xae_u8, 0xb_u8])
    def query_interface(this : ID3D12DeviceRemovedExtendedDataSettings1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12DeviceRemovedExtendedDataSettings1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12DeviceRemovedExtendedDataSettings1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_auto_breadcrumbs_enablement(this : ID3D12DeviceRemovedExtendedDataSettings1*, enablement : Win32cr::Graphics::Direct3D12::D3D12_DRED_ENABLEMENT) : Void
      @lpVtbl.try &.value.set_auto_breadcrumbs_enablement.call(this, enablement)
    end
    def set_page_fault_enablement(this : ID3D12DeviceRemovedExtendedDataSettings1*, enablement : Win32cr::Graphics::Direct3D12::D3D12_DRED_ENABLEMENT) : Void
      @lpVtbl.try &.value.set_page_fault_enablement.call(this, enablement)
    end
    def set_watson_dump_enablement(this : ID3D12DeviceRemovedExtendedDataSettings1*, enablement : Win32cr::Graphics::Direct3D12::D3D12_DRED_ENABLEMENT) : Void
      @lpVtbl.try &.value.set_watson_dump_enablement.call(this, enablement)
    end
    def set_breadcrumb_context_enablement(this : ID3D12DeviceRemovedExtendedDataSettings1*, enablement : Win32cr::Graphics::Direct3D12::D3D12_DRED_ENABLEMENT) : Void
      @lpVtbl.try &.value.set_breadcrumb_context_enablement.call(this, enablement)
    end

  end

  @[Extern]
  record ID3D12DeviceRemovedExtendedDataVtbl,
    query_interface : Proc(ID3D12DeviceRemovedExtendedData*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12DeviceRemovedExtendedData*, UInt32),
    release : Proc(ID3D12DeviceRemovedExtendedData*, UInt32),
    get_auto_breadcrumbs_output : Proc(ID3D12DeviceRemovedExtendedData*, Win32cr::Graphics::Direct3D12::D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT*, Win32cr::Foundation::HRESULT),
    get_page_fault_allocation_output : Proc(ID3D12DeviceRemovedExtendedData*, Win32cr::Graphics::Direct3D12::D3D12_DRED_PAGE_FAULT_OUTPUT*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12DeviceRemovedExtendedData, lpVtbl : ID3D12DeviceRemovedExtendedDataVtbl* do
    GUID = LibC::GUID.new(0x98931d33_u32, 0x5ae8_u16, 0x4791_u16, StaticArray[0xaa_u8, 0x3c_u8, 0x1a_u8, 0x73_u8, 0xa2_u8, 0x93_u8, 0x4e_u8, 0x71_u8])
    def query_interface(this : ID3D12DeviceRemovedExtendedData*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12DeviceRemovedExtendedData*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12DeviceRemovedExtendedData*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_auto_breadcrumbs_output(this : ID3D12DeviceRemovedExtendedData*, pOutput : Win32cr::Graphics::Direct3D12::D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_auto_breadcrumbs_output.call(this, pOutput)
    end
    def get_page_fault_allocation_output(this : ID3D12DeviceRemovedExtendedData*, pOutput : Win32cr::Graphics::Direct3D12::D3D12_DRED_PAGE_FAULT_OUTPUT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_page_fault_allocation_output.call(this, pOutput)
    end

  end

  @[Extern]
  record ID3D12DeviceRemovedExtendedData1Vtbl,
    query_interface : Proc(ID3D12DeviceRemovedExtendedData1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12DeviceRemovedExtendedData1*, UInt32),
    release : Proc(ID3D12DeviceRemovedExtendedData1*, UInt32),
    get_auto_breadcrumbs_output : Proc(ID3D12DeviceRemovedExtendedData1*, Win32cr::Graphics::Direct3D12::D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT*, Win32cr::Foundation::HRESULT),
    get_page_fault_allocation_output : Proc(ID3D12DeviceRemovedExtendedData1*, Win32cr::Graphics::Direct3D12::D3D12_DRED_PAGE_FAULT_OUTPUT*, Win32cr::Foundation::HRESULT),
    get_auto_breadcrumbs_output1 : Proc(ID3D12DeviceRemovedExtendedData1*, Win32cr::Graphics::Direct3D12::D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1*, Win32cr::Foundation::HRESULT),
    get_page_fault_allocation_output1 : Proc(ID3D12DeviceRemovedExtendedData1*, Win32cr::Graphics::Direct3D12::D3D12_DRED_PAGE_FAULT_OUTPUT1*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12DeviceRemovedExtendedData1, lpVtbl : ID3D12DeviceRemovedExtendedData1Vtbl* do
    GUID = LibC::GUID.new(0x9727a022_u32, 0xcf1d_u16, 0x4dda_u16, StaticArray[0x9e_u8, 0xba_u8, 0xef_u8, 0xfa_u8, 0x65_u8, 0x3f_u8, 0xc5_u8, 0x6_u8])
    def query_interface(this : ID3D12DeviceRemovedExtendedData1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12DeviceRemovedExtendedData1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12DeviceRemovedExtendedData1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_auto_breadcrumbs_output(this : ID3D12DeviceRemovedExtendedData1*, pOutput : Win32cr::Graphics::Direct3D12::D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_auto_breadcrumbs_output.call(this, pOutput)
    end
    def get_page_fault_allocation_output(this : ID3D12DeviceRemovedExtendedData1*, pOutput : Win32cr::Graphics::Direct3D12::D3D12_DRED_PAGE_FAULT_OUTPUT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_page_fault_allocation_output.call(this, pOutput)
    end
    def get_auto_breadcrumbs_output1(this : ID3D12DeviceRemovedExtendedData1*, pOutput : Win32cr::Graphics::Direct3D12::D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_auto_breadcrumbs_output1.call(this, pOutput)
    end
    def get_page_fault_allocation_output1(this : ID3D12DeviceRemovedExtendedData1*, pOutput : Win32cr::Graphics::Direct3D12::D3D12_DRED_PAGE_FAULT_OUTPUT1*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_page_fault_allocation_output1.call(this, pOutput)
    end

  end

  @[Extern]
  record ID3D12DeviceRemovedExtendedData2Vtbl,
    query_interface : Proc(ID3D12DeviceRemovedExtendedData2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12DeviceRemovedExtendedData2*, UInt32),
    release : Proc(ID3D12DeviceRemovedExtendedData2*, UInt32),
    get_auto_breadcrumbs_output : Proc(ID3D12DeviceRemovedExtendedData2*, Win32cr::Graphics::Direct3D12::D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT*, Win32cr::Foundation::HRESULT),
    get_page_fault_allocation_output : Proc(ID3D12DeviceRemovedExtendedData2*, Win32cr::Graphics::Direct3D12::D3D12_DRED_PAGE_FAULT_OUTPUT*, Win32cr::Foundation::HRESULT),
    get_auto_breadcrumbs_output1 : Proc(ID3D12DeviceRemovedExtendedData2*, Win32cr::Graphics::Direct3D12::D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1*, Win32cr::Foundation::HRESULT),
    get_page_fault_allocation_output1 : Proc(ID3D12DeviceRemovedExtendedData2*, Win32cr::Graphics::Direct3D12::D3D12_DRED_PAGE_FAULT_OUTPUT1*, Win32cr::Foundation::HRESULT),
    get_page_fault_allocation_output2 : Proc(ID3D12DeviceRemovedExtendedData2*, Win32cr::Graphics::Direct3D12::D3D12_DRED_PAGE_FAULT_OUTPUT2*, Win32cr::Foundation::HRESULT),
    get_device_state : Proc(ID3D12DeviceRemovedExtendedData2*, Win32cr::Graphics::Direct3D12::D3D12_DRED_DEVICE_STATE)


  @[Extern]
  record ID3D12DeviceRemovedExtendedData2, lpVtbl : ID3D12DeviceRemovedExtendedData2Vtbl* do
    GUID = LibC::GUID.new(0x67fc5816_u32, 0xe4ca_u16, 0x4915_u16, StaticArray[0xbf_u8, 0x18_u8, 0x42_u8, 0x54_u8, 0x12_u8, 0x72_u8, 0xda_u8, 0x54_u8])
    def query_interface(this : ID3D12DeviceRemovedExtendedData2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12DeviceRemovedExtendedData2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12DeviceRemovedExtendedData2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_auto_breadcrumbs_output(this : ID3D12DeviceRemovedExtendedData2*, pOutput : Win32cr::Graphics::Direct3D12::D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_auto_breadcrumbs_output.call(this, pOutput)
    end
    def get_page_fault_allocation_output(this : ID3D12DeviceRemovedExtendedData2*, pOutput : Win32cr::Graphics::Direct3D12::D3D12_DRED_PAGE_FAULT_OUTPUT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_page_fault_allocation_output.call(this, pOutput)
    end
    def get_auto_breadcrumbs_output1(this : ID3D12DeviceRemovedExtendedData2*, pOutput : Win32cr::Graphics::Direct3D12::D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_auto_breadcrumbs_output1.call(this, pOutput)
    end
    def get_page_fault_allocation_output1(this : ID3D12DeviceRemovedExtendedData2*, pOutput : Win32cr::Graphics::Direct3D12::D3D12_DRED_PAGE_FAULT_OUTPUT1*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_page_fault_allocation_output1.call(this, pOutput)
    end
    def get_page_fault_allocation_output2(this : ID3D12DeviceRemovedExtendedData2*, pOutput : Win32cr::Graphics::Direct3D12::D3D12_DRED_PAGE_FAULT_OUTPUT2*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_page_fault_allocation_output2.call(this, pOutput)
    end
    def get_device_state(this : ID3D12DeviceRemovedExtendedData2*) : Win32cr::Graphics::Direct3D12::D3D12_DRED_DEVICE_STATE
      @lpVtbl.try &.value.get_device_state.call(this)
    end

  end

  @[Extern]
  record ID3D12Device6Vtbl,
    query_interface : Proc(ID3D12Device6*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Device6*, UInt32),
    release : Proc(ID3D12Device6*, UInt32),
    get_private_data : Proc(ID3D12Device6*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12Device6*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12Device6*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12Device6*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_node_count : Proc(ID3D12Device6*, UInt32),
    create_command_queue : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_command_allocator : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_graphics_pipeline_state : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_compute_pipeline_state : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_command_list : Proc(ID3D12Device6*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, Void*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    check_feature_support : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_FEATURE, Void*, UInt32, Win32cr::Foundation::HRESULT),
    create_descriptor_heap : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_descriptor_handle_increment_size : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, UInt32),
    create_root_signature : Proc(ID3D12Device6*, UInt32, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_constant_buffer_view : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_CONSTANT_BUFFER_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_shader_resource_view : Proc(ID3D12Device6*, Void*, Win32cr::Graphics::Direct3D12::D3D12_SHADER_RESOURCE_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_unordered_access_view : Proc(ID3D12Device6*, Void*, Void*, Win32cr::Graphics::Direct3D12::D3D12_UNORDERED_ACCESS_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_render_target_view : Proc(ID3D12Device6*, Void*, Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_depth_stencil_view : Proc(ID3D12Device6*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_sampler : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    copy_descriptors : Proc(ID3D12Device6*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, Void),
    copy_descriptors_simple : Proc(ID3D12Device6*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, Void),
    get_resource_allocation_info : Proc(ID3D12Device6*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO),
    get_custom_heap_properties : Proc(ID3D12Device6*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES),
    create_committed_resource : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_heap : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_placed_resource : Proc(ID3D12Device6*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_reserved_resource : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_shared_handle : Proc(ID3D12Device6*, Void*, Win32cr::Security::SECURITY_ATTRIBUTES*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    open_shared_handle : Proc(ID3D12Device6*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_shared_handle_by_name : Proc(ID3D12Device6*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    make_resident : Proc(ID3D12Device6*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    evict : Proc(ID3D12Device6*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_fence : Proc(ID3D12Device6*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_device_removed_reason : Proc(ID3D12Device6*, Win32cr::Foundation::HRESULT),
    get_copyable_footprints : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, UInt32, UInt32, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void),
    create_query_heap : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_stable_power_state : Proc(ID3D12Device6*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    create_command_signature : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_SIGNATURE_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_resource_tiling : Proc(ID3D12Device6*, Void*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_PACKED_MIP_INFO*, Win32cr::Graphics::Direct3D12::D3D12_TILE_SHAPE*, UInt32*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_TILING*, Void),
    get_adapter_luid : Proc(ID3D12Device6*, Win32cr::Foundation::LUID),
    create_pipeline_library : Proc(ID3D12Device6*, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_event_on_multiple_fence_completion : Proc(ID3D12Device6*, Void**, UInt64*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_MULTIPLE_FENCE_WAIT_FLAGS, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    set_residency_priority : Proc(ID3D12Device6*, UInt32, Void**, Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_PRIORITY*, Win32cr::Foundation::HRESULT),
    create_pipeline_state : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_STREAM_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_existing_heap_from_address : Proc(ID3D12Device6*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_existing_heap_from_file_mapping : Proc(ID3D12Device6*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    enqueue_make_resident : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_FLAGS, UInt32, Void**, Void*, UInt64, Win32cr::Foundation::HRESULT),
    create_command_list1 : Proc(ID3D12Device6*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_FLAGS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_protected_resource_session : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_committed_resource1 : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_heap1 : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_reserved_resource1 : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_resource_allocation_info1 : Proc(ID3D12Device6*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO1*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO),
    create_lifetime_tracker : Proc(ID3D12Device6*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    remove_device : Proc(ID3D12Device6*, Void),
    enumerate_meta_commands : Proc(ID3D12Device6*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_DESC*, Win32cr::Foundation::HRESULT),
    enumerate_meta_command_parameters : Proc(ID3D12Device6*, LibC::GUID*, Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_STAGE, UInt32*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_DESC*, Win32cr::Foundation::HRESULT),
    create_meta_command : Proc(ID3D12Device6*, LibC::GUID*, UInt32, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_state_object : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_STATE_OBJECT_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_raytracing_acceleration_structure_prebuild_info : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*, Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*, Void),
    check_driver_matching_identifier : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_TYPE, Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*, Win32cr::Graphics::Direct3D12::D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS),
    set_background_processing_mode : Proc(ID3D12Device6*, Win32cr::Graphics::Direct3D12::D3D12_BACKGROUND_PROCESSING_MODE, Win32cr::Graphics::Direct3D12::D3D12_MEASUREMENTS_ACTION, Win32cr::Foundation::HANDLE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12Device6, lpVtbl : ID3D12Device6Vtbl* do
    GUID = LibC::GUID.new(0xc70b221b_u32, 0x40e4_u16, 0x4a17_u16, StaticArray[0x89_u8, 0xaf_u8, 0x2_u8, 0x5a_u8, 0x7_u8, 0x27_u8, 0xa6_u8, 0xdc_u8])
    def query_interface(this : ID3D12Device6*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Device6*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Device6*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12Device6*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12Device6*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12Device6*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12Device6*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_node_count(this : ID3D12Device6*) : UInt32
      @lpVtbl.try &.value.get_node_count.call(this)
    end
    def create_command_queue(this : ID3D12Device6*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, riid : LibC::GUID*, ppCommandQueue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_queue.call(this, pDesc, riid, ppCommandQueue)
    end
    def create_command_allocator(this : ID3D12Device6*, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, riid : LibC::GUID*, ppCommandAllocator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_allocator.call(this, type__, riid, ppCommandAllocator)
    end
    def create_graphics_pipeline_state(this : ID3D12Device6*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_graphics_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def create_compute_pipeline_state(this : ID3D12Device6*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compute_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def create_command_list(this : ID3D12Device6*, nodeMask : UInt32, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, pCommandAllocator : Void*, pInitialState : Void*, riid : LibC::GUID*, ppCommandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list.call(this, nodeMask, type__, pCommandAllocator, pInitialState, riid, ppCommandList)
    end
    def check_feature_support(this : ID3D12Device6*, feature : Win32cr::Graphics::Direct3D12::D3D12_FEATURE, pFeatureSupportData : Void*, feature_support_data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_feature_support.call(this, feature, pFeatureSupportData, feature_support_data_size)
    end
    def create_descriptor_heap(this : ID3D12Device6*, pDescriptorHeapDesc : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_descriptor_heap.call(this, pDescriptorHeapDesc, riid, ppvHeap)
    end
    def get_descriptor_handle_increment_size(this : ID3D12Device6*, descriptor_heap_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : UInt32
      @lpVtbl.try &.value.get_descriptor_handle_increment_size.call(this, descriptor_heap_type)
    end
    def create_root_signature(this : ID3D12Device6*, nodeMask : UInt32, pBlobWithRootSignature : Void*, blobLengthInBytes : LibC::UIntPtrT, riid : LibC::GUID*, ppvRootSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_root_signature.call(this, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature)
    end
    def create_constant_buffer_view(this : ID3D12Device6*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_CONSTANT_BUFFER_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_constant_buffer_view.call(this, pDesc, dest_descriptor)
    end
    def create_shader_resource_view(this : ID3D12Device6*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SHADER_RESOURCE_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_shader_resource_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_unordered_access_view(this : ID3D12Device6*, pResource : Void*, pCounterResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_UNORDERED_ACCESS_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_unordered_access_view.call(this, pResource, pCounterResource, pDesc, dest_descriptor)
    end
    def create_render_target_view(this : ID3D12Device6*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_render_target_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_depth_stencil_view(this : ID3D12Device6*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_depth_stencil_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_sampler(this : ID3D12Device6*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_sampler.call(this, pDesc, dest_descriptor)
    end
    def copy_descriptors(this : ID3D12Device6*, num_dest_descriptor_ranges : UInt32, pDestDescriptorRangeStarts : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, pDestDescriptorRangeSizes : UInt32*, num_src_descriptor_ranges : UInt32, pSrcDescriptorRangeStarts : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, pSrcDescriptorRangeSizes : UInt32*, descriptor_heaps_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : Void
      @lpVtbl.try &.value.copy_descriptors.call(this, num_dest_descriptor_ranges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, num_src_descriptor_ranges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptor_heaps_type)
    end
    def copy_descriptors_simple(this : ID3D12Device6*, num_descriptors : UInt32, dest_descriptor_range_start : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, src_descriptor_range_start : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, descriptor_heaps_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : Void
      @lpVtbl.try &.value.copy_descriptors_simple.call(this, num_descriptors, dest_descriptor_range_start, src_descriptor_range_start, descriptor_heaps_type)
    end
    def get_resource_allocation_info(this : ID3D12Device6*, visibleMask : UInt32, numResourceDescs : UInt32, pResourceDescs : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO
      @lpVtbl.try &.value.get_resource_allocation_info.call(this, visibleMask, numResourceDescs, pResourceDescs)
    end
    def get_custom_heap_properties(this : ID3D12Device6*, nodeMask : UInt32, heapType : Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE) : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES
      @lpVtbl.try &.value.get_custom_heap_properties.call(this, nodeMask, heapType)
    end
    def create_committed_resource(this : ID3D12Device6*, pHeapProperties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, heap_flags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_resource_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riidResource : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_committed_resource.call(this, pHeapProperties, heap_flags, pDesc, initial_resource_state, pOptimizedClearValue, riidResource, ppvResource)
    end
    def create_heap(this : ID3D12Device6*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_heap.call(this, pDesc, riid, ppvHeap)
    end
    def create_placed_resource(this : ID3D12Device6*, pHeap : Void*, heap_offset : UInt64, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_placed_resource.call(this, pHeap, heap_offset, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_reserved_resource(this : ID3D12Device6*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_reserved_resource.call(this, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_shared_handle(this : ID3D12Device6*, pObject : Void*, pAttributes : Win32cr::Security::SECURITY_ATTRIBUTES*, access : UInt32, name : Win32cr::Foundation::PWSTR, pHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_handle.call(this, pObject, pAttributes, access, name, pHandle)
    end
    def open_shared_handle(this : ID3D12Device6*, nt_handle : Win32cr::Foundation::HANDLE, riid : LibC::GUID*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_handle.call(this, nt_handle, riid, ppvObj)
    end
    def open_shared_handle_by_name(this : ID3D12Device6*, name : Win32cr::Foundation::PWSTR, access : UInt32, pNTHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_handle_by_name.call(this, name, access, pNTHandle)
    end
    def make_resident(this : ID3D12Device6*, num_objects : UInt32, ppObjects : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.make_resident.call(this, num_objects, ppObjects)
    end
    def evict(this : ID3D12Device6*, num_objects : UInt32, ppObjects : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evict.call(this, num_objects, ppObjects)
    end
    def create_fence(this : ID3D12Device6*, initial_value : UInt64, flags : Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS, riid : LibC::GUID*, ppFence : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_fence.call(this, initial_value, flags, riid, ppFence)
    end
    def get_device_removed_reason(this : ID3D12Device6*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_removed_reason.call(this)
    end
    def get_copyable_footprints(this : ID3D12Device6*, pResourceDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, first_subresource : UInt32, num_subresources : UInt32, base_offset : UInt64, pLayouts : Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pNumRows : UInt32*, pRowSizeInBytes : UInt64*, pTotalBytes : UInt64*) : Void
      @lpVtbl.try &.value.get_copyable_footprints.call(this, pResourceDesc, first_subresource, num_subresources, base_offset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
    end
    def create_query_heap(this : ID3D12Device6*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_query_heap.call(this, pDesc, riid, ppvHeap)
    end
    def set_stable_power_state(this : ID3D12Device6*, enable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stable_power_state.call(this, enable)
    end
    def create_command_signature(this : ID3D12Device6*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_SIGNATURE_DESC*, pRootSignature : Void*, riid : LibC::GUID*, ppvCommandSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_signature.call(this, pDesc, pRootSignature, riid, ppvCommandSignature)
    end
    def get_resource_tiling(this : ID3D12Device6*, pTiledResource : Void*, pNumTilesForEntireResource : UInt32*, pPackedMipDesc : Win32cr::Graphics::Direct3D12::D3D12_PACKED_MIP_INFO*, pStandardTileShapeForNonPackedMips : Win32cr::Graphics::Direct3D12::D3D12_TILE_SHAPE*, pNumSubresourceTilings : UInt32*, first_subresource_tiling_to_get : UInt32, pSubresourceTilingsForNonPackedMips : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_TILING*) : Void
      @lpVtbl.try &.value.get_resource_tiling.call(this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, first_subresource_tiling_to_get, pSubresourceTilingsForNonPackedMips)
    end
    def get_adapter_luid(this : ID3D12Device6*) : Win32cr::Foundation::LUID
      @lpVtbl.try &.value.get_adapter_luid.call(this)
    end
    def create_pipeline_library(this : ID3D12Device6*, pLibraryBlob : Void*, blob_length : LibC::UIntPtrT, riid : LibC::GUID*, ppPipelineLibrary : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pipeline_library.call(this, pLibraryBlob, blob_length, riid, ppPipelineLibrary)
    end
    def set_event_on_multiple_fence_completion(this : ID3D12Device6*, ppFences : Void**, pFenceValues : UInt64*, num_fences : UInt32, flags : Win32cr::Graphics::Direct3D12::D3D12_MULTIPLE_FENCE_WAIT_FLAGS, hEvent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_on_multiple_fence_completion.call(this, ppFences, pFenceValues, num_fences, flags, hEvent)
    end
    def set_residency_priority(this : ID3D12Device6*, num_objects : UInt32, ppObjects : Void**, pPriorities : Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_PRIORITY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_residency_priority.call(this, num_objects, ppObjects, pPriorities)
    end
    def create_pipeline_state(this : ID3D12Device6*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_STREAM_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def open_existing_heap_from_address(this : ID3D12Device6*, pAddress : Void*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_existing_heap_from_address.call(this, pAddress, riid, ppvHeap)
    end
    def open_existing_heap_from_file_mapping(this : ID3D12Device6*, hFileMapping : Win32cr::Foundation::HANDLE, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_existing_heap_from_file_mapping.call(this, hFileMapping, riid, ppvHeap)
    end
    def enqueue_make_resident(this : ID3D12Device6*, flags : Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_FLAGS, num_objects : UInt32, ppObjects : Void**, pFenceToSignal : Void*, fence_value_to_signal : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enqueue_make_resident.call(this, flags, num_objects, ppObjects, pFenceToSignal, fence_value_to_signal)
    end
    def create_command_list1(this : ID3D12Device6*, nodeMask : UInt32, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, flags : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_FLAGS, riid : LibC::GUID*, ppCommandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list1.call(this, nodeMask, type__, flags, riid, ppCommandList)
    end
    def create_protected_resource_session(this : ID3D12Device6*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC*, riid : LibC::GUID*, ppSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_protected_resource_session.call(this, pDesc, riid, ppSession)
    end
    def create_committed_resource1(this : ID3D12Device6*, pHeapProperties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, heap_flags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_resource_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, pProtectedSession : Void*, riidResource : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_committed_resource1.call(this, pHeapProperties, heap_flags, pDesc, initial_resource_state, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource)
    end
    def create_heap1(this : ID3D12Device6*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, pProtectedSession : Void*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_heap1.call(this, pDesc, pProtectedSession, riid, ppvHeap)
    end
    def create_reserved_resource1(this : ID3D12Device6*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, pProtectedSession : Void*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_reserved_resource1.call(this, pDesc, initial_state, pOptimizedClearValue, pProtectedSession, riid, ppvResource)
    end
    def get_resource_allocation_info1(this : ID3D12Device6*, visibleMask : UInt32, numResourceDescs : UInt32, pResourceDescs : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, pResourceAllocationInfo1 : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO1*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO
      @lpVtbl.try &.value.get_resource_allocation_info1.call(this, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1)
    end
    def create_lifetime_tracker(this : ID3D12Device6*, pOwner : Void*, riid : LibC::GUID*, ppvTracker : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_lifetime_tracker.call(this, pOwner, riid, ppvTracker)
    end
    def remove_device(this : ID3D12Device6*) : Void
      @lpVtbl.try &.value.remove_device.call(this)
    end
    def enumerate_meta_commands(this : ID3D12Device6*, pNumMetaCommands : UInt32*, pDescs : Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_meta_commands.call(this, pNumMetaCommands, pDescs)
    end
    def enumerate_meta_command_parameters(this : ID3D12Device6*, command_id : LibC::GUID*, stage : Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_STAGE, pTotalStructureSizeInBytes : UInt32*, pParameterCount : UInt32*, pParameterDescs : Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_meta_command_parameters.call(this, command_id, stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs)
    end
    def create_meta_command(this : ID3D12Device6*, command_id : LibC::GUID*, node_mask : UInt32, pCreationParametersData : Void*, creation_parameters_data_size_in_bytes : LibC::UIntPtrT, riid : LibC::GUID*, ppMetaCommand : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_meta_command.call(this, command_id, node_mask, pCreationParametersData, creation_parameters_data_size_in_bytes, riid, ppMetaCommand)
    end
    def create_state_object(this : ID3D12Device6*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_STATE_OBJECT_DESC*, riid : LibC::GUID*, ppStateObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_state_object.call(this, pDesc, riid, ppStateObject)
    end
    def get_raytracing_acceleration_structure_prebuild_info(this : ID3D12Device6*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*, pInfo : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*) : Void
      @lpVtbl.try &.value.get_raytracing_acceleration_structure_prebuild_info.call(this, pDesc, pInfo)
    end
    def check_driver_matching_identifier(this : ID3D12Device6*, serialized_data_type : Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_TYPE, pIdentifierToCheck : Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*) : Win32cr::Graphics::Direct3D12::D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS
      @lpVtbl.try &.value.check_driver_matching_identifier.call(this, serialized_data_type, pIdentifierToCheck)
    end
    def set_background_processing_mode(this : ID3D12Device6*, mode : Win32cr::Graphics::Direct3D12::D3D12_BACKGROUND_PROCESSING_MODE, measurements_action : Win32cr::Graphics::Direct3D12::D3D12_MEASUREMENTS_ACTION, hEventToSignalUponCompletion : Win32cr::Foundation::HANDLE, pbFurtherMeasurementsDesired : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_background_processing_mode.call(this, mode, measurements_action, hEventToSignalUponCompletion, pbFurtherMeasurementsDesired)
    end

  end

  @[Extern]
  record ID3D12ProtectedResourceSession1Vtbl,
    query_interface : Proc(ID3D12ProtectedResourceSession1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12ProtectedResourceSession1*, UInt32),
    release : Proc(ID3D12ProtectedResourceSession1*, UInt32),
    get_private_data : Proc(ID3D12ProtectedResourceSession1*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12ProtectedResourceSession1*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12ProtectedResourceSession1*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12ProtectedResourceSession1*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12ProtectedResourceSession1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_status_fence : Proc(ID3D12ProtectedResourceSession1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_session_status : Proc(ID3D12ProtectedResourceSession1*, Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_SESSION_STATUS),
    get_desc : Proc(ID3D12ProtectedResourceSession1*, Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC),
    get_desc1 : Proc(ID3D12ProtectedResourceSession1*, Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC1)


  @[Extern]
  record ID3D12ProtectedResourceSession1, lpVtbl : ID3D12ProtectedResourceSession1Vtbl* do
    GUID = LibC::GUID.new(0xd6f12dd6_u32, 0x76fb_u16, 0x406e_u16, StaticArray[0x89_u8, 0x61_u8, 0x42_u8, 0x96_u8, 0xee_u8, 0xfc_u8, 0x4_u8, 0x9_u8])
    def query_interface(this : ID3D12ProtectedResourceSession1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12ProtectedResourceSession1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12ProtectedResourceSession1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12ProtectedResourceSession1*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12ProtectedResourceSession1*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12ProtectedResourceSession1*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12ProtectedResourceSession1*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12ProtectedResourceSession1*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_status_fence(this : ID3D12ProtectedResourceSession1*, riid : LibC::GUID*, ppFence : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_status_fence.call(this, riid, ppFence)
    end
    def get_session_status(this : ID3D12ProtectedResourceSession1*) : Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_SESSION_STATUS
      @lpVtbl.try &.value.get_session_status.call(this)
    end
    def get_desc(this : ID3D12ProtectedResourceSession1*) : Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC
      @lpVtbl.try &.value.get_desc.call(this)
    end
    def get_desc1(this : ID3D12ProtectedResourceSession1*) : Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC1
      @lpVtbl.try &.value.get_desc1.call(this)
    end

  end

  @[Extern]
  record ID3D12Device7Vtbl,
    query_interface : Proc(ID3D12Device7*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Device7*, UInt32),
    release : Proc(ID3D12Device7*, UInt32),
    get_private_data : Proc(ID3D12Device7*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12Device7*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12Device7*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12Device7*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_node_count : Proc(ID3D12Device7*, UInt32),
    create_command_queue : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_command_allocator : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_graphics_pipeline_state : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_compute_pipeline_state : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_command_list : Proc(ID3D12Device7*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, Void*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    check_feature_support : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_FEATURE, Void*, UInt32, Win32cr::Foundation::HRESULT),
    create_descriptor_heap : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_descriptor_handle_increment_size : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, UInt32),
    create_root_signature : Proc(ID3D12Device7*, UInt32, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_constant_buffer_view : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_CONSTANT_BUFFER_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_shader_resource_view : Proc(ID3D12Device7*, Void*, Win32cr::Graphics::Direct3D12::D3D12_SHADER_RESOURCE_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_unordered_access_view : Proc(ID3D12Device7*, Void*, Void*, Win32cr::Graphics::Direct3D12::D3D12_UNORDERED_ACCESS_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_render_target_view : Proc(ID3D12Device7*, Void*, Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_depth_stencil_view : Proc(ID3D12Device7*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_sampler : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    copy_descriptors : Proc(ID3D12Device7*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, Void),
    copy_descriptors_simple : Proc(ID3D12Device7*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, Void),
    get_resource_allocation_info : Proc(ID3D12Device7*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO),
    get_custom_heap_properties : Proc(ID3D12Device7*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES),
    create_committed_resource : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_heap : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_placed_resource : Proc(ID3D12Device7*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_reserved_resource : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_shared_handle : Proc(ID3D12Device7*, Void*, Win32cr::Security::SECURITY_ATTRIBUTES*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    open_shared_handle : Proc(ID3D12Device7*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_shared_handle_by_name : Proc(ID3D12Device7*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    make_resident : Proc(ID3D12Device7*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    evict : Proc(ID3D12Device7*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_fence : Proc(ID3D12Device7*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_device_removed_reason : Proc(ID3D12Device7*, Win32cr::Foundation::HRESULT),
    get_copyable_footprints : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, UInt32, UInt32, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void),
    create_query_heap : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_stable_power_state : Proc(ID3D12Device7*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    create_command_signature : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_SIGNATURE_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_resource_tiling : Proc(ID3D12Device7*, Void*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_PACKED_MIP_INFO*, Win32cr::Graphics::Direct3D12::D3D12_TILE_SHAPE*, UInt32*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_TILING*, Void),
    get_adapter_luid : Proc(ID3D12Device7*, Win32cr::Foundation::LUID),
    create_pipeline_library : Proc(ID3D12Device7*, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_event_on_multiple_fence_completion : Proc(ID3D12Device7*, Void**, UInt64*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_MULTIPLE_FENCE_WAIT_FLAGS, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    set_residency_priority : Proc(ID3D12Device7*, UInt32, Void**, Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_PRIORITY*, Win32cr::Foundation::HRESULT),
    create_pipeline_state : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_STREAM_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_existing_heap_from_address : Proc(ID3D12Device7*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_existing_heap_from_file_mapping : Proc(ID3D12Device7*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    enqueue_make_resident : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_FLAGS, UInt32, Void**, Void*, UInt64, Win32cr::Foundation::HRESULT),
    create_command_list1 : Proc(ID3D12Device7*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_FLAGS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_protected_resource_session : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_committed_resource1 : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_heap1 : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_reserved_resource1 : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_resource_allocation_info1 : Proc(ID3D12Device7*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO1*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO),
    create_lifetime_tracker : Proc(ID3D12Device7*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    remove_device : Proc(ID3D12Device7*, Void),
    enumerate_meta_commands : Proc(ID3D12Device7*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_DESC*, Win32cr::Foundation::HRESULT),
    enumerate_meta_command_parameters : Proc(ID3D12Device7*, LibC::GUID*, Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_STAGE, UInt32*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_DESC*, Win32cr::Foundation::HRESULT),
    create_meta_command : Proc(ID3D12Device7*, LibC::GUID*, UInt32, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_state_object : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_STATE_OBJECT_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_raytracing_acceleration_structure_prebuild_info : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*, Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*, Void),
    check_driver_matching_identifier : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_TYPE, Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*, Win32cr::Graphics::Direct3D12::D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS),
    set_background_processing_mode : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_BACKGROUND_PROCESSING_MODE, Win32cr::Graphics::Direct3D12::D3D12_MEASUREMENTS_ACTION, Win32cr::Foundation::HANDLE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    add_to_state_object : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_STATE_OBJECT_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_protected_resource_session1 : Proc(ID3D12Device7*, Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12Device7, lpVtbl : ID3D12Device7Vtbl* do
    GUID = LibC::GUID.new(0x5c014b53_u32, 0x68a1_u16, 0x4b9b_u16, StaticArray[0x8b_u8, 0xd1_u8, 0xdd_u8, 0x60_u8, 0x46_u8, 0xb9_u8, 0x35_u8, 0x8b_u8])
    def query_interface(this : ID3D12Device7*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Device7*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Device7*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12Device7*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12Device7*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12Device7*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12Device7*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_node_count(this : ID3D12Device7*) : UInt32
      @lpVtbl.try &.value.get_node_count.call(this)
    end
    def create_command_queue(this : ID3D12Device7*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, riid : LibC::GUID*, ppCommandQueue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_queue.call(this, pDesc, riid, ppCommandQueue)
    end
    def create_command_allocator(this : ID3D12Device7*, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, riid : LibC::GUID*, ppCommandAllocator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_allocator.call(this, type__, riid, ppCommandAllocator)
    end
    def create_graphics_pipeline_state(this : ID3D12Device7*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_graphics_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def create_compute_pipeline_state(this : ID3D12Device7*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compute_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def create_command_list(this : ID3D12Device7*, nodeMask : UInt32, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, pCommandAllocator : Void*, pInitialState : Void*, riid : LibC::GUID*, ppCommandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list.call(this, nodeMask, type__, pCommandAllocator, pInitialState, riid, ppCommandList)
    end
    def check_feature_support(this : ID3D12Device7*, feature : Win32cr::Graphics::Direct3D12::D3D12_FEATURE, pFeatureSupportData : Void*, feature_support_data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_feature_support.call(this, feature, pFeatureSupportData, feature_support_data_size)
    end
    def create_descriptor_heap(this : ID3D12Device7*, pDescriptorHeapDesc : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_descriptor_heap.call(this, pDescriptorHeapDesc, riid, ppvHeap)
    end
    def get_descriptor_handle_increment_size(this : ID3D12Device7*, descriptor_heap_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : UInt32
      @lpVtbl.try &.value.get_descriptor_handle_increment_size.call(this, descriptor_heap_type)
    end
    def create_root_signature(this : ID3D12Device7*, nodeMask : UInt32, pBlobWithRootSignature : Void*, blobLengthInBytes : LibC::UIntPtrT, riid : LibC::GUID*, ppvRootSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_root_signature.call(this, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature)
    end
    def create_constant_buffer_view(this : ID3D12Device7*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_CONSTANT_BUFFER_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_constant_buffer_view.call(this, pDesc, dest_descriptor)
    end
    def create_shader_resource_view(this : ID3D12Device7*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SHADER_RESOURCE_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_shader_resource_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_unordered_access_view(this : ID3D12Device7*, pResource : Void*, pCounterResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_UNORDERED_ACCESS_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_unordered_access_view.call(this, pResource, pCounterResource, pDesc, dest_descriptor)
    end
    def create_render_target_view(this : ID3D12Device7*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_render_target_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_depth_stencil_view(this : ID3D12Device7*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_depth_stencil_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_sampler(this : ID3D12Device7*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_sampler.call(this, pDesc, dest_descriptor)
    end
    def copy_descriptors(this : ID3D12Device7*, num_dest_descriptor_ranges : UInt32, pDestDescriptorRangeStarts : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, pDestDescriptorRangeSizes : UInt32*, num_src_descriptor_ranges : UInt32, pSrcDescriptorRangeStarts : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, pSrcDescriptorRangeSizes : UInt32*, descriptor_heaps_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : Void
      @lpVtbl.try &.value.copy_descriptors.call(this, num_dest_descriptor_ranges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, num_src_descriptor_ranges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptor_heaps_type)
    end
    def copy_descriptors_simple(this : ID3D12Device7*, num_descriptors : UInt32, dest_descriptor_range_start : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, src_descriptor_range_start : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, descriptor_heaps_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : Void
      @lpVtbl.try &.value.copy_descriptors_simple.call(this, num_descriptors, dest_descriptor_range_start, src_descriptor_range_start, descriptor_heaps_type)
    end
    def get_resource_allocation_info(this : ID3D12Device7*, visibleMask : UInt32, numResourceDescs : UInt32, pResourceDescs : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO
      @lpVtbl.try &.value.get_resource_allocation_info.call(this, visibleMask, numResourceDescs, pResourceDescs)
    end
    def get_custom_heap_properties(this : ID3D12Device7*, nodeMask : UInt32, heapType : Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE) : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES
      @lpVtbl.try &.value.get_custom_heap_properties.call(this, nodeMask, heapType)
    end
    def create_committed_resource(this : ID3D12Device7*, pHeapProperties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, heap_flags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_resource_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riidResource : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_committed_resource.call(this, pHeapProperties, heap_flags, pDesc, initial_resource_state, pOptimizedClearValue, riidResource, ppvResource)
    end
    def create_heap(this : ID3D12Device7*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_heap.call(this, pDesc, riid, ppvHeap)
    end
    def create_placed_resource(this : ID3D12Device7*, pHeap : Void*, heap_offset : UInt64, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_placed_resource.call(this, pHeap, heap_offset, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_reserved_resource(this : ID3D12Device7*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_reserved_resource.call(this, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_shared_handle(this : ID3D12Device7*, pObject : Void*, pAttributes : Win32cr::Security::SECURITY_ATTRIBUTES*, access : UInt32, name : Win32cr::Foundation::PWSTR, pHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_handle.call(this, pObject, pAttributes, access, name, pHandle)
    end
    def open_shared_handle(this : ID3D12Device7*, nt_handle : Win32cr::Foundation::HANDLE, riid : LibC::GUID*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_handle.call(this, nt_handle, riid, ppvObj)
    end
    def open_shared_handle_by_name(this : ID3D12Device7*, name : Win32cr::Foundation::PWSTR, access : UInt32, pNTHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_handle_by_name.call(this, name, access, pNTHandle)
    end
    def make_resident(this : ID3D12Device7*, num_objects : UInt32, ppObjects : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.make_resident.call(this, num_objects, ppObjects)
    end
    def evict(this : ID3D12Device7*, num_objects : UInt32, ppObjects : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evict.call(this, num_objects, ppObjects)
    end
    def create_fence(this : ID3D12Device7*, initial_value : UInt64, flags : Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS, riid : LibC::GUID*, ppFence : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_fence.call(this, initial_value, flags, riid, ppFence)
    end
    def get_device_removed_reason(this : ID3D12Device7*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_removed_reason.call(this)
    end
    def get_copyable_footprints(this : ID3D12Device7*, pResourceDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, first_subresource : UInt32, num_subresources : UInt32, base_offset : UInt64, pLayouts : Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pNumRows : UInt32*, pRowSizeInBytes : UInt64*, pTotalBytes : UInt64*) : Void
      @lpVtbl.try &.value.get_copyable_footprints.call(this, pResourceDesc, first_subresource, num_subresources, base_offset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
    end
    def create_query_heap(this : ID3D12Device7*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_query_heap.call(this, pDesc, riid, ppvHeap)
    end
    def set_stable_power_state(this : ID3D12Device7*, enable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stable_power_state.call(this, enable)
    end
    def create_command_signature(this : ID3D12Device7*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_SIGNATURE_DESC*, pRootSignature : Void*, riid : LibC::GUID*, ppvCommandSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_signature.call(this, pDesc, pRootSignature, riid, ppvCommandSignature)
    end
    def get_resource_tiling(this : ID3D12Device7*, pTiledResource : Void*, pNumTilesForEntireResource : UInt32*, pPackedMipDesc : Win32cr::Graphics::Direct3D12::D3D12_PACKED_MIP_INFO*, pStandardTileShapeForNonPackedMips : Win32cr::Graphics::Direct3D12::D3D12_TILE_SHAPE*, pNumSubresourceTilings : UInt32*, first_subresource_tiling_to_get : UInt32, pSubresourceTilingsForNonPackedMips : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_TILING*) : Void
      @lpVtbl.try &.value.get_resource_tiling.call(this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, first_subresource_tiling_to_get, pSubresourceTilingsForNonPackedMips)
    end
    def get_adapter_luid(this : ID3D12Device7*) : Win32cr::Foundation::LUID
      @lpVtbl.try &.value.get_adapter_luid.call(this)
    end
    def create_pipeline_library(this : ID3D12Device7*, pLibraryBlob : Void*, blob_length : LibC::UIntPtrT, riid : LibC::GUID*, ppPipelineLibrary : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pipeline_library.call(this, pLibraryBlob, blob_length, riid, ppPipelineLibrary)
    end
    def set_event_on_multiple_fence_completion(this : ID3D12Device7*, ppFences : Void**, pFenceValues : UInt64*, num_fences : UInt32, flags : Win32cr::Graphics::Direct3D12::D3D12_MULTIPLE_FENCE_WAIT_FLAGS, hEvent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_on_multiple_fence_completion.call(this, ppFences, pFenceValues, num_fences, flags, hEvent)
    end
    def set_residency_priority(this : ID3D12Device7*, num_objects : UInt32, ppObjects : Void**, pPriorities : Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_PRIORITY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_residency_priority.call(this, num_objects, ppObjects, pPriorities)
    end
    def create_pipeline_state(this : ID3D12Device7*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_STREAM_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def open_existing_heap_from_address(this : ID3D12Device7*, pAddress : Void*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_existing_heap_from_address.call(this, pAddress, riid, ppvHeap)
    end
    def open_existing_heap_from_file_mapping(this : ID3D12Device7*, hFileMapping : Win32cr::Foundation::HANDLE, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_existing_heap_from_file_mapping.call(this, hFileMapping, riid, ppvHeap)
    end
    def enqueue_make_resident(this : ID3D12Device7*, flags : Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_FLAGS, num_objects : UInt32, ppObjects : Void**, pFenceToSignal : Void*, fence_value_to_signal : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enqueue_make_resident.call(this, flags, num_objects, ppObjects, pFenceToSignal, fence_value_to_signal)
    end
    def create_command_list1(this : ID3D12Device7*, nodeMask : UInt32, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, flags : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_FLAGS, riid : LibC::GUID*, ppCommandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list1.call(this, nodeMask, type__, flags, riid, ppCommandList)
    end
    def create_protected_resource_session(this : ID3D12Device7*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC*, riid : LibC::GUID*, ppSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_protected_resource_session.call(this, pDesc, riid, ppSession)
    end
    def create_committed_resource1(this : ID3D12Device7*, pHeapProperties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, heap_flags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_resource_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, pProtectedSession : Void*, riidResource : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_committed_resource1.call(this, pHeapProperties, heap_flags, pDesc, initial_resource_state, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource)
    end
    def create_heap1(this : ID3D12Device7*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, pProtectedSession : Void*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_heap1.call(this, pDesc, pProtectedSession, riid, ppvHeap)
    end
    def create_reserved_resource1(this : ID3D12Device7*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, pProtectedSession : Void*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_reserved_resource1.call(this, pDesc, initial_state, pOptimizedClearValue, pProtectedSession, riid, ppvResource)
    end
    def get_resource_allocation_info1(this : ID3D12Device7*, visibleMask : UInt32, numResourceDescs : UInt32, pResourceDescs : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, pResourceAllocationInfo1 : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO1*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO
      @lpVtbl.try &.value.get_resource_allocation_info1.call(this, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1)
    end
    def create_lifetime_tracker(this : ID3D12Device7*, pOwner : Void*, riid : LibC::GUID*, ppvTracker : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_lifetime_tracker.call(this, pOwner, riid, ppvTracker)
    end
    def remove_device(this : ID3D12Device7*) : Void
      @lpVtbl.try &.value.remove_device.call(this)
    end
    def enumerate_meta_commands(this : ID3D12Device7*, pNumMetaCommands : UInt32*, pDescs : Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_meta_commands.call(this, pNumMetaCommands, pDescs)
    end
    def enumerate_meta_command_parameters(this : ID3D12Device7*, command_id : LibC::GUID*, stage : Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_STAGE, pTotalStructureSizeInBytes : UInt32*, pParameterCount : UInt32*, pParameterDescs : Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_meta_command_parameters.call(this, command_id, stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs)
    end
    def create_meta_command(this : ID3D12Device7*, command_id : LibC::GUID*, node_mask : UInt32, pCreationParametersData : Void*, creation_parameters_data_size_in_bytes : LibC::UIntPtrT, riid : LibC::GUID*, ppMetaCommand : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_meta_command.call(this, command_id, node_mask, pCreationParametersData, creation_parameters_data_size_in_bytes, riid, ppMetaCommand)
    end
    def create_state_object(this : ID3D12Device7*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_STATE_OBJECT_DESC*, riid : LibC::GUID*, ppStateObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_state_object.call(this, pDesc, riid, ppStateObject)
    end
    def get_raytracing_acceleration_structure_prebuild_info(this : ID3D12Device7*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*, pInfo : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*) : Void
      @lpVtbl.try &.value.get_raytracing_acceleration_structure_prebuild_info.call(this, pDesc, pInfo)
    end
    def check_driver_matching_identifier(this : ID3D12Device7*, serialized_data_type : Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_TYPE, pIdentifierToCheck : Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*) : Win32cr::Graphics::Direct3D12::D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS
      @lpVtbl.try &.value.check_driver_matching_identifier.call(this, serialized_data_type, pIdentifierToCheck)
    end
    def set_background_processing_mode(this : ID3D12Device7*, mode : Win32cr::Graphics::Direct3D12::D3D12_BACKGROUND_PROCESSING_MODE, measurements_action : Win32cr::Graphics::Direct3D12::D3D12_MEASUREMENTS_ACTION, hEventToSignalUponCompletion : Win32cr::Foundation::HANDLE, pbFurtherMeasurementsDesired : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_background_processing_mode.call(this, mode, measurements_action, hEventToSignalUponCompletion, pbFurtherMeasurementsDesired)
    end
    def add_to_state_object(this : ID3D12Device7*, pAddition : Win32cr::Graphics::Direct3D12::D3D12_STATE_OBJECT_DESC*, pStateObjectToGrowFrom : Void*, riid : LibC::GUID*, ppNewStateObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_to_state_object.call(this, pAddition, pStateObjectToGrowFrom, riid, ppNewStateObject)
    end
    def create_protected_resource_session1(this : ID3D12Device7*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC1*, riid : LibC::GUID*, ppSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_protected_resource_session1.call(this, pDesc, riid, ppSession)
    end

  end

  @[Extern]
  record ID3D12Device8Vtbl,
    query_interface : Proc(ID3D12Device8*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Device8*, UInt32),
    release : Proc(ID3D12Device8*, UInt32),
    get_private_data : Proc(ID3D12Device8*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12Device8*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12Device8*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12Device8*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_node_count : Proc(ID3D12Device8*, UInt32),
    create_command_queue : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_command_allocator : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_graphics_pipeline_state : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_compute_pipeline_state : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_command_list : Proc(ID3D12Device8*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, Void*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    check_feature_support : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_FEATURE, Void*, UInt32, Win32cr::Foundation::HRESULT),
    create_descriptor_heap : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_descriptor_handle_increment_size : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, UInt32),
    create_root_signature : Proc(ID3D12Device8*, UInt32, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_constant_buffer_view : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_CONSTANT_BUFFER_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_shader_resource_view : Proc(ID3D12Device8*, Void*, Win32cr::Graphics::Direct3D12::D3D12_SHADER_RESOURCE_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_unordered_access_view : Proc(ID3D12Device8*, Void*, Void*, Win32cr::Graphics::Direct3D12::D3D12_UNORDERED_ACCESS_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_render_target_view : Proc(ID3D12Device8*, Void*, Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_depth_stencil_view : Proc(ID3D12Device8*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_sampler : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    copy_descriptors : Proc(ID3D12Device8*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, Void),
    copy_descriptors_simple : Proc(ID3D12Device8*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, Void),
    get_resource_allocation_info : Proc(ID3D12Device8*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO),
    get_custom_heap_properties : Proc(ID3D12Device8*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES),
    create_committed_resource : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_heap : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_placed_resource : Proc(ID3D12Device8*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_reserved_resource : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_shared_handle : Proc(ID3D12Device8*, Void*, Win32cr::Security::SECURITY_ATTRIBUTES*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    open_shared_handle : Proc(ID3D12Device8*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_shared_handle_by_name : Proc(ID3D12Device8*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    make_resident : Proc(ID3D12Device8*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    evict : Proc(ID3D12Device8*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_fence : Proc(ID3D12Device8*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_device_removed_reason : Proc(ID3D12Device8*, Win32cr::Foundation::HRESULT),
    get_copyable_footprints : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, UInt32, UInt32, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void),
    create_query_heap : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_stable_power_state : Proc(ID3D12Device8*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    create_command_signature : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_SIGNATURE_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_resource_tiling : Proc(ID3D12Device8*, Void*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_PACKED_MIP_INFO*, Win32cr::Graphics::Direct3D12::D3D12_TILE_SHAPE*, UInt32*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_TILING*, Void),
    get_adapter_luid : Proc(ID3D12Device8*, Win32cr::Foundation::LUID),
    create_pipeline_library : Proc(ID3D12Device8*, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_event_on_multiple_fence_completion : Proc(ID3D12Device8*, Void**, UInt64*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_MULTIPLE_FENCE_WAIT_FLAGS, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    set_residency_priority : Proc(ID3D12Device8*, UInt32, Void**, Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_PRIORITY*, Win32cr::Foundation::HRESULT),
    create_pipeline_state : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_STREAM_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_existing_heap_from_address : Proc(ID3D12Device8*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_existing_heap_from_file_mapping : Proc(ID3D12Device8*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    enqueue_make_resident : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_FLAGS, UInt32, Void**, Void*, UInt64, Win32cr::Foundation::HRESULT),
    create_command_list1 : Proc(ID3D12Device8*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_FLAGS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_protected_resource_session : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_committed_resource1 : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_heap1 : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_reserved_resource1 : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_resource_allocation_info1 : Proc(ID3D12Device8*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO1*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO),
    create_lifetime_tracker : Proc(ID3D12Device8*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    remove_device : Proc(ID3D12Device8*, Void),
    enumerate_meta_commands : Proc(ID3D12Device8*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_DESC*, Win32cr::Foundation::HRESULT),
    enumerate_meta_command_parameters : Proc(ID3D12Device8*, LibC::GUID*, Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_STAGE, UInt32*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_DESC*, Win32cr::Foundation::HRESULT),
    create_meta_command : Proc(ID3D12Device8*, LibC::GUID*, UInt32, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_state_object : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_STATE_OBJECT_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_raytracing_acceleration_structure_prebuild_info : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*, Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*, Void),
    check_driver_matching_identifier : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_TYPE, Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*, Win32cr::Graphics::Direct3D12::D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS),
    set_background_processing_mode : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_BACKGROUND_PROCESSING_MODE, Win32cr::Graphics::Direct3D12::D3D12_MEASUREMENTS_ACTION, Win32cr::Foundation::HANDLE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    add_to_state_object : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_STATE_OBJECT_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_protected_resource_session1 : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_resource_allocation_info2 : Proc(ID3D12Device8*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC1*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO1*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO),
    create_committed_resource2 : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC1*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_placed_resource1 : Proc(ID3D12Device8*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC1*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_sampler_feedback_unordered_access_view : Proc(ID3D12Device8*, Void*, Void*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    get_copyable_footprints1 : Proc(ID3D12Device8*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC1*, UInt32, UInt32, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void)


  @[Extern]
  record ID3D12Device8, lpVtbl : ID3D12Device8Vtbl* do
    GUID = LibC::GUID.new(0x9218e6bb_u32, 0xf944_u16, 0x4f7e_u16, StaticArray[0xa7_u8, 0x5c_u8, 0xb1_u8, 0xb2_u8, 0xc7_u8, 0xb7_u8, 0x1_u8, 0xf3_u8])
    def query_interface(this : ID3D12Device8*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Device8*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Device8*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12Device8*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12Device8*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12Device8*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12Device8*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_node_count(this : ID3D12Device8*) : UInt32
      @lpVtbl.try &.value.get_node_count.call(this)
    end
    def create_command_queue(this : ID3D12Device8*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, riid : LibC::GUID*, ppCommandQueue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_queue.call(this, pDesc, riid, ppCommandQueue)
    end
    def create_command_allocator(this : ID3D12Device8*, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, riid : LibC::GUID*, ppCommandAllocator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_allocator.call(this, type__, riid, ppCommandAllocator)
    end
    def create_graphics_pipeline_state(this : ID3D12Device8*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_graphics_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def create_compute_pipeline_state(this : ID3D12Device8*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compute_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def create_command_list(this : ID3D12Device8*, nodeMask : UInt32, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, pCommandAllocator : Void*, pInitialState : Void*, riid : LibC::GUID*, ppCommandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list.call(this, nodeMask, type__, pCommandAllocator, pInitialState, riid, ppCommandList)
    end
    def check_feature_support(this : ID3D12Device8*, feature : Win32cr::Graphics::Direct3D12::D3D12_FEATURE, pFeatureSupportData : Void*, feature_support_data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_feature_support.call(this, feature, pFeatureSupportData, feature_support_data_size)
    end
    def create_descriptor_heap(this : ID3D12Device8*, pDescriptorHeapDesc : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_descriptor_heap.call(this, pDescriptorHeapDesc, riid, ppvHeap)
    end
    def get_descriptor_handle_increment_size(this : ID3D12Device8*, descriptor_heap_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : UInt32
      @lpVtbl.try &.value.get_descriptor_handle_increment_size.call(this, descriptor_heap_type)
    end
    def create_root_signature(this : ID3D12Device8*, nodeMask : UInt32, pBlobWithRootSignature : Void*, blobLengthInBytes : LibC::UIntPtrT, riid : LibC::GUID*, ppvRootSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_root_signature.call(this, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature)
    end
    def create_constant_buffer_view(this : ID3D12Device8*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_CONSTANT_BUFFER_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_constant_buffer_view.call(this, pDesc, dest_descriptor)
    end
    def create_shader_resource_view(this : ID3D12Device8*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SHADER_RESOURCE_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_shader_resource_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_unordered_access_view(this : ID3D12Device8*, pResource : Void*, pCounterResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_UNORDERED_ACCESS_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_unordered_access_view.call(this, pResource, pCounterResource, pDesc, dest_descriptor)
    end
    def create_render_target_view(this : ID3D12Device8*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_render_target_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_depth_stencil_view(this : ID3D12Device8*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_depth_stencil_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_sampler(this : ID3D12Device8*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_sampler.call(this, pDesc, dest_descriptor)
    end
    def copy_descriptors(this : ID3D12Device8*, num_dest_descriptor_ranges : UInt32, pDestDescriptorRangeStarts : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, pDestDescriptorRangeSizes : UInt32*, num_src_descriptor_ranges : UInt32, pSrcDescriptorRangeStarts : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, pSrcDescriptorRangeSizes : UInt32*, descriptor_heaps_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : Void
      @lpVtbl.try &.value.copy_descriptors.call(this, num_dest_descriptor_ranges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, num_src_descriptor_ranges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptor_heaps_type)
    end
    def copy_descriptors_simple(this : ID3D12Device8*, num_descriptors : UInt32, dest_descriptor_range_start : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, src_descriptor_range_start : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, descriptor_heaps_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : Void
      @lpVtbl.try &.value.copy_descriptors_simple.call(this, num_descriptors, dest_descriptor_range_start, src_descriptor_range_start, descriptor_heaps_type)
    end
    def get_resource_allocation_info(this : ID3D12Device8*, visibleMask : UInt32, numResourceDescs : UInt32, pResourceDescs : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO
      @lpVtbl.try &.value.get_resource_allocation_info.call(this, visibleMask, numResourceDescs, pResourceDescs)
    end
    def get_custom_heap_properties(this : ID3D12Device8*, nodeMask : UInt32, heapType : Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE) : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES
      @lpVtbl.try &.value.get_custom_heap_properties.call(this, nodeMask, heapType)
    end
    def create_committed_resource(this : ID3D12Device8*, pHeapProperties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, heap_flags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_resource_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riidResource : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_committed_resource.call(this, pHeapProperties, heap_flags, pDesc, initial_resource_state, pOptimizedClearValue, riidResource, ppvResource)
    end
    def create_heap(this : ID3D12Device8*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_heap.call(this, pDesc, riid, ppvHeap)
    end
    def create_placed_resource(this : ID3D12Device8*, pHeap : Void*, heap_offset : UInt64, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_placed_resource.call(this, pHeap, heap_offset, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_reserved_resource(this : ID3D12Device8*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_reserved_resource.call(this, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_shared_handle(this : ID3D12Device8*, pObject : Void*, pAttributes : Win32cr::Security::SECURITY_ATTRIBUTES*, access : UInt32, name : Win32cr::Foundation::PWSTR, pHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_handle.call(this, pObject, pAttributes, access, name, pHandle)
    end
    def open_shared_handle(this : ID3D12Device8*, nt_handle : Win32cr::Foundation::HANDLE, riid : LibC::GUID*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_handle.call(this, nt_handle, riid, ppvObj)
    end
    def open_shared_handle_by_name(this : ID3D12Device8*, name : Win32cr::Foundation::PWSTR, access : UInt32, pNTHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_handle_by_name.call(this, name, access, pNTHandle)
    end
    def make_resident(this : ID3D12Device8*, num_objects : UInt32, ppObjects : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.make_resident.call(this, num_objects, ppObjects)
    end
    def evict(this : ID3D12Device8*, num_objects : UInt32, ppObjects : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evict.call(this, num_objects, ppObjects)
    end
    def create_fence(this : ID3D12Device8*, initial_value : UInt64, flags : Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS, riid : LibC::GUID*, ppFence : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_fence.call(this, initial_value, flags, riid, ppFence)
    end
    def get_device_removed_reason(this : ID3D12Device8*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_removed_reason.call(this)
    end
    def get_copyable_footprints(this : ID3D12Device8*, pResourceDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, first_subresource : UInt32, num_subresources : UInt32, base_offset : UInt64, pLayouts : Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pNumRows : UInt32*, pRowSizeInBytes : UInt64*, pTotalBytes : UInt64*) : Void
      @lpVtbl.try &.value.get_copyable_footprints.call(this, pResourceDesc, first_subresource, num_subresources, base_offset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
    end
    def create_query_heap(this : ID3D12Device8*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_query_heap.call(this, pDesc, riid, ppvHeap)
    end
    def set_stable_power_state(this : ID3D12Device8*, enable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stable_power_state.call(this, enable)
    end
    def create_command_signature(this : ID3D12Device8*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_SIGNATURE_DESC*, pRootSignature : Void*, riid : LibC::GUID*, ppvCommandSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_signature.call(this, pDesc, pRootSignature, riid, ppvCommandSignature)
    end
    def get_resource_tiling(this : ID3D12Device8*, pTiledResource : Void*, pNumTilesForEntireResource : UInt32*, pPackedMipDesc : Win32cr::Graphics::Direct3D12::D3D12_PACKED_MIP_INFO*, pStandardTileShapeForNonPackedMips : Win32cr::Graphics::Direct3D12::D3D12_TILE_SHAPE*, pNumSubresourceTilings : UInt32*, first_subresource_tiling_to_get : UInt32, pSubresourceTilingsForNonPackedMips : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_TILING*) : Void
      @lpVtbl.try &.value.get_resource_tiling.call(this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, first_subresource_tiling_to_get, pSubresourceTilingsForNonPackedMips)
    end
    def get_adapter_luid(this : ID3D12Device8*) : Win32cr::Foundation::LUID
      @lpVtbl.try &.value.get_adapter_luid.call(this)
    end
    def create_pipeline_library(this : ID3D12Device8*, pLibraryBlob : Void*, blob_length : LibC::UIntPtrT, riid : LibC::GUID*, ppPipelineLibrary : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pipeline_library.call(this, pLibraryBlob, blob_length, riid, ppPipelineLibrary)
    end
    def set_event_on_multiple_fence_completion(this : ID3D12Device8*, ppFences : Void**, pFenceValues : UInt64*, num_fences : UInt32, flags : Win32cr::Graphics::Direct3D12::D3D12_MULTIPLE_FENCE_WAIT_FLAGS, hEvent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_on_multiple_fence_completion.call(this, ppFences, pFenceValues, num_fences, flags, hEvent)
    end
    def set_residency_priority(this : ID3D12Device8*, num_objects : UInt32, ppObjects : Void**, pPriorities : Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_PRIORITY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_residency_priority.call(this, num_objects, ppObjects, pPriorities)
    end
    def create_pipeline_state(this : ID3D12Device8*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_STREAM_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def open_existing_heap_from_address(this : ID3D12Device8*, pAddress : Void*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_existing_heap_from_address.call(this, pAddress, riid, ppvHeap)
    end
    def open_existing_heap_from_file_mapping(this : ID3D12Device8*, hFileMapping : Win32cr::Foundation::HANDLE, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_existing_heap_from_file_mapping.call(this, hFileMapping, riid, ppvHeap)
    end
    def enqueue_make_resident(this : ID3D12Device8*, flags : Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_FLAGS, num_objects : UInt32, ppObjects : Void**, pFenceToSignal : Void*, fence_value_to_signal : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enqueue_make_resident.call(this, flags, num_objects, ppObjects, pFenceToSignal, fence_value_to_signal)
    end
    def create_command_list1(this : ID3D12Device8*, nodeMask : UInt32, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, flags : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_FLAGS, riid : LibC::GUID*, ppCommandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list1.call(this, nodeMask, type__, flags, riid, ppCommandList)
    end
    def create_protected_resource_session(this : ID3D12Device8*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC*, riid : LibC::GUID*, ppSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_protected_resource_session.call(this, pDesc, riid, ppSession)
    end
    def create_committed_resource1(this : ID3D12Device8*, pHeapProperties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, heap_flags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_resource_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, pProtectedSession : Void*, riidResource : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_committed_resource1.call(this, pHeapProperties, heap_flags, pDesc, initial_resource_state, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource)
    end
    def create_heap1(this : ID3D12Device8*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, pProtectedSession : Void*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_heap1.call(this, pDesc, pProtectedSession, riid, ppvHeap)
    end
    def create_reserved_resource1(this : ID3D12Device8*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, pProtectedSession : Void*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_reserved_resource1.call(this, pDesc, initial_state, pOptimizedClearValue, pProtectedSession, riid, ppvResource)
    end
    def get_resource_allocation_info1(this : ID3D12Device8*, visibleMask : UInt32, numResourceDescs : UInt32, pResourceDescs : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, pResourceAllocationInfo1 : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO1*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO
      @lpVtbl.try &.value.get_resource_allocation_info1.call(this, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1)
    end
    def create_lifetime_tracker(this : ID3D12Device8*, pOwner : Void*, riid : LibC::GUID*, ppvTracker : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_lifetime_tracker.call(this, pOwner, riid, ppvTracker)
    end
    def remove_device(this : ID3D12Device8*) : Void
      @lpVtbl.try &.value.remove_device.call(this)
    end
    def enumerate_meta_commands(this : ID3D12Device8*, pNumMetaCommands : UInt32*, pDescs : Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_meta_commands.call(this, pNumMetaCommands, pDescs)
    end
    def enumerate_meta_command_parameters(this : ID3D12Device8*, command_id : LibC::GUID*, stage : Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_STAGE, pTotalStructureSizeInBytes : UInt32*, pParameterCount : UInt32*, pParameterDescs : Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_meta_command_parameters.call(this, command_id, stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs)
    end
    def create_meta_command(this : ID3D12Device8*, command_id : LibC::GUID*, node_mask : UInt32, pCreationParametersData : Void*, creation_parameters_data_size_in_bytes : LibC::UIntPtrT, riid : LibC::GUID*, ppMetaCommand : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_meta_command.call(this, command_id, node_mask, pCreationParametersData, creation_parameters_data_size_in_bytes, riid, ppMetaCommand)
    end
    def create_state_object(this : ID3D12Device8*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_STATE_OBJECT_DESC*, riid : LibC::GUID*, ppStateObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_state_object.call(this, pDesc, riid, ppStateObject)
    end
    def get_raytracing_acceleration_structure_prebuild_info(this : ID3D12Device8*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*, pInfo : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*) : Void
      @lpVtbl.try &.value.get_raytracing_acceleration_structure_prebuild_info.call(this, pDesc, pInfo)
    end
    def check_driver_matching_identifier(this : ID3D12Device8*, serialized_data_type : Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_TYPE, pIdentifierToCheck : Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*) : Win32cr::Graphics::Direct3D12::D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS
      @lpVtbl.try &.value.check_driver_matching_identifier.call(this, serialized_data_type, pIdentifierToCheck)
    end
    def set_background_processing_mode(this : ID3D12Device8*, mode : Win32cr::Graphics::Direct3D12::D3D12_BACKGROUND_PROCESSING_MODE, measurements_action : Win32cr::Graphics::Direct3D12::D3D12_MEASUREMENTS_ACTION, hEventToSignalUponCompletion : Win32cr::Foundation::HANDLE, pbFurtherMeasurementsDesired : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_background_processing_mode.call(this, mode, measurements_action, hEventToSignalUponCompletion, pbFurtherMeasurementsDesired)
    end
    def add_to_state_object(this : ID3D12Device8*, pAddition : Win32cr::Graphics::Direct3D12::D3D12_STATE_OBJECT_DESC*, pStateObjectToGrowFrom : Void*, riid : LibC::GUID*, ppNewStateObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_to_state_object.call(this, pAddition, pStateObjectToGrowFrom, riid, ppNewStateObject)
    end
    def create_protected_resource_session1(this : ID3D12Device8*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC1*, riid : LibC::GUID*, ppSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_protected_resource_session1.call(this, pDesc, riid, ppSession)
    end
    def get_resource_allocation_info2(this : ID3D12Device8*, visibleMask : UInt32, numResourceDescs : UInt32, pResourceDescs : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC1*, pResourceAllocationInfo1 : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO1*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO
      @lpVtbl.try &.value.get_resource_allocation_info2.call(this, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1)
    end
    def create_committed_resource2(this : ID3D12Device8*, pHeapProperties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, heap_flags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC1*, initial_resource_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, pProtectedSession : Void*, riidResource : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_committed_resource2.call(this, pHeapProperties, heap_flags, pDesc, initial_resource_state, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource)
    end
    def create_placed_resource1(this : ID3D12Device8*, pHeap : Void*, heap_offset : UInt64, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC1*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_placed_resource1.call(this, pHeap, heap_offset, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_sampler_feedback_unordered_access_view(this : ID3D12Device8*, pTargetedResource : Void*, pFeedbackResource : Void*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_sampler_feedback_unordered_access_view.call(this, pTargetedResource, pFeedbackResource, dest_descriptor)
    end
    def get_copyable_footprints1(this : ID3D12Device8*, pResourceDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC1*, first_subresource : UInt32, num_subresources : UInt32, base_offset : UInt64, pLayouts : Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pNumRows : UInt32*, pRowSizeInBytes : UInt64*, pTotalBytes : UInt64*) : Void
      @lpVtbl.try &.value.get_copyable_footprints1.call(this, pResourceDesc, first_subresource, num_subresources, base_offset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
    end

  end

  @[Extern]
  record ID3D12Resource1Vtbl,
    query_interface : Proc(ID3D12Resource1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Resource1*, UInt32),
    release : Proc(ID3D12Resource1*, UInt32),
    get_private_data : Proc(ID3D12Resource1*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12Resource1*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12Resource1*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12Resource1*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12Resource1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    map : Proc(ID3D12Resource1*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RANGE*, Void**, Win32cr::Foundation::HRESULT),
    unmap : Proc(ID3D12Resource1*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RANGE*, Void),
    get_desc : Proc(ID3D12Resource1*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC),
    get_gpu_virtual_address : Proc(ID3D12Resource1*, UInt64),
    write_to_subresource : Proc(ID3D12Resource1*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_BOX*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    read_from_subresource : Proc(ID3D12Resource1*, Void*, UInt32, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_BOX*, Win32cr::Foundation::HRESULT),
    get_heap_properties : Proc(ID3D12Resource1*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS*, Win32cr::Foundation::HRESULT),
    get_protected_resource_session : Proc(ID3D12Resource1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12Resource1, lpVtbl : ID3D12Resource1Vtbl* do
    GUID = LibC::GUID.new(0x9d5e227a_u32, 0x4430_u16, 0x4161_u16, StaticArray[0x88_u8, 0xb3_u8, 0x3e_u8, 0xca_u8, 0x6b_u8, 0xb1_u8, 0x6e_u8, 0x19_u8])
    def query_interface(this : ID3D12Resource1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Resource1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Resource1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12Resource1*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12Resource1*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12Resource1*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12Resource1*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12Resource1*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def map(this : ID3D12Resource1*, subresource : UInt32, pReadRange : Win32cr::Graphics::Direct3D12::D3D12_RANGE*, ppData : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map.call(this, subresource, pReadRange, ppData)
    end
    def unmap(this : ID3D12Resource1*, subresource : UInt32, pWrittenRange : Win32cr::Graphics::Direct3D12::D3D12_RANGE*) : Void
      @lpVtbl.try &.value.unmap.call(this, subresource, pWrittenRange)
    end
    def get_desc(this : ID3D12Resource1*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC
      @lpVtbl.try &.value.get_desc.call(this)
    end
    def get_gpu_virtual_address(this : ID3D12Resource1*) : UInt64
      @lpVtbl.try &.value.get_gpu_virtual_address.call(this)
    end
    def write_to_subresource(this : ID3D12Resource1*, dst_subresource : UInt32, pDstBox : Win32cr::Graphics::Direct3D12::D3D12_BOX*, pSrcData : Void*, src_row_pitch : UInt32, src_depth_pitch : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_to_subresource.call(this, dst_subresource, pDstBox, pSrcData, src_row_pitch, src_depth_pitch)
    end
    def read_from_subresource(this : ID3D12Resource1*, pDstData : Void*, dst_row_pitch : UInt32, dst_depth_pitch : UInt32, src_subresource : UInt32, pSrcBox : Win32cr::Graphics::Direct3D12::D3D12_BOX*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_from_subresource.call(this, pDstData, dst_row_pitch, dst_depth_pitch, src_subresource, pSrcBox)
    end
    def get_heap_properties(this : ID3D12Resource1*, pHeapProperties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, pHeapFlags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_heap_properties.call(this, pHeapProperties, pHeapFlags)
    end
    def get_protected_resource_session(this : ID3D12Resource1*, riid : LibC::GUID*, ppProtectedSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_protected_resource_session.call(this, riid, ppProtectedSession)
    end

  end

  @[Extern]
  record ID3D12Resource2Vtbl,
    query_interface : Proc(ID3D12Resource2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Resource2*, UInt32),
    release : Proc(ID3D12Resource2*, UInt32),
    get_private_data : Proc(ID3D12Resource2*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12Resource2*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12Resource2*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12Resource2*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12Resource2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    map : Proc(ID3D12Resource2*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RANGE*, Void**, Win32cr::Foundation::HRESULT),
    unmap : Proc(ID3D12Resource2*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RANGE*, Void),
    get_desc : Proc(ID3D12Resource2*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC),
    get_gpu_virtual_address : Proc(ID3D12Resource2*, UInt64),
    write_to_subresource : Proc(ID3D12Resource2*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_BOX*, Void*, UInt32, UInt32, Win32cr::Foundation::HRESULT),
    read_from_subresource : Proc(ID3D12Resource2*, Void*, UInt32, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_BOX*, Win32cr::Foundation::HRESULT),
    get_heap_properties : Proc(ID3D12Resource2*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS*, Win32cr::Foundation::HRESULT),
    get_protected_resource_session : Proc(ID3D12Resource2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_desc1 : Proc(ID3D12Resource2*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC1)


  @[Extern]
  record ID3D12Resource2, lpVtbl : ID3D12Resource2Vtbl* do
    GUID = LibC::GUID.new(0xbe36ec3b_u32, 0xea85_u16, 0x4aeb_u16, StaticArray[0xa4_u8, 0x5a_u8, 0xe9_u8, 0xd7_u8, 0x64_u8, 0x4_u8, 0xa4_u8, 0x95_u8])
    def query_interface(this : ID3D12Resource2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Resource2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Resource2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12Resource2*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12Resource2*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12Resource2*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12Resource2*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12Resource2*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def map(this : ID3D12Resource2*, subresource : UInt32, pReadRange : Win32cr::Graphics::Direct3D12::D3D12_RANGE*, ppData : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.map.call(this, subresource, pReadRange, ppData)
    end
    def unmap(this : ID3D12Resource2*, subresource : UInt32, pWrittenRange : Win32cr::Graphics::Direct3D12::D3D12_RANGE*) : Void
      @lpVtbl.try &.value.unmap.call(this, subresource, pWrittenRange)
    end
    def get_desc(this : ID3D12Resource2*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC
      @lpVtbl.try &.value.get_desc.call(this)
    end
    def get_gpu_virtual_address(this : ID3D12Resource2*) : UInt64
      @lpVtbl.try &.value.get_gpu_virtual_address.call(this)
    end
    def write_to_subresource(this : ID3D12Resource2*, dst_subresource : UInt32, pDstBox : Win32cr::Graphics::Direct3D12::D3D12_BOX*, pSrcData : Void*, src_row_pitch : UInt32, src_depth_pitch : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.write_to_subresource.call(this, dst_subresource, pDstBox, pSrcData, src_row_pitch, src_depth_pitch)
    end
    def read_from_subresource(this : ID3D12Resource2*, pDstData : Void*, dst_row_pitch : UInt32, dst_depth_pitch : UInt32, src_subresource : UInt32, pSrcBox : Win32cr::Graphics::Direct3D12::D3D12_BOX*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.read_from_subresource.call(this, pDstData, dst_row_pitch, dst_depth_pitch, src_subresource, pSrcBox)
    end
    def get_heap_properties(this : ID3D12Resource2*, pHeapProperties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, pHeapFlags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_heap_properties.call(this, pHeapProperties, pHeapFlags)
    end
    def get_protected_resource_session(this : ID3D12Resource2*, riid : LibC::GUID*, ppProtectedSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_protected_resource_session.call(this, riid, ppProtectedSession)
    end
    def get_desc1(this : ID3D12Resource2*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC1
      @lpVtbl.try &.value.get_desc1.call(this)
    end

  end

  @[Extern]
  record ID3D12Heap1Vtbl,
    query_interface : Proc(ID3D12Heap1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Heap1*, UInt32),
    release : Proc(ID3D12Heap1*, UInt32),
    get_private_data : Proc(ID3D12Heap1*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12Heap1*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12Heap1*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12Heap1*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12Heap1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_desc : Proc(ID3D12Heap1*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC),
    get_protected_resource_session : Proc(ID3D12Heap1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12Heap1, lpVtbl : ID3D12Heap1Vtbl* do
    GUID = LibC::GUID.new(0x572f7389_u32, 0x2168_u16, 0x49e3_u16, StaticArray[0x96_u8, 0x93_u8, 0xd6_u8, 0xdf_u8, 0x58_u8, 0x71_u8, 0xbf_u8, 0x6d_u8])
    def query_interface(this : ID3D12Heap1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Heap1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Heap1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12Heap1*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12Heap1*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12Heap1*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12Heap1*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12Heap1*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_desc(this : ID3D12Heap1*) : Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC
      @lpVtbl.try &.value.get_desc.call(this)
    end
    def get_protected_resource_session(this : ID3D12Heap1*, riid : LibC::GUID*, ppProtectedSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_protected_resource_session.call(this, riid, ppProtectedSession)
    end

  end

  @[Extern]
  record ID3D12GraphicsCommandList3Vtbl,
    query_interface : Proc(ID3D12GraphicsCommandList3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12GraphicsCommandList3*, UInt32),
    release : Proc(ID3D12GraphicsCommandList3*, UInt32),
    get_private_data : Proc(ID3D12GraphicsCommandList3*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12GraphicsCommandList3*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12GraphicsCommandList3*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12GraphicsCommandList3*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12GraphicsCommandList3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D12GraphicsCommandList3*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE),
    close : Proc(ID3D12GraphicsCommandList3*, Win32cr::Foundation::HRESULT),
    reset : Proc(ID3D12GraphicsCommandList3*, Void*, Void*, Win32cr::Foundation::HRESULT),
    clear_state : Proc(ID3D12GraphicsCommandList3*, Void*, Void),
    draw_instanced : Proc(ID3D12GraphicsCommandList3*, UInt32, UInt32, UInt32, UInt32, Void),
    draw_indexed_instanced : Proc(ID3D12GraphicsCommandList3*, UInt32, UInt32, UInt32, Int32, UInt32, Void),
    dispatch : Proc(ID3D12GraphicsCommandList3*, UInt32, UInt32, UInt32, Void),
    copy_buffer_region : Proc(ID3D12GraphicsCommandList3*, Void*, UInt64, Void*, UInt64, UInt64, Void),
    copy_texture_region : Proc(ID3D12GraphicsCommandList3*, Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, UInt32, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, Win32cr::Graphics::Direct3D12::D3D12_BOX*, Void),
    copy_resource : Proc(ID3D12GraphicsCommandList3*, Void*, Void*, Void),
    copy_tiles : Proc(ID3D12GraphicsCommandList3*, Void*, Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCE_COORDINATE*, Win32cr::Graphics::Direct3D12::D3D12_TILE_REGION_SIZE*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_TILE_COPY_FLAGS, Void),
    resolve_subresource : Proc(ID3D12GraphicsCommandList3*, Void*, UInt32, Void*, UInt32, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Void),
    ia_set_primitive_topology : Proc(ID3D12GraphicsCommandList3*, Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY, Void),
    rs_set_viewports : Proc(ID3D12GraphicsCommandList3*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_VIEWPORT*, Void),
    rs_set_scissor_rects : Proc(ID3D12GraphicsCommandList3*, UInt32, Win32cr::Foundation::RECT*, Void),
    om_set_blend_factor : Proc(ID3D12GraphicsCommandList3*, Float32*, Void),
    om_set_stencil_ref : Proc(ID3D12GraphicsCommandList3*, UInt32, Void),
    set_pipeline_state : Proc(ID3D12GraphicsCommandList3*, Void*, Void),
    resource_barrier : Proc(ID3D12GraphicsCommandList3*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*, Void),
    execute_bundle : Proc(ID3D12GraphicsCommandList3*, Void*, Void),
    set_descriptor_heaps : Proc(ID3D12GraphicsCommandList3*, UInt32, Void**, Void),
    set_compute_root_signature : Proc(ID3D12GraphicsCommandList3*, Void*, Void),
    set_graphics_root_signature : Proc(ID3D12GraphicsCommandList3*, Void*, Void),
    set_compute_root_descriptor_table : Proc(ID3D12GraphicsCommandList3*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Void),
    set_graphics_root_descriptor_table : Proc(ID3D12GraphicsCommandList3*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Void),
    set_compute_root32_bit_constant : Proc(ID3D12GraphicsCommandList3*, UInt32, UInt32, UInt32, Void),
    set_graphics_root32_bit_constant : Proc(ID3D12GraphicsCommandList3*, UInt32, UInt32, UInt32, Void),
    set_compute_root32_bit_constants : Proc(ID3D12GraphicsCommandList3*, UInt32, UInt32, Void*, UInt32, Void),
    set_graphics_root32_bit_constants : Proc(ID3D12GraphicsCommandList3*, UInt32, UInt32, Void*, UInt32, Void),
    set_compute_root_constant_buffer_view : Proc(ID3D12GraphicsCommandList3*, UInt32, UInt64, Void),
    set_graphics_root_constant_buffer_view : Proc(ID3D12GraphicsCommandList3*, UInt32, UInt64, Void),
    set_compute_root_shader_resource_view : Proc(ID3D12GraphicsCommandList3*, UInt32, UInt64, Void),
    set_graphics_root_shader_resource_view : Proc(ID3D12GraphicsCommandList3*, UInt32, UInt64, Void),
    set_compute_root_unordered_access_view : Proc(ID3D12GraphicsCommandList3*, UInt32, UInt64, Void),
    set_graphics_root_unordered_access_view : Proc(ID3D12GraphicsCommandList3*, UInt32, UInt64, Void),
    ia_set_index_buffer : Proc(ID3D12GraphicsCommandList3*, Win32cr::Graphics::Direct3D12::D3D12_INDEX_BUFFER_VIEW*, Void),
    ia_set_vertex_buffers : Proc(ID3D12GraphicsCommandList3*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_VERTEX_BUFFER_VIEW*, Void),
    so_set_targets : Proc(ID3D12GraphicsCommandList3*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_STREAM_OUTPUT_BUFFER_VIEW*, Void),
    om_set_render_targets : Proc(ID3D12GraphicsCommandList3*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, Win32cr::Foundation::BOOL, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, Void),
    clear_depth_stencil_view : Proc(ID3D12GraphicsCommandList3*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_FLAGS, Float32, UInt8, UInt32, Win32cr::Foundation::RECT*, Void),
    clear_render_target_view : Proc(ID3D12GraphicsCommandList3*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Float32*, UInt32, Win32cr::Foundation::RECT*, Void),
    clear_unordered_access_view_uint : Proc(ID3D12GraphicsCommandList3*, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void*, UInt32*, UInt32, Win32cr::Foundation::RECT*, Void),
    clear_unordered_access_view_float : Proc(ID3D12GraphicsCommandList3*, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void*, Float32*, UInt32, Win32cr::Foundation::RECT*, Void),
    discard_resource : Proc(ID3D12GraphicsCommandList3*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*, Void),
    begin_query : Proc(ID3D12GraphicsCommandList3*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    end_query : Proc(ID3D12GraphicsCommandList3*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    resolve_query_data : Proc(ID3D12GraphicsCommandList3*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, UInt32, Void*, UInt64, Void),
    set_predication : Proc(ID3D12GraphicsCommandList3*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP, Void),
    set_marker : Proc(ID3D12GraphicsCommandList3*, UInt32, Void*, UInt32, Void),
    begin_event : Proc(ID3D12GraphicsCommandList3*, UInt32, Void*, UInt32, Void),
    end_event : Proc(ID3D12GraphicsCommandList3*, Void),
    execute_indirect : Proc(ID3D12GraphicsCommandList3*, Void*, UInt32, Void*, UInt64, Void*, UInt64, Void),
    atomic_copy_buffer_uint : Proc(ID3D12GraphicsCommandList3*, Void*, UInt64, Void*, UInt64, UInt32, Void**, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*, Void),
    atomic_copy_buffer_uint64 : Proc(ID3D12GraphicsCommandList3*, Void*, UInt64, Void*, UInt64, UInt32, Void**, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*, Void),
    om_set_depth_bounds : Proc(ID3D12GraphicsCommandList3*, Float32, Float32, Void),
    set_sample_positions : Proc(ID3D12GraphicsCommandList3*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_SAMPLE_POSITION*, Void),
    resolve_subresource_region : Proc(ID3D12GraphicsCommandList3*, Void*, UInt32, UInt32, UInt32, Void*, UInt32, Win32cr::Foundation::RECT*, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Win32cr::Graphics::Direct3D12::D3D12_RESOLVE_MODE, Void),
    set_view_instance_mask : Proc(ID3D12GraphicsCommandList3*, UInt32, Void),
    write_buffer_immediate : Proc(ID3D12GraphicsCommandList3*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void),
    set_protected_resource_session : Proc(ID3D12GraphicsCommandList3*, Void*, Void)


  @[Extern]
  record ID3D12GraphicsCommandList3, lpVtbl : ID3D12GraphicsCommandList3Vtbl* do
    GUID = LibC::GUID.new(0x6fda83a7_u32, 0xb84c_u16, 0x4e38_u16, StaticArray[0x9a_u8, 0xc8_u8, 0xc7_u8, 0xbd_u8, 0x22_u8, 0x1_u8, 0x6b_u8, 0x3d_u8])
    def query_interface(this : ID3D12GraphicsCommandList3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12GraphicsCommandList3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12GraphicsCommandList3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12GraphicsCommandList3*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12GraphicsCommandList3*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12GraphicsCommandList3*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12GraphicsCommandList3*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12GraphicsCommandList3*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_type(this : ID3D12GraphicsCommandList3*) : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def close(this : ID3D12GraphicsCommandList3*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def reset(this : ID3D12GraphicsCommandList3*, pAllocator : Void*, pInitialState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, pAllocator, pInitialState)
    end
    def clear_state(this : ID3D12GraphicsCommandList3*, pPipelineState : Void*) : Void
      @lpVtbl.try &.value.clear_state.call(this, pPipelineState)
    end
    def draw_instanced(this : ID3D12GraphicsCommandList3*, vertex_count_per_instance : UInt32, instance_count : UInt32, start_vertex_location : UInt32, start_instance_location : UInt32) : Void
      @lpVtbl.try &.value.draw_instanced.call(this, vertex_count_per_instance, instance_count, start_vertex_location, start_instance_location)
    end
    def draw_indexed_instanced(this : ID3D12GraphicsCommandList3*, index_count_per_instance : UInt32, instance_count : UInt32, start_index_location : UInt32, base_vertex_location : Int32, start_instance_location : UInt32) : Void
      @lpVtbl.try &.value.draw_indexed_instanced.call(this, index_count_per_instance, instance_count, start_index_location, base_vertex_location, start_instance_location)
    end
    def dispatch(this : ID3D12GraphicsCommandList3*, thread_group_count_x : UInt32, thread_group_count_y : UInt32, thread_group_count_z : UInt32) : Void
      @lpVtbl.try &.value.dispatch.call(this, thread_group_count_x, thread_group_count_y, thread_group_count_z)
    end
    def copy_buffer_region(this : ID3D12GraphicsCommandList3*, pDstBuffer : Void*, dst_offset : UInt64, pSrcBuffer : Void*, src_offset : UInt64, num_bytes : UInt64) : Void
      @lpVtbl.try &.value.copy_buffer_region.call(this, pDstBuffer, dst_offset, pSrcBuffer, src_offset, num_bytes)
    end
    def copy_texture_region(this : ID3D12GraphicsCommandList3*, pDst : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, dst_x : UInt32, dst_y : UInt32, dst_z : UInt32, pSrc : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, pSrcBox : Win32cr::Graphics::Direct3D12::D3D12_BOX*) : Void
      @lpVtbl.try &.value.copy_texture_region.call(this, pDst, dst_x, dst_y, dst_z, pSrc, pSrcBox)
    end
    def copy_resource(this : ID3D12GraphicsCommandList3*, pDstResource : Void*, pSrcResource : Void*) : Void
      @lpVtbl.try &.value.copy_resource.call(this, pDstResource, pSrcResource)
    end
    def copy_tiles(this : ID3D12GraphicsCommandList3*, pTiledResource : Void*, pTileRegionStartCoordinate : Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCE_COORDINATE*, pTileRegionSize : Win32cr::Graphics::Direct3D12::D3D12_TILE_REGION_SIZE*, pBuffer : Void*, buffer_start_offset_in_bytes : UInt64, flags : Win32cr::Graphics::Direct3D12::D3D12_TILE_COPY_FLAGS) : Void
      @lpVtbl.try &.value.copy_tiles.call(this, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, buffer_start_offset_in_bytes, flags)
    end
    def resolve_subresource(this : ID3D12GraphicsCommandList3*, pDstResource : Void*, dst_subresource : UInt32, pSrcResource : Void*, src_subresource : UInt32, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT) : Void
      @lpVtbl.try &.value.resolve_subresource.call(this, pDstResource, dst_subresource, pSrcResource, src_subresource, format)
    end
    def ia_set_primitive_topology(this : ID3D12GraphicsCommandList3*, primitive_topology : Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY) : Void
      @lpVtbl.try &.value.ia_set_primitive_topology.call(this, primitive_topology)
    end
    def rs_set_viewports(this : ID3D12GraphicsCommandList3*, num_viewports : UInt32, pViewports : Win32cr::Graphics::Direct3D12::D3D12_VIEWPORT*) : Void
      @lpVtbl.try &.value.rs_set_viewports.call(this, num_viewports, pViewports)
    end
    def rs_set_scissor_rects(this : ID3D12GraphicsCommandList3*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.rs_set_scissor_rects.call(this, num_rects, pRects)
    end
    def om_set_blend_factor(this : ID3D12GraphicsCommandList3*, blend_factor : Float32*) : Void
      @lpVtbl.try &.value.om_set_blend_factor.call(this, blend_factor)
    end
    def om_set_stencil_ref(this : ID3D12GraphicsCommandList3*, stencil_ref : UInt32) : Void
      @lpVtbl.try &.value.om_set_stencil_ref.call(this, stencil_ref)
    end
    def set_pipeline_state(this : ID3D12GraphicsCommandList3*, pPipelineState : Void*) : Void
      @lpVtbl.try &.value.set_pipeline_state.call(this, pPipelineState)
    end
    def resource_barrier(this : ID3D12GraphicsCommandList3*, num_barriers : UInt32, pBarriers : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*) : Void
      @lpVtbl.try &.value.resource_barrier.call(this, num_barriers, pBarriers)
    end
    def execute_bundle(this : ID3D12GraphicsCommandList3*, pCommandList : Void*) : Void
      @lpVtbl.try &.value.execute_bundle.call(this, pCommandList)
    end
    def set_descriptor_heaps(this : ID3D12GraphicsCommandList3*, num_descriptor_heaps : UInt32, ppDescriptorHeaps : Void**) : Void
      @lpVtbl.try &.value.set_descriptor_heaps.call(this, num_descriptor_heaps, ppDescriptorHeaps)
    end
    def set_compute_root_signature(this : ID3D12GraphicsCommandList3*, pRootSignature : Void*) : Void
      @lpVtbl.try &.value.set_compute_root_signature.call(this, pRootSignature)
    end
    def set_graphics_root_signature(this : ID3D12GraphicsCommandList3*, pRootSignature : Void*) : Void
      @lpVtbl.try &.value.set_graphics_root_signature.call(this, pRootSignature)
    end
    def set_compute_root_descriptor_table(this : ID3D12GraphicsCommandList3*, root_parameter_index : UInt32, base_descriptor : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.set_compute_root_descriptor_table.call(this, root_parameter_index, base_descriptor)
    end
    def set_graphics_root_descriptor_table(this : ID3D12GraphicsCommandList3*, root_parameter_index : UInt32, base_descriptor : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.set_graphics_root_descriptor_table.call(this, root_parameter_index, base_descriptor)
    end
    def set_compute_root32_bit_constant(this : ID3D12GraphicsCommandList3*, root_parameter_index : UInt32, src_data : UInt32, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_compute_root32_bit_constant.call(this, root_parameter_index, src_data, dest_offset_in32_bit_values)
    end
    def set_graphics_root32_bit_constant(this : ID3D12GraphicsCommandList3*, root_parameter_index : UInt32, src_data : UInt32, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_graphics_root32_bit_constant.call(this, root_parameter_index, src_data, dest_offset_in32_bit_values)
    end
    def set_compute_root32_bit_constants(this : ID3D12GraphicsCommandList3*, root_parameter_index : UInt32, num32_bit_values_to_set : UInt32, pSrcData : Void*, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_compute_root32_bit_constants.call(this, root_parameter_index, num32_bit_values_to_set, pSrcData, dest_offset_in32_bit_values)
    end
    def set_graphics_root32_bit_constants(this : ID3D12GraphicsCommandList3*, root_parameter_index : UInt32, num32_bit_values_to_set : UInt32, pSrcData : Void*, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_graphics_root32_bit_constants.call(this, root_parameter_index, num32_bit_values_to_set, pSrcData, dest_offset_in32_bit_values)
    end
    def set_compute_root_constant_buffer_view(this : ID3D12GraphicsCommandList3*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_compute_root_constant_buffer_view.call(this, root_parameter_index, buffer_location)
    end
    def set_graphics_root_constant_buffer_view(this : ID3D12GraphicsCommandList3*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_graphics_root_constant_buffer_view.call(this, root_parameter_index, buffer_location)
    end
    def set_compute_root_shader_resource_view(this : ID3D12GraphicsCommandList3*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_compute_root_shader_resource_view.call(this, root_parameter_index, buffer_location)
    end
    def set_graphics_root_shader_resource_view(this : ID3D12GraphicsCommandList3*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_graphics_root_shader_resource_view.call(this, root_parameter_index, buffer_location)
    end
    def set_compute_root_unordered_access_view(this : ID3D12GraphicsCommandList3*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_compute_root_unordered_access_view.call(this, root_parameter_index, buffer_location)
    end
    def set_graphics_root_unordered_access_view(this : ID3D12GraphicsCommandList3*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_graphics_root_unordered_access_view.call(this, root_parameter_index, buffer_location)
    end
    def ia_set_index_buffer(this : ID3D12GraphicsCommandList3*, pView : Win32cr::Graphics::Direct3D12::D3D12_INDEX_BUFFER_VIEW*) : Void
      @lpVtbl.try &.value.ia_set_index_buffer.call(this, pView)
    end
    def ia_set_vertex_buffers(this : ID3D12GraphicsCommandList3*, start_slot : UInt32, num_views : UInt32, pViews : Win32cr::Graphics::Direct3D12::D3D12_VERTEX_BUFFER_VIEW*) : Void
      @lpVtbl.try &.value.ia_set_vertex_buffers.call(this, start_slot, num_views, pViews)
    end
    def so_set_targets(this : ID3D12GraphicsCommandList3*, start_slot : UInt32, num_views : UInt32, pViews : Win32cr::Graphics::Direct3D12::D3D12_STREAM_OUTPUT_BUFFER_VIEW*) : Void
      @lpVtbl.try &.value.so_set_targets.call(this, start_slot, num_views, pViews)
    end
    def om_set_render_targets(this : ID3D12GraphicsCommandList3*, num_render_target_descriptors : UInt32, pRenderTargetDescriptors : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, r_ts_single_handle_to_descriptor_range : Win32cr::Foundation::BOOL, pDepthStencilDescriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*) : Void
      @lpVtbl.try &.value.om_set_render_targets.call(this, num_render_target_descriptors, pRenderTargetDescriptors, r_ts_single_handle_to_descriptor_range, pDepthStencilDescriptor)
    end
    def clear_depth_stencil_view(this : ID3D12GraphicsCommandList3*, depth_stencil_view : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, clear_flags : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_FLAGS, depth : Float32, stencil : UInt8, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_depth_stencil_view.call(this, depth_stencil_view, clear_flags, depth, stencil, num_rects, pRects)
    end
    def clear_render_target_view(this : ID3D12GraphicsCommandList3*, render_target_view : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, color_rgba : Float32*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_render_target_view.call(this, render_target_view, color_rgba, num_rects, pRects)
    end
    def clear_unordered_access_view_uint(this : ID3D12GraphicsCommandList3*, view_gpu_handle_in_current_heap : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, view_cpu_handle : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, pResource : Void*, values : UInt32*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_unordered_access_view_uint.call(this, view_gpu_handle_in_current_heap, view_cpu_handle, pResource, values, num_rects, pRects)
    end
    def clear_unordered_access_view_float(this : ID3D12GraphicsCommandList3*, view_gpu_handle_in_current_heap : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, view_cpu_handle : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, pResource : Void*, values : Float32*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_unordered_access_view_float.call(this, view_gpu_handle_in_current_heap, view_cpu_handle, pResource, values, num_rects, pRects)
    end
    def discard_resource(this : ID3D12GraphicsCommandList3*, pResource : Void*, pRegion : Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*) : Void
      @lpVtbl.try &.value.discard_resource.call(this, pResource, pRegion)
    end
    def begin_query(this : ID3D12GraphicsCommandList3*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.begin_query.call(this, pQueryHeap, type__, index)
    end
    def end_query(this : ID3D12GraphicsCommandList3*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.end_query.call(this, pQueryHeap, type__, index)
    end
    def resolve_query_data(this : ID3D12GraphicsCommandList3*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, start_index : UInt32, num_queries : UInt32, pDestinationBuffer : Void*, aligned_destination_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.resolve_query_data.call(this, pQueryHeap, type__, start_index, num_queries, pDestinationBuffer, aligned_destination_buffer_offset)
    end
    def set_predication(this : ID3D12GraphicsCommandList3*, pBuffer : Void*, aligned_buffer_offset : UInt64, operation : Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP) : Void
      @lpVtbl.try &.value.set_predication.call(this, pBuffer, aligned_buffer_offset, operation)
    end
    def set_marker(this : ID3D12GraphicsCommandList3*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.set_marker.call(this, metadata, pData, size)
    end
    def begin_event(this : ID3D12GraphicsCommandList3*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.begin_event.call(this, metadata, pData, size)
    end
    def end_event(this : ID3D12GraphicsCommandList3*) : Void
      @lpVtbl.try &.value.end_event.call(this)
    end
    def execute_indirect(this : ID3D12GraphicsCommandList3*, pCommandSignature : Void*, max_command_count : UInt32, pArgumentBuffer : Void*, argument_buffer_offset : UInt64, pCountBuffer : Void*, count_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.execute_indirect.call(this, pCommandSignature, max_command_count, pArgumentBuffer, argument_buffer_offset, pCountBuffer, count_buffer_offset)
    end
    def atomic_copy_buffer_uint(this : ID3D12GraphicsCommandList3*, pDstBuffer : Void*, dst_offset : UInt64, pSrcBuffer : Void*, src_offset : UInt64, dependencies : UInt32, ppDependentResources : Void**, pDependentSubresourceRanges : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
      @lpVtbl.try &.value.atomic_copy_buffer_uint.call(this, pDstBuffer, dst_offset, pSrcBuffer, src_offset, dependencies, ppDependentResources, pDependentSubresourceRanges)
    end
    def atomic_copy_buffer_uint64(this : ID3D12GraphicsCommandList3*, pDstBuffer : Void*, dst_offset : UInt64, pSrcBuffer : Void*, src_offset : UInt64, dependencies : UInt32, ppDependentResources : Void**, pDependentSubresourceRanges : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
      @lpVtbl.try &.value.atomic_copy_buffer_uint64.call(this, pDstBuffer, dst_offset, pSrcBuffer, src_offset, dependencies, ppDependentResources, pDependentSubresourceRanges)
    end
    def om_set_depth_bounds(this : ID3D12GraphicsCommandList3*, min : Float32, max : Float32) : Void
      @lpVtbl.try &.value.om_set_depth_bounds.call(this, min, max)
    end
    def set_sample_positions(this : ID3D12GraphicsCommandList3*, num_samples_per_pixel : UInt32, num_pixels : UInt32, pSamplePositions : Win32cr::Graphics::Direct3D12::D3D12_SAMPLE_POSITION*) : Void
      @lpVtbl.try &.value.set_sample_positions.call(this, num_samples_per_pixel, num_pixels, pSamplePositions)
    end
    def resolve_subresource_region(this : ID3D12GraphicsCommandList3*, pDstResource : Void*, dst_subresource : UInt32, dst_x : UInt32, dst_y : UInt32, pSrcResource : Void*, src_subresource : UInt32, pSrcRect : Win32cr::Foundation::RECT*, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, resolve_mode : Win32cr::Graphics::Direct3D12::D3D12_RESOLVE_MODE) : Void
      @lpVtbl.try &.value.resolve_subresource_region.call(this, pDstResource, dst_subresource, dst_x, dst_y, pSrcResource, src_subresource, pSrcRect, format, resolve_mode)
    end
    def set_view_instance_mask(this : ID3D12GraphicsCommandList3*, mask : UInt32) : Void
      @lpVtbl.try &.value.set_view_instance_mask.call(this, mask)
    end
    def write_buffer_immediate(this : ID3D12GraphicsCommandList3*, count : UInt32, pParams : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pModes : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
      @lpVtbl.try &.value.write_buffer_immediate.call(this, count, pParams, pModes)
    end
    def set_protected_resource_session(this : ID3D12GraphicsCommandList3*, pProtectedResourceSession : Void*) : Void
      @lpVtbl.try &.value.set_protected_resource_session.call(this, pProtectedResourceSession)
    end

  end

  @[Extern]
  record ID3D12MetaCommandVtbl,
    query_interface : Proc(ID3D12MetaCommand*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12MetaCommand*, UInt32),
    release : Proc(ID3D12MetaCommand*, UInt32),
    get_private_data : Proc(ID3D12MetaCommand*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12MetaCommand*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12MetaCommand*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12MetaCommand*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12MetaCommand*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_required_parameter_resource_size : Proc(ID3D12MetaCommand*, Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_STAGE, UInt32, UInt64)


  @[Extern]
  record ID3D12MetaCommand, lpVtbl : ID3D12MetaCommandVtbl* do
    GUID = LibC::GUID.new(0xdbb84c27_u32, 0x36ce_u16, 0x4fc9_u16, StaticArray[0xb8_u8, 0x1_u8, 0xf0_u8, 0x48_u8, 0xc4_u8, 0x6a_u8, 0xc5_u8, 0x70_u8])
    def query_interface(this : ID3D12MetaCommand*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12MetaCommand*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12MetaCommand*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12MetaCommand*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12MetaCommand*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12MetaCommand*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12MetaCommand*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12MetaCommand*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_required_parameter_resource_size(this : ID3D12MetaCommand*, stage : Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_STAGE, parameter_index : UInt32) : UInt64
      @lpVtbl.try &.value.get_required_parameter_resource_size.call(this, stage, parameter_index)
    end

  end

  @[Extern]
  record ID3D12GraphicsCommandList4Vtbl,
    query_interface : Proc(ID3D12GraphicsCommandList4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12GraphicsCommandList4*, UInt32),
    release : Proc(ID3D12GraphicsCommandList4*, UInt32),
    get_private_data : Proc(ID3D12GraphicsCommandList4*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12GraphicsCommandList4*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12GraphicsCommandList4*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12GraphicsCommandList4*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12GraphicsCommandList4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D12GraphicsCommandList4*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE),
    close : Proc(ID3D12GraphicsCommandList4*, Win32cr::Foundation::HRESULT),
    reset : Proc(ID3D12GraphicsCommandList4*, Void*, Void*, Win32cr::Foundation::HRESULT),
    clear_state : Proc(ID3D12GraphicsCommandList4*, Void*, Void),
    draw_instanced : Proc(ID3D12GraphicsCommandList4*, UInt32, UInt32, UInt32, UInt32, Void),
    draw_indexed_instanced : Proc(ID3D12GraphicsCommandList4*, UInt32, UInt32, UInt32, Int32, UInt32, Void),
    dispatch : Proc(ID3D12GraphicsCommandList4*, UInt32, UInt32, UInt32, Void),
    copy_buffer_region : Proc(ID3D12GraphicsCommandList4*, Void*, UInt64, Void*, UInt64, UInt64, Void),
    copy_texture_region : Proc(ID3D12GraphicsCommandList4*, Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, UInt32, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, Win32cr::Graphics::Direct3D12::D3D12_BOX*, Void),
    copy_resource : Proc(ID3D12GraphicsCommandList4*, Void*, Void*, Void),
    copy_tiles : Proc(ID3D12GraphicsCommandList4*, Void*, Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCE_COORDINATE*, Win32cr::Graphics::Direct3D12::D3D12_TILE_REGION_SIZE*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_TILE_COPY_FLAGS, Void),
    resolve_subresource : Proc(ID3D12GraphicsCommandList4*, Void*, UInt32, Void*, UInt32, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Void),
    ia_set_primitive_topology : Proc(ID3D12GraphicsCommandList4*, Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY, Void),
    rs_set_viewports : Proc(ID3D12GraphicsCommandList4*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_VIEWPORT*, Void),
    rs_set_scissor_rects : Proc(ID3D12GraphicsCommandList4*, UInt32, Win32cr::Foundation::RECT*, Void),
    om_set_blend_factor : Proc(ID3D12GraphicsCommandList4*, Float32*, Void),
    om_set_stencil_ref : Proc(ID3D12GraphicsCommandList4*, UInt32, Void),
    set_pipeline_state : Proc(ID3D12GraphicsCommandList4*, Void*, Void),
    resource_barrier : Proc(ID3D12GraphicsCommandList4*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*, Void),
    execute_bundle : Proc(ID3D12GraphicsCommandList4*, Void*, Void),
    set_descriptor_heaps : Proc(ID3D12GraphicsCommandList4*, UInt32, Void**, Void),
    set_compute_root_signature : Proc(ID3D12GraphicsCommandList4*, Void*, Void),
    set_graphics_root_signature : Proc(ID3D12GraphicsCommandList4*, Void*, Void),
    set_compute_root_descriptor_table : Proc(ID3D12GraphicsCommandList4*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Void),
    set_graphics_root_descriptor_table : Proc(ID3D12GraphicsCommandList4*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Void),
    set_compute_root32_bit_constant : Proc(ID3D12GraphicsCommandList4*, UInt32, UInt32, UInt32, Void),
    set_graphics_root32_bit_constant : Proc(ID3D12GraphicsCommandList4*, UInt32, UInt32, UInt32, Void),
    set_compute_root32_bit_constants : Proc(ID3D12GraphicsCommandList4*, UInt32, UInt32, Void*, UInt32, Void),
    set_graphics_root32_bit_constants : Proc(ID3D12GraphicsCommandList4*, UInt32, UInt32, Void*, UInt32, Void),
    set_compute_root_constant_buffer_view : Proc(ID3D12GraphicsCommandList4*, UInt32, UInt64, Void),
    set_graphics_root_constant_buffer_view : Proc(ID3D12GraphicsCommandList4*, UInt32, UInt64, Void),
    set_compute_root_shader_resource_view : Proc(ID3D12GraphicsCommandList4*, UInt32, UInt64, Void),
    set_graphics_root_shader_resource_view : Proc(ID3D12GraphicsCommandList4*, UInt32, UInt64, Void),
    set_compute_root_unordered_access_view : Proc(ID3D12GraphicsCommandList4*, UInt32, UInt64, Void),
    set_graphics_root_unordered_access_view : Proc(ID3D12GraphicsCommandList4*, UInt32, UInt64, Void),
    ia_set_index_buffer : Proc(ID3D12GraphicsCommandList4*, Win32cr::Graphics::Direct3D12::D3D12_INDEX_BUFFER_VIEW*, Void),
    ia_set_vertex_buffers : Proc(ID3D12GraphicsCommandList4*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_VERTEX_BUFFER_VIEW*, Void),
    so_set_targets : Proc(ID3D12GraphicsCommandList4*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_STREAM_OUTPUT_BUFFER_VIEW*, Void),
    om_set_render_targets : Proc(ID3D12GraphicsCommandList4*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, Win32cr::Foundation::BOOL, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, Void),
    clear_depth_stencil_view : Proc(ID3D12GraphicsCommandList4*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_FLAGS, Float32, UInt8, UInt32, Win32cr::Foundation::RECT*, Void),
    clear_render_target_view : Proc(ID3D12GraphicsCommandList4*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Float32*, UInt32, Win32cr::Foundation::RECT*, Void),
    clear_unordered_access_view_uint : Proc(ID3D12GraphicsCommandList4*, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void*, UInt32*, UInt32, Win32cr::Foundation::RECT*, Void),
    clear_unordered_access_view_float : Proc(ID3D12GraphicsCommandList4*, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void*, Float32*, UInt32, Win32cr::Foundation::RECT*, Void),
    discard_resource : Proc(ID3D12GraphicsCommandList4*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*, Void),
    begin_query : Proc(ID3D12GraphicsCommandList4*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    end_query : Proc(ID3D12GraphicsCommandList4*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    resolve_query_data : Proc(ID3D12GraphicsCommandList4*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, UInt32, Void*, UInt64, Void),
    set_predication : Proc(ID3D12GraphicsCommandList4*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP, Void),
    set_marker : Proc(ID3D12GraphicsCommandList4*, UInt32, Void*, UInt32, Void),
    begin_event : Proc(ID3D12GraphicsCommandList4*, UInt32, Void*, UInt32, Void),
    end_event : Proc(ID3D12GraphicsCommandList4*, Void),
    execute_indirect : Proc(ID3D12GraphicsCommandList4*, Void*, UInt32, Void*, UInt64, Void*, UInt64, Void),
    atomic_copy_buffer_uint : Proc(ID3D12GraphicsCommandList4*, Void*, UInt64, Void*, UInt64, UInt32, Void**, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*, Void),
    atomic_copy_buffer_uint64 : Proc(ID3D12GraphicsCommandList4*, Void*, UInt64, Void*, UInt64, UInt32, Void**, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*, Void),
    om_set_depth_bounds : Proc(ID3D12GraphicsCommandList4*, Float32, Float32, Void),
    set_sample_positions : Proc(ID3D12GraphicsCommandList4*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_SAMPLE_POSITION*, Void),
    resolve_subresource_region : Proc(ID3D12GraphicsCommandList4*, Void*, UInt32, UInt32, UInt32, Void*, UInt32, Win32cr::Foundation::RECT*, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Win32cr::Graphics::Direct3D12::D3D12_RESOLVE_MODE, Void),
    set_view_instance_mask : Proc(ID3D12GraphicsCommandList4*, UInt32, Void),
    write_buffer_immediate : Proc(ID3D12GraphicsCommandList4*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void),
    set_protected_resource_session : Proc(ID3D12GraphicsCommandList4*, Void*, Void),
    begin_render_pass : Proc(ID3D12GraphicsCommandList4*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_RENDER_TARGET_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_DEPTH_STENCIL_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_FLAGS, Void),
    end_render_pass : Proc(ID3D12GraphicsCommandList4*, Void),
    initialize_meta_command : Proc(ID3D12GraphicsCommandList4*, Void*, Void*, LibC::UIntPtrT, Void),
    execute_meta_command : Proc(ID3D12GraphicsCommandList4*, Void*, Void*, LibC::UIntPtrT, Void),
    build_raytracing_acceleration_structure : Proc(ID3D12GraphicsCommandList4*, Win32cr::Graphics::Direct3D12::D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*, Void),
    emit_raytracing_acceleration_structure_postbuild_info : Proc(ID3D12GraphicsCommandList4*, Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*, UInt32, UInt64*, Void),
    copy_raytracing_acceleration_structure : Proc(ID3D12GraphicsCommandList4*, UInt64, UInt64, Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE, Void),
    set_pipeline_state1 : Proc(ID3D12GraphicsCommandList4*, Void*, Void),
    dispatch_rays : Proc(ID3D12GraphicsCommandList4*, Win32cr::Graphics::Direct3D12::D3D12_DISPATCH_RAYS_DESC*, Void)


  @[Extern]
  record ID3D12GraphicsCommandList4, lpVtbl : ID3D12GraphicsCommandList4Vtbl* do
    GUID = LibC::GUID.new(0x8754318e_u32, 0xd3a9_u16, 0x4541_u16, StaticArray[0x98_u8, 0xcf_u8, 0x64_u8, 0x5b_u8, 0x50_u8, 0xdc_u8, 0x48_u8, 0x74_u8])
    def query_interface(this : ID3D12GraphicsCommandList4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12GraphicsCommandList4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12GraphicsCommandList4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12GraphicsCommandList4*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12GraphicsCommandList4*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12GraphicsCommandList4*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12GraphicsCommandList4*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12GraphicsCommandList4*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_type(this : ID3D12GraphicsCommandList4*) : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def close(this : ID3D12GraphicsCommandList4*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def reset(this : ID3D12GraphicsCommandList4*, pAllocator : Void*, pInitialState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, pAllocator, pInitialState)
    end
    def clear_state(this : ID3D12GraphicsCommandList4*, pPipelineState : Void*) : Void
      @lpVtbl.try &.value.clear_state.call(this, pPipelineState)
    end
    def draw_instanced(this : ID3D12GraphicsCommandList4*, vertex_count_per_instance : UInt32, instance_count : UInt32, start_vertex_location : UInt32, start_instance_location : UInt32) : Void
      @lpVtbl.try &.value.draw_instanced.call(this, vertex_count_per_instance, instance_count, start_vertex_location, start_instance_location)
    end
    def draw_indexed_instanced(this : ID3D12GraphicsCommandList4*, index_count_per_instance : UInt32, instance_count : UInt32, start_index_location : UInt32, base_vertex_location : Int32, start_instance_location : UInt32) : Void
      @lpVtbl.try &.value.draw_indexed_instanced.call(this, index_count_per_instance, instance_count, start_index_location, base_vertex_location, start_instance_location)
    end
    def dispatch(this : ID3D12GraphicsCommandList4*, thread_group_count_x : UInt32, thread_group_count_y : UInt32, thread_group_count_z : UInt32) : Void
      @lpVtbl.try &.value.dispatch.call(this, thread_group_count_x, thread_group_count_y, thread_group_count_z)
    end
    def copy_buffer_region(this : ID3D12GraphicsCommandList4*, pDstBuffer : Void*, dst_offset : UInt64, pSrcBuffer : Void*, src_offset : UInt64, num_bytes : UInt64) : Void
      @lpVtbl.try &.value.copy_buffer_region.call(this, pDstBuffer, dst_offset, pSrcBuffer, src_offset, num_bytes)
    end
    def copy_texture_region(this : ID3D12GraphicsCommandList4*, pDst : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, dst_x : UInt32, dst_y : UInt32, dst_z : UInt32, pSrc : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, pSrcBox : Win32cr::Graphics::Direct3D12::D3D12_BOX*) : Void
      @lpVtbl.try &.value.copy_texture_region.call(this, pDst, dst_x, dst_y, dst_z, pSrc, pSrcBox)
    end
    def copy_resource(this : ID3D12GraphicsCommandList4*, pDstResource : Void*, pSrcResource : Void*) : Void
      @lpVtbl.try &.value.copy_resource.call(this, pDstResource, pSrcResource)
    end
    def copy_tiles(this : ID3D12GraphicsCommandList4*, pTiledResource : Void*, pTileRegionStartCoordinate : Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCE_COORDINATE*, pTileRegionSize : Win32cr::Graphics::Direct3D12::D3D12_TILE_REGION_SIZE*, pBuffer : Void*, buffer_start_offset_in_bytes : UInt64, flags : Win32cr::Graphics::Direct3D12::D3D12_TILE_COPY_FLAGS) : Void
      @lpVtbl.try &.value.copy_tiles.call(this, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, buffer_start_offset_in_bytes, flags)
    end
    def resolve_subresource(this : ID3D12GraphicsCommandList4*, pDstResource : Void*, dst_subresource : UInt32, pSrcResource : Void*, src_subresource : UInt32, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT) : Void
      @lpVtbl.try &.value.resolve_subresource.call(this, pDstResource, dst_subresource, pSrcResource, src_subresource, format)
    end
    def ia_set_primitive_topology(this : ID3D12GraphicsCommandList4*, primitive_topology : Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY) : Void
      @lpVtbl.try &.value.ia_set_primitive_topology.call(this, primitive_topology)
    end
    def rs_set_viewports(this : ID3D12GraphicsCommandList4*, num_viewports : UInt32, pViewports : Win32cr::Graphics::Direct3D12::D3D12_VIEWPORT*) : Void
      @lpVtbl.try &.value.rs_set_viewports.call(this, num_viewports, pViewports)
    end
    def rs_set_scissor_rects(this : ID3D12GraphicsCommandList4*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.rs_set_scissor_rects.call(this, num_rects, pRects)
    end
    def om_set_blend_factor(this : ID3D12GraphicsCommandList4*, blend_factor : Float32*) : Void
      @lpVtbl.try &.value.om_set_blend_factor.call(this, blend_factor)
    end
    def om_set_stencil_ref(this : ID3D12GraphicsCommandList4*, stencil_ref : UInt32) : Void
      @lpVtbl.try &.value.om_set_stencil_ref.call(this, stencil_ref)
    end
    def set_pipeline_state(this : ID3D12GraphicsCommandList4*, pPipelineState : Void*) : Void
      @lpVtbl.try &.value.set_pipeline_state.call(this, pPipelineState)
    end
    def resource_barrier(this : ID3D12GraphicsCommandList4*, num_barriers : UInt32, pBarriers : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*) : Void
      @lpVtbl.try &.value.resource_barrier.call(this, num_barriers, pBarriers)
    end
    def execute_bundle(this : ID3D12GraphicsCommandList4*, pCommandList : Void*) : Void
      @lpVtbl.try &.value.execute_bundle.call(this, pCommandList)
    end
    def set_descriptor_heaps(this : ID3D12GraphicsCommandList4*, num_descriptor_heaps : UInt32, ppDescriptorHeaps : Void**) : Void
      @lpVtbl.try &.value.set_descriptor_heaps.call(this, num_descriptor_heaps, ppDescriptorHeaps)
    end
    def set_compute_root_signature(this : ID3D12GraphicsCommandList4*, pRootSignature : Void*) : Void
      @lpVtbl.try &.value.set_compute_root_signature.call(this, pRootSignature)
    end
    def set_graphics_root_signature(this : ID3D12GraphicsCommandList4*, pRootSignature : Void*) : Void
      @lpVtbl.try &.value.set_graphics_root_signature.call(this, pRootSignature)
    end
    def set_compute_root_descriptor_table(this : ID3D12GraphicsCommandList4*, root_parameter_index : UInt32, base_descriptor : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.set_compute_root_descriptor_table.call(this, root_parameter_index, base_descriptor)
    end
    def set_graphics_root_descriptor_table(this : ID3D12GraphicsCommandList4*, root_parameter_index : UInt32, base_descriptor : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.set_graphics_root_descriptor_table.call(this, root_parameter_index, base_descriptor)
    end
    def set_compute_root32_bit_constant(this : ID3D12GraphicsCommandList4*, root_parameter_index : UInt32, src_data : UInt32, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_compute_root32_bit_constant.call(this, root_parameter_index, src_data, dest_offset_in32_bit_values)
    end
    def set_graphics_root32_bit_constant(this : ID3D12GraphicsCommandList4*, root_parameter_index : UInt32, src_data : UInt32, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_graphics_root32_bit_constant.call(this, root_parameter_index, src_data, dest_offset_in32_bit_values)
    end
    def set_compute_root32_bit_constants(this : ID3D12GraphicsCommandList4*, root_parameter_index : UInt32, num32_bit_values_to_set : UInt32, pSrcData : Void*, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_compute_root32_bit_constants.call(this, root_parameter_index, num32_bit_values_to_set, pSrcData, dest_offset_in32_bit_values)
    end
    def set_graphics_root32_bit_constants(this : ID3D12GraphicsCommandList4*, root_parameter_index : UInt32, num32_bit_values_to_set : UInt32, pSrcData : Void*, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_graphics_root32_bit_constants.call(this, root_parameter_index, num32_bit_values_to_set, pSrcData, dest_offset_in32_bit_values)
    end
    def set_compute_root_constant_buffer_view(this : ID3D12GraphicsCommandList4*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_compute_root_constant_buffer_view.call(this, root_parameter_index, buffer_location)
    end
    def set_graphics_root_constant_buffer_view(this : ID3D12GraphicsCommandList4*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_graphics_root_constant_buffer_view.call(this, root_parameter_index, buffer_location)
    end
    def set_compute_root_shader_resource_view(this : ID3D12GraphicsCommandList4*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_compute_root_shader_resource_view.call(this, root_parameter_index, buffer_location)
    end
    def set_graphics_root_shader_resource_view(this : ID3D12GraphicsCommandList4*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_graphics_root_shader_resource_view.call(this, root_parameter_index, buffer_location)
    end
    def set_compute_root_unordered_access_view(this : ID3D12GraphicsCommandList4*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_compute_root_unordered_access_view.call(this, root_parameter_index, buffer_location)
    end
    def set_graphics_root_unordered_access_view(this : ID3D12GraphicsCommandList4*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_graphics_root_unordered_access_view.call(this, root_parameter_index, buffer_location)
    end
    def ia_set_index_buffer(this : ID3D12GraphicsCommandList4*, pView : Win32cr::Graphics::Direct3D12::D3D12_INDEX_BUFFER_VIEW*) : Void
      @lpVtbl.try &.value.ia_set_index_buffer.call(this, pView)
    end
    def ia_set_vertex_buffers(this : ID3D12GraphicsCommandList4*, start_slot : UInt32, num_views : UInt32, pViews : Win32cr::Graphics::Direct3D12::D3D12_VERTEX_BUFFER_VIEW*) : Void
      @lpVtbl.try &.value.ia_set_vertex_buffers.call(this, start_slot, num_views, pViews)
    end
    def so_set_targets(this : ID3D12GraphicsCommandList4*, start_slot : UInt32, num_views : UInt32, pViews : Win32cr::Graphics::Direct3D12::D3D12_STREAM_OUTPUT_BUFFER_VIEW*) : Void
      @lpVtbl.try &.value.so_set_targets.call(this, start_slot, num_views, pViews)
    end
    def om_set_render_targets(this : ID3D12GraphicsCommandList4*, num_render_target_descriptors : UInt32, pRenderTargetDescriptors : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, r_ts_single_handle_to_descriptor_range : Win32cr::Foundation::BOOL, pDepthStencilDescriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*) : Void
      @lpVtbl.try &.value.om_set_render_targets.call(this, num_render_target_descriptors, pRenderTargetDescriptors, r_ts_single_handle_to_descriptor_range, pDepthStencilDescriptor)
    end
    def clear_depth_stencil_view(this : ID3D12GraphicsCommandList4*, depth_stencil_view : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, clear_flags : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_FLAGS, depth : Float32, stencil : UInt8, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_depth_stencil_view.call(this, depth_stencil_view, clear_flags, depth, stencil, num_rects, pRects)
    end
    def clear_render_target_view(this : ID3D12GraphicsCommandList4*, render_target_view : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, color_rgba : Float32*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_render_target_view.call(this, render_target_view, color_rgba, num_rects, pRects)
    end
    def clear_unordered_access_view_uint(this : ID3D12GraphicsCommandList4*, view_gpu_handle_in_current_heap : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, view_cpu_handle : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, pResource : Void*, values : UInt32*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_unordered_access_view_uint.call(this, view_gpu_handle_in_current_heap, view_cpu_handle, pResource, values, num_rects, pRects)
    end
    def clear_unordered_access_view_float(this : ID3D12GraphicsCommandList4*, view_gpu_handle_in_current_heap : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, view_cpu_handle : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, pResource : Void*, values : Float32*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_unordered_access_view_float.call(this, view_gpu_handle_in_current_heap, view_cpu_handle, pResource, values, num_rects, pRects)
    end
    def discard_resource(this : ID3D12GraphicsCommandList4*, pResource : Void*, pRegion : Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*) : Void
      @lpVtbl.try &.value.discard_resource.call(this, pResource, pRegion)
    end
    def begin_query(this : ID3D12GraphicsCommandList4*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.begin_query.call(this, pQueryHeap, type__, index)
    end
    def end_query(this : ID3D12GraphicsCommandList4*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.end_query.call(this, pQueryHeap, type__, index)
    end
    def resolve_query_data(this : ID3D12GraphicsCommandList4*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, start_index : UInt32, num_queries : UInt32, pDestinationBuffer : Void*, aligned_destination_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.resolve_query_data.call(this, pQueryHeap, type__, start_index, num_queries, pDestinationBuffer, aligned_destination_buffer_offset)
    end
    def set_predication(this : ID3D12GraphicsCommandList4*, pBuffer : Void*, aligned_buffer_offset : UInt64, operation : Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP) : Void
      @lpVtbl.try &.value.set_predication.call(this, pBuffer, aligned_buffer_offset, operation)
    end
    def set_marker(this : ID3D12GraphicsCommandList4*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.set_marker.call(this, metadata, pData, size)
    end
    def begin_event(this : ID3D12GraphicsCommandList4*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.begin_event.call(this, metadata, pData, size)
    end
    def end_event(this : ID3D12GraphicsCommandList4*) : Void
      @lpVtbl.try &.value.end_event.call(this)
    end
    def execute_indirect(this : ID3D12GraphicsCommandList4*, pCommandSignature : Void*, max_command_count : UInt32, pArgumentBuffer : Void*, argument_buffer_offset : UInt64, pCountBuffer : Void*, count_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.execute_indirect.call(this, pCommandSignature, max_command_count, pArgumentBuffer, argument_buffer_offset, pCountBuffer, count_buffer_offset)
    end
    def atomic_copy_buffer_uint(this : ID3D12GraphicsCommandList4*, pDstBuffer : Void*, dst_offset : UInt64, pSrcBuffer : Void*, src_offset : UInt64, dependencies : UInt32, ppDependentResources : Void**, pDependentSubresourceRanges : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
      @lpVtbl.try &.value.atomic_copy_buffer_uint.call(this, pDstBuffer, dst_offset, pSrcBuffer, src_offset, dependencies, ppDependentResources, pDependentSubresourceRanges)
    end
    def atomic_copy_buffer_uint64(this : ID3D12GraphicsCommandList4*, pDstBuffer : Void*, dst_offset : UInt64, pSrcBuffer : Void*, src_offset : UInt64, dependencies : UInt32, ppDependentResources : Void**, pDependentSubresourceRanges : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
      @lpVtbl.try &.value.atomic_copy_buffer_uint64.call(this, pDstBuffer, dst_offset, pSrcBuffer, src_offset, dependencies, ppDependentResources, pDependentSubresourceRanges)
    end
    def om_set_depth_bounds(this : ID3D12GraphicsCommandList4*, min : Float32, max : Float32) : Void
      @lpVtbl.try &.value.om_set_depth_bounds.call(this, min, max)
    end
    def set_sample_positions(this : ID3D12GraphicsCommandList4*, num_samples_per_pixel : UInt32, num_pixels : UInt32, pSamplePositions : Win32cr::Graphics::Direct3D12::D3D12_SAMPLE_POSITION*) : Void
      @lpVtbl.try &.value.set_sample_positions.call(this, num_samples_per_pixel, num_pixels, pSamplePositions)
    end
    def resolve_subresource_region(this : ID3D12GraphicsCommandList4*, pDstResource : Void*, dst_subresource : UInt32, dst_x : UInt32, dst_y : UInt32, pSrcResource : Void*, src_subresource : UInt32, pSrcRect : Win32cr::Foundation::RECT*, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, resolve_mode : Win32cr::Graphics::Direct3D12::D3D12_RESOLVE_MODE) : Void
      @lpVtbl.try &.value.resolve_subresource_region.call(this, pDstResource, dst_subresource, dst_x, dst_y, pSrcResource, src_subresource, pSrcRect, format, resolve_mode)
    end
    def set_view_instance_mask(this : ID3D12GraphicsCommandList4*, mask : UInt32) : Void
      @lpVtbl.try &.value.set_view_instance_mask.call(this, mask)
    end
    def write_buffer_immediate(this : ID3D12GraphicsCommandList4*, count : UInt32, pParams : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pModes : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
      @lpVtbl.try &.value.write_buffer_immediate.call(this, count, pParams, pModes)
    end
    def set_protected_resource_session(this : ID3D12GraphicsCommandList4*, pProtectedResourceSession : Void*) : Void
      @lpVtbl.try &.value.set_protected_resource_session.call(this, pProtectedResourceSession)
    end
    def begin_render_pass(this : ID3D12GraphicsCommandList4*, num_render_targets : UInt32, pRenderTargets : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_RENDER_TARGET_DESC*, pDepthStencil : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_DEPTH_STENCIL_DESC*, flags : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_FLAGS) : Void
      @lpVtbl.try &.value.begin_render_pass.call(this, num_render_targets, pRenderTargets, pDepthStencil, flags)
    end
    def end_render_pass(this : ID3D12GraphicsCommandList4*) : Void
      @lpVtbl.try &.value.end_render_pass.call(this)
    end
    def initialize_meta_command(this : ID3D12GraphicsCommandList4*, pMetaCommand : Void*, pInitializationParametersData : Void*, initialization_parameters_data_size_in_bytes : LibC::UIntPtrT) : Void
      @lpVtbl.try &.value.initialize_meta_command.call(this, pMetaCommand, pInitializationParametersData, initialization_parameters_data_size_in_bytes)
    end
    def execute_meta_command(this : ID3D12GraphicsCommandList4*, pMetaCommand : Void*, pExecutionParametersData : Void*, execution_parameters_data_size_in_bytes : LibC::UIntPtrT) : Void
      @lpVtbl.try &.value.execute_meta_command.call(this, pMetaCommand, pExecutionParametersData, execution_parameters_data_size_in_bytes)
    end
    def build_raytracing_acceleration_structure(this : ID3D12GraphicsCommandList4*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC*, num_postbuild_info_descs : UInt32, pPostbuildInfoDescs : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*) : Void
      @lpVtbl.try &.value.build_raytracing_acceleration_structure.call(this, pDesc, num_postbuild_info_descs, pPostbuildInfoDescs)
    end
    def emit_raytracing_acceleration_structure_postbuild_info(this : ID3D12GraphicsCommandList4*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*, num_source_acceleration_structures : UInt32, pSourceAccelerationStructureData : UInt64*) : Void
      @lpVtbl.try &.value.emit_raytracing_acceleration_structure_postbuild_info.call(this, pDesc, num_source_acceleration_structures, pSourceAccelerationStructureData)
    end
    def copy_raytracing_acceleration_structure(this : ID3D12GraphicsCommandList4*, dest_acceleration_structure_data : UInt64, source_acceleration_structure_data : UInt64, mode : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE) : Void
      @lpVtbl.try &.value.copy_raytracing_acceleration_structure.call(this, dest_acceleration_structure_data, source_acceleration_structure_data, mode)
    end
    def set_pipeline_state1(this : ID3D12GraphicsCommandList4*, pStateObject : Void*) : Void
      @lpVtbl.try &.value.set_pipeline_state1.call(this, pStateObject)
    end
    def dispatch_rays(this : ID3D12GraphicsCommandList4*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_DISPATCH_RAYS_DESC*) : Void
      @lpVtbl.try &.value.dispatch_rays.call(this, pDesc)
    end

  end

  @[Extern]
  record ID3D12ShaderCacheSessionVtbl,
    query_interface : Proc(ID3D12ShaderCacheSession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12ShaderCacheSession*, UInt32),
    release : Proc(ID3D12ShaderCacheSession*, UInt32),
    get_private_data : Proc(ID3D12ShaderCacheSession*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12ShaderCacheSession*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12ShaderCacheSession*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12ShaderCacheSession*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12ShaderCacheSession*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    find_value : Proc(ID3D12ShaderCacheSession*, Void*, UInt32, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    store_value : Proc(ID3D12ShaderCacheSession*, Void*, UInt32, Void*, UInt32, Win32cr::Foundation::HRESULT),
    set_delete_on_destroy : Proc(ID3D12ShaderCacheSession*, Void),
    get_desc : Proc(ID3D12ShaderCacheSession*, Win32cr::Graphics::Direct3D12::D3D12_SHADER_CACHE_SESSION_DESC)


  @[Extern]
  record ID3D12ShaderCacheSession, lpVtbl : ID3D12ShaderCacheSessionVtbl* do
    GUID = LibC::GUID.new(0x28e2495d_u32, 0xf64_u16, 0x4ae4_u16, StaticArray[0xa6_u8, 0xec_u8, 0x12_u8, 0x92_u8, 0x55_u8, 0xdc_u8, 0x49_u8, 0xa8_u8])
    def query_interface(this : ID3D12ShaderCacheSession*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12ShaderCacheSession*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12ShaderCacheSession*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12ShaderCacheSession*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12ShaderCacheSession*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12ShaderCacheSession*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12ShaderCacheSession*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12ShaderCacheSession*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def find_value(this : ID3D12ShaderCacheSession*, pKey : Void*, key_size : UInt32, pValue : Void*, pValueSize : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.find_value.call(this, pKey, key_size, pValue, pValueSize)
    end
    def store_value(this : ID3D12ShaderCacheSession*, pKey : Void*, key_size : UInt32, pValue : Void*, value_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.store_value.call(this, pKey, key_size, pValue, value_size)
    end
    def set_delete_on_destroy(this : ID3D12ShaderCacheSession*) : Void
      @lpVtbl.try &.value.set_delete_on_destroy.call(this)
    end
    def get_desc(this : ID3D12ShaderCacheSession*) : Win32cr::Graphics::Direct3D12::D3D12_SHADER_CACHE_SESSION_DESC
      @lpVtbl.try &.value.get_desc.call(this)
    end

  end

  @[Extern]
  record ID3D12Device9Vtbl,
    query_interface : Proc(ID3D12Device9*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Device9*, UInt32),
    release : Proc(ID3D12Device9*, UInt32),
    get_private_data : Proc(ID3D12Device9*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12Device9*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12Device9*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12Device9*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_node_count : Proc(ID3D12Device9*, UInt32),
    create_command_queue : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_command_allocator : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_graphics_pipeline_state : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_compute_pipeline_state : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_command_list : Proc(ID3D12Device9*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, Void*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    check_feature_support : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_FEATURE, Void*, UInt32, Win32cr::Foundation::HRESULT),
    create_descriptor_heap : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_descriptor_handle_increment_size : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, UInt32),
    create_root_signature : Proc(ID3D12Device9*, UInt32, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_constant_buffer_view : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_CONSTANT_BUFFER_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_shader_resource_view : Proc(ID3D12Device9*, Void*, Win32cr::Graphics::Direct3D12::D3D12_SHADER_RESOURCE_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_unordered_access_view : Proc(ID3D12Device9*, Void*, Void*, Win32cr::Graphics::Direct3D12::D3D12_UNORDERED_ACCESS_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_render_target_view : Proc(ID3D12Device9*, Void*, Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_depth_stencil_view : Proc(ID3D12Device9*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VIEW_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    create_sampler : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_DESC*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    copy_descriptors : Proc(ID3D12Device9*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, Void),
    copy_descriptors_simple : Proc(ID3D12Device9*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE, Void),
    get_resource_allocation_info : Proc(ID3D12Device9*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO),
    get_custom_heap_properties : Proc(ID3D12Device9*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES),
    create_committed_resource : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_heap : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_placed_resource : Proc(ID3D12Device9*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_reserved_resource : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_shared_handle : Proc(ID3D12Device9*, Void*, Win32cr::Security::SECURITY_ATTRIBUTES*, UInt32, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    open_shared_handle : Proc(ID3D12Device9*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_shared_handle_by_name : Proc(ID3D12Device9*, Win32cr::Foundation::PWSTR, UInt32, Win32cr::Foundation::HANDLE*, Win32cr::Foundation::HRESULT),
    make_resident : Proc(ID3D12Device9*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    evict : Proc(ID3D12Device9*, UInt32, Void**, Win32cr::Foundation::HRESULT),
    create_fence : Proc(ID3D12Device9*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_device_removed_reason : Proc(ID3D12Device9*, Win32cr::Foundation::HRESULT),
    get_copyable_footprints : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, UInt32, UInt32, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void),
    create_query_heap : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_stable_power_state : Proc(ID3D12Device9*, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    create_command_signature : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_SIGNATURE_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_resource_tiling : Proc(ID3D12Device9*, Void*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_PACKED_MIP_INFO*, Win32cr::Graphics::Direct3D12::D3D12_TILE_SHAPE*, UInt32*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_TILING*, Void),
    get_adapter_luid : Proc(ID3D12Device9*, Win32cr::Foundation::LUID),
    create_pipeline_library : Proc(ID3D12Device9*, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    set_event_on_multiple_fence_completion : Proc(ID3D12Device9*, Void**, UInt64*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_MULTIPLE_FENCE_WAIT_FLAGS, Win32cr::Foundation::HANDLE, Win32cr::Foundation::HRESULT),
    set_residency_priority : Proc(ID3D12Device9*, UInt32, Void**, Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_PRIORITY*, Win32cr::Foundation::HRESULT),
    create_pipeline_state : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_STREAM_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_existing_heap_from_address : Proc(ID3D12Device9*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    open_existing_heap_from_file_mapping : Proc(ID3D12Device9*, Win32cr::Foundation::HANDLE, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    enqueue_make_resident : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_FLAGS, UInt32, Void**, Void*, UInt64, Win32cr::Foundation::HRESULT),
    create_command_list1 : Proc(ID3D12Device9*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_FLAGS, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_protected_resource_session : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_committed_resource1 : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_heap1 : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_reserved_resource1 : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_resource_allocation_info1 : Proc(ID3D12Device9*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO1*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO),
    create_lifetime_tracker : Proc(ID3D12Device9*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    remove_device : Proc(ID3D12Device9*, Void),
    enumerate_meta_commands : Proc(ID3D12Device9*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_DESC*, Win32cr::Foundation::HRESULT),
    enumerate_meta_command_parameters : Proc(ID3D12Device9*, LibC::GUID*, Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_STAGE, UInt32*, UInt32*, Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_DESC*, Win32cr::Foundation::HRESULT),
    create_meta_command : Proc(ID3D12Device9*, LibC::GUID*, UInt32, Void*, LibC::UIntPtrT, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_state_object : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_STATE_OBJECT_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_raytracing_acceleration_structure_prebuild_info : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*, Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*, Void),
    check_driver_matching_identifier : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_TYPE, Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*, Win32cr::Graphics::Direct3D12::D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS),
    set_background_processing_mode : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_BACKGROUND_PROCESSING_MODE, Win32cr::Graphics::Direct3D12::D3D12_MEASUREMENTS_ACTION, Win32cr::Foundation::HANDLE, Win32cr::Foundation::BOOL*, Win32cr::Foundation::HRESULT),
    add_to_state_object : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_STATE_OBJECT_DESC*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_protected_resource_session1 : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_resource_allocation_info2 : Proc(ID3D12Device9*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC1*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO1*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO),
    create_committed_resource2 : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC1*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, Void*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_placed_resource1 : Proc(ID3D12Device9*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC1*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    create_sampler_feedback_unordered_access_view : Proc(ID3D12Device9*, Void*, Void*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void),
    get_copyable_footprints1 : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC1*, UInt32, UInt32, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, UInt32*, UInt64*, UInt64*, Void),
    create_shader_cache_session : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_SHADER_CACHE_SESSION_DESC*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    shader_cache_control : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_SHADER_CACHE_KIND_FLAGS, Win32cr::Graphics::Direct3D12::D3D12_SHADER_CACHE_CONTROL_FLAGS, Win32cr::Foundation::HRESULT),
    create_command_queue1 : Proc(ID3D12Device9*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, LibC::GUID*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12Device9, lpVtbl : ID3D12Device9Vtbl* do
    GUID = LibC::GUID.new(0x4c80e962_u32, 0xf032_u16, 0x4f60_u16, StaticArray[0xbc_u8, 0x9e_u8, 0xeb_u8, 0xc2_u8, 0xcf_u8, 0xa1_u8, 0xd8_u8, 0x3c_u8])
    def query_interface(this : ID3D12Device9*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Device9*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Device9*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12Device9*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12Device9*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12Device9*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12Device9*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_node_count(this : ID3D12Device9*) : UInt32
      @lpVtbl.try &.value.get_node_count.call(this)
    end
    def create_command_queue(this : ID3D12Device9*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, riid : LibC::GUID*, ppCommandQueue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_queue.call(this, pDesc, riid, ppCommandQueue)
    end
    def create_command_allocator(this : ID3D12Device9*, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, riid : LibC::GUID*, ppCommandAllocator : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_allocator.call(this, type__, riid, ppCommandAllocator)
    end
    def create_graphics_pipeline_state(this : ID3D12Device9*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_GRAPHICS_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_graphics_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def create_compute_pipeline_state(this : ID3D12Device9*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMPUTE_PIPELINE_STATE_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_compute_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def create_command_list(this : ID3D12Device9*, nodeMask : UInt32, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, pCommandAllocator : Void*, pInitialState : Void*, riid : LibC::GUID*, ppCommandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list.call(this, nodeMask, type__, pCommandAllocator, pInitialState, riid, ppCommandList)
    end
    def check_feature_support(this : ID3D12Device9*, feature : Win32cr::Graphics::Direct3D12::D3D12_FEATURE, pFeatureSupportData : Void*, feature_support_data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.check_feature_support.call(this, feature, pFeatureSupportData, feature_support_data_size)
    end
    def create_descriptor_heap(this : ID3D12Device9*, pDescriptorHeapDesc : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_descriptor_heap.call(this, pDescriptorHeapDesc, riid, ppvHeap)
    end
    def get_descriptor_handle_increment_size(this : ID3D12Device9*, descriptor_heap_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : UInt32
      @lpVtbl.try &.value.get_descriptor_handle_increment_size.call(this, descriptor_heap_type)
    end
    def create_root_signature(this : ID3D12Device9*, nodeMask : UInt32, pBlobWithRootSignature : Void*, blobLengthInBytes : LibC::UIntPtrT, riid : LibC::GUID*, ppvRootSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_root_signature.call(this, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature)
    end
    def create_constant_buffer_view(this : ID3D12Device9*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_CONSTANT_BUFFER_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_constant_buffer_view.call(this, pDesc, dest_descriptor)
    end
    def create_shader_resource_view(this : ID3D12Device9*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SHADER_RESOURCE_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_shader_resource_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_unordered_access_view(this : ID3D12Device9*, pResource : Void*, pCounterResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_UNORDERED_ACCESS_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_unordered_access_view.call(this, pResource, pCounterResource, pDesc, dest_descriptor)
    end
    def create_render_target_view(this : ID3D12Device9*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RENDER_TARGET_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_render_target_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_depth_stencil_view(this : ID3D12Device9*, pResource : Void*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_DEPTH_STENCIL_VIEW_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_depth_stencil_view.call(this, pResource, pDesc, dest_descriptor)
    end
    def create_sampler(this : ID3D12Device9*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SAMPLER_DESC*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_sampler.call(this, pDesc, dest_descriptor)
    end
    def copy_descriptors(this : ID3D12Device9*, num_dest_descriptor_ranges : UInt32, pDestDescriptorRangeStarts : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, pDestDescriptorRangeSizes : UInt32*, num_src_descriptor_ranges : UInt32, pSrcDescriptorRangeStarts : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, pSrcDescriptorRangeSizes : UInt32*, descriptor_heaps_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : Void
      @lpVtbl.try &.value.copy_descriptors.call(this, num_dest_descriptor_ranges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, num_src_descriptor_ranges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, descriptor_heaps_type)
    end
    def copy_descriptors_simple(this : ID3D12Device9*, num_descriptors : UInt32, dest_descriptor_range_start : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, src_descriptor_range_start : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, descriptor_heaps_type : Win32cr::Graphics::Direct3D12::D3D12_DESCRIPTOR_HEAP_TYPE) : Void
      @lpVtbl.try &.value.copy_descriptors_simple.call(this, num_descriptors, dest_descriptor_range_start, src_descriptor_range_start, descriptor_heaps_type)
    end
    def get_resource_allocation_info(this : ID3D12Device9*, visibleMask : UInt32, numResourceDescs : UInt32, pResourceDescs : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO
      @lpVtbl.try &.value.get_resource_allocation_info.call(this, visibleMask, numResourceDescs, pResourceDescs)
    end
    def get_custom_heap_properties(this : ID3D12Device9*, nodeMask : UInt32, heapType : Win32cr::Graphics::Direct3D12::D3D12_HEAP_TYPE) : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES
      @lpVtbl.try &.value.get_custom_heap_properties.call(this, nodeMask, heapType)
    end
    def create_committed_resource(this : ID3D12Device9*, pHeapProperties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, heap_flags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_resource_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riidResource : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_committed_resource.call(this, pHeapProperties, heap_flags, pDesc, initial_resource_state, pOptimizedClearValue, riidResource, ppvResource)
    end
    def create_heap(this : ID3D12Device9*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_heap.call(this, pDesc, riid, ppvHeap)
    end
    def create_placed_resource(this : ID3D12Device9*, pHeap : Void*, heap_offset : UInt64, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_placed_resource.call(this, pHeap, heap_offset, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_reserved_resource(this : ID3D12Device9*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_reserved_resource.call(this, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_shared_handle(this : ID3D12Device9*, pObject : Void*, pAttributes : Win32cr::Security::SECURITY_ATTRIBUTES*, access : UInt32, name : Win32cr::Foundation::PWSTR, pHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shared_handle.call(this, pObject, pAttributes, access, name, pHandle)
    end
    def open_shared_handle(this : ID3D12Device9*, nt_handle : Win32cr::Foundation::HANDLE, riid : LibC::GUID*, ppvObj : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_handle.call(this, nt_handle, riid, ppvObj)
    end
    def open_shared_handle_by_name(this : ID3D12Device9*, name : Win32cr::Foundation::PWSTR, access : UInt32, pNTHandle : Win32cr::Foundation::HANDLE*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_shared_handle_by_name.call(this, name, access, pNTHandle)
    end
    def make_resident(this : ID3D12Device9*, num_objects : UInt32, ppObjects : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.make_resident.call(this, num_objects, ppObjects)
    end
    def evict(this : ID3D12Device9*, num_objects : UInt32, ppObjects : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.evict.call(this, num_objects, ppObjects)
    end
    def create_fence(this : ID3D12Device9*, initial_value : UInt64, flags : Win32cr::Graphics::Direct3D12::D3D12_FENCE_FLAGS, riid : LibC::GUID*, ppFence : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_fence.call(this, initial_value, flags, riid, ppFence)
    end
    def get_device_removed_reason(this : ID3D12Device9*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device_removed_reason.call(this)
    end
    def get_copyable_footprints(this : ID3D12Device9*, pResourceDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, first_subresource : UInt32, num_subresources : UInt32, base_offset : UInt64, pLayouts : Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pNumRows : UInt32*, pRowSizeInBytes : UInt64*, pTotalBytes : UInt64*) : Void
      @lpVtbl.try &.value.get_copyable_footprints.call(this, pResourceDesc, first_subresource, num_subresources, base_offset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
    end
    def create_query_heap(this : ID3D12Device9*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_QUERY_HEAP_DESC*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_query_heap.call(this, pDesc, riid, ppvHeap)
    end
    def set_stable_power_state(this : ID3D12Device9*, enable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_stable_power_state.call(this, enable)
    end
    def create_command_signature(this : ID3D12Device9*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_SIGNATURE_DESC*, pRootSignature : Void*, riid : LibC::GUID*, ppvCommandSignature : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_signature.call(this, pDesc, pRootSignature, riid, ppvCommandSignature)
    end
    def get_resource_tiling(this : ID3D12Device9*, pTiledResource : Void*, pNumTilesForEntireResource : UInt32*, pPackedMipDesc : Win32cr::Graphics::Direct3D12::D3D12_PACKED_MIP_INFO*, pStandardTileShapeForNonPackedMips : Win32cr::Graphics::Direct3D12::D3D12_TILE_SHAPE*, pNumSubresourceTilings : UInt32*, first_subresource_tiling_to_get : UInt32, pSubresourceTilingsForNonPackedMips : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_TILING*) : Void
      @lpVtbl.try &.value.get_resource_tiling.call(this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, first_subresource_tiling_to_get, pSubresourceTilingsForNonPackedMips)
    end
    def get_adapter_luid(this : ID3D12Device9*) : Win32cr::Foundation::LUID
      @lpVtbl.try &.value.get_adapter_luid.call(this)
    end
    def create_pipeline_library(this : ID3D12Device9*, pLibraryBlob : Void*, blob_length : LibC::UIntPtrT, riid : LibC::GUID*, ppPipelineLibrary : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pipeline_library.call(this, pLibraryBlob, blob_length, riid, ppPipelineLibrary)
    end
    def set_event_on_multiple_fence_completion(this : ID3D12Device9*, ppFences : Void**, pFenceValues : UInt64*, num_fences : UInt32, flags : Win32cr::Graphics::Direct3D12::D3D12_MULTIPLE_FENCE_WAIT_FLAGS, hEvent : Win32cr::Foundation::HANDLE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_event_on_multiple_fence_completion.call(this, ppFences, pFenceValues, num_fences, flags, hEvent)
    end
    def set_residency_priority(this : ID3D12Device9*, num_objects : UInt32, ppObjects : Void**, pPriorities : Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_PRIORITY*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_residency_priority.call(this, num_objects, ppObjects, pPriorities)
    end
    def create_pipeline_state(this : ID3D12Device9*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_PIPELINE_STATE_STREAM_DESC*, riid : LibC::GUID*, ppPipelineState : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_pipeline_state.call(this, pDesc, riid, ppPipelineState)
    end
    def open_existing_heap_from_address(this : ID3D12Device9*, pAddress : Void*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_existing_heap_from_address.call(this, pAddress, riid, ppvHeap)
    end
    def open_existing_heap_from_file_mapping(this : ID3D12Device9*, hFileMapping : Win32cr::Foundation::HANDLE, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.open_existing_heap_from_file_mapping.call(this, hFileMapping, riid, ppvHeap)
    end
    def enqueue_make_resident(this : ID3D12Device9*, flags : Win32cr::Graphics::Direct3D12::D3D12_RESIDENCY_FLAGS, num_objects : UInt32, ppObjects : Void**, pFenceToSignal : Void*, fence_value_to_signal : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enqueue_make_resident.call(this, flags, num_objects, ppObjects, pFenceToSignal, fence_value_to_signal)
    end
    def create_command_list1(this : ID3D12Device9*, nodeMask : UInt32, type__ : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE, flags : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_FLAGS, riid : LibC::GUID*, ppCommandList : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_list1.call(this, nodeMask, type__, flags, riid, ppCommandList)
    end
    def create_protected_resource_session(this : ID3D12Device9*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC*, riid : LibC::GUID*, ppSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_protected_resource_session.call(this, pDesc, riid, ppSession)
    end
    def create_committed_resource1(this : ID3D12Device9*, pHeapProperties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, heap_flags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_resource_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, pProtectedSession : Void*, riidResource : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_committed_resource1.call(this, pHeapProperties, heap_flags, pDesc, initial_resource_state, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource)
    end
    def create_heap1(this : ID3D12Device9*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_HEAP_DESC*, pProtectedSession : Void*, riid : LibC::GUID*, ppvHeap : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_heap1.call(this, pDesc, pProtectedSession, riid, ppvHeap)
    end
    def create_reserved_resource1(this : ID3D12Device9*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, pProtectedSession : Void*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_reserved_resource1.call(this, pDesc, initial_state, pOptimizedClearValue, pProtectedSession, riid, ppvResource)
    end
    def get_resource_allocation_info1(this : ID3D12Device9*, visibleMask : UInt32, numResourceDescs : UInt32, pResourceDescs : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC*, pResourceAllocationInfo1 : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO1*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO
      @lpVtbl.try &.value.get_resource_allocation_info1.call(this, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1)
    end
    def create_lifetime_tracker(this : ID3D12Device9*, pOwner : Void*, riid : LibC::GUID*, ppvTracker : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_lifetime_tracker.call(this, pOwner, riid, ppvTracker)
    end
    def remove_device(this : ID3D12Device9*) : Void
      @lpVtbl.try &.value.remove_device.call(this)
    end
    def enumerate_meta_commands(this : ID3D12Device9*, pNumMetaCommands : UInt32*, pDescs : Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_meta_commands.call(this, pNumMetaCommands, pDescs)
    end
    def enumerate_meta_command_parameters(this : ID3D12Device9*, command_id : LibC::GUID*, stage : Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_STAGE, pTotalStructureSizeInBytes : UInt32*, pParameterCount : UInt32*, pParameterDescs : Win32cr::Graphics::Direct3D12::D3D12_META_COMMAND_PARAMETER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.enumerate_meta_command_parameters.call(this, command_id, stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs)
    end
    def create_meta_command(this : ID3D12Device9*, command_id : LibC::GUID*, node_mask : UInt32, pCreationParametersData : Void*, creation_parameters_data_size_in_bytes : LibC::UIntPtrT, riid : LibC::GUID*, ppMetaCommand : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_meta_command.call(this, command_id, node_mask, pCreationParametersData, creation_parameters_data_size_in_bytes, riid, ppMetaCommand)
    end
    def create_state_object(this : ID3D12Device9*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_STATE_OBJECT_DESC*, riid : LibC::GUID*, ppStateObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_state_object.call(this, pDesc, riid, ppStateObject)
    end
    def get_raytracing_acceleration_structure_prebuild_info(this : ID3D12Device9*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*, pInfo : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*) : Void
      @lpVtbl.try &.value.get_raytracing_acceleration_structure_prebuild_info.call(this, pDesc, pInfo)
    end
    def check_driver_matching_identifier(this : ID3D12Device9*, serialized_data_type : Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_TYPE, pIdentifierToCheck : Win32cr::Graphics::Direct3D12::D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*) : Win32cr::Graphics::Direct3D12::D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS
      @lpVtbl.try &.value.check_driver_matching_identifier.call(this, serialized_data_type, pIdentifierToCheck)
    end
    def set_background_processing_mode(this : ID3D12Device9*, mode : Win32cr::Graphics::Direct3D12::D3D12_BACKGROUND_PROCESSING_MODE, measurements_action : Win32cr::Graphics::Direct3D12::D3D12_MEASUREMENTS_ACTION, hEventToSignalUponCompletion : Win32cr::Foundation::HANDLE, pbFurtherMeasurementsDesired : Win32cr::Foundation::BOOL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_background_processing_mode.call(this, mode, measurements_action, hEventToSignalUponCompletion, pbFurtherMeasurementsDesired)
    end
    def add_to_state_object(this : ID3D12Device9*, pAddition : Win32cr::Graphics::Direct3D12::D3D12_STATE_OBJECT_DESC*, pStateObjectToGrowFrom : Void*, riid : LibC::GUID*, ppNewStateObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_to_state_object.call(this, pAddition, pStateObjectToGrowFrom, riid, ppNewStateObject)
    end
    def create_protected_resource_session1(this : ID3D12Device9*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_PROTECTED_RESOURCE_SESSION_DESC1*, riid : LibC::GUID*, ppSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_protected_resource_session1.call(this, pDesc, riid, ppSession)
    end
    def get_resource_allocation_info2(this : ID3D12Device9*, visibleMask : UInt32, numResourceDescs : UInt32, pResourceDescs : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC1*, pResourceAllocationInfo1 : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO1*) : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_ALLOCATION_INFO
      @lpVtbl.try &.value.get_resource_allocation_info2.call(this, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1)
    end
    def create_committed_resource2(this : ID3D12Device9*, pHeapProperties : Win32cr::Graphics::Direct3D12::D3D12_HEAP_PROPERTIES*, heap_flags : Win32cr::Graphics::Direct3D12::D3D12_HEAP_FLAGS, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC1*, initial_resource_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, pProtectedSession : Void*, riidResource : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_committed_resource2.call(this, pHeapProperties, heap_flags, pDesc, initial_resource_state, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource)
    end
    def create_placed_resource1(this : ID3D12Device9*, pHeap : Void*, heap_offset : UInt64, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC1*, initial_state : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_STATES, pOptimizedClearValue : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_VALUE*, riid : LibC::GUID*, ppvResource : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_placed_resource1.call(this, pHeap, heap_offset, pDesc, initial_state, pOptimizedClearValue, riid, ppvResource)
    end
    def create_sampler_feedback_unordered_access_view(this : ID3D12Device9*, pTargetedResource : Void*, pFeedbackResource : Void*, dest_descriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.create_sampler_feedback_unordered_access_view.call(this, pTargetedResource, pFeedbackResource, dest_descriptor)
    end
    def get_copyable_footprints1(this : ID3D12Device9*, pResourceDesc : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_DESC1*, first_subresource : UInt32, num_subresources : UInt32, base_offset : UInt64, pLayouts : Win32cr::Graphics::Direct3D12::D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, pNumRows : UInt32*, pRowSizeInBytes : UInt64*, pTotalBytes : UInt64*) : Void
      @lpVtbl.try &.value.get_copyable_footprints1.call(this, pResourceDesc, first_subresource, num_subresources, base_offset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes)
    end
    def create_shader_cache_session(this : ID3D12Device9*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SHADER_CACHE_SESSION_DESC*, riid : LibC::GUID*, ppvSession : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_shader_cache_session.call(this, pDesc, riid, ppvSession)
    end
    def shader_cache_control(this : ID3D12Device9*, kinds : Win32cr::Graphics::Direct3D12::D3D12_SHADER_CACHE_KIND_FLAGS, control : Win32cr::Graphics::Direct3D12::D3D12_SHADER_CACHE_CONTROL_FLAGS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.shader_cache_control.call(this, kinds, control)
    end
    def create_command_queue1(this : ID3D12Device9*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_QUEUE_DESC*, creator_id : LibC::GUID*, riid : LibC::GUID*, ppCommandQueue : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.create_command_queue1.call(this, pDesc, creator_id, riid, ppCommandQueue)
    end

  end

  @[Extern]
  record ID3D12ToolsVtbl,
    query_interface : Proc(ID3D12Tools*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Tools*, UInt32),
    release : Proc(ID3D12Tools*, UInt32),
    enable_shader_instrumentation : Proc(ID3D12Tools*, Win32cr::Foundation::BOOL, Void),
    shader_instrumentation_enabled : Proc(ID3D12Tools*, Win32cr::Foundation::BOOL)


  @[Extern]
  record ID3D12Tools, lpVtbl : ID3D12ToolsVtbl* do
    GUID = LibC::GUID.new(0x7071e1f0_u32, 0xe84b_u16, 0x4b33_u16, StaticArray[0x97_u8, 0x4f_u8, 0x12_u8, 0xfa_u8, 0x49_u8, 0xde_u8, 0x65_u8, 0xc5_u8])
    def query_interface(this : ID3D12Tools*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Tools*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Tools*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def enable_shader_instrumentation(this : ID3D12Tools*, bEnable : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.enable_shader_instrumentation.call(this, bEnable)
    end
    def shader_instrumentation_enabled(this : ID3D12Tools*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.shader_instrumentation_enabled.call(this)
    end

  end

  @[Extern]
  record ID3D12DebugVtbl,
    query_interface : Proc(ID3D12Debug*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Debug*, UInt32),
    release : Proc(ID3D12Debug*, UInt32),
    enable_debug_layer : Proc(ID3D12Debug*, Void)


  @[Extern]
  record ID3D12Debug, lpVtbl : ID3D12DebugVtbl* do
    GUID = LibC::GUID.new(0x344488b7_u32, 0x6846_u16, 0x474b_u16, StaticArray[0xb9_u8, 0x89_u8, 0xf0_u8, 0x27_u8, 0x44_u8, 0x82_u8, 0x45_u8, 0xe0_u8])
    def query_interface(this : ID3D12Debug*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Debug*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Debug*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def enable_debug_layer(this : ID3D12Debug*) : Void
      @lpVtbl.try &.value.enable_debug_layer.call(this)
    end

  end

  @[Extern]
  record ID3D12Debug1Vtbl,
    query_interface : Proc(ID3D12Debug1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Debug1*, UInt32),
    release : Proc(ID3D12Debug1*, UInt32),
    enable_debug_layer : Proc(ID3D12Debug1*, Void),
    set_enable_gpu_based_validation : Proc(ID3D12Debug1*, Win32cr::Foundation::BOOL, Void),
    set_enable_synchronized_command_queue_validation : Proc(ID3D12Debug1*, Win32cr::Foundation::BOOL, Void)


  @[Extern]
  record ID3D12Debug1, lpVtbl : ID3D12Debug1Vtbl* do
    GUID = LibC::GUID.new(0xaffaa4ca_u32, 0x63fe_u16, 0x4d8e_u16, StaticArray[0xb8_u8, 0xad_u8, 0x15_u8, 0x90_u8, 0x0_u8, 0xaf_u8, 0x43_u8, 0x4_u8])
    def query_interface(this : ID3D12Debug1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Debug1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Debug1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def enable_debug_layer(this : ID3D12Debug1*) : Void
      @lpVtbl.try &.value.enable_debug_layer.call(this)
    end
    def set_enable_gpu_based_validation(this : ID3D12Debug1*, enable : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.set_enable_gpu_based_validation.call(this, enable)
    end
    def set_enable_synchronized_command_queue_validation(this : ID3D12Debug1*, enable : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.set_enable_synchronized_command_queue_validation.call(this, enable)
    end

  end

  @[Extern]
  record ID3D12Debug2Vtbl,
    query_interface : Proc(ID3D12Debug2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Debug2*, UInt32),
    release : Proc(ID3D12Debug2*, UInt32),
    set_gpu_based_validation_flags : Proc(ID3D12Debug2*, Win32cr::Graphics::Direct3D12::D3D12_GPU_BASED_VALIDATION_FLAGS, Void)


  @[Extern]
  record ID3D12Debug2, lpVtbl : ID3D12Debug2Vtbl* do
    GUID = LibC::GUID.new(0x93a665c4_u32, 0xa3b2_u16, 0x4e5d_u16, StaticArray[0xb6_u8, 0x92_u8, 0xa2_u8, 0x6a_u8, 0xe1_u8, 0x4e_u8, 0x33_u8, 0x74_u8])
    def query_interface(this : ID3D12Debug2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Debug2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Debug2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_gpu_based_validation_flags(this : ID3D12Debug2*, flags : Win32cr::Graphics::Direct3D12::D3D12_GPU_BASED_VALIDATION_FLAGS) : Void
      @lpVtbl.try &.value.set_gpu_based_validation_flags.call(this, flags)
    end

  end

  @[Extern]
  record ID3D12Debug3Vtbl,
    query_interface : Proc(ID3D12Debug3*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Debug3*, UInt32),
    release : Proc(ID3D12Debug3*, UInt32),
    enable_debug_layer : Proc(ID3D12Debug3*, Void),
    set_enable_gpu_based_validation : Proc(ID3D12Debug3*, Win32cr::Foundation::BOOL, Void),
    set_enable_synchronized_command_queue_validation : Proc(ID3D12Debug3*, Win32cr::Foundation::BOOL, Void),
    set_gpu_based_validation_flags : Proc(ID3D12Debug3*, Win32cr::Graphics::Direct3D12::D3D12_GPU_BASED_VALIDATION_FLAGS, Void)


  @[Extern]
  record ID3D12Debug3, lpVtbl : ID3D12Debug3Vtbl* do
    GUID = LibC::GUID.new(0x5cf4e58f_u32, 0xf671_u16, 0x4ff1_u16, StaticArray[0xa5_u8, 0x42_u8, 0x36_u8, 0x86_u8, 0xe3_u8, 0xd1_u8, 0x53_u8, 0xd1_u8])
    def query_interface(this : ID3D12Debug3*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Debug3*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Debug3*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def enable_debug_layer(this : ID3D12Debug3*) : Void
      @lpVtbl.try &.value.enable_debug_layer.call(this)
    end
    def set_enable_gpu_based_validation(this : ID3D12Debug3*, enable : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.set_enable_gpu_based_validation.call(this, enable)
    end
    def set_enable_synchronized_command_queue_validation(this : ID3D12Debug3*, enable : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.set_enable_synchronized_command_queue_validation.call(this, enable)
    end
    def set_gpu_based_validation_flags(this : ID3D12Debug3*, flags : Win32cr::Graphics::Direct3D12::D3D12_GPU_BASED_VALIDATION_FLAGS) : Void
      @lpVtbl.try &.value.set_gpu_based_validation_flags.call(this, flags)
    end

  end

  @[Extern]
  record ID3D12Debug4Vtbl,
    query_interface : Proc(ID3D12Debug4*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Debug4*, UInt32),
    release : Proc(ID3D12Debug4*, UInt32),
    enable_debug_layer : Proc(ID3D12Debug4*, Void),
    set_enable_gpu_based_validation : Proc(ID3D12Debug4*, Win32cr::Foundation::BOOL, Void),
    set_enable_synchronized_command_queue_validation : Proc(ID3D12Debug4*, Win32cr::Foundation::BOOL, Void),
    set_gpu_based_validation_flags : Proc(ID3D12Debug4*, Win32cr::Graphics::Direct3D12::D3D12_GPU_BASED_VALIDATION_FLAGS, Void),
    disable_debug_layer : Proc(ID3D12Debug4*, Void)


  @[Extern]
  record ID3D12Debug4, lpVtbl : ID3D12Debug4Vtbl* do
    GUID = LibC::GUID.new(0x14b816e_u32, 0x9ec5_u16, 0x4a2f_u16, StaticArray[0xa8_u8, 0x45_u8, 0xff_u8, 0xbe_u8, 0x44_u8, 0x1c_u8, 0xe1_u8, 0x3a_u8])
    def query_interface(this : ID3D12Debug4*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Debug4*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Debug4*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def enable_debug_layer(this : ID3D12Debug4*) : Void
      @lpVtbl.try &.value.enable_debug_layer.call(this)
    end
    def set_enable_gpu_based_validation(this : ID3D12Debug4*, enable : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.set_enable_gpu_based_validation.call(this, enable)
    end
    def set_enable_synchronized_command_queue_validation(this : ID3D12Debug4*, enable : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.set_enable_synchronized_command_queue_validation.call(this, enable)
    end
    def set_gpu_based_validation_flags(this : ID3D12Debug4*, flags : Win32cr::Graphics::Direct3D12::D3D12_GPU_BASED_VALIDATION_FLAGS) : Void
      @lpVtbl.try &.value.set_gpu_based_validation_flags.call(this, flags)
    end
    def disable_debug_layer(this : ID3D12Debug4*) : Void
      @lpVtbl.try &.value.disable_debug_layer.call(this)
    end

  end

  @[Extern]
  record ID3D12Debug5Vtbl,
    query_interface : Proc(ID3D12Debug5*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12Debug5*, UInt32),
    release : Proc(ID3D12Debug5*, UInt32),
    enable_debug_layer : Proc(ID3D12Debug5*, Void),
    set_enable_gpu_based_validation : Proc(ID3D12Debug5*, Win32cr::Foundation::BOOL, Void),
    set_enable_synchronized_command_queue_validation : Proc(ID3D12Debug5*, Win32cr::Foundation::BOOL, Void),
    set_gpu_based_validation_flags : Proc(ID3D12Debug5*, Win32cr::Graphics::Direct3D12::D3D12_GPU_BASED_VALIDATION_FLAGS, Void),
    disable_debug_layer : Proc(ID3D12Debug5*, Void),
    set_enable_auto_name : Proc(ID3D12Debug5*, Win32cr::Foundation::BOOL, Void)


  @[Extern]
  record ID3D12Debug5, lpVtbl : ID3D12Debug5Vtbl* do
    GUID = LibC::GUID.new(0x548d6b12_u32, 0x9fa_u16, 0x40e0_u16, StaticArray[0x90_u8, 0x69_u8, 0x5d_u8, 0xcd_u8, 0x58_u8, 0x9a_u8, 0x52_u8, 0xc9_u8])
    def query_interface(this : ID3D12Debug5*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12Debug5*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12Debug5*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def enable_debug_layer(this : ID3D12Debug5*) : Void
      @lpVtbl.try &.value.enable_debug_layer.call(this)
    end
    def set_enable_gpu_based_validation(this : ID3D12Debug5*, enable : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.set_enable_gpu_based_validation.call(this, enable)
    end
    def set_enable_synchronized_command_queue_validation(this : ID3D12Debug5*, enable : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.set_enable_synchronized_command_queue_validation.call(this, enable)
    end
    def set_gpu_based_validation_flags(this : ID3D12Debug5*, flags : Win32cr::Graphics::Direct3D12::D3D12_GPU_BASED_VALIDATION_FLAGS) : Void
      @lpVtbl.try &.value.set_gpu_based_validation_flags.call(this, flags)
    end
    def disable_debug_layer(this : ID3D12Debug5*) : Void
      @lpVtbl.try &.value.disable_debug_layer.call(this)
    end
    def set_enable_auto_name(this : ID3D12Debug5*, enable : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.set_enable_auto_name.call(this, enable)
    end

  end

  @[Extern]
  record ID3D12DebugDevice1Vtbl,
    query_interface : Proc(ID3D12DebugDevice1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12DebugDevice1*, UInt32),
    release : Proc(ID3D12DebugDevice1*, UInt32),
    set_debug_parameter : Proc(ID3D12DebugDevice1*, Win32cr::Graphics::Direct3D12::D3D12_DEBUG_DEVICE_PARAMETER_TYPE, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_debug_parameter : Proc(ID3D12DebugDevice1*, Win32cr::Graphics::Direct3D12::D3D12_DEBUG_DEVICE_PARAMETER_TYPE, Void*, UInt32, Win32cr::Foundation::HRESULT),
    report_live_device_objects : Proc(ID3D12DebugDevice1*, Win32cr::Graphics::Direct3D12::D3D12_RLDO_FLAGS, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12DebugDevice1, lpVtbl : ID3D12DebugDevice1Vtbl* do
    GUID = LibC::GUID.new(0xa9b71770_u32, 0xd099_u16, 0x4a65_u16, StaticArray[0xa6_u8, 0x98_u8, 0x3d_u8, 0xee_u8, 0x10_u8, 0x2_u8, 0xf_u8, 0x88_u8])
    def query_interface(this : ID3D12DebugDevice1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12DebugDevice1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12DebugDevice1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_debug_parameter(this : ID3D12DebugDevice1*, type__ : Win32cr::Graphics::Direct3D12::D3D12_DEBUG_DEVICE_PARAMETER_TYPE, pData : Void*, data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_debug_parameter.call(this, type__, pData, data_size)
    end
    def get_debug_parameter(this : ID3D12DebugDevice1*, type__ : Win32cr::Graphics::Direct3D12::D3D12_DEBUG_DEVICE_PARAMETER_TYPE, pData : Void*, data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_debug_parameter.call(this, type__, pData, data_size)
    end
    def report_live_device_objects(this : ID3D12DebugDevice1*, flags : Win32cr::Graphics::Direct3D12::D3D12_RLDO_FLAGS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.report_live_device_objects.call(this, flags)
    end

  end

  @[Extern]
  record ID3D12DebugDeviceVtbl,
    query_interface : Proc(ID3D12DebugDevice*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12DebugDevice*, UInt32),
    release : Proc(ID3D12DebugDevice*, UInt32),
    set_feature_mask : Proc(ID3D12DebugDevice*, Win32cr::Graphics::Direct3D12::D3D12_DEBUG_FEATURE, Win32cr::Foundation::HRESULT),
    get_feature_mask : Proc(ID3D12DebugDevice*, Win32cr::Graphics::Direct3D12::D3D12_DEBUG_FEATURE),
    report_live_device_objects : Proc(ID3D12DebugDevice*, Win32cr::Graphics::Direct3D12::D3D12_RLDO_FLAGS, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12DebugDevice, lpVtbl : ID3D12DebugDeviceVtbl* do
    GUID = LibC::GUID.new(0x3febd6dd_u32, 0x4973_u16, 0x4787_u16, StaticArray[0x81_u8, 0x94_u8, 0xe4_u8, 0x5f_u8, 0x9e_u8, 0x28_u8, 0x92_u8, 0x3e_u8])
    def query_interface(this : ID3D12DebugDevice*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12DebugDevice*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12DebugDevice*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_feature_mask(this : ID3D12DebugDevice*, mask : Win32cr::Graphics::Direct3D12::D3D12_DEBUG_FEATURE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_feature_mask.call(this, mask)
    end
    def get_feature_mask(this : ID3D12DebugDevice*) : Win32cr::Graphics::Direct3D12::D3D12_DEBUG_FEATURE
      @lpVtbl.try &.value.get_feature_mask.call(this)
    end
    def report_live_device_objects(this : ID3D12DebugDevice*, flags : Win32cr::Graphics::Direct3D12::D3D12_RLDO_FLAGS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.report_live_device_objects.call(this, flags)
    end

  end

  @[Extern]
  record ID3D12DebugDevice2Vtbl,
    query_interface : Proc(ID3D12DebugDevice2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12DebugDevice2*, UInt32),
    release : Proc(ID3D12DebugDevice2*, UInt32),
    set_feature_mask : Proc(ID3D12DebugDevice2*, Win32cr::Graphics::Direct3D12::D3D12_DEBUG_FEATURE, Win32cr::Foundation::HRESULT),
    get_feature_mask : Proc(ID3D12DebugDevice2*, Win32cr::Graphics::Direct3D12::D3D12_DEBUG_FEATURE),
    report_live_device_objects : Proc(ID3D12DebugDevice2*, Win32cr::Graphics::Direct3D12::D3D12_RLDO_FLAGS, Win32cr::Foundation::HRESULT),
    set_debug_parameter : Proc(ID3D12DebugDevice2*, Win32cr::Graphics::Direct3D12::D3D12_DEBUG_DEVICE_PARAMETER_TYPE, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_debug_parameter : Proc(ID3D12DebugDevice2*, Win32cr::Graphics::Direct3D12::D3D12_DEBUG_DEVICE_PARAMETER_TYPE, Void*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12DebugDevice2, lpVtbl : ID3D12DebugDevice2Vtbl* do
    GUID = LibC::GUID.new(0x60eccbc1_u32, 0x378d_u16, 0x4df1_u16, StaticArray[0x89_u8, 0x4c_u8, 0xf8_u8, 0xac_u8, 0x5c_u8, 0xe4_u8, 0xd7_u8, 0xdd_u8])
    def query_interface(this : ID3D12DebugDevice2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12DebugDevice2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12DebugDevice2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_feature_mask(this : ID3D12DebugDevice2*, mask : Win32cr::Graphics::Direct3D12::D3D12_DEBUG_FEATURE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_feature_mask.call(this, mask)
    end
    def get_feature_mask(this : ID3D12DebugDevice2*) : Win32cr::Graphics::Direct3D12::D3D12_DEBUG_FEATURE
      @lpVtbl.try &.value.get_feature_mask.call(this)
    end
    def report_live_device_objects(this : ID3D12DebugDevice2*, flags : Win32cr::Graphics::Direct3D12::D3D12_RLDO_FLAGS) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.report_live_device_objects.call(this, flags)
    end
    def set_debug_parameter(this : ID3D12DebugDevice2*, type__ : Win32cr::Graphics::Direct3D12::D3D12_DEBUG_DEVICE_PARAMETER_TYPE, pData : Void*, data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_debug_parameter.call(this, type__, pData, data_size)
    end
    def get_debug_parameter(this : ID3D12DebugDevice2*, type__ : Win32cr::Graphics::Direct3D12::D3D12_DEBUG_DEVICE_PARAMETER_TYPE, pData : Void*, data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_debug_parameter.call(this, type__, pData, data_size)
    end

  end

  @[Extern]
  record ID3D12DebugCommandQueueVtbl,
    query_interface : Proc(ID3D12DebugCommandQueue*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12DebugCommandQueue*, UInt32),
    release : Proc(ID3D12DebugCommandQueue*, UInt32),
    assert_resource_state : Proc(ID3D12DebugCommandQueue*, Void*, UInt32, UInt32, Win32cr::Foundation::BOOL)


  @[Extern]
  record ID3D12DebugCommandQueue, lpVtbl : ID3D12DebugCommandQueueVtbl* do
    GUID = LibC::GUID.new(0x9e0bf36_u32, 0x54ac_u16, 0x484f_u16, StaticArray[0x88_u8, 0x47_u8, 0x4b_u8, 0xae_u8, 0xea_u8, 0xb6_u8, 0x5_u8, 0x3a_u8])
    def query_interface(this : ID3D12DebugCommandQueue*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12DebugCommandQueue*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12DebugCommandQueue*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def assert_resource_state(this : ID3D12DebugCommandQueue*, pResource : Void*, subresource : UInt32, state : UInt32) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.assert_resource_state.call(this, pResource, subresource, state)
    end

  end

  @[Extern]
  record ID3D12DebugCommandList1Vtbl,
    query_interface : Proc(ID3D12DebugCommandList1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12DebugCommandList1*, UInt32),
    release : Proc(ID3D12DebugCommandList1*, UInt32),
    assert_resource_state : Proc(ID3D12DebugCommandList1*, Void*, UInt32, UInt32, Win32cr::Foundation::BOOL),
    set_debug_parameter : Proc(ID3D12DebugCommandList1*, Win32cr::Graphics::Direct3D12::D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_debug_parameter : Proc(ID3D12DebugCommandList1*, Win32cr::Graphics::Direct3D12::D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, Void*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12DebugCommandList1, lpVtbl : ID3D12DebugCommandList1Vtbl* do
    GUID = LibC::GUID.new(0x102ca951_u32, 0x311b_u16, 0x4b01_u16, StaticArray[0xb1_u8, 0x1f_u8, 0xec_u8, 0xb8_u8, 0x3e_u8, 0x6_u8, 0x1b_u8, 0x37_u8])
    def query_interface(this : ID3D12DebugCommandList1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12DebugCommandList1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12DebugCommandList1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def assert_resource_state(this : ID3D12DebugCommandList1*, pResource : Void*, subresource : UInt32, state : UInt32) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.assert_resource_state.call(this, pResource, subresource, state)
    end
    def set_debug_parameter(this : ID3D12DebugCommandList1*, type__ : Win32cr::Graphics::Direct3D12::D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, pData : Void*, data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_debug_parameter.call(this, type__, pData, data_size)
    end
    def get_debug_parameter(this : ID3D12DebugCommandList1*, type__ : Win32cr::Graphics::Direct3D12::D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, pData : Void*, data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_debug_parameter.call(this, type__, pData, data_size)
    end

  end

  @[Extern]
  record ID3D12DebugCommandListVtbl,
    query_interface : Proc(ID3D12DebugCommandList*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12DebugCommandList*, UInt32),
    release : Proc(ID3D12DebugCommandList*, UInt32),
    assert_resource_state : Proc(ID3D12DebugCommandList*, Void*, UInt32, UInt32, Win32cr::Foundation::BOOL),
    set_feature_mask : Proc(ID3D12DebugCommandList*, Win32cr::Graphics::Direct3D12::D3D12_DEBUG_FEATURE, Win32cr::Foundation::HRESULT),
    get_feature_mask : Proc(ID3D12DebugCommandList*, Win32cr::Graphics::Direct3D12::D3D12_DEBUG_FEATURE)


  @[Extern]
  record ID3D12DebugCommandList, lpVtbl : ID3D12DebugCommandListVtbl* do
    GUID = LibC::GUID.new(0x9e0bf36_u32, 0x54ac_u16, 0x484f_u16, StaticArray[0x88_u8, 0x47_u8, 0x4b_u8, 0xae_u8, 0xea_u8, 0xb6_u8, 0x5_u8, 0x3f_u8])
    def query_interface(this : ID3D12DebugCommandList*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12DebugCommandList*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12DebugCommandList*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def assert_resource_state(this : ID3D12DebugCommandList*, pResource : Void*, subresource : UInt32, state : UInt32) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.assert_resource_state.call(this, pResource, subresource, state)
    end
    def set_feature_mask(this : ID3D12DebugCommandList*, mask : Win32cr::Graphics::Direct3D12::D3D12_DEBUG_FEATURE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_feature_mask.call(this, mask)
    end
    def get_feature_mask(this : ID3D12DebugCommandList*) : Win32cr::Graphics::Direct3D12::D3D12_DEBUG_FEATURE
      @lpVtbl.try &.value.get_feature_mask.call(this)
    end

  end

  @[Extern]
  record ID3D12DebugCommandList2Vtbl,
    query_interface : Proc(ID3D12DebugCommandList2*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12DebugCommandList2*, UInt32),
    release : Proc(ID3D12DebugCommandList2*, UInt32),
    assert_resource_state : Proc(ID3D12DebugCommandList2*, Void*, UInt32, UInt32, Win32cr::Foundation::BOOL),
    set_feature_mask : Proc(ID3D12DebugCommandList2*, Win32cr::Graphics::Direct3D12::D3D12_DEBUG_FEATURE, Win32cr::Foundation::HRESULT),
    get_feature_mask : Proc(ID3D12DebugCommandList2*, Win32cr::Graphics::Direct3D12::D3D12_DEBUG_FEATURE),
    set_debug_parameter : Proc(ID3D12DebugCommandList2*, Win32cr::Graphics::Direct3D12::D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, Void*, UInt32, Win32cr::Foundation::HRESULT),
    get_debug_parameter : Proc(ID3D12DebugCommandList2*, Win32cr::Graphics::Direct3D12::D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, Void*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12DebugCommandList2, lpVtbl : ID3D12DebugCommandList2Vtbl* do
    GUID = LibC::GUID.new(0xaeb575cf_u32, 0x4e06_u16, 0x48be_u16, StaticArray[0xba_u8, 0x3b_u8, 0xc4_u8, 0x50_u8, 0xfc_u8, 0x96_u8, 0x65_u8, 0x2e_u8])
    def query_interface(this : ID3D12DebugCommandList2*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12DebugCommandList2*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12DebugCommandList2*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def assert_resource_state(this : ID3D12DebugCommandList2*, pResource : Void*, subresource : UInt32, state : UInt32) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.assert_resource_state.call(this, pResource, subresource, state)
    end
    def set_feature_mask(this : ID3D12DebugCommandList2*, mask : Win32cr::Graphics::Direct3D12::D3D12_DEBUG_FEATURE) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_feature_mask.call(this, mask)
    end
    def get_feature_mask(this : ID3D12DebugCommandList2*) : Win32cr::Graphics::Direct3D12::D3D12_DEBUG_FEATURE
      @lpVtbl.try &.value.get_feature_mask.call(this)
    end
    def set_debug_parameter(this : ID3D12DebugCommandList2*, type__ : Win32cr::Graphics::Direct3D12::D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, pData : Void*, data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_debug_parameter.call(this, type__, pData, data_size)
    end
    def get_debug_parameter(this : ID3D12DebugCommandList2*, type__ : Win32cr::Graphics::Direct3D12::D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE, pData : Void*, data_size : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_debug_parameter.call(this, type__, pData, data_size)
    end

  end

  @[Extern]
  record ID3D12SharingContractVtbl,
    query_interface : Proc(ID3D12SharingContract*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12SharingContract*, UInt32),
    release : Proc(ID3D12SharingContract*, UInt32),
    present : Proc(ID3D12SharingContract*, Void*, UInt32, Win32cr::Foundation::HWND, Void),
    shared_fence_signal : Proc(ID3D12SharingContract*, Void*, UInt64, Void),
    begin_capturable_work : Proc(ID3D12SharingContract*, LibC::GUID*, Void),
    end_capturable_work : Proc(ID3D12SharingContract*, LibC::GUID*, Void)


  @[Extern]
  record ID3D12SharingContract, lpVtbl : ID3D12SharingContractVtbl* do
    GUID = LibC::GUID.new(0xadf7d52_u32, 0x929c_u16, 0x4e61_u16, StaticArray[0xad_u8, 0xdb_u8, 0xff_u8, 0xed_u8, 0x30_u8, 0xde_u8, 0x66_u8, 0xef_u8])
    def query_interface(this : ID3D12SharingContract*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12SharingContract*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12SharingContract*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def present(this : ID3D12SharingContract*, pResource : Void*, subresource : UInt32, window : Win32cr::Foundation::HWND) : Void
      @lpVtbl.try &.value.present.call(this, pResource, subresource, window)
    end
    def shared_fence_signal(this : ID3D12SharingContract*, pFence : Void*, fence_value : UInt64) : Void
      @lpVtbl.try &.value.shared_fence_signal.call(this, pFence, fence_value)
    end
    def begin_capturable_work(this : ID3D12SharingContract*, guid : LibC::GUID*) : Void
      @lpVtbl.try &.value.begin_capturable_work.call(this, guid)
    end
    def end_capturable_work(this : ID3D12SharingContract*, guid : LibC::GUID*) : Void
      @lpVtbl.try &.value.end_capturable_work.call(this, guid)
    end

  end

  @[Extern]
  record ID3D12InfoQueueVtbl,
    query_interface : Proc(ID3D12InfoQueue*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12InfoQueue*, UInt32),
    release : Proc(ID3D12InfoQueue*, UInt32),
    set_message_count_limit : Proc(ID3D12InfoQueue*, UInt64, Win32cr::Foundation::HRESULT),
    clear_stored_messages : Proc(ID3D12InfoQueue*, Void),
    get_message : Proc(ID3D12InfoQueue*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    get_num_messages_allowed_by_storage_filter : Proc(ID3D12InfoQueue*, UInt64),
    get_num_messages_denied_by_storage_filter : Proc(ID3D12InfoQueue*, UInt64),
    get_num_stored_messages : Proc(ID3D12InfoQueue*, UInt64),
    get_num_stored_messages_allowed_by_retrieval_filter : Proc(ID3D12InfoQueue*, UInt64),
    get_num_messages_discarded_by_message_count_limit : Proc(ID3D12InfoQueue*, UInt64),
    get_message_count_limit : Proc(ID3D12InfoQueue*, UInt64),
    add_storage_filter_entries : Proc(ID3D12InfoQueue*, Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*, Win32cr::Foundation::HRESULT),
    get_storage_filter : Proc(ID3D12InfoQueue*, Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    clear_storage_filter : Proc(ID3D12InfoQueue*, Void),
    push_empty_storage_filter : Proc(ID3D12InfoQueue*, Win32cr::Foundation::HRESULT),
    push_copy_of_storage_filter : Proc(ID3D12InfoQueue*, Win32cr::Foundation::HRESULT),
    push_storage_filter : Proc(ID3D12InfoQueue*, Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*, Win32cr::Foundation::HRESULT),
    pop_storage_filter : Proc(ID3D12InfoQueue*, Void),
    get_storage_filter_stack_size : Proc(ID3D12InfoQueue*, UInt32),
    add_retrieval_filter_entries : Proc(ID3D12InfoQueue*, Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*, Win32cr::Foundation::HRESULT),
    get_retrieval_filter : Proc(ID3D12InfoQueue*, Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    clear_retrieval_filter : Proc(ID3D12InfoQueue*, Void),
    push_empty_retrieval_filter : Proc(ID3D12InfoQueue*, Win32cr::Foundation::HRESULT),
    push_copy_of_retrieval_filter : Proc(ID3D12InfoQueue*, Win32cr::Foundation::HRESULT),
    push_retrieval_filter : Proc(ID3D12InfoQueue*, Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*, Win32cr::Foundation::HRESULT),
    pop_retrieval_filter : Proc(ID3D12InfoQueue*, Void),
    get_retrieval_filter_stack_size : Proc(ID3D12InfoQueue*, UInt32),
    add_message : Proc(ID3D12InfoQueue*, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_CATEGORY, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_SEVERITY, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_ID, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    add_application_message : Proc(ID3D12InfoQueue*, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_SEVERITY, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    set_break_on_category : Proc(ID3D12InfoQueue*, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_CATEGORY, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_break_on_severity : Proc(ID3D12InfoQueue*, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_SEVERITY, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_break_on_id : Proc(ID3D12InfoQueue*, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_ID, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_break_on_category : Proc(ID3D12InfoQueue*, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_CATEGORY, Win32cr::Foundation::BOOL),
    get_break_on_severity : Proc(ID3D12InfoQueue*, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_SEVERITY, Win32cr::Foundation::BOOL),
    get_break_on_id : Proc(ID3D12InfoQueue*, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_ID, Win32cr::Foundation::BOOL),
    set_mute_debug_output : Proc(ID3D12InfoQueue*, Win32cr::Foundation::BOOL, Void),
    get_mute_debug_output : Proc(ID3D12InfoQueue*, Win32cr::Foundation::BOOL)


  @[Extern]
  record ID3D12InfoQueue, lpVtbl : ID3D12InfoQueueVtbl* do
    GUID = LibC::GUID.new(0x742a90b_u32, 0xc387_u16, 0x483f_u16, StaticArray[0xb9_u8, 0x46_u8, 0x30_u8, 0xa7_u8, 0xe4_u8, 0xe6_u8, 0x14_u8, 0x58_u8])
    def query_interface(this : ID3D12InfoQueue*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12InfoQueue*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12InfoQueue*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_message_count_limit(this : ID3D12InfoQueue*, message_count_limit : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_message_count_limit.call(this, message_count_limit)
    end
    def clear_stored_messages(this : ID3D12InfoQueue*) : Void
      @lpVtbl.try &.value.clear_stored_messages.call(this)
    end
    def get_message(this : ID3D12InfoQueue*, message_index : UInt64, pMessage : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE*, pMessageByteLength : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_message.call(this, message_index, pMessage, pMessageByteLength)
    end
    def get_num_messages_allowed_by_storage_filter(this : ID3D12InfoQueue*) : UInt64
      @lpVtbl.try &.value.get_num_messages_allowed_by_storage_filter.call(this)
    end
    def get_num_messages_denied_by_storage_filter(this : ID3D12InfoQueue*) : UInt64
      @lpVtbl.try &.value.get_num_messages_denied_by_storage_filter.call(this)
    end
    def get_num_stored_messages(this : ID3D12InfoQueue*) : UInt64
      @lpVtbl.try &.value.get_num_stored_messages.call(this)
    end
    def get_num_stored_messages_allowed_by_retrieval_filter(this : ID3D12InfoQueue*) : UInt64
      @lpVtbl.try &.value.get_num_stored_messages_allowed_by_retrieval_filter.call(this)
    end
    def get_num_messages_discarded_by_message_count_limit(this : ID3D12InfoQueue*) : UInt64
      @lpVtbl.try &.value.get_num_messages_discarded_by_message_count_limit.call(this)
    end
    def get_message_count_limit(this : ID3D12InfoQueue*) : UInt64
      @lpVtbl.try &.value.get_message_count_limit.call(this)
    end
    def add_storage_filter_entries(this : ID3D12InfoQueue*, pFilter : Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_storage_filter_entries.call(this, pFilter)
    end
    def get_storage_filter(this : ID3D12InfoQueue*, pFilter : Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*, pFilterByteLength : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_storage_filter.call(this, pFilter, pFilterByteLength)
    end
    def clear_storage_filter(this : ID3D12InfoQueue*) : Void
      @lpVtbl.try &.value.clear_storage_filter.call(this)
    end
    def push_empty_storage_filter(this : ID3D12InfoQueue*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_empty_storage_filter.call(this)
    end
    def push_copy_of_storage_filter(this : ID3D12InfoQueue*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_copy_of_storage_filter.call(this)
    end
    def push_storage_filter(this : ID3D12InfoQueue*, pFilter : Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_storage_filter.call(this, pFilter)
    end
    def pop_storage_filter(this : ID3D12InfoQueue*) : Void
      @lpVtbl.try &.value.pop_storage_filter.call(this)
    end
    def get_storage_filter_stack_size(this : ID3D12InfoQueue*) : UInt32
      @lpVtbl.try &.value.get_storage_filter_stack_size.call(this)
    end
    def add_retrieval_filter_entries(this : ID3D12InfoQueue*, pFilter : Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_retrieval_filter_entries.call(this, pFilter)
    end
    def get_retrieval_filter(this : ID3D12InfoQueue*, pFilter : Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*, pFilterByteLength : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_retrieval_filter.call(this, pFilter, pFilterByteLength)
    end
    def clear_retrieval_filter(this : ID3D12InfoQueue*) : Void
      @lpVtbl.try &.value.clear_retrieval_filter.call(this)
    end
    def push_empty_retrieval_filter(this : ID3D12InfoQueue*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_empty_retrieval_filter.call(this)
    end
    def push_copy_of_retrieval_filter(this : ID3D12InfoQueue*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_copy_of_retrieval_filter.call(this)
    end
    def push_retrieval_filter(this : ID3D12InfoQueue*, pFilter : Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_retrieval_filter.call(this, pFilter)
    end
    def pop_retrieval_filter(this : ID3D12InfoQueue*) : Void
      @lpVtbl.try &.value.pop_retrieval_filter.call(this)
    end
    def get_retrieval_filter_stack_size(this : ID3D12InfoQueue*) : UInt32
      @lpVtbl.try &.value.get_retrieval_filter_stack_size.call(this)
    end
    def add_message(this : ID3D12InfoQueue*, category : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_CATEGORY, severity : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_SEVERITY, id : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_ID, pDescription : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_message.call(this, category, severity, id, pDescription)
    end
    def add_application_message(this : ID3D12InfoQueue*, severity : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_SEVERITY, pDescription : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_application_message.call(this, severity, pDescription)
    end
    def set_break_on_category(this : ID3D12InfoQueue*, category : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_CATEGORY, bEnable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_break_on_category.call(this, category, bEnable)
    end
    def set_break_on_severity(this : ID3D12InfoQueue*, severity : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_SEVERITY, bEnable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_break_on_severity.call(this, severity, bEnable)
    end
    def set_break_on_id(this : ID3D12InfoQueue*, id : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_ID, bEnable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_break_on_id.call(this, id, bEnable)
    end
    def get_break_on_category(this : ID3D12InfoQueue*, category : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_CATEGORY) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_break_on_category.call(this, category)
    end
    def get_break_on_severity(this : ID3D12InfoQueue*, severity : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_SEVERITY) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_break_on_severity.call(this, severity)
    end
    def get_break_on_id(this : ID3D12InfoQueue*, id : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_ID) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_break_on_id.call(this, id)
    end
    def set_mute_debug_output(this : ID3D12InfoQueue*, bMute : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.set_mute_debug_output.call(this, bMute)
    end
    def get_mute_debug_output(this : ID3D12InfoQueue*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_mute_debug_output.call(this)
    end

  end

  @[Extern]
  record ID3D12InfoQueue1Vtbl,
    query_interface : Proc(ID3D12InfoQueue1*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12InfoQueue1*, UInt32),
    release : Proc(ID3D12InfoQueue1*, UInt32),
    set_message_count_limit : Proc(ID3D12InfoQueue1*, UInt64, Win32cr::Foundation::HRESULT),
    clear_stored_messages : Proc(ID3D12InfoQueue1*, Void),
    get_message : Proc(ID3D12InfoQueue1*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    get_num_messages_allowed_by_storage_filter : Proc(ID3D12InfoQueue1*, UInt64),
    get_num_messages_denied_by_storage_filter : Proc(ID3D12InfoQueue1*, UInt64),
    get_num_stored_messages : Proc(ID3D12InfoQueue1*, UInt64),
    get_num_stored_messages_allowed_by_retrieval_filter : Proc(ID3D12InfoQueue1*, UInt64),
    get_num_messages_discarded_by_message_count_limit : Proc(ID3D12InfoQueue1*, UInt64),
    get_message_count_limit : Proc(ID3D12InfoQueue1*, UInt64),
    add_storage_filter_entries : Proc(ID3D12InfoQueue1*, Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*, Win32cr::Foundation::HRESULT),
    get_storage_filter : Proc(ID3D12InfoQueue1*, Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    clear_storage_filter : Proc(ID3D12InfoQueue1*, Void),
    push_empty_storage_filter : Proc(ID3D12InfoQueue1*, Win32cr::Foundation::HRESULT),
    push_copy_of_storage_filter : Proc(ID3D12InfoQueue1*, Win32cr::Foundation::HRESULT),
    push_storage_filter : Proc(ID3D12InfoQueue1*, Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*, Win32cr::Foundation::HRESULT),
    pop_storage_filter : Proc(ID3D12InfoQueue1*, Void),
    get_storage_filter_stack_size : Proc(ID3D12InfoQueue1*, UInt32),
    add_retrieval_filter_entries : Proc(ID3D12InfoQueue1*, Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*, Win32cr::Foundation::HRESULT),
    get_retrieval_filter : Proc(ID3D12InfoQueue1*, Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*, LibC::UIntPtrT*, Win32cr::Foundation::HRESULT),
    clear_retrieval_filter : Proc(ID3D12InfoQueue1*, Void),
    push_empty_retrieval_filter : Proc(ID3D12InfoQueue1*, Win32cr::Foundation::HRESULT),
    push_copy_of_retrieval_filter : Proc(ID3D12InfoQueue1*, Win32cr::Foundation::HRESULT),
    push_retrieval_filter : Proc(ID3D12InfoQueue1*, Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*, Win32cr::Foundation::HRESULT),
    pop_retrieval_filter : Proc(ID3D12InfoQueue1*, Void),
    get_retrieval_filter_stack_size : Proc(ID3D12InfoQueue1*, UInt32),
    add_message : Proc(ID3D12InfoQueue1*, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_CATEGORY, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_SEVERITY, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_ID, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    add_application_message : Proc(ID3D12InfoQueue1*, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_SEVERITY, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT),
    set_break_on_category : Proc(ID3D12InfoQueue1*, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_CATEGORY, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_break_on_severity : Proc(ID3D12InfoQueue1*, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_SEVERITY, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    set_break_on_id : Proc(ID3D12InfoQueue1*, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_ID, Win32cr::Foundation::BOOL, Win32cr::Foundation::HRESULT),
    get_break_on_category : Proc(ID3D12InfoQueue1*, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_CATEGORY, Win32cr::Foundation::BOOL),
    get_break_on_severity : Proc(ID3D12InfoQueue1*, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_SEVERITY, Win32cr::Foundation::BOOL),
    get_break_on_id : Proc(ID3D12InfoQueue1*, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_ID, Win32cr::Foundation::BOOL),
    set_mute_debug_output : Proc(ID3D12InfoQueue1*, Win32cr::Foundation::BOOL, Void),
    get_mute_debug_output : Proc(ID3D12InfoQueue1*, Win32cr::Foundation::BOOL),
    register_message_callback : Proc(ID3D12InfoQueue1*, Win32cr::Graphics::Direct3D12::D3D12MessageFunc, Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_CALLBACK_FLAGS, Void*, UInt32*, Win32cr::Foundation::HRESULT),
    unregister_message_callback : Proc(ID3D12InfoQueue1*, UInt32, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12InfoQueue1, lpVtbl : ID3D12InfoQueue1Vtbl* do
    GUID = LibC::GUID.new(0x2852dd88_u32, 0xb484_u16, 0x4c0c_u16, StaticArray[0xb6_u8, 0xb1_u8, 0x67_u8, 0x16_u8, 0x85_u8, 0x0_u8, 0xe6_u8, 0x0_u8])
    def query_interface(this : ID3D12InfoQueue1*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12InfoQueue1*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12InfoQueue1*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_message_count_limit(this : ID3D12InfoQueue1*, message_count_limit : UInt64) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_message_count_limit.call(this, message_count_limit)
    end
    def clear_stored_messages(this : ID3D12InfoQueue1*) : Void
      @lpVtbl.try &.value.clear_stored_messages.call(this)
    end
    def get_message(this : ID3D12InfoQueue1*, message_index : UInt64, pMessage : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE*, pMessageByteLength : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_message.call(this, message_index, pMessage, pMessageByteLength)
    end
    def get_num_messages_allowed_by_storage_filter(this : ID3D12InfoQueue1*) : UInt64
      @lpVtbl.try &.value.get_num_messages_allowed_by_storage_filter.call(this)
    end
    def get_num_messages_denied_by_storage_filter(this : ID3D12InfoQueue1*) : UInt64
      @lpVtbl.try &.value.get_num_messages_denied_by_storage_filter.call(this)
    end
    def get_num_stored_messages(this : ID3D12InfoQueue1*) : UInt64
      @lpVtbl.try &.value.get_num_stored_messages.call(this)
    end
    def get_num_stored_messages_allowed_by_retrieval_filter(this : ID3D12InfoQueue1*) : UInt64
      @lpVtbl.try &.value.get_num_stored_messages_allowed_by_retrieval_filter.call(this)
    end
    def get_num_messages_discarded_by_message_count_limit(this : ID3D12InfoQueue1*) : UInt64
      @lpVtbl.try &.value.get_num_messages_discarded_by_message_count_limit.call(this)
    end
    def get_message_count_limit(this : ID3D12InfoQueue1*) : UInt64
      @lpVtbl.try &.value.get_message_count_limit.call(this)
    end
    def add_storage_filter_entries(this : ID3D12InfoQueue1*, pFilter : Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_storage_filter_entries.call(this, pFilter)
    end
    def get_storage_filter(this : ID3D12InfoQueue1*, pFilter : Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*, pFilterByteLength : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_storage_filter.call(this, pFilter, pFilterByteLength)
    end
    def clear_storage_filter(this : ID3D12InfoQueue1*) : Void
      @lpVtbl.try &.value.clear_storage_filter.call(this)
    end
    def push_empty_storage_filter(this : ID3D12InfoQueue1*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_empty_storage_filter.call(this)
    end
    def push_copy_of_storage_filter(this : ID3D12InfoQueue1*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_copy_of_storage_filter.call(this)
    end
    def push_storage_filter(this : ID3D12InfoQueue1*, pFilter : Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_storage_filter.call(this, pFilter)
    end
    def pop_storage_filter(this : ID3D12InfoQueue1*) : Void
      @lpVtbl.try &.value.pop_storage_filter.call(this)
    end
    def get_storage_filter_stack_size(this : ID3D12InfoQueue1*) : UInt32
      @lpVtbl.try &.value.get_storage_filter_stack_size.call(this)
    end
    def add_retrieval_filter_entries(this : ID3D12InfoQueue1*, pFilter : Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_retrieval_filter_entries.call(this, pFilter)
    end
    def get_retrieval_filter(this : ID3D12InfoQueue1*, pFilter : Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*, pFilterByteLength : LibC::UIntPtrT*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_retrieval_filter.call(this, pFilter, pFilterByteLength)
    end
    def clear_retrieval_filter(this : ID3D12InfoQueue1*) : Void
      @lpVtbl.try &.value.clear_retrieval_filter.call(this)
    end
    def push_empty_retrieval_filter(this : ID3D12InfoQueue1*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_empty_retrieval_filter.call(this)
    end
    def push_copy_of_retrieval_filter(this : ID3D12InfoQueue1*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_copy_of_retrieval_filter.call(this)
    end
    def push_retrieval_filter(this : ID3D12InfoQueue1*, pFilter : Win32cr::Graphics::Direct3D12::D3D12_INFO_QUEUE_FILTER*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.push_retrieval_filter.call(this, pFilter)
    end
    def pop_retrieval_filter(this : ID3D12InfoQueue1*) : Void
      @lpVtbl.try &.value.pop_retrieval_filter.call(this)
    end
    def get_retrieval_filter_stack_size(this : ID3D12InfoQueue1*) : UInt32
      @lpVtbl.try &.value.get_retrieval_filter_stack_size.call(this)
    end
    def add_message(this : ID3D12InfoQueue1*, category : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_CATEGORY, severity : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_SEVERITY, id : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_ID, pDescription : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_message.call(this, category, severity, id, pDescription)
    end
    def add_application_message(this : ID3D12InfoQueue1*, severity : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_SEVERITY, pDescription : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.add_application_message.call(this, severity, pDescription)
    end
    def set_break_on_category(this : ID3D12InfoQueue1*, category : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_CATEGORY, bEnable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_break_on_category.call(this, category, bEnable)
    end
    def set_break_on_severity(this : ID3D12InfoQueue1*, severity : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_SEVERITY, bEnable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_break_on_severity.call(this, severity, bEnable)
    end
    def set_break_on_id(this : ID3D12InfoQueue1*, id : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_ID, bEnable : Win32cr::Foundation::BOOL) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_break_on_id.call(this, id, bEnable)
    end
    def get_break_on_category(this : ID3D12InfoQueue1*, category : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_CATEGORY) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_break_on_category.call(this, category)
    end
    def get_break_on_severity(this : ID3D12InfoQueue1*, severity : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_SEVERITY) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_break_on_severity.call(this, severity)
    end
    def get_break_on_id(this : ID3D12InfoQueue1*, id : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_ID) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_break_on_id.call(this, id)
    end
    def set_mute_debug_output(this : ID3D12InfoQueue1*, bMute : Win32cr::Foundation::BOOL) : Void
      @lpVtbl.try &.value.set_mute_debug_output.call(this, bMute)
    end
    def get_mute_debug_output(this : ID3D12InfoQueue1*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.get_mute_debug_output.call(this)
    end
    def register_message_callback(this : ID3D12InfoQueue1*, callback_func : Win32cr::Graphics::Direct3D12::D3D12MessageFunc, callback_filter_flags : Win32cr::Graphics::Direct3D12::D3D12_MESSAGE_CALLBACK_FLAGS, pContext : Void*, pCallbackCookie : UInt32*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.register_message_callback.call(this, callback_func, callback_filter_flags, pContext, pCallbackCookie)
    end
    def unregister_message_callback(this : ID3D12InfoQueue1*, callback_cookie : UInt32) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.unregister_message_callback.call(this, callback_cookie)
    end

  end

  @[Extern]
  record ID3D12SDKConfigurationVtbl,
    query_interface : Proc(ID3D12SDKConfiguration*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12SDKConfiguration*, UInt32),
    release : Proc(ID3D12SDKConfiguration*, UInt32),
    set_sdk_version : Proc(ID3D12SDKConfiguration*, UInt32, Win32cr::Foundation::PSTR, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12SDKConfiguration, lpVtbl : ID3D12SDKConfigurationVtbl* do
    GUID = LibC::GUID.new(0xe9eb5314_u32, 0x33aa_u16, 0x42b2_u16, StaticArray[0xa7_u8, 0x18_u8, 0xd7_u8, 0x7f_u8, 0x58_u8, 0xb1_u8, 0xf1_u8, 0xc7_u8])
    def query_interface(this : ID3D12SDKConfiguration*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12SDKConfiguration*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12SDKConfiguration*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def set_sdk_version(this : ID3D12SDKConfiguration*, sdk_version : UInt32, sdk_path : Win32cr::Foundation::PSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_sdk_version.call(this, sdk_version, sdk_path)
    end

  end

  @[Extern]
  record ID3D12GraphicsCommandList5Vtbl,
    query_interface : Proc(ID3D12GraphicsCommandList5*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12GraphicsCommandList5*, UInt32),
    release : Proc(ID3D12GraphicsCommandList5*, UInt32),
    get_private_data : Proc(ID3D12GraphicsCommandList5*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12GraphicsCommandList5*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12GraphicsCommandList5*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12GraphicsCommandList5*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12GraphicsCommandList5*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D12GraphicsCommandList5*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE),
    close : Proc(ID3D12GraphicsCommandList5*, Win32cr::Foundation::HRESULT),
    reset : Proc(ID3D12GraphicsCommandList5*, Void*, Void*, Win32cr::Foundation::HRESULT),
    clear_state : Proc(ID3D12GraphicsCommandList5*, Void*, Void),
    draw_instanced : Proc(ID3D12GraphicsCommandList5*, UInt32, UInt32, UInt32, UInt32, Void),
    draw_indexed_instanced : Proc(ID3D12GraphicsCommandList5*, UInt32, UInt32, UInt32, Int32, UInt32, Void),
    dispatch : Proc(ID3D12GraphicsCommandList5*, UInt32, UInt32, UInt32, Void),
    copy_buffer_region : Proc(ID3D12GraphicsCommandList5*, Void*, UInt64, Void*, UInt64, UInt64, Void),
    copy_texture_region : Proc(ID3D12GraphicsCommandList5*, Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, UInt32, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, Win32cr::Graphics::Direct3D12::D3D12_BOX*, Void),
    copy_resource : Proc(ID3D12GraphicsCommandList5*, Void*, Void*, Void),
    copy_tiles : Proc(ID3D12GraphicsCommandList5*, Void*, Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCE_COORDINATE*, Win32cr::Graphics::Direct3D12::D3D12_TILE_REGION_SIZE*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_TILE_COPY_FLAGS, Void),
    resolve_subresource : Proc(ID3D12GraphicsCommandList5*, Void*, UInt32, Void*, UInt32, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Void),
    ia_set_primitive_topology : Proc(ID3D12GraphicsCommandList5*, Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY, Void),
    rs_set_viewports : Proc(ID3D12GraphicsCommandList5*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_VIEWPORT*, Void),
    rs_set_scissor_rects : Proc(ID3D12GraphicsCommandList5*, UInt32, Win32cr::Foundation::RECT*, Void),
    om_set_blend_factor : Proc(ID3D12GraphicsCommandList5*, Float32*, Void),
    om_set_stencil_ref : Proc(ID3D12GraphicsCommandList5*, UInt32, Void),
    set_pipeline_state : Proc(ID3D12GraphicsCommandList5*, Void*, Void),
    resource_barrier : Proc(ID3D12GraphicsCommandList5*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*, Void),
    execute_bundle : Proc(ID3D12GraphicsCommandList5*, Void*, Void),
    set_descriptor_heaps : Proc(ID3D12GraphicsCommandList5*, UInt32, Void**, Void),
    set_compute_root_signature : Proc(ID3D12GraphicsCommandList5*, Void*, Void),
    set_graphics_root_signature : Proc(ID3D12GraphicsCommandList5*, Void*, Void),
    set_compute_root_descriptor_table : Proc(ID3D12GraphicsCommandList5*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Void),
    set_graphics_root_descriptor_table : Proc(ID3D12GraphicsCommandList5*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Void),
    set_compute_root32_bit_constant : Proc(ID3D12GraphicsCommandList5*, UInt32, UInt32, UInt32, Void),
    set_graphics_root32_bit_constant : Proc(ID3D12GraphicsCommandList5*, UInt32, UInt32, UInt32, Void),
    set_compute_root32_bit_constants : Proc(ID3D12GraphicsCommandList5*, UInt32, UInt32, Void*, UInt32, Void),
    set_graphics_root32_bit_constants : Proc(ID3D12GraphicsCommandList5*, UInt32, UInt32, Void*, UInt32, Void),
    set_compute_root_constant_buffer_view : Proc(ID3D12GraphicsCommandList5*, UInt32, UInt64, Void),
    set_graphics_root_constant_buffer_view : Proc(ID3D12GraphicsCommandList5*, UInt32, UInt64, Void),
    set_compute_root_shader_resource_view : Proc(ID3D12GraphicsCommandList5*, UInt32, UInt64, Void),
    set_graphics_root_shader_resource_view : Proc(ID3D12GraphicsCommandList5*, UInt32, UInt64, Void),
    set_compute_root_unordered_access_view : Proc(ID3D12GraphicsCommandList5*, UInt32, UInt64, Void),
    set_graphics_root_unordered_access_view : Proc(ID3D12GraphicsCommandList5*, UInt32, UInt64, Void),
    ia_set_index_buffer : Proc(ID3D12GraphicsCommandList5*, Win32cr::Graphics::Direct3D12::D3D12_INDEX_BUFFER_VIEW*, Void),
    ia_set_vertex_buffers : Proc(ID3D12GraphicsCommandList5*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_VERTEX_BUFFER_VIEW*, Void),
    so_set_targets : Proc(ID3D12GraphicsCommandList5*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_STREAM_OUTPUT_BUFFER_VIEW*, Void),
    om_set_render_targets : Proc(ID3D12GraphicsCommandList5*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, Win32cr::Foundation::BOOL, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, Void),
    clear_depth_stencil_view : Proc(ID3D12GraphicsCommandList5*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_FLAGS, Float32, UInt8, UInt32, Win32cr::Foundation::RECT*, Void),
    clear_render_target_view : Proc(ID3D12GraphicsCommandList5*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Float32*, UInt32, Win32cr::Foundation::RECT*, Void),
    clear_unordered_access_view_uint : Proc(ID3D12GraphicsCommandList5*, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void*, UInt32*, UInt32, Win32cr::Foundation::RECT*, Void),
    clear_unordered_access_view_float : Proc(ID3D12GraphicsCommandList5*, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void*, Float32*, UInt32, Win32cr::Foundation::RECT*, Void),
    discard_resource : Proc(ID3D12GraphicsCommandList5*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*, Void),
    begin_query : Proc(ID3D12GraphicsCommandList5*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    end_query : Proc(ID3D12GraphicsCommandList5*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    resolve_query_data : Proc(ID3D12GraphicsCommandList5*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, UInt32, Void*, UInt64, Void),
    set_predication : Proc(ID3D12GraphicsCommandList5*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP, Void),
    set_marker : Proc(ID3D12GraphicsCommandList5*, UInt32, Void*, UInt32, Void),
    begin_event : Proc(ID3D12GraphicsCommandList5*, UInt32, Void*, UInt32, Void),
    end_event : Proc(ID3D12GraphicsCommandList5*, Void),
    execute_indirect : Proc(ID3D12GraphicsCommandList5*, Void*, UInt32, Void*, UInt64, Void*, UInt64, Void),
    atomic_copy_buffer_uint : Proc(ID3D12GraphicsCommandList5*, Void*, UInt64, Void*, UInt64, UInt32, Void**, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*, Void),
    atomic_copy_buffer_uint64 : Proc(ID3D12GraphicsCommandList5*, Void*, UInt64, Void*, UInt64, UInt32, Void**, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*, Void),
    om_set_depth_bounds : Proc(ID3D12GraphicsCommandList5*, Float32, Float32, Void),
    set_sample_positions : Proc(ID3D12GraphicsCommandList5*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_SAMPLE_POSITION*, Void),
    resolve_subresource_region : Proc(ID3D12GraphicsCommandList5*, Void*, UInt32, UInt32, UInt32, Void*, UInt32, Win32cr::Foundation::RECT*, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Win32cr::Graphics::Direct3D12::D3D12_RESOLVE_MODE, Void),
    set_view_instance_mask : Proc(ID3D12GraphicsCommandList5*, UInt32, Void),
    write_buffer_immediate : Proc(ID3D12GraphicsCommandList5*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void),
    set_protected_resource_session : Proc(ID3D12GraphicsCommandList5*, Void*, Void),
    begin_render_pass : Proc(ID3D12GraphicsCommandList5*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_RENDER_TARGET_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_DEPTH_STENCIL_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_FLAGS, Void),
    end_render_pass : Proc(ID3D12GraphicsCommandList5*, Void),
    initialize_meta_command : Proc(ID3D12GraphicsCommandList5*, Void*, Void*, LibC::UIntPtrT, Void),
    execute_meta_command : Proc(ID3D12GraphicsCommandList5*, Void*, Void*, LibC::UIntPtrT, Void),
    build_raytracing_acceleration_structure : Proc(ID3D12GraphicsCommandList5*, Win32cr::Graphics::Direct3D12::D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*, Void),
    emit_raytracing_acceleration_structure_postbuild_info : Proc(ID3D12GraphicsCommandList5*, Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*, UInt32, UInt64*, Void),
    copy_raytracing_acceleration_structure : Proc(ID3D12GraphicsCommandList5*, UInt64, UInt64, Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE, Void),
    set_pipeline_state1 : Proc(ID3D12GraphicsCommandList5*, Void*, Void),
    dispatch_rays : Proc(ID3D12GraphicsCommandList5*, Win32cr::Graphics::Direct3D12::D3D12_DISPATCH_RAYS_DESC*, Void),
    rs_set_shading_rate : Proc(ID3D12GraphicsCommandList5*, Win32cr::Graphics::Direct3D12::D3D12_SHADING_RATE, Win32cr::Graphics::Direct3D12::D3D12_SHADING_RATE_COMBINER*, Void),
    rs_set_shading_rate_image : Proc(ID3D12GraphicsCommandList5*, Void*, Void)


  @[Extern]
  record ID3D12GraphicsCommandList5, lpVtbl : ID3D12GraphicsCommandList5Vtbl* do
    GUID = LibC::GUID.new(0x55050859_u32, 0x4024_u16, 0x474c_u16, StaticArray[0x87_u8, 0xf5_u8, 0x64_u8, 0x72_u8, 0xea_u8, 0xee_u8, 0x44_u8, 0xea_u8])
    def query_interface(this : ID3D12GraphicsCommandList5*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12GraphicsCommandList5*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12GraphicsCommandList5*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12GraphicsCommandList5*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12GraphicsCommandList5*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12GraphicsCommandList5*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12GraphicsCommandList5*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12GraphicsCommandList5*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_type(this : ID3D12GraphicsCommandList5*) : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def close(this : ID3D12GraphicsCommandList5*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def reset(this : ID3D12GraphicsCommandList5*, pAllocator : Void*, pInitialState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, pAllocator, pInitialState)
    end
    def clear_state(this : ID3D12GraphicsCommandList5*, pPipelineState : Void*) : Void
      @lpVtbl.try &.value.clear_state.call(this, pPipelineState)
    end
    def draw_instanced(this : ID3D12GraphicsCommandList5*, vertex_count_per_instance : UInt32, instance_count : UInt32, start_vertex_location : UInt32, start_instance_location : UInt32) : Void
      @lpVtbl.try &.value.draw_instanced.call(this, vertex_count_per_instance, instance_count, start_vertex_location, start_instance_location)
    end
    def draw_indexed_instanced(this : ID3D12GraphicsCommandList5*, index_count_per_instance : UInt32, instance_count : UInt32, start_index_location : UInt32, base_vertex_location : Int32, start_instance_location : UInt32) : Void
      @lpVtbl.try &.value.draw_indexed_instanced.call(this, index_count_per_instance, instance_count, start_index_location, base_vertex_location, start_instance_location)
    end
    def dispatch(this : ID3D12GraphicsCommandList5*, thread_group_count_x : UInt32, thread_group_count_y : UInt32, thread_group_count_z : UInt32) : Void
      @lpVtbl.try &.value.dispatch.call(this, thread_group_count_x, thread_group_count_y, thread_group_count_z)
    end
    def copy_buffer_region(this : ID3D12GraphicsCommandList5*, pDstBuffer : Void*, dst_offset : UInt64, pSrcBuffer : Void*, src_offset : UInt64, num_bytes : UInt64) : Void
      @lpVtbl.try &.value.copy_buffer_region.call(this, pDstBuffer, dst_offset, pSrcBuffer, src_offset, num_bytes)
    end
    def copy_texture_region(this : ID3D12GraphicsCommandList5*, pDst : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, dst_x : UInt32, dst_y : UInt32, dst_z : UInt32, pSrc : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, pSrcBox : Win32cr::Graphics::Direct3D12::D3D12_BOX*) : Void
      @lpVtbl.try &.value.copy_texture_region.call(this, pDst, dst_x, dst_y, dst_z, pSrc, pSrcBox)
    end
    def copy_resource(this : ID3D12GraphicsCommandList5*, pDstResource : Void*, pSrcResource : Void*) : Void
      @lpVtbl.try &.value.copy_resource.call(this, pDstResource, pSrcResource)
    end
    def copy_tiles(this : ID3D12GraphicsCommandList5*, pTiledResource : Void*, pTileRegionStartCoordinate : Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCE_COORDINATE*, pTileRegionSize : Win32cr::Graphics::Direct3D12::D3D12_TILE_REGION_SIZE*, pBuffer : Void*, buffer_start_offset_in_bytes : UInt64, flags : Win32cr::Graphics::Direct3D12::D3D12_TILE_COPY_FLAGS) : Void
      @lpVtbl.try &.value.copy_tiles.call(this, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, buffer_start_offset_in_bytes, flags)
    end
    def resolve_subresource(this : ID3D12GraphicsCommandList5*, pDstResource : Void*, dst_subresource : UInt32, pSrcResource : Void*, src_subresource : UInt32, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT) : Void
      @lpVtbl.try &.value.resolve_subresource.call(this, pDstResource, dst_subresource, pSrcResource, src_subresource, format)
    end
    def ia_set_primitive_topology(this : ID3D12GraphicsCommandList5*, primitive_topology : Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY) : Void
      @lpVtbl.try &.value.ia_set_primitive_topology.call(this, primitive_topology)
    end
    def rs_set_viewports(this : ID3D12GraphicsCommandList5*, num_viewports : UInt32, pViewports : Win32cr::Graphics::Direct3D12::D3D12_VIEWPORT*) : Void
      @lpVtbl.try &.value.rs_set_viewports.call(this, num_viewports, pViewports)
    end
    def rs_set_scissor_rects(this : ID3D12GraphicsCommandList5*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.rs_set_scissor_rects.call(this, num_rects, pRects)
    end
    def om_set_blend_factor(this : ID3D12GraphicsCommandList5*, blend_factor : Float32*) : Void
      @lpVtbl.try &.value.om_set_blend_factor.call(this, blend_factor)
    end
    def om_set_stencil_ref(this : ID3D12GraphicsCommandList5*, stencil_ref : UInt32) : Void
      @lpVtbl.try &.value.om_set_stencil_ref.call(this, stencil_ref)
    end
    def set_pipeline_state(this : ID3D12GraphicsCommandList5*, pPipelineState : Void*) : Void
      @lpVtbl.try &.value.set_pipeline_state.call(this, pPipelineState)
    end
    def resource_barrier(this : ID3D12GraphicsCommandList5*, num_barriers : UInt32, pBarriers : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*) : Void
      @lpVtbl.try &.value.resource_barrier.call(this, num_barriers, pBarriers)
    end
    def execute_bundle(this : ID3D12GraphicsCommandList5*, pCommandList : Void*) : Void
      @lpVtbl.try &.value.execute_bundle.call(this, pCommandList)
    end
    def set_descriptor_heaps(this : ID3D12GraphicsCommandList5*, num_descriptor_heaps : UInt32, ppDescriptorHeaps : Void**) : Void
      @lpVtbl.try &.value.set_descriptor_heaps.call(this, num_descriptor_heaps, ppDescriptorHeaps)
    end
    def set_compute_root_signature(this : ID3D12GraphicsCommandList5*, pRootSignature : Void*) : Void
      @lpVtbl.try &.value.set_compute_root_signature.call(this, pRootSignature)
    end
    def set_graphics_root_signature(this : ID3D12GraphicsCommandList5*, pRootSignature : Void*) : Void
      @lpVtbl.try &.value.set_graphics_root_signature.call(this, pRootSignature)
    end
    def set_compute_root_descriptor_table(this : ID3D12GraphicsCommandList5*, root_parameter_index : UInt32, base_descriptor : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.set_compute_root_descriptor_table.call(this, root_parameter_index, base_descriptor)
    end
    def set_graphics_root_descriptor_table(this : ID3D12GraphicsCommandList5*, root_parameter_index : UInt32, base_descriptor : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.set_graphics_root_descriptor_table.call(this, root_parameter_index, base_descriptor)
    end
    def set_compute_root32_bit_constant(this : ID3D12GraphicsCommandList5*, root_parameter_index : UInt32, src_data : UInt32, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_compute_root32_bit_constant.call(this, root_parameter_index, src_data, dest_offset_in32_bit_values)
    end
    def set_graphics_root32_bit_constant(this : ID3D12GraphicsCommandList5*, root_parameter_index : UInt32, src_data : UInt32, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_graphics_root32_bit_constant.call(this, root_parameter_index, src_data, dest_offset_in32_bit_values)
    end
    def set_compute_root32_bit_constants(this : ID3D12GraphicsCommandList5*, root_parameter_index : UInt32, num32_bit_values_to_set : UInt32, pSrcData : Void*, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_compute_root32_bit_constants.call(this, root_parameter_index, num32_bit_values_to_set, pSrcData, dest_offset_in32_bit_values)
    end
    def set_graphics_root32_bit_constants(this : ID3D12GraphicsCommandList5*, root_parameter_index : UInt32, num32_bit_values_to_set : UInt32, pSrcData : Void*, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_graphics_root32_bit_constants.call(this, root_parameter_index, num32_bit_values_to_set, pSrcData, dest_offset_in32_bit_values)
    end
    def set_compute_root_constant_buffer_view(this : ID3D12GraphicsCommandList5*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_compute_root_constant_buffer_view.call(this, root_parameter_index, buffer_location)
    end
    def set_graphics_root_constant_buffer_view(this : ID3D12GraphicsCommandList5*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_graphics_root_constant_buffer_view.call(this, root_parameter_index, buffer_location)
    end
    def set_compute_root_shader_resource_view(this : ID3D12GraphicsCommandList5*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_compute_root_shader_resource_view.call(this, root_parameter_index, buffer_location)
    end
    def set_graphics_root_shader_resource_view(this : ID3D12GraphicsCommandList5*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_graphics_root_shader_resource_view.call(this, root_parameter_index, buffer_location)
    end
    def set_compute_root_unordered_access_view(this : ID3D12GraphicsCommandList5*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_compute_root_unordered_access_view.call(this, root_parameter_index, buffer_location)
    end
    def set_graphics_root_unordered_access_view(this : ID3D12GraphicsCommandList5*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_graphics_root_unordered_access_view.call(this, root_parameter_index, buffer_location)
    end
    def ia_set_index_buffer(this : ID3D12GraphicsCommandList5*, pView : Win32cr::Graphics::Direct3D12::D3D12_INDEX_BUFFER_VIEW*) : Void
      @lpVtbl.try &.value.ia_set_index_buffer.call(this, pView)
    end
    def ia_set_vertex_buffers(this : ID3D12GraphicsCommandList5*, start_slot : UInt32, num_views : UInt32, pViews : Win32cr::Graphics::Direct3D12::D3D12_VERTEX_BUFFER_VIEW*) : Void
      @lpVtbl.try &.value.ia_set_vertex_buffers.call(this, start_slot, num_views, pViews)
    end
    def so_set_targets(this : ID3D12GraphicsCommandList5*, start_slot : UInt32, num_views : UInt32, pViews : Win32cr::Graphics::Direct3D12::D3D12_STREAM_OUTPUT_BUFFER_VIEW*) : Void
      @lpVtbl.try &.value.so_set_targets.call(this, start_slot, num_views, pViews)
    end
    def om_set_render_targets(this : ID3D12GraphicsCommandList5*, num_render_target_descriptors : UInt32, pRenderTargetDescriptors : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, r_ts_single_handle_to_descriptor_range : Win32cr::Foundation::BOOL, pDepthStencilDescriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*) : Void
      @lpVtbl.try &.value.om_set_render_targets.call(this, num_render_target_descriptors, pRenderTargetDescriptors, r_ts_single_handle_to_descriptor_range, pDepthStencilDescriptor)
    end
    def clear_depth_stencil_view(this : ID3D12GraphicsCommandList5*, depth_stencil_view : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, clear_flags : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_FLAGS, depth : Float32, stencil : UInt8, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_depth_stencil_view.call(this, depth_stencil_view, clear_flags, depth, stencil, num_rects, pRects)
    end
    def clear_render_target_view(this : ID3D12GraphicsCommandList5*, render_target_view : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, color_rgba : Float32*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_render_target_view.call(this, render_target_view, color_rgba, num_rects, pRects)
    end
    def clear_unordered_access_view_uint(this : ID3D12GraphicsCommandList5*, view_gpu_handle_in_current_heap : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, view_cpu_handle : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, pResource : Void*, values : UInt32*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_unordered_access_view_uint.call(this, view_gpu_handle_in_current_heap, view_cpu_handle, pResource, values, num_rects, pRects)
    end
    def clear_unordered_access_view_float(this : ID3D12GraphicsCommandList5*, view_gpu_handle_in_current_heap : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, view_cpu_handle : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, pResource : Void*, values : Float32*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_unordered_access_view_float.call(this, view_gpu_handle_in_current_heap, view_cpu_handle, pResource, values, num_rects, pRects)
    end
    def discard_resource(this : ID3D12GraphicsCommandList5*, pResource : Void*, pRegion : Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*) : Void
      @lpVtbl.try &.value.discard_resource.call(this, pResource, pRegion)
    end
    def begin_query(this : ID3D12GraphicsCommandList5*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.begin_query.call(this, pQueryHeap, type__, index)
    end
    def end_query(this : ID3D12GraphicsCommandList5*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.end_query.call(this, pQueryHeap, type__, index)
    end
    def resolve_query_data(this : ID3D12GraphicsCommandList5*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, start_index : UInt32, num_queries : UInt32, pDestinationBuffer : Void*, aligned_destination_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.resolve_query_data.call(this, pQueryHeap, type__, start_index, num_queries, pDestinationBuffer, aligned_destination_buffer_offset)
    end
    def set_predication(this : ID3D12GraphicsCommandList5*, pBuffer : Void*, aligned_buffer_offset : UInt64, operation : Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP) : Void
      @lpVtbl.try &.value.set_predication.call(this, pBuffer, aligned_buffer_offset, operation)
    end
    def set_marker(this : ID3D12GraphicsCommandList5*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.set_marker.call(this, metadata, pData, size)
    end
    def begin_event(this : ID3D12GraphicsCommandList5*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.begin_event.call(this, metadata, pData, size)
    end
    def end_event(this : ID3D12GraphicsCommandList5*) : Void
      @lpVtbl.try &.value.end_event.call(this)
    end
    def execute_indirect(this : ID3D12GraphicsCommandList5*, pCommandSignature : Void*, max_command_count : UInt32, pArgumentBuffer : Void*, argument_buffer_offset : UInt64, pCountBuffer : Void*, count_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.execute_indirect.call(this, pCommandSignature, max_command_count, pArgumentBuffer, argument_buffer_offset, pCountBuffer, count_buffer_offset)
    end
    def atomic_copy_buffer_uint(this : ID3D12GraphicsCommandList5*, pDstBuffer : Void*, dst_offset : UInt64, pSrcBuffer : Void*, src_offset : UInt64, dependencies : UInt32, ppDependentResources : Void**, pDependentSubresourceRanges : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
      @lpVtbl.try &.value.atomic_copy_buffer_uint.call(this, pDstBuffer, dst_offset, pSrcBuffer, src_offset, dependencies, ppDependentResources, pDependentSubresourceRanges)
    end
    def atomic_copy_buffer_uint64(this : ID3D12GraphicsCommandList5*, pDstBuffer : Void*, dst_offset : UInt64, pSrcBuffer : Void*, src_offset : UInt64, dependencies : UInt32, ppDependentResources : Void**, pDependentSubresourceRanges : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
      @lpVtbl.try &.value.atomic_copy_buffer_uint64.call(this, pDstBuffer, dst_offset, pSrcBuffer, src_offset, dependencies, ppDependentResources, pDependentSubresourceRanges)
    end
    def om_set_depth_bounds(this : ID3D12GraphicsCommandList5*, min : Float32, max : Float32) : Void
      @lpVtbl.try &.value.om_set_depth_bounds.call(this, min, max)
    end
    def set_sample_positions(this : ID3D12GraphicsCommandList5*, num_samples_per_pixel : UInt32, num_pixels : UInt32, pSamplePositions : Win32cr::Graphics::Direct3D12::D3D12_SAMPLE_POSITION*) : Void
      @lpVtbl.try &.value.set_sample_positions.call(this, num_samples_per_pixel, num_pixels, pSamplePositions)
    end
    def resolve_subresource_region(this : ID3D12GraphicsCommandList5*, pDstResource : Void*, dst_subresource : UInt32, dst_x : UInt32, dst_y : UInt32, pSrcResource : Void*, src_subresource : UInt32, pSrcRect : Win32cr::Foundation::RECT*, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, resolve_mode : Win32cr::Graphics::Direct3D12::D3D12_RESOLVE_MODE) : Void
      @lpVtbl.try &.value.resolve_subresource_region.call(this, pDstResource, dst_subresource, dst_x, dst_y, pSrcResource, src_subresource, pSrcRect, format, resolve_mode)
    end
    def set_view_instance_mask(this : ID3D12GraphicsCommandList5*, mask : UInt32) : Void
      @lpVtbl.try &.value.set_view_instance_mask.call(this, mask)
    end
    def write_buffer_immediate(this : ID3D12GraphicsCommandList5*, count : UInt32, pParams : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pModes : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
      @lpVtbl.try &.value.write_buffer_immediate.call(this, count, pParams, pModes)
    end
    def set_protected_resource_session(this : ID3D12GraphicsCommandList5*, pProtectedResourceSession : Void*) : Void
      @lpVtbl.try &.value.set_protected_resource_session.call(this, pProtectedResourceSession)
    end
    def begin_render_pass(this : ID3D12GraphicsCommandList5*, num_render_targets : UInt32, pRenderTargets : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_RENDER_TARGET_DESC*, pDepthStencil : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_DEPTH_STENCIL_DESC*, flags : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_FLAGS) : Void
      @lpVtbl.try &.value.begin_render_pass.call(this, num_render_targets, pRenderTargets, pDepthStencil, flags)
    end
    def end_render_pass(this : ID3D12GraphicsCommandList5*) : Void
      @lpVtbl.try &.value.end_render_pass.call(this)
    end
    def initialize_meta_command(this : ID3D12GraphicsCommandList5*, pMetaCommand : Void*, pInitializationParametersData : Void*, initialization_parameters_data_size_in_bytes : LibC::UIntPtrT) : Void
      @lpVtbl.try &.value.initialize_meta_command.call(this, pMetaCommand, pInitializationParametersData, initialization_parameters_data_size_in_bytes)
    end
    def execute_meta_command(this : ID3D12GraphicsCommandList5*, pMetaCommand : Void*, pExecutionParametersData : Void*, execution_parameters_data_size_in_bytes : LibC::UIntPtrT) : Void
      @lpVtbl.try &.value.execute_meta_command.call(this, pMetaCommand, pExecutionParametersData, execution_parameters_data_size_in_bytes)
    end
    def build_raytracing_acceleration_structure(this : ID3D12GraphicsCommandList5*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC*, num_postbuild_info_descs : UInt32, pPostbuildInfoDescs : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*) : Void
      @lpVtbl.try &.value.build_raytracing_acceleration_structure.call(this, pDesc, num_postbuild_info_descs, pPostbuildInfoDescs)
    end
    def emit_raytracing_acceleration_structure_postbuild_info(this : ID3D12GraphicsCommandList5*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*, num_source_acceleration_structures : UInt32, pSourceAccelerationStructureData : UInt64*) : Void
      @lpVtbl.try &.value.emit_raytracing_acceleration_structure_postbuild_info.call(this, pDesc, num_source_acceleration_structures, pSourceAccelerationStructureData)
    end
    def copy_raytracing_acceleration_structure(this : ID3D12GraphicsCommandList5*, dest_acceleration_structure_data : UInt64, source_acceleration_structure_data : UInt64, mode : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE) : Void
      @lpVtbl.try &.value.copy_raytracing_acceleration_structure.call(this, dest_acceleration_structure_data, source_acceleration_structure_data, mode)
    end
    def set_pipeline_state1(this : ID3D12GraphicsCommandList5*, pStateObject : Void*) : Void
      @lpVtbl.try &.value.set_pipeline_state1.call(this, pStateObject)
    end
    def dispatch_rays(this : ID3D12GraphicsCommandList5*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_DISPATCH_RAYS_DESC*) : Void
      @lpVtbl.try &.value.dispatch_rays.call(this, pDesc)
    end
    def rs_set_shading_rate(this : ID3D12GraphicsCommandList5*, baseShadingRate : Win32cr::Graphics::Direct3D12::D3D12_SHADING_RATE, combiners : Win32cr::Graphics::Direct3D12::D3D12_SHADING_RATE_COMBINER*) : Void
      @lpVtbl.try &.value.rs_set_shading_rate.call(this, baseShadingRate, combiners)
    end
    def rs_set_shading_rate_image(this : ID3D12GraphicsCommandList5*, shadingRateImage : Void*) : Void
      @lpVtbl.try &.value.rs_set_shading_rate_image.call(this, shadingRateImage)
    end

  end

  @[Extern]
  record ID3D12GraphicsCommandList6Vtbl,
    query_interface : Proc(ID3D12GraphicsCommandList6*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12GraphicsCommandList6*, UInt32),
    release : Proc(ID3D12GraphicsCommandList6*, UInt32),
    get_private_data : Proc(ID3D12GraphicsCommandList6*, LibC::GUID*, UInt32*, Void*, Win32cr::Foundation::HRESULT),
    set_private_data : Proc(ID3D12GraphicsCommandList6*, LibC::GUID*, UInt32, Void*, Win32cr::Foundation::HRESULT),
    set_private_data_interface : Proc(ID3D12GraphicsCommandList6*, LibC::GUID*, Void*, Win32cr::Foundation::HRESULT),
    set_name : Proc(ID3D12GraphicsCommandList6*, Win32cr::Foundation::PWSTR, Win32cr::Foundation::HRESULT),
    get_device : Proc(ID3D12GraphicsCommandList6*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D12GraphicsCommandList6*, Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE),
    close : Proc(ID3D12GraphicsCommandList6*, Win32cr::Foundation::HRESULT),
    reset : Proc(ID3D12GraphicsCommandList6*, Void*, Void*, Win32cr::Foundation::HRESULT),
    clear_state : Proc(ID3D12GraphicsCommandList6*, Void*, Void),
    draw_instanced : Proc(ID3D12GraphicsCommandList6*, UInt32, UInt32, UInt32, UInt32, Void),
    draw_indexed_instanced : Proc(ID3D12GraphicsCommandList6*, UInt32, UInt32, UInt32, Int32, UInt32, Void),
    dispatch : Proc(ID3D12GraphicsCommandList6*, UInt32, UInt32, UInt32, Void),
    copy_buffer_region : Proc(ID3D12GraphicsCommandList6*, Void*, UInt64, Void*, UInt64, UInt64, Void),
    copy_texture_region : Proc(ID3D12GraphicsCommandList6*, Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, UInt32, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, Win32cr::Graphics::Direct3D12::D3D12_BOX*, Void),
    copy_resource : Proc(ID3D12GraphicsCommandList6*, Void*, Void*, Void),
    copy_tiles : Proc(ID3D12GraphicsCommandList6*, Void*, Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCE_COORDINATE*, Win32cr::Graphics::Direct3D12::D3D12_TILE_REGION_SIZE*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_TILE_COPY_FLAGS, Void),
    resolve_subresource : Proc(ID3D12GraphicsCommandList6*, Void*, UInt32, Void*, UInt32, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Void),
    ia_set_primitive_topology : Proc(ID3D12GraphicsCommandList6*, Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY, Void),
    rs_set_viewports : Proc(ID3D12GraphicsCommandList6*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_VIEWPORT*, Void),
    rs_set_scissor_rects : Proc(ID3D12GraphicsCommandList6*, UInt32, Win32cr::Foundation::RECT*, Void),
    om_set_blend_factor : Proc(ID3D12GraphicsCommandList6*, Float32*, Void),
    om_set_stencil_ref : Proc(ID3D12GraphicsCommandList6*, UInt32, Void),
    set_pipeline_state : Proc(ID3D12GraphicsCommandList6*, Void*, Void),
    resource_barrier : Proc(ID3D12GraphicsCommandList6*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*, Void),
    execute_bundle : Proc(ID3D12GraphicsCommandList6*, Void*, Void),
    set_descriptor_heaps : Proc(ID3D12GraphicsCommandList6*, UInt32, Void**, Void),
    set_compute_root_signature : Proc(ID3D12GraphicsCommandList6*, Void*, Void),
    set_graphics_root_signature : Proc(ID3D12GraphicsCommandList6*, Void*, Void),
    set_compute_root_descriptor_table : Proc(ID3D12GraphicsCommandList6*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Void),
    set_graphics_root_descriptor_table : Proc(ID3D12GraphicsCommandList6*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Void),
    set_compute_root32_bit_constant : Proc(ID3D12GraphicsCommandList6*, UInt32, UInt32, UInt32, Void),
    set_graphics_root32_bit_constant : Proc(ID3D12GraphicsCommandList6*, UInt32, UInt32, UInt32, Void),
    set_compute_root32_bit_constants : Proc(ID3D12GraphicsCommandList6*, UInt32, UInt32, Void*, UInt32, Void),
    set_graphics_root32_bit_constants : Proc(ID3D12GraphicsCommandList6*, UInt32, UInt32, Void*, UInt32, Void),
    set_compute_root_constant_buffer_view : Proc(ID3D12GraphicsCommandList6*, UInt32, UInt64, Void),
    set_graphics_root_constant_buffer_view : Proc(ID3D12GraphicsCommandList6*, UInt32, UInt64, Void),
    set_compute_root_shader_resource_view : Proc(ID3D12GraphicsCommandList6*, UInt32, UInt64, Void),
    set_graphics_root_shader_resource_view : Proc(ID3D12GraphicsCommandList6*, UInt32, UInt64, Void),
    set_compute_root_unordered_access_view : Proc(ID3D12GraphicsCommandList6*, UInt32, UInt64, Void),
    set_graphics_root_unordered_access_view : Proc(ID3D12GraphicsCommandList6*, UInt32, UInt64, Void),
    ia_set_index_buffer : Proc(ID3D12GraphicsCommandList6*, Win32cr::Graphics::Direct3D12::D3D12_INDEX_BUFFER_VIEW*, Void),
    ia_set_vertex_buffers : Proc(ID3D12GraphicsCommandList6*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_VERTEX_BUFFER_VIEW*, Void),
    so_set_targets : Proc(ID3D12GraphicsCommandList6*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_STREAM_OUTPUT_BUFFER_VIEW*, Void),
    om_set_render_targets : Proc(ID3D12GraphicsCommandList6*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, Win32cr::Foundation::BOOL, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, Void),
    clear_depth_stencil_view : Proc(ID3D12GraphicsCommandList6*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CLEAR_FLAGS, Float32, UInt8, UInt32, Win32cr::Foundation::RECT*, Void),
    clear_render_target_view : Proc(ID3D12GraphicsCommandList6*, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Float32*, UInt32, Win32cr::Foundation::RECT*, Void),
    clear_unordered_access_view_uint : Proc(ID3D12GraphicsCommandList6*, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void*, UInt32*, UInt32, Win32cr::Foundation::RECT*, Void),
    clear_unordered_access_view_float : Proc(ID3D12GraphicsCommandList6*, Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, Void*, Float32*, UInt32, Win32cr::Foundation::RECT*, Void),
    discard_resource : Proc(ID3D12GraphicsCommandList6*, Void*, Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*, Void),
    begin_query : Proc(ID3D12GraphicsCommandList6*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    end_query : Proc(ID3D12GraphicsCommandList6*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, Void),
    resolve_query_data : Proc(ID3D12GraphicsCommandList6*, Void*, Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, UInt32, UInt32, Void*, UInt64, Void),
    set_predication : Proc(ID3D12GraphicsCommandList6*, Void*, UInt64, Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP, Void),
    set_marker : Proc(ID3D12GraphicsCommandList6*, UInt32, Void*, UInt32, Void),
    begin_event : Proc(ID3D12GraphicsCommandList6*, UInt32, Void*, UInt32, Void),
    end_event : Proc(ID3D12GraphicsCommandList6*, Void),
    execute_indirect : Proc(ID3D12GraphicsCommandList6*, Void*, UInt32, Void*, UInt64, Void*, UInt64, Void),
    atomic_copy_buffer_uint : Proc(ID3D12GraphicsCommandList6*, Void*, UInt64, Void*, UInt64, UInt32, Void**, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*, Void),
    atomic_copy_buffer_uint64 : Proc(ID3D12GraphicsCommandList6*, Void*, UInt64, Void*, UInt64, UInt32, Void**, Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*, Void),
    om_set_depth_bounds : Proc(ID3D12GraphicsCommandList6*, Float32, Float32, Void),
    set_sample_positions : Proc(ID3D12GraphicsCommandList6*, UInt32, UInt32, Win32cr::Graphics::Direct3D12::D3D12_SAMPLE_POSITION*, Void),
    resolve_subresource_region : Proc(ID3D12GraphicsCommandList6*, Void*, UInt32, UInt32, UInt32, Void*, UInt32, Win32cr::Foundation::RECT*, Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, Win32cr::Graphics::Direct3D12::D3D12_RESOLVE_MODE, Void),
    set_view_instance_mask : Proc(ID3D12GraphicsCommandList6*, UInt32, Void),
    write_buffer_immediate : Proc(ID3D12GraphicsCommandList6*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*, Void),
    set_protected_resource_session : Proc(ID3D12GraphicsCommandList6*, Void*, Void),
    begin_render_pass : Proc(ID3D12GraphicsCommandList6*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_RENDER_TARGET_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_DEPTH_STENCIL_DESC*, Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_FLAGS, Void),
    end_render_pass : Proc(ID3D12GraphicsCommandList6*, Void),
    initialize_meta_command : Proc(ID3D12GraphicsCommandList6*, Void*, Void*, LibC::UIntPtrT, Void),
    execute_meta_command : Proc(ID3D12GraphicsCommandList6*, Void*, Void*, LibC::UIntPtrT, Void),
    build_raytracing_acceleration_structure : Proc(ID3D12GraphicsCommandList6*, Win32cr::Graphics::Direct3D12::D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*, Void),
    emit_raytracing_acceleration_structure_postbuild_info : Proc(ID3D12GraphicsCommandList6*, Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*, UInt32, UInt64*, Void),
    copy_raytracing_acceleration_structure : Proc(ID3D12GraphicsCommandList6*, UInt64, UInt64, Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE, Void),
    set_pipeline_state1 : Proc(ID3D12GraphicsCommandList6*, Void*, Void),
    dispatch_rays : Proc(ID3D12GraphicsCommandList6*, Win32cr::Graphics::Direct3D12::D3D12_DISPATCH_RAYS_DESC*, Void),
    rs_set_shading_rate : Proc(ID3D12GraphicsCommandList6*, Win32cr::Graphics::Direct3D12::D3D12_SHADING_RATE, Win32cr::Graphics::Direct3D12::D3D12_SHADING_RATE_COMBINER*, Void),
    rs_set_shading_rate_image : Proc(ID3D12GraphicsCommandList6*, Void*, Void),
    dispatch_mesh : Proc(ID3D12GraphicsCommandList6*, UInt32, UInt32, UInt32, Void)


  @[Extern]
  record ID3D12GraphicsCommandList6, lpVtbl : ID3D12GraphicsCommandList6Vtbl* do
    GUID = LibC::GUID.new(0xc3827890_u32, 0xe548_u16, 0x4cfa_u16, StaticArray[0x96_u8, 0xcf_u8, 0x56_u8, 0x89_u8, 0xa9_u8, 0x37_u8, 0xf_u8, 0x80_u8])
    def query_interface(this : ID3D12GraphicsCommandList6*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12GraphicsCommandList6*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12GraphicsCommandList6*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_private_data(this : ID3D12GraphicsCommandList6*, guid : LibC::GUID*, pDataSize : UInt32*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_private_data.call(this, guid, pDataSize, pData)
    end
    def set_private_data(this : ID3D12GraphicsCommandList6*, guid : LibC::GUID*, data_size : UInt32, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data.call(this, guid, data_size, pData)
    end
    def set_private_data_interface(this : ID3D12GraphicsCommandList6*, guid : LibC::GUID*, pData : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_private_data_interface.call(this, guid, pData)
    end
    def set_name(this : ID3D12GraphicsCommandList6*, name : Win32cr::Foundation::PWSTR) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.set_name.call(this, name)
    end
    def get_device(this : ID3D12GraphicsCommandList6*, riid : LibC::GUID*, ppvDevice : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_device.call(this, riid, ppvDevice)
    end
    def get_type(this : ID3D12GraphicsCommandList6*) : Win32cr::Graphics::Direct3D12::D3D12_COMMAND_LIST_TYPE
      @lpVtbl.try &.value.get_type.call(this)
    end
    def close(this : ID3D12GraphicsCommandList6*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.close.call(this)
    end
    def reset(this : ID3D12GraphicsCommandList6*, pAllocator : Void*, pInitialState : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.reset.call(this, pAllocator, pInitialState)
    end
    def clear_state(this : ID3D12GraphicsCommandList6*, pPipelineState : Void*) : Void
      @lpVtbl.try &.value.clear_state.call(this, pPipelineState)
    end
    def draw_instanced(this : ID3D12GraphicsCommandList6*, vertex_count_per_instance : UInt32, instance_count : UInt32, start_vertex_location : UInt32, start_instance_location : UInt32) : Void
      @lpVtbl.try &.value.draw_instanced.call(this, vertex_count_per_instance, instance_count, start_vertex_location, start_instance_location)
    end
    def draw_indexed_instanced(this : ID3D12GraphicsCommandList6*, index_count_per_instance : UInt32, instance_count : UInt32, start_index_location : UInt32, base_vertex_location : Int32, start_instance_location : UInt32) : Void
      @lpVtbl.try &.value.draw_indexed_instanced.call(this, index_count_per_instance, instance_count, start_index_location, base_vertex_location, start_instance_location)
    end
    def dispatch(this : ID3D12GraphicsCommandList6*, thread_group_count_x : UInt32, thread_group_count_y : UInt32, thread_group_count_z : UInt32) : Void
      @lpVtbl.try &.value.dispatch.call(this, thread_group_count_x, thread_group_count_y, thread_group_count_z)
    end
    def copy_buffer_region(this : ID3D12GraphicsCommandList6*, pDstBuffer : Void*, dst_offset : UInt64, pSrcBuffer : Void*, src_offset : UInt64, num_bytes : UInt64) : Void
      @lpVtbl.try &.value.copy_buffer_region.call(this, pDstBuffer, dst_offset, pSrcBuffer, src_offset, num_bytes)
    end
    def copy_texture_region(this : ID3D12GraphicsCommandList6*, pDst : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, dst_x : UInt32, dst_y : UInt32, dst_z : UInt32, pSrc : Win32cr::Graphics::Direct3D12::D3D12_TEXTURE_COPY_LOCATION*, pSrcBox : Win32cr::Graphics::Direct3D12::D3D12_BOX*) : Void
      @lpVtbl.try &.value.copy_texture_region.call(this, pDst, dst_x, dst_y, dst_z, pSrc, pSrcBox)
    end
    def copy_resource(this : ID3D12GraphicsCommandList6*, pDstResource : Void*, pSrcResource : Void*) : Void
      @lpVtbl.try &.value.copy_resource.call(this, pDstResource, pSrcResource)
    end
    def copy_tiles(this : ID3D12GraphicsCommandList6*, pTiledResource : Void*, pTileRegionStartCoordinate : Win32cr::Graphics::Direct3D12::D3D12_TILED_RESOURCE_COORDINATE*, pTileRegionSize : Win32cr::Graphics::Direct3D12::D3D12_TILE_REGION_SIZE*, pBuffer : Void*, buffer_start_offset_in_bytes : UInt64, flags : Win32cr::Graphics::Direct3D12::D3D12_TILE_COPY_FLAGS) : Void
      @lpVtbl.try &.value.copy_tiles.call(this, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, buffer_start_offset_in_bytes, flags)
    end
    def resolve_subresource(this : ID3D12GraphicsCommandList6*, pDstResource : Void*, dst_subresource : UInt32, pSrcResource : Void*, src_subresource : UInt32, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT) : Void
      @lpVtbl.try &.value.resolve_subresource.call(this, pDstResource, dst_subresource, pSrcResource, src_subresource, format)
    end
    def ia_set_primitive_topology(this : ID3D12GraphicsCommandList6*, primitive_topology : Win32cr::Graphics::Direct3D::D3D_PRIMITIVE_TOPOLOGY) : Void
      @lpVtbl.try &.value.ia_set_primitive_topology.call(this, primitive_topology)
    end
    def rs_set_viewports(this : ID3D12GraphicsCommandList6*, num_viewports : UInt32, pViewports : Win32cr::Graphics::Direct3D12::D3D12_VIEWPORT*) : Void
      @lpVtbl.try &.value.rs_set_viewports.call(this, num_viewports, pViewports)
    end
    def rs_set_scissor_rects(this : ID3D12GraphicsCommandList6*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.rs_set_scissor_rects.call(this, num_rects, pRects)
    end
    def om_set_blend_factor(this : ID3D12GraphicsCommandList6*, blend_factor : Float32*) : Void
      @lpVtbl.try &.value.om_set_blend_factor.call(this, blend_factor)
    end
    def om_set_stencil_ref(this : ID3D12GraphicsCommandList6*, stencil_ref : UInt32) : Void
      @lpVtbl.try &.value.om_set_stencil_ref.call(this, stencil_ref)
    end
    def set_pipeline_state(this : ID3D12GraphicsCommandList6*, pPipelineState : Void*) : Void
      @lpVtbl.try &.value.set_pipeline_state.call(this, pPipelineState)
    end
    def resource_barrier(this : ID3D12GraphicsCommandList6*, num_barriers : UInt32, pBarriers : Win32cr::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER*) : Void
      @lpVtbl.try &.value.resource_barrier.call(this, num_barriers, pBarriers)
    end
    def execute_bundle(this : ID3D12GraphicsCommandList6*, pCommandList : Void*) : Void
      @lpVtbl.try &.value.execute_bundle.call(this, pCommandList)
    end
    def set_descriptor_heaps(this : ID3D12GraphicsCommandList6*, num_descriptor_heaps : UInt32, ppDescriptorHeaps : Void**) : Void
      @lpVtbl.try &.value.set_descriptor_heaps.call(this, num_descriptor_heaps, ppDescriptorHeaps)
    end
    def set_compute_root_signature(this : ID3D12GraphicsCommandList6*, pRootSignature : Void*) : Void
      @lpVtbl.try &.value.set_compute_root_signature.call(this, pRootSignature)
    end
    def set_graphics_root_signature(this : ID3D12GraphicsCommandList6*, pRootSignature : Void*) : Void
      @lpVtbl.try &.value.set_graphics_root_signature.call(this, pRootSignature)
    end
    def set_compute_root_descriptor_table(this : ID3D12GraphicsCommandList6*, root_parameter_index : UInt32, base_descriptor : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.set_compute_root_descriptor_table.call(this, root_parameter_index, base_descriptor)
    end
    def set_graphics_root_descriptor_table(this : ID3D12GraphicsCommandList6*, root_parameter_index : UInt32, base_descriptor : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE) : Void
      @lpVtbl.try &.value.set_graphics_root_descriptor_table.call(this, root_parameter_index, base_descriptor)
    end
    def set_compute_root32_bit_constant(this : ID3D12GraphicsCommandList6*, root_parameter_index : UInt32, src_data : UInt32, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_compute_root32_bit_constant.call(this, root_parameter_index, src_data, dest_offset_in32_bit_values)
    end
    def set_graphics_root32_bit_constant(this : ID3D12GraphicsCommandList6*, root_parameter_index : UInt32, src_data : UInt32, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_graphics_root32_bit_constant.call(this, root_parameter_index, src_data, dest_offset_in32_bit_values)
    end
    def set_compute_root32_bit_constants(this : ID3D12GraphicsCommandList6*, root_parameter_index : UInt32, num32_bit_values_to_set : UInt32, pSrcData : Void*, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_compute_root32_bit_constants.call(this, root_parameter_index, num32_bit_values_to_set, pSrcData, dest_offset_in32_bit_values)
    end
    def set_graphics_root32_bit_constants(this : ID3D12GraphicsCommandList6*, root_parameter_index : UInt32, num32_bit_values_to_set : UInt32, pSrcData : Void*, dest_offset_in32_bit_values : UInt32) : Void
      @lpVtbl.try &.value.set_graphics_root32_bit_constants.call(this, root_parameter_index, num32_bit_values_to_set, pSrcData, dest_offset_in32_bit_values)
    end
    def set_compute_root_constant_buffer_view(this : ID3D12GraphicsCommandList6*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_compute_root_constant_buffer_view.call(this, root_parameter_index, buffer_location)
    end
    def set_graphics_root_constant_buffer_view(this : ID3D12GraphicsCommandList6*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_graphics_root_constant_buffer_view.call(this, root_parameter_index, buffer_location)
    end
    def set_compute_root_shader_resource_view(this : ID3D12GraphicsCommandList6*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_compute_root_shader_resource_view.call(this, root_parameter_index, buffer_location)
    end
    def set_graphics_root_shader_resource_view(this : ID3D12GraphicsCommandList6*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_graphics_root_shader_resource_view.call(this, root_parameter_index, buffer_location)
    end
    def set_compute_root_unordered_access_view(this : ID3D12GraphicsCommandList6*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_compute_root_unordered_access_view.call(this, root_parameter_index, buffer_location)
    end
    def set_graphics_root_unordered_access_view(this : ID3D12GraphicsCommandList6*, root_parameter_index : UInt32, buffer_location : UInt64) : Void
      @lpVtbl.try &.value.set_graphics_root_unordered_access_view.call(this, root_parameter_index, buffer_location)
    end
    def ia_set_index_buffer(this : ID3D12GraphicsCommandList6*, pView : Win32cr::Graphics::Direct3D12::D3D12_INDEX_BUFFER_VIEW*) : Void
      @lpVtbl.try &.value.ia_set_index_buffer.call(this, pView)
    end
    def ia_set_vertex_buffers(this : ID3D12GraphicsCommandList6*, start_slot : UInt32, num_views : UInt32, pViews : Win32cr::Graphics::Direct3D12::D3D12_VERTEX_BUFFER_VIEW*) : Void
      @lpVtbl.try &.value.ia_set_vertex_buffers.call(this, start_slot, num_views, pViews)
    end
    def so_set_targets(this : ID3D12GraphicsCommandList6*, start_slot : UInt32, num_views : UInt32, pViews : Win32cr::Graphics::Direct3D12::D3D12_STREAM_OUTPUT_BUFFER_VIEW*) : Void
      @lpVtbl.try &.value.so_set_targets.call(this, start_slot, num_views, pViews)
    end
    def om_set_render_targets(this : ID3D12GraphicsCommandList6*, num_render_target_descriptors : UInt32, pRenderTargetDescriptors : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*, r_ts_single_handle_to_descriptor_range : Win32cr::Foundation::BOOL, pDepthStencilDescriptor : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE*) : Void
      @lpVtbl.try &.value.om_set_render_targets.call(this, num_render_target_descriptors, pRenderTargetDescriptors, r_ts_single_handle_to_descriptor_range, pDepthStencilDescriptor)
    end
    def clear_depth_stencil_view(this : ID3D12GraphicsCommandList6*, depth_stencil_view : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, clear_flags : Win32cr::Graphics::Direct3D12::D3D12_CLEAR_FLAGS, depth : Float32, stencil : UInt8, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_depth_stencil_view.call(this, depth_stencil_view, clear_flags, depth, stencil, num_rects, pRects)
    end
    def clear_render_target_view(this : ID3D12GraphicsCommandList6*, render_target_view : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, color_rgba : Float32*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_render_target_view.call(this, render_target_view, color_rgba, num_rects, pRects)
    end
    def clear_unordered_access_view_uint(this : ID3D12GraphicsCommandList6*, view_gpu_handle_in_current_heap : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, view_cpu_handle : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, pResource : Void*, values : UInt32*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_unordered_access_view_uint.call(this, view_gpu_handle_in_current_heap, view_cpu_handle, pResource, values, num_rects, pRects)
    end
    def clear_unordered_access_view_float(this : ID3D12GraphicsCommandList6*, view_gpu_handle_in_current_heap : Win32cr::Graphics::Direct3D12::D3D12_GPU_DESCRIPTOR_HANDLE, view_cpu_handle : Win32cr::Graphics::Direct3D12::D3D12_CPU_DESCRIPTOR_HANDLE, pResource : Void*, values : Float32*, num_rects : UInt32, pRects : Win32cr::Foundation::RECT*) : Void
      @lpVtbl.try &.value.clear_unordered_access_view_float.call(this, view_gpu_handle_in_current_heap, view_cpu_handle, pResource, values, num_rects, pRects)
    end
    def discard_resource(this : ID3D12GraphicsCommandList6*, pResource : Void*, pRegion : Win32cr::Graphics::Direct3D12::D3D12_DISCARD_REGION*) : Void
      @lpVtbl.try &.value.discard_resource.call(this, pResource, pRegion)
    end
    def begin_query(this : ID3D12GraphicsCommandList6*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.begin_query.call(this, pQueryHeap, type__, index)
    end
    def end_query(this : ID3D12GraphicsCommandList6*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, index : UInt32) : Void
      @lpVtbl.try &.value.end_query.call(this, pQueryHeap, type__, index)
    end
    def resolve_query_data(this : ID3D12GraphicsCommandList6*, pQueryHeap : Void*, type__ : Win32cr::Graphics::Direct3D12::D3D12_QUERY_TYPE, start_index : UInt32, num_queries : UInt32, pDestinationBuffer : Void*, aligned_destination_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.resolve_query_data.call(this, pQueryHeap, type__, start_index, num_queries, pDestinationBuffer, aligned_destination_buffer_offset)
    end
    def set_predication(this : ID3D12GraphicsCommandList6*, pBuffer : Void*, aligned_buffer_offset : UInt64, operation : Win32cr::Graphics::Direct3D12::D3D12_PREDICATION_OP) : Void
      @lpVtbl.try &.value.set_predication.call(this, pBuffer, aligned_buffer_offset, operation)
    end
    def set_marker(this : ID3D12GraphicsCommandList6*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.set_marker.call(this, metadata, pData, size)
    end
    def begin_event(this : ID3D12GraphicsCommandList6*, metadata : UInt32, pData : Void*, size : UInt32) : Void
      @lpVtbl.try &.value.begin_event.call(this, metadata, pData, size)
    end
    def end_event(this : ID3D12GraphicsCommandList6*) : Void
      @lpVtbl.try &.value.end_event.call(this)
    end
    def execute_indirect(this : ID3D12GraphicsCommandList6*, pCommandSignature : Void*, max_command_count : UInt32, pArgumentBuffer : Void*, argument_buffer_offset : UInt64, pCountBuffer : Void*, count_buffer_offset : UInt64) : Void
      @lpVtbl.try &.value.execute_indirect.call(this, pCommandSignature, max_command_count, pArgumentBuffer, argument_buffer_offset, pCountBuffer, count_buffer_offset)
    end
    def atomic_copy_buffer_uint(this : ID3D12GraphicsCommandList6*, pDstBuffer : Void*, dst_offset : UInt64, pSrcBuffer : Void*, src_offset : UInt64, dependencies : UInt32, ppDependentResources : Void**, pDependentSubresourceRanges : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
      @lpVtbl.try &.value.atomic_copy_buffer_uint.call(this, pDstBuffer, dst_offset, pSrcBuffer, src_offset, dependencies, ppDependentResources, pDependentSubresourceRanges)
    end
    def atomic_copy_buffer_uint64(this : ID3D12GraphicsCommandList6*, pDstBuffer : Void*, dst_offset : UInt64, pSrcBuffer : Void*, src_offset : UInt64, dependencies : UInt32, ppDependentResources : Void**, pDependentSubresourceRanges : Win32cr::Graphics::Direct3D12::D3D12_SUBRESOURCE_RANGE_UINT64*) : Void
      @lpVtbl.try &.value.atomic_copy_buffer_uint64.call(this, pDstBuffer, dst_offset, pSrcBuffer, src_offset, dependencies, ppDependentResources, pDependentSubresourceRanges)
    end
    def om_set_depth_bounds(this : ID3D12GraphicsCommandList6*, min : Float32, max : Float32) : Void
      @lpVtbl.try &.value.om_set_depth_bounds.call(this, min, max)
    end
    def set_sample_positions(this : ID3D12GraphicsCommandList6*, num_samples_per_pixel : UInt32, num_pixels : UInt32, pSamplePositions : Win32cr::Graphics::Direct3D12::D3D12_SAMPLE_POSITION*) : Void
      @lpVtbl.try &.value.set_sample_positions.call(this, num_samples_per_pixel, num_pixels, pSamplePositions)
    end
    def resolve_subresource_region(this : ID3D12GraphicsCommandList6*, pDstResource : Void*, dst_subresource : UInt32, dst_x : UInt32, dst_y : UInt32, pSrcResource : Void*, src_subresource : UInt32, pSrcRect : Win32cr::Foundation::RECT*, format : Win32cr::Graphics::Dxgi::Common::DXGI_FORMAT, resolve_mode : Win32cr::Graphics::Direct3D12::D3D12_RESOLVE_MODE) : Void
      @lpVtbl.try &.value.resolve_subresource_region.call(this, pDstResource, dst_subresource, dst_x, dst_y, pSrcResource, src_subresource, pSrcRect, format, resolve_mode)
    end
    def set_view_instance_mask(this : ID3D12GraphicsCommandList6*, mask : UInt32) : Void
      @lpVtbl.try &.value.set_view_instance_mask.call(this, mask)
    end
    def write_buffer_immediate(this : ID3D12GraphicsCommandList6*, count : UInt32, pParams : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER*, pModes : Win32cr::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE*) : Void
      @lpVtbl.try &.value.write_buffer_immediate.call(this, count, pParams, pModes)
    end
    def set_protected_resource_session(this : ID3D12GraphicsCommandList6*, pProtectedResourceSession : Void*) : Void
      @lpVtbl.try &.value.set_protected_resource_session.call(this, pProtectedResourceSession)
    end
    def begin_render_pass(this : ID3D12GraphicsCommandList6*, num_render_targets : UInt32, pRenderTargets : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_RENDER_TARGET_DESC*, pDepthStencil : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_DEPTH_STENCIL_DESC*, flags : Win32cr::Graphics::Direct3D12::D3D12_RENDER_PASS_FLAGS) : Void
      @lpVtbl.try &.value.begin_render_pass.call(this, num_render_targets, pRenderTargets, pDepthStencil, flags)
    end
    def end_render_pass(this : ID3D12GraphicsCommandList6*) : Void
      @lpVtbl.try &.value.end_render_pass.call(this)
    end
    def initialize_meta_command(this : ID3D12GraphicsCommandList6*, pMetaCommand : Void*, pInitializationParametersData : Void*, initialization_parameters_data_size_in_bytes : LibC::UIntPtrT) : Void
      @lpVtbl.try &.value.initialize_meta_command.call(this, pMetaCommand, pInitializationParametersData, initialization_parameters_data_size_in_bytes)
    end
    def execute_meta_command(this : ID3D12GraphicsCommandList6*, pMetaCommand : Void*, pExecutionParametersData : Void*, execution_parameters_data_size_in_bytes : LibC::UIntPtrT) : Void
      @lpVtbl.try &.value.execute_meta_command.call(this, pMetaCommand, pExecutionParametersData, execution_parameters_data_size_in_bytes)
    end
    def build_raytracing_acceleration_structure(this : ID3D12GraphicsCommandList6*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC*, num_postbuild_info_descs : UInt32, pPostbuildInfoDescs : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*) : Void
      @lpVtbl.try &.value.build_raytracing_acceleration_structure.call(this, pDesc, num_postbuild_info_descs, pPostbuildInfoDescs)
    end
    def emit_raytracing_acceleration_structure_postbuild_info(this : ID3D12GraphicsCommandList6*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC*, num_source_acceleration_structures : UInt32, pSourceAccelerationStructureData : UInt64*) : Void
      @lpVtbl.try &.value.emit_raytracing_acceleration_structure_postbuild_info.call(this, pDesc, num_source_acceleration_structures, pSourceAccelerationStructureData)
    end
    def copy_raytracing_acceleration_structure(this : ID3D12GraphicsCommandList6*, dest_acceleration_structure_data : UInt64, source_acceleration_structure_data : UInt64, mode : Win32cr::Graphics::Direct3D12::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE) : Void
      @lpVtbl.try &.value.copy_raytracing_acceleration_structure.call(this, dest_acceleration_structure_data, source_acceleration_structure_data, mode)
    end
    def set_pipeline_state1(this : ID3D12GraphicsCommandList6*, pStateObject : Void*) : Void
      @lpVtbl.try &.value.set_pipeline_state1.call(this, pStateObject)
    end
    def dispatch_rays(this : ID3D12GraphicsCommandList6*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_DISPATCH_RAYS_DESC*) : Void
      @lpVtbl.try &.value.dispatch_rays.call(this, pDesc)
    end
    def rs_set_shading_rate(this : ID3D12GraphicsCommandList6*, baseShadingRate : Win32cr::Graphics::Direct3D12::D3D12_SHADING_RATE, combiners : Win32cr::Graphics::Direct3D12::D3D12_SHADING_RATE_COMBINER*) : Void
      @lpVtbl.try &.value.rs_set_shading_rate.call(this, baseShadingRate, combiners)
    end
    def rs_set_shading_rate_image(this : ID3D12GraphicsCommandList6*, shadingRateImage : Void*) : Void
      @lpVtbl.try &.value.rs_set_shading_rate_image.call(this, shadingRateImage)
    end
    def dispatch_mesh(this : ID3D12GraphicsCommandList6*, thread_group_count_x : UInt32, thread_group_count_y : UInt32, thread_group_count_z : UInt32) : Void
      @lpVtbl.try &.value.dispatch_mesh.call(this, thread_group_count_x, thread_group_count_y, thread_group_count_z)
    end

  end

  @[Extern]
  record ID3D12ShaderReflectionTypeVtbl,
    get_desc : Proc(ID3D12ShaderReflectionType*, Win32cr::Graphics::Direct3D12::D3D12_SHADER_TYPE_DESC*, Win32cr::Foundation::HRESULT),
    get_member_type_by_index : Proc(ID3D12ShaderReflectionType*, UInt32, Void*),
    get_member_type_by_name : Proc(ID3D12ShaderReflectionType*, Win32cr::Foundation::PSTR, Void*),
    get_member_type_name : Proc(ID3D12ShaderReflectionType*, UInt32, Win32cr::Foundation::PSTR),
    is_equal : Proc(ID3D12ShaderReflectionType*, Void*, Win32cr::Foundation::HRESULT),
    get_sub_type : Proc(ID3D12ShaderReflectionType*, Void*),
    get_base_class : Proc(ID3D12ShaderReflectionType*, Void*),
    get_num_interfaces : Proc(ID3D12ShaderReflectionType*, UInt32),
    get_interface_by_index : Proc(ID3D12ShaderReflectionType*, UInt32, Void*),
    is_of_type : Proc(ID3D12ShaderReflectionType*, Void*, Win32cr::Foundation::HRESULT),
    implements_interface : Proc(ID3D12ShaderReflectionType*, Void*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12ShaderReflectionType, lpVtbl : ID3D12ShaderReflectionTypeVtbl* do
    GUID = LibC::GUID.new(0xe913c351_u32, 0x783d_u16, 0x48ca_u16, StaticArray[0xa1_u8, 0xd1_u8, 0x4f_u8, 0x30_u8, 0x62_u8, 0x84_u8, 0xad_u8, 0x56_u8])
    def get_desc(this : ID3D12ShaderReflectionType*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SHADER_TYPE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_member_type_by_index(this : ID3D12ShaderReflectionType*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_member_type_by_index.call(this, index)
    end
    def get_member_type_by_name(this : ID3D12ShaderReflectionType*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_member_type_by_name.call(this, name)
    end
    def get_member_type_name(this : ID3D12ShaderReflectionType*, index : UInt32) : Win32cr::Foundation::PSTR
      @lpVtbl.try &.value.get_member_type_name.call(this, index)
    end
    def is_equal(this : ID3D12ShaderReflectionType*, pType : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_equal.call(this, pType)
    end
    def get_sub_type(this : ID3D12ShaderReflectionType*) : Void*
      @lpVtbl.try &.value.get_sub_type.call(this)
    end
    def get_base_class(this : ID3D12ShaderReflectionType*) : Void*
      @lpVtbl.try &.value.get_base_class.call(this)
    end
    def get_num_interfaces(this : ID3D12ShaderReflectionType*) : UInt32
      @lpVtbl.try &.value.get_num_interfaces.call(this)
    end
    def get_interface_by_index(this : ID3D12ShaderReflectionType*, uIndex : UInt32) : Void*
      @lpVtbl.try &.value.get_interface_by_index.call(this, uIndex)
    end
    def is_of_type(this : ID3D12ShaderReflectionType*, pType : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.is_of_type.call(this, pType)
    end
    def implements_interface(this : ID3D12ShaderReflectionType*, pBase : Void*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.implements_interface.call(this, pBase)
    end

  end

  @[Extern]
  record ID3D12ShaderReflectionVariableVtbl,
    get_desc : Proc(ID3D12ShaderReflectionVariable*, Win32cr::Graphics::Direct3D12::D3D12_SHADER_VARIABLE_DESC*, Win32cr::Foundation::HRESULT),
    get_type : Proc(ID3D12ShaderReflectionVariable*, Void*),
    get_buffer : Proc(ID3D12ShaderReflectionVariable*, Void*),
    get_interface_slot : Proc(ID3D12ShaderReflectionVariable*, UInt32, UInt32)


  @[Extern]
  record ID3D12ShaderReflectionVariable, lpVtbl : ID3D12ShaderReflectionVariableVtbl* do
    GUID = LibC::GUID.new(0x8337a8a6_u32, 0xa216_u16, 0x444a_u16, StaticArray[0xb2_u8, 0xf4_u8, 0x31_u8, 0x47_u8, 0x33_u8, 0xa7_u8, 0x3a_u8, 0xea_u8])
    def get_desc(this : ID3D12ShaderReflectionVariable*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SHADER_VARIABLE_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_type(this : ID3D12ShaderReflectionVariable*) : Void*
      @lpVtbl.try &.value.get_type.call(this)
    end
    def get_buffer(this : ID3D12ShaderReflectionVariable*) : Void*
      @lpVtbl.try &.value.get_buffer.call(this)
    end
    def get_interface_slot(this : ID3D12ShaderReflectionVariable*, uArrayIndex : UInt32) : UInt32
      @lpVtbl.try &.value.get_interface_slot.call(this, uArrayIndex)
    end

  end

  @[Extern]
  record ID3D12ShaderReflectionConstantBufferVtbl,
    get_desc : Proc(ID3D12ShaderReflectionConstantBuffer*, Win32cr::Graphics::Direct3D12::D3D12_SHADER_BUFFER_DESC*, Win32cr::Foundation::HRESULT),
    get_variable_by_index : Proc(ID3D12ShaderReflectionConstantBuffer*, UInt32, Void*),
    get_variable_by_name : Proc(ID3D12ShaderReflectionConstantBuffer*, Win32cr::Foundation::PSTR, Void*)


  @[Extern]
  record ID3D12ShaderReflectionConstantBuffer, lpVtbl : ID3D12ShaderReflectionConstantBufferVtbl* do
    GUID = LibC::GUID.new(0xc59598b4_u32, 0x48b3_u16, 0x4869_u16, StaticArray[0xb9_u8, 0xb1_u8, 0xb1_u8, 0x61_u8, 0x8b_u8, 0x14_u8, 0xa8_u8, 0xb7_u8])
    def get_desc(this : ID3D12ShaderReflectionConstantBuffer*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SHADER_BUFFER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_variable_by_index(this : ID3D12ShaderReflectionConstantBuffer*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_variable_by_index.call(this, index)
    end
    def get_variable_by_name(this : ID3D12ShaderReflectionConstantBuffer*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_variable_by_name.call(this, name)
    end

  end

  @[Extern]
  record ID3D12ShaderReflectionVtbl,
    query_interface : Proc(ID3D12ShaderReflection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12ShaderReflection*, UInt32),
    release : Proc(ID3D12ShaderReflection*, UInt32),
    get_desc : Proc(ID3D12ShaderReflection*, Win32cr::Graphics::Direct3D12::D3D12_SHADER_DESC*, Win32cr::Foundation::HRESULT),
    get_constant_buffer_by_index : Proc(ID3D12ShaderReflection*, UInt32, Void*),
    get_constant_buffer_by_name : Proc(ID3D12ShaderReflection*, Win32cr::Foundation::PSTR, Void*),
    get_resource_binding_desc : Proc(ID3D12ShaderReflection*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_SHADER_INPUT_BIND_DESC*, Win32cr::Foundation::HRESULT),
    get_input_parameter_desc : Proc(ID3D12ShaderReflection*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_SIGNATURE_PARAMETER_DESC*, Win32cr::Foundation::HRESULT),
    get_output_parameter_desc : Proc(ID3D12ShaderReflection*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_SIGNATURE_PARAMETER_DESC*, Win32cr::Foundation::HRESULT),
    get_patch_constant_parameter_desc : Proc(ID3D12ShaderReflection*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_SIGNATURE_PARAMETER_DESC*, Win32cr::Foundation::HRESULT),
    get_variable_by_name : Proc(ID3D12ShaderReflection*, Win32cr::Foundation::PSTR, Void*),
    get_resource_binding_desc_by_name : Proc(ID3D12ShaderReflection*, Win32cr::Foundation::PSTR, Win32cr::Graphics::Direct3D12::D3D12_SHADER_INPUT_BIND_DESC*, Win32cr::Foundation::HRESULT),
    get_mov_instruction_count : Proc(ID3D12ShaderReflection*, UInt32),
    get_movc_instruction_count : Proc(ID3D12ShaderReflection*, UInt32),
    get_conversion_instruction_count : Proc(ID3D12ShaderReflection*, UInt32),
    get_bitwise_instruction_count : Proc(ID3D12ShaderReflection*, UInt32),
    get_gs_input_primitive : Proc(ID3D12ShaderReflection*, Win32cr::Graphics::Direct3D::D3D_PRIMITIVE),
    is_sample_frequency_shader : Proc(ID3D12ShaderReflection*, Win32cr::Foundation::BOOL),
    get_num_interface_slots : Proc(ID3D12ShaderReflection*, UInt32),
    get_min_feature_level : Proc(ID3D12ShaderReflection*, Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL*, Win32cr::Foundation::HRESULT),
    get_thread_group_size : Proc(ID3D12ShaderReflection*, UInt32*, UInt32*, UInt32*, UInt32),
    get_requires_flags : Proc(ID3D12ShaderReflection*, UInt64)


  @[Extern]
  record ID3D12ShaderReflection, lpVtbl : ID3D12ShaderReflectionVtbl* do
    GUID = LibC::GUID.new(0x5a58797d_u32, 0xa72c_u16, 0x478d_u16, StaticArray[0x8b_u8, 0xa2_u8, 0xef_u8, 0xc6_u8, 0xb0_u8, 0xef_u8, 0xe8_u8, 0x8e_u8])
    def query_interface(this : ID3D12ShaderReflection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12ShaderReflection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12ShaderReflection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_desc(this : ID3D12ShaderReflection*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SHADER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_constant_buffer_by_index(this : ID3D12ShaderReflection*, index : UInt32) : Void*
      @lpVtbl.try &.value.get_constant_buffer_by_index.call(this, index)
    end
    def get_constant_buffer_by_name(this : ID3D12ShaderReflection*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_constant_buffer_by_name.call(this, name)
    end
    def get_resource_binding_desc(this : ID3D12ShaderReflection*, resource_index : UInt32, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SHADER_INPUT_BIND_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_resource_binding_desc.call(this, resource_index, pDesc)
    end
    def get_input_parameter_desc(this : ID3D12ShaderReflection*, parameter_index : UInt32, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SIGNATURE_PARAMETER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_input_parameter_desc.call(this, parameter_index, pDesc)
    end
    def get_output_parameter_desc(this : ID3D12ShaderReflection*, parameter_index : UInt32, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SIGNATURE_PARAMETER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_output_parameter_desc.call(this, parameter_index, pDesc)
    end
    def get_patch_constant_parameter_desc(this : ID3D12ShaderReflection*, parameter_index : UInt32, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SIGNATURE_PARAMETER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_patch_constant_parameter_desc.call(this, parameter_index, pDesc)
    end
    def get_variable_by_name(this : ID3D12ShaderReflection*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_variable_by_name.call(this, name)
    end
    def get_resource_binding_desc_by_name(this : ID3D12ShaderReflection*, name : Win32cr::Foundation::PSTR, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SHADER_INPUT_BIND_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_resource_binding_desc_by_name.call(this, name, pDesc)
    end
    def get_mov_instruction_count(this : ID3D12ShaderReflection*) : UInt32
      @lpVtbl.try &.value.get_mov_instruction_count.call(this)
    end
    def get_movc_instruction_count(this : ID3D12ShaderReflection*) : UInt32
      @lpVtbl.try &.value.get_movc_instruction_count.call(this)
    end
    def get_conversion_instruction_count(this : ID3D12ShaderReflection*) : UInt32
      @lpVtbl.try &.value.get_conversion_instruction_count.call(this)
    end
    def get_bitwise_instruction_count(this : ID3D12ShaderReflection*) : UInt32
      @lpVtbl.try &.value.get_bitwise_instruction_count.call(this)
    end
    def get_gs_input_primitive(this : ID3D12ShaderReflection*) : Win32cr::Graphics::Direct3D::D3D_PRIMITIVE
      @lpVtbl.try &.value.get_gs_input_primitive.call(this)
    end
    def is_sample_frequency_shader(this : ID3D12ShaderReflection*) : Win32cr::Foundation::BOOL
      @lpVtbl.try &.value.is_sample_frequency_shader.call(this)
    end
    def get_num_interface_slots(this : ID3D12ShaderReflection*) : UInt32
      @lpVtbl.try &.value.get_num_interface_slots.call(this)
    end
    def get_min_feature_level(this : ID3D12ShaderReflection*, pLevel : Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_min_feature_level.call(this, pLevel)
    end
    def get_thread_group_size(this : ID3D12ShaderReflection*, pSizeX : UInt32*, pSizeY : UInt32*, pSizeZ : UInt32*) : UInt32
      @lpVtbl.try &.value.get_thread_group_size.call(this, pSizeX, pSizeY, pSizeZ)
    end
    def get_requires_flags(this : ID3D12ShaderReflection*) : UInt64
      @lpVtbl.try &.value.get_requires_flags.call(this)
    end

  end

  @[Extern]
  record ID3D12LibraryReflectionVtbl,
    query_interface : Proc(ID3D12LibraryReflection*, LibC::GUID*, Void**, Win32cr::Foundation::HRESULT),
    add_ref : Proc(ID3D12LibraryReflection*, UInt32),
    release : Proc(ID3D12LibraryReflection*, UInt32),
    get_desc : Proc(ID3D12LibraryReflection*, Win32cr::Graphics::Direct3D12::D3D12_LIBRARY_DESC*, Win32cr::Foundation::HRESULT),
    get_function_by_index : Proc(ID3D12LibraryReflection*, Int32, Void*)


  @[Extern]
  record ID3D12LibraryReflection, lpVtbl : ID3D12LibraryReflectionVtbl* do
    GUID = LibC::GUID.new(0x8e349d19_u32, 0x54db_u16, 0x4a56_u16, StaticArray[0x9d_u8, 0xc9_u8, 0x11_u8, 0x9d_u8, 0x87_u8, 0xbd_u8, 0xb8_u8, 0x4_u8])
    def query_interface(this : ID3D12LibraryReflection*, riid : LibC::GUID*, ppvObject : Void**) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.query_interface.call(this, riid, ppvObject)
    end
    def add_ref(this : ID3D12LibraryReflection*) : UInt32
      @lpVtbl.try &.value.add_ref.call(this)
    end
    def release(this : ID3D12LibraryReflection*) : UInt32
      @lpVtbl.try &.value.release.call(this)
    end
    def get_desc(this : ID3D12LibraryReflection*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_LIBRARY_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_function_by_index(this : ID3D12LibraryReflection*, function_index : Int32) : Void*
      @lpVtbl.try &.value.get_function_by_index.call(this, function_index)
    end

  end

  @[Extern]
  record ID3D12FunctionReflectionVtbl,
    get_desc : Proc(ID3D12FunctionReflection*, Win32cr::Graphics::Direct3D12::D3D12_FUNCTION_DESC*, Win32cr::Foundation::HRESULT),
    get_constant_buffer_by_index : Proc(ID3D12FunctionReflection*, UInt32, Void*),
    get_constant_buffer_by_name : Proc(ID3D12FunctionReflection*, Win32cr::Foundation::PSTR, Void*),
    get_resource_binding_desc : Proc(ID3D12FunctionReflection*, UInt32, Win32cr::Graphics::Direct3D12::D3D12_SHADER_INPUT_BIND_DESC*, Win32cr::Foundation::HRESULT),
    get_variable_by_name : Proc(ID3D12FunctionReflection*, Win32cr::Foundation::PSTR, Void*),
    get_resource_binding_desc_by_name : Proc(ID3D12FunctionReflection*, Win32cr::Foundation::PSTR, Win32cr::Graphics::Direct3D12::D3D12_SHADER_INPUT_BIND_DESC*, Win32cr::Foundation::HRESULT),
    get_function_parameter : Proc(ID3D12FunctionReflection*, Int32, Void*)


  @[Extern]
  record ID3D12FunctionReflection, lpVtbl : ID3D12FunctionReflectionVtbl* do
    GUID = LibC::GUID.new(0x1108795c_u32, 0x2772_u16, 0x4ba9_u16, StaticArray[0xb2_u8, 0xa8_u8, 0xd4_u8, 0x64_u8, 0xdc_u8, 0x7e_u8, 0x27_u8, 0x99_u8])
    def get_desc(this : ID3D12FunctionReflection*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_FUNCTION_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end
    def get_constant_buffer_by_index(this : ID3D12FunctionReflection*, buffer_index : UInt32) : Void*
      @lpVtbl.try &.value.get_constant_buffer_by_index.call(this, buffer_index)
    end
    def get_constant_buffer_by_name(this : ID3D12FunctionReflection*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_constant_buffer_by_name.call(this, name)
    end
    def get_resource_binding_desc(this : ID3D12FunctionReflection*, resource_index : UInt32, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SHADER_INPUT_BIND_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_resource_binding_desc.call(this, resource_index, pDesc)
    end
    def get_variable_by_name(this : ID3D12FunctionReflection*, name : Win32cr::Foundation::PSTR) : Void*
      @lpVtbl.try &.value.get_variable_by_name.call(this, name)
    end
    def get_resource_binding_desc_by_name(this : ID3D12FunctionReflection*, name : Win32cr::Foundation::PSTR, pDesc : Win32cr::Graphics::Direct3D12::D3D12_SHADER_INPUT_BIND_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_resource_binding_desc_by_name.call(this, name, pDesc)
    end
    def get_function_parameter(this : ID3D12FunctionReflection*, parameter_index : Int32) : Void*
      @lpVtbl.try &.value.get_function_parameter.call(this, parameter_index)
    end

  end

  @[Extern]
  record ID3D12FunctionParameterReflectionVtbl,
    get_desc : Proc(ID3D12FunctionParameterReflection*, Win32cr::Graphics::Direct3D12::D3D12_PARAMETER_DESC*, Win32cr::Foundation::HRESULT)


  @[Extern]
  record ID3D12FunctionParameterReflection, lpVtbl : ID3D12FunctionParameterReflectionVtbl* do
    GUID = LibC::GUID.new(0xec25f42d_u32, 0x7006_u16, 0x4f2b_u16, StaticArray[0xb3_u8, 0x3e_u8, 0x2_u8, 0xcc_u8, 0x33_u8, 0x75_u8, 0x73_u8, 0x3f_u8])
    def get_desc(this : ID3D12FunctionParameterReflection*, pDesc : Win32cr::Graphics::Direct3D12::D3D12_PARAMETER_DESC*) : Win32cr::Foundation::HRESULT
      @lpVtbl.try &.value.get_desc.call(this, pDesc)
    end

  end

  def d3D12SerializeRootSignature(pRootSignature : Win32cr::Graphics::Direct3D12::D3D12_ROOT_SIGNATURE_DESC*, version : Win32cr::Graphics::Direct3D12::D3D_ROOT_SIGNATURE_VERSION, ppBlob : Void**, ppErrorBlob : Void**) : Win32cr::Foundation::HRESULT
    C.D3D12SerializeRootSignature(pRootSignature, version, ppBlob, ppErrorBlob)
  end

  def d3D12CreateRootSignatureDeserializer(pSrcData : Void*, src_data_size_in_bytes : LibC::UIntPtrT, pRootSignatureDeserializerInterface : LibC::GUID*, ppRootSignatureDeserializer : Void**) : Win32cr::Foundation::HRESULT
    C.D3D12CreateRootSignatureDeserializer(pSrcData, src_data_size_in_bytes, pRootSignatureDeserializerInterface, ppRootSignatureDeserializer)
  end

  def d3D12SerializeVersionedRootSignature(pRootSignature : Win32cr::Graphics::Direct3D12::D3D12_VERSIONED_ROOT_SIGNATURE_DESC*, ppBlob : Void**, ppErrorBlob : Void**) : Win32cr::Foundation::HRESULT
    C.D3D12SerializeVersionedRootSignature(pRootSignature, ppBlob, ppErrorBlob)
  end

  def d3D12CreateVersionedRootSignatureDeserializer(pSrcData : Void*, src_data_size_in_bytes : LibC::UIntPtrT, pRootSignatureDeserializerInterface : LibC::GUID*, ppRootSignatureDeserializer : Void**) : Win32cr::Foundation::HRESULT
    C.D3D12CreateVersionedRootSignatureDeserializer(pSrcData, src_data_size_in_bytes, pRootSignatureDeserializerInterface, ppRootSignatureDeserializer)
  end

  def d3D12CreateDevice(pAdapter : Void*, minimum_feature_level : Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL, riid : LibC::GUID*, ppDevice : Void**) : Win32cr::Foundation::HRESULT
    C.D3D12CreateDevice(pAdapter, minimum_feature_level, riid, ppDevice)
  end

  def d3D12GetDebugInterface(riid : LibC::GUID*, ppvDebug : Void**) : Win32cr::Foundation::HRESULT
    C.D3D12GetDebugInterface(riid, ppvDebug)
  end

  def d3D12EnableExperimentalFeatures(num_features : UInt32, pIIDs : LibC::GUID*, pConfigurationStructs : Void*, pConfigurationStructSizes : UInt32*) : Win32cr::Foundation::HRESULT
    C.D3D12EnableExperimentalFeatures(num_features, pIIDs, pConfigurationStructs, pConfigurationStructSizes)
  end

  def d3D12GetInterface(rclsid : LibC::GUID*, riid : LibC::GUID*, ppvDebug : Void**) : Win32cr::Foundation::HRESULT
    C.D3D12GetInterface(rclsid, riid, ppvDebug)
  end

  @[Link("d3d12")]
  lib C
    # :nodoc:
    fun D3D12SerializeRootSignature(pRootSignature : Win32cr::Graphics::Direct3D12::D3D12_ROOT_SIGNATURE_DESC*, version : Win32cr::Graphics::Direct3D12::D3D_ROOT_SIGNATURE_VERSION, ppBlob : Void**, ppErrorBlob : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D12CreateRootSignatureDeserializer(pSrcData : Void*, src_data_size_in_bytes : LibC::UIntPtrT, pRootSignatureDeserializerInterface : LibC::GUID*, ppRootSignatureDeserializer : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D12SerializeVersionedRootSignature(pRootSignature : Win32cr::Graphics::Direct3D12::D3D12_VERSIONED_ROOT_SIGNATURE_DESC*, ppBlob : Void**, ppErrorBlob : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D12CreateVersionedRootSignatureDeserializer(pSrcData : Void*, src_data_size_in_bytes : LibC::UIntPtrT, pRootSignatureDeserializerInterface : LibC::GUID*, ppRootSignatureDeserializer : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D12CreateDevice(pAdapter : Void*, minimum_feature_level : Win32cr::Graphics::Direct3D::D3D_FEATURE_LEVEL, riid : LibC::GUID*, ppDevice : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D12GetDebugInterface(riid : LibC::GUID*, ppvDebug : Void**) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D12EnableExperimentalFeatures(num_features : UInt32, pIIDs : LibC::GUID*, pConfigurationStructs : Void*, pConfigurationStructSizes : UInt32*) : Win32cr::Foundation::HRESULT

    # :nodoc:
    fun D3D12GetInterface(rclsid : LibC::GUID*, riid : LibC::GUID*, ppvDebug : Void**) : Win32cr::Foundation::HRESULT

  end
end